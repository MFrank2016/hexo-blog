{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/indigos/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"themes/indigos/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/indigos/source/img/brand.jpg","path":"img/brand.jpg","modified":0,"renderable":1},{"_id":"themes/indigos/source/img/cc.png","path":"img/cc.png","modified":0,"renderable":1},{"_id":"themes/indigos/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/indigos/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/indigos/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/indigos/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/indigos/source/js/main.min.js","path":"js/main.min.js","modified":0,"renderable":1},{"_id":"themes/indigos/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/indigos/source/js/search.min.js","path":"js/search.min.js","modified":0,"renderable":1},{"_id":"themes/indigos/source/img/wechat.jpg","path":"img/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/indigos/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/indigos/.editorconfig","hash":"9b0445427777519defe360ea38c61729d847b3d3","modified":1545719561508},{"_id":"themes/indigos/README.md","hash":"4bf26d9b43bf24b8e0a1a0d058437a347972f5e6","modified":1545719561509},{"_id":"themes/indigos/_config.yml","hash":"20fc84d1de1ee68dde2a944de132749e71178540","modified":1545818255996},{"_id":"themes/indigos/package.json","hash":"c795e3100ae3655bfa8b39adcca7333a7925b47f","modified":1545719561520},{"_id":"themes/indigos/LICENSE","hash":"24944bf7920108f5a4790e6071c32e9102760c37","modified":1545719561508},{"_id":"source/_data/menu.yml","hash":"c37664eeeb90a1a1d6042e423ccae431fe040164","modified":1545813186168},{"_id":"source/_posts/README.md","hash":"9781d1d293c9030297369311417eec4f50937809","modified":1541921766722},{"_id":"source/_posts/hello-world.md","hash":"9f3c43dd6ad8ff0b5d5d599ede93431e745b694f","modified":1545820472725},{"_id":"source/categories/index.md","hash":"1f6f9db5cf4cba5be4d91278021eb9873b80d376","modified":1545720545170},{"_id":"source/tags/index.md","hash":"7c33368714c02998c88ee12fd0c129599c478fa5","modified":1545720508305},{"_id":"themes/indigos/languages/ja.yml","hash":"74fd480874bf5e773ba7f9d2a94697cda979091f","modified":1545719561509},{"_id":"themes/indigos/languages/en.yml","hash":"1957d2bfc3a4cef299f4f169b431e9b1128ba162","modified":1545719561509},{"_id":"themes/indigos/languages/nl-NL","hash":"9085c04491f93066f2369911cc2175b59ae596ad","modified":1545719561510},{"_id":"themes/indigos/languages/zh-CN.yml","hash":"7dc6ae434dde390b6768d244132e23cc78c33817","modified":1545719561510},{"_id":"themes/indigos/languages/zh-TW.yml","hash":"6a9e820be66eb12ae746f2527e0dc1adf927c685","modified":1545719561510},{"_id":"themes/indigos/layout/archive.ejs","hash":"d039719e21f6a6fa2925b00aaa623a180a78c818","modified":1545719561519},{"_id":"themes/indigos/layout/categories.ejs","hash":"41783d2069d5080566a99e6312aa2113105f8b41","modified":1545719561519},{"_id":"themes/indigos/layout/layout.ejs","hash":"d52f43fa9572d70cae834e4887c8897b43744805","modified":1545719561519},{"_id":"themes/indigos/layout/category.ejs","hash":"7ea26a8a935886963eda82f41c7bd5270cf780d9","modified":1545719561519},{"_id":"themes/indigos/layout/index.ejs","hash":"39477807b98b2d2df78f3b82498a11e90be8222c","modified":1545719561519},{"_id":"themes/indigos/layout/post.ejs","hash":"afbf8532dc8d148ca4dff2ca127a3382907cf2f5","modified":1545719561520},{"_id":"themes/indigos/layout/tag.ejs","hash":"36786a3de7f6cad58209603f7d84ba23addea174","modified":1545719561520},{"_id":"themes/indigos/layout/page.ejs","hash":"afb98face24d39a21ebbbde6592a9afc98572aa4","modified":1545719561520},{"_id":"themes/indigos/scripts/plugins.js","hash":"e439d717513616bedeed37ba9b05117470809b21","modified":1545719561521},{"_id":"themes/indigos/layout/tags.ejs","hash":"20466446c41409d14a3d42ccaec24a65a045efef","modified":1545719561520},{"_id":"source/_posts/.DS_Store","hash":"da6a87719cbf79a62cc3511f165b751a09703ae8","modified":1545897934207},{"_id":"source/_posts/guide/.DS_Store","hash":"a0890cfe2435f2aa4981cbf29d330f3de4799901","modified":1537588287492},{"_id":"source/_posts/java/README.md","hash":"43a5563149a702711269d9b8a1efd1b8744a1a00","modified":1545897840342},{"_id":"source/_posts/guide/README.md","hash":"a99614f1f39db17f7d57dc376ddf32867b3ef4d1","modified":1545028774937},{"_id":"source/_posts/guide/background-skill.md","hash":"920f9010b7399bfd5cfac04ce67ef9f85ec48d1c","modified":1544687440547},{"_id":"source/_posts/leetcode/Design-Linked-List.md","hash":"5527d9f46735f96af25654db8a8e30db48964518","modified":1544781061638},{"_id":"source/_posts/life-thinking/README.md","hash":"721725c3d32bac96fac525f1a44fbef897f25342","modified":1544779785247},{"_id":"source/_posts/leetcode/README.md","hash":"4bc5fb6d12f7b83f66de206ed60e91b86f35d3cd","modified":1544780777203},{"_id":"source/_posts/ops/.DS_Store","hash":"8e11b6d471ce2c41082f2f28d12c7e1be0911d8b","modified":1539213397108},{"_id":"source/_posts/ops/centos-jdk8-installation.md","hash":"0c45bfa77b7aa13e3f7c54d5d005258964e67f78","modified":1539150391016},{"_id":"source/_posts/ops/jenkins-work-with-github-webhook.md","hash":"a94b46a97a02f93cc880b72cebd1454cd573e6c0","modified":1536894635618},{"_id":"source/_posts/reading/README.md","hash":"095589feb2137220b88a35a23c166a95d4feb9a4","modified":1545178873496},{"_id":"source/_posts/ops/deploy-vuepress-on-centos7.md","hash":"54c810fc2b027a45a46d00a3e91b78e90cd24fa9","modified":1537146229779},{"_id":"source/_posts/reading/java-multithread-programming-guide-in-action-digest.md","hash":"e74faadfa23f2942243eefa607c93e0cff8f3e58","modified":1545960966444},{"_id":"source/_posts/reading/java-multithread-programming-guide-in-action.md","hash":"79ea435139b01d3708c916995c59db57318a63bf","modified":1545983120162},{"_id":"source/_posts/reading/the-power-of-habit.md","hash":"ac0ea18e07512bc399c19e44b89daaef7d4b9a60","modified":1545828136393},{"_id":"themes/indigos/layout/_partial/after-footer.ejs","hash":"9ac30b9439fab69973cf4722dbf2945a18fd3804","modified":1545719561511},{"_id":"themes/indigos/layout/_partial/archive.ejs","hash":"55cd81ef9183426d6d99fd91550fce0a9cc92aa0","modified":1545719561511},{"_id":"themes/indigos/layout/_partial/footer.ejs","hash":"fdfc37e2a63fec8a258c6ec7059b7f103bd15c3b","modified":1545726035475},{"_id":"themes/indigos/layout/_partial/head.ejs","hash":"02a95a88774cc50dbcc32242b6c8ac7e9d9028bb","modified":1545719561511},{"_id":"themes/indigos/layout/_partial/header.ejs","hash":"6156bf20791e46fc1c5872113276c1c1f5c13773","modified":1545719561511},{"_id":"themes/indigos/layout/_partial/index-item.ejs","hash":"ec7b3ec79bbbead9c7e43e2e6c6b5c8bef509410","modified":1545719561512},{"_id":"themes/indigos/layout/_partial/loading.ejs","hash":"bc4cb19b20de55a0332647f4dca9684184383685","modified":1545719561512},{"_id":"themes/indigos/layout/_partial/menu.ejs","hash":"d39afaad6b0dd2a3ae27e6db3e9a6cd6014622fa","modified":1545719561512},{"_id":"themes/indigos/layout/_partial/paginator.ejs","hash":"dc27242927890f130a64400596b9b7ad5fca8972","modified":1545719561512},{"_id":"themes/indigos/layout/_partial/post.ejs","hash":"a87d9b0485b3bf4cdfdad890e5974c43dbaa8240","modified":1545719561515},{"_id":"themes/indigos/layout/_partial/script.ejs","hash":"439d6315a1b16e32b77a68c3f0cb2961d581086a","modified":1545719561518},{"_id":"themes/indigos/layout/_partial/search.ejs","hash":"c2091c621b5480ef1e69d72027028cec8e929892","modified":1545719561518},{"_id":"themes/indigos/layout/_partial/tags-bar.ejs","hash":"19eff4876d31080a427644f7a43fe172d0c008c6","modified":1545719561518},{"_id":"themes/indigos/source/css/style.less","hash":"f22d4146e0bdb4485d33f20080c67ba05724afea","modified":1545719561554},{"_id":"themes/indigos/source/img/avatar.jpg","hash":"96f2506c587325147a383aad3ada8d5993e6cdf8","modified":1545721392740},{"_id":"themes/indigos/source/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1545719561556},{"_id":"themes/indigos/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1545719561556},{"_id":"themes/indigos/source/img/favicon.ico","hash":"c88cd0044daea8f5b87913d71c4ade2aa31387c9","modified":1545725227449},{"_id":"source/_posts/reading/the-power-of-habit-digest.md","hash":"d0825c3ecfda83060fbf130215344ab6f964c95a","modified":1545827991023},{"_id":"themes/indigos/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1545719561556},{"_id":"themes/indigos/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1545719561556},{"_id":"themes/indigos/source/js/main.js","hash":"300b2e963683ced162e28afcd24ffc970fc23ac2","modified":1545719561557},{"_id":"themes/indigos/source/js/main.min.js","hash":"8acf4480f8ab859423b8926b9b790c67b5a77276","modified":1545719561557},{"_id":"themes/indigos/source/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1545719561558},{"_id":"themes/indigos/source/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1545719561558},{"_id":"source/_posts/java/basic/java-data-type.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545897009426},{"_id":"source/_posts/java/basic/java-operator.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545897009449},{"_id":"source/_posts/architecture/domain-driven-design/ddd-outline.md","hash":"8d4911152402380021ee668419eae495d99e0798","modified":1542858881863},{"_id":"source/_posts/architecture/domain-driven-design/ddd-recommendation.md","hash":"bff5df10fb38b5cb125bd4e07920058c51232cb1","modified":1542767629027},{"_id":"source/_posts/architecture/domain-driven-design/ddd-steps.md","hash":"142c229f80f6627920c762bb464bc56f89f5c35c","modified":1542090221088},{"_id":"source/_posts/java/basic/java-basic.md","hash":"5cd5379a2fd5634868d507c27b574ea40dbddf3e","modified":1545992389344},{"_id":"source/_posts/java/basic/java-class.md","hash":"31e3d8715f0bff1a20209ac050aa425230c2b16b","modified":1545993443816},{"_id":"source/_posts/java/basic/java-variable.md","hash":"ce7ecd2b26a6c4a6a41b6e84f681124ccc78d28b","modified":1545993443816},{"_id":"source/_posts/java/basic/java-simple-structure.md","hash":"9ae1f50b801dc1f798c59275736b41c354507724","modified":1545993443821},{"_id":"source/_posts/java/collection/0038.png","hash":"dc8ec7ec15f9d18d028fa4baa7b8edf7dcf9f587","modified":1545897772164},{"_id":"source/_posts/java/collection/weakhashmap-1.png","hash":"2d21b6d2b326191f28c04b070863c03614dc08fe","modified":1545897772181},{"_id":"source/_posts/java/collection/weakhashmap-2.png","hash":"a97b7673b4d40163640e1a35540c2c2b51c8ed93","modified":1545897772190},{"_id":"source/_posts/java/collection/weakhashmap-code-detail.md","hash":"971f9be2a0a90172f67412d727268d1424b59479","modified":1545897772236},{"_id":"source/_posts/java/introduction/10-jdk-mac.png","hash":"a058e42380742e3be7911c30ea4c54263f2e99e9","modified":1545897750576},{"_id":"source/_posts/java/introduction/12-jdk-mac.png","hash":"79b6a623b06142723ea9dc4981f3ef12ff3bcd75","modified":1545897750604},{"_id":"source/_posts/java/introduction/13-jdk-mac.png","hash":"aa4d7a93b28afb3424a5c107724b07cb9cbeed3d","modified":1545897750621},{"_id":"source/_posts/java/introduction/16-jdk-mac.png","hash":"5451e575e4bf08b384335bb070bb46817edad5bd","modified":1545897750701},{"_id":"source/_posts/java/introduction/2-jdk-windows.png","hash":"4d1cb8168cde93a8aabef63c8d12a8ccb56a60e4","modified":1545897750300},{"_id":"source/_posts/java/introduction/14-jdk-mac.png","hash":"4bc54995d9f778084a8b486634bc30793f1592f0","modified":1545897750645},{"_id":"source/_posts/java/introduction/3-jdk-windows.png","hash":"2a89504a729c391003e94d74941aeada3fde7e4a","modified":1545897750319},{"_id":"source/_posts/java/introduction/4-jdk-windows.png","hash":"155d9ca099b6138a5f3c2df3b826f6ce972d847a","modified":1545897750385},{"_id":"source/_posts/java/introduction/5-jdk-mac.png","hash":"b65be8a8b49518b8fc8ea4f1c1b7d1113352180c","modified":1545897750392},{"_id":"source/_posts/java/introduction/6-jdk-mac.png","hash":"cc0550022513036a612d666bab64f1876d703ec3","modified":1545897750438},{"_id":"source/_posts/java/introduction/6-jdk-windows.png","hash":"f26f02913932acf206e345b96a2749c22d68a7c1","modified":1545897750456},{"_id":"source/_posts/java/introduction/7-jdk-mac.png","hash":"57310fc56a96be434f0ad69eb6387a82f54d0d5a","modified":1545897750465},{"_id":"source/_posts/java/introduction/7-jdk-windows.png","hash":"79f375c43ac760ce5a88aef12df9e788494f0643","modified":1545897750480},{"_id":"source/_posts/java/introduction/8-jdk-mac.png","hash":"52eacf47993855414045b0719196da9001ccb153","modified":1545897750497},{"_id":"source/_posts/java/introduction/5-jdk-windows.png","hash":"ac4f6a18554f2d1aae972e1bf6737dd60551613d","modified":1545897750417},{"_id":"source/_posts/java/introduction/8-jdk-windows.png","hash":"884e1c6927bf1394dc9941de017deb3b9901daeb","modified":1545897750514},{"_id":"source/_posts/java/introduction/9-jdk-windows.png","hash":"8defa728fac888e8203a5e6151596c5ce15280d3","modified":1545897750554},{"_id":"source/_posts/java/introduction/9-jdk-mac.png","hash":"1c9dbad3045f234695be69fb4c27c0cd53ab1918","modified":1545897750538},{"_id":"source/_posts/java/introduction/java-environment-mac.md","hash":"f378551e2a7a7b30c5f8a3d55f9365569b686b2c","modified":1545988281527},{"_id":"source/_posts/java/introduction/java-environment-windows.md","hash":"7d685ae39a87b6e37f704648e96879728e3565fb","modified":1545988292207},{"_id":"source/_posts/java/introduction/java-ide-3.png","hash":"5616c391ba4e9a1341b4c6213758924b9e8124d1","modified":1545897750805},{"_id":"source/_posts/java/introduction/java-environment.md","hash":"315cbeb75feb0c1bb30e82374fd358f97e25b7a4","modified":1545988129168},{"_id":"source/_posts/java/introduction/java-ide-6.png","hash":"bc4523f962ca5301e062c864166cf4cc2dfd6f34","modified":1545897750874},{"_id":"source/_posts/java/introduction/java-ide-7.png","hash":"db6fcb1e3350c32db0a5ad41400ee7e22023eed1","modified":1545897750896},{"_id":"source/_posts/java/introduction/java-ide-8.png","hash":"311e7f7643a2facb45dc3165c938af1bd84b28b7","modified":1545897750915},{"_id":"source/_posts/java/introduction/java-ide-5.png","hash":"627cfbad99d15a6962df90269eb9df896a6b6021","modified":1545897750852},{"_id":"source/_posts/java/introduction/java-ide-9.png","hash":"b7cb86602219d3609159f856c4449b7b85ae0aac","modified":1545897750932},{"_id":"source/_posts/java/introduction/java-ide.md","hash":"60a170f96328497f00c515bedd9a960ae4ad29aa","modified":1545989842524},{"_id":"source/_posts/java/introduction/java-introduction.md","hash":"b2aa63d2450d530429222ab73bbe8ddc5bf55a80","modified":1545992103706},{"_id":"source/_posts/java/introduction/java-primer-conclusion.md","hash":"1553dc212b108c0383d6e060a278bf58e886f471","modified":1545991343895},{"_id":"source/_posts/java/introduction/java-package.md","hash":"87173175a6ed22e23f7628dcb5040ce344662134","modified":1545902466941},{"_id":"source/_posts/java/introduction/java-simple-example-1.png","hash":"7be12cd9b902847ed3ca8ce7a6f06139103f1180","modified":1545897751028},{"_id":"source/_posts/java/introduction/java-simple-example-2.png","hash":"404e3de6764fab8a109a7efceabfb4bc6942fb30","modified":1545897751038},{"_id":"source/_posts/java/introduction/java-simple-example.md","hash":"be06df1029e6394a2df188b036d61cfe1af01714","modified":1545991338350},{"_id":"source/_posts/java/introduction/java-simple-example-3.png","hash":"9b42950df71c6cb651d76dec741a4549e4855fd5","modified":1545897751060},{"_id":"source/_posts/java/introduction/java-started.md","hash":"1e893d00b476a12971190438fc22587b2bebc9e2","modified":1545983610246},{"_id":"source/_posts/java/jvm/accessibility1.jpg","hash":"36ba36afdaa689c5cadd4919a834569d72fdb478","modified":1545897794506},{"_id":"source/_posts/java/jvm/accessibility2.png","hash":"281d56cfb09c2ac6654e604869f1c089bb19688b","modified":1545897794527},{"_id":"source/_posts/java/jvm/garbage-collection.md","hash":"802c271c5fdf5c36f45366e4e658625fe0dd4d59","modified":1545897794534},{"_id":"source/_posts/java/jvm/memory-leak.md","hash":"a46e6a7c22986d5e38424de57067d0bba3bbff4b","modified":1545897794547},{"_id":"source/_posts/java/jvm/reachable.md","hash":"d8969e64e88172ead7c110be7b5c176267ca0d19","modified":1545897794590},{"_id":"source/_posts/java/jvm/object-self-rescue.md","hash":"b70e352fe1768b0df2abbafc86677776245d6636","modified":1545897794555},{"_id":"source/_posts/java/jvm/reachable-in-hotspot.md","hash":"11ebd3eaef3fa263b86aa70b3ab07712e1167f09","modified":1545897794564},{"_id":"source/_posts/guide/8101.png","hash":"985f8790a13d24c512910d43eec74b4fd27a0b29","modified":1485164820899},{"_id":"source/_posts/guide/8100.png","hash":"4b620036807df794bb9b8ffed9006704bfbfbbe3","modified":1485164820846},{"_id":"source/_posts/java/multithread/multithread-start.md","hash":"4da85cf355fa13b9743195b17009821df22b56bb","modified":1545897819753},{"_id":"source/_posts/java/reference/0002.png","hash":"54f015dd14356d46b4a5eb4c42bb0b296f3c2b68","modified":1545897861138},{"_id":"source/_posts/java/reference/0005.png","hash":"fcfdff32f6d724be3c3d12e709f9f3a460a3e274","modified":1545897861151},{"_id":"source/_posts/java/reference/0003.png","hash":"7efe69ed1c19533b6bc5b6cb7cb7356303702513","modified":1545897861145},{"_id":"source/_posts/java/reference/0012.png","hash":"15a7c4e801630c8a3f6bb67d0fd18e69eb8eacc7","modified":1545897861194},{"_id":"source/_posts/java/reference/0013.png","hash":"7b5bda6e7d94dbeacef12ef060e5e0d8e2fa4d32","modified":1545897861218},{"_id":"source/_posts/java/reference/0019.png","hash":"013380c072a2fe829f2e10dbee5a76554ff20509","modified":1545897861240},{"_id":"source/_posts/java/reference/0040.png","hash":"3a4142e60fcb16d71ee8f2eb5e4de31091d2676f","modified":1545897861268},{"_id":"source/_posts/java/reference/0046.png","hash":"e07f0c042e640e7cd71e132f7f48d6360f09e3ca","modified":1545897861287},{"_id":"source/_posts/java/reference/0190.png","hash":"c5929d6f6445ef0d9aa017a313d10dff0e6fa553","modified":1545897861372},{"_id":"source/_posts/java/reference/06.png","hash":"54707910862fdf7b148c90e36fa832f10c0d22fb","modified":1545897861163},{"_id":"source/_posts/java/reference/105.png","hash":"be0006708b897b95df1253186474048473bb8bbe","modified":1545897861324},{"_id":"source/_posts/java/reference/148.png","hash":"5533113be8fff9946f3ebca68666478732c18203","modified":1545897861365},{"_id":"source/_posts/java/reference/195.png","hash":"240ea388434d019a8cddf1df5f986ec1877bda14","modified":1545897861400},{"_id":"source/_posts/java/reference/2030.png","hash":"01e87e34ca69f7d33403860a9d59d0ac809162eb","modified":1545897861408},{"_id":"source/_posts/java/reference/8111.png","hash":"3ee2a0a45a1121730ece4ce28b1f5208063e4c8a","modified":1545897861426},{"_id":"source/_posts/java/reference/94.png","hash":"5da31bf5172d88b611f6c4706effecb82420ea47","modified":1545897861306},{"_id":"source/_posts/java/reference/final-reference-code-detail.md","hash":"f30bd73690136a5b209e3f05e518806a4e8eded8","modified":1545897861447},{"_id":"source/_posts/java/reference/four-kinds-of-reference.md","hash":"3f0333e41979a0109959589bf20a888174b6cd48","modified":1545897861457},{"_id":"source/_posts/java/reference/phantom-reference-code-detail.md","hash":"43c27aa51323c8be8733b68dd069b8b72b548659","modified":1545897861486},{"_id":"source/_posts/java/reference/phantom-reference.md","hash":"54c42c4b9103315fdf3265ca7d6e3913271aca62","modified":1545897861494},{"_id":"source/_posts/java/reference/reference-1.png","hash":"90330bc0125b7580e1421a7e3f409e5a703caf8e","modified":1545897861527},{"_id":"source/_posts/java/reference/reference-2.png","hash":"a8dc3f3b71dcb3ace64dd22fd364972a8b2daf22","modified":1545897861545},{"_id":"source/_posts/java/reference/reference-code-detail.md","hash":"0740354e65fda59ee464a51aaa91609b77973d0b","modified":1545897861563},{"_id":"source/_posts/java/reference/reference-queue-code-detail.md","hash":"6511047487f66d4e361c9a00a412ebcbdebc99df","modified":1545897861571},{"_id":"source/_posts/java/reference/reference-summary.md","hash":"f0ed56856095aa8a306589b8242db01aa8402d70","modified":1545897861588},{"_id":"source/_posts/java/reference/soft-reference-2.png","hash":"f07af2215f65766b68a5c3e932bc01e1ea4a0fc5","modified":1545897861605},{"_id":"source/_posts/java/reference/soft-reference-3.png","hash":"39f4779065da2ccd6dd355ff6fd1e72efaf4391f","modified":1545897861621},{"_id":"source/_posts/java/reference/soft-reference-code-detail.md","hash":"1f328fde69fd57f55c698aef85ca9547043d5422","modified":1545897861638},{"_id":"source/_posts/java/reference/soft-reference.md","hash":"3f76297d69822147da4db9a9114dce681c570278","modified":1545897861654},{"_id":"source/_posts/java/reference/strong-reference.md","hash":"09a497a24a95f58457a78472373bb3d9bbe2f169","modified":1545897861671},{"_id":"source/_posts/java/reference/weak-reference-code-detail.md","hash":"86be7f294e8b14b8b91ada85323a861e6e34c702","modified":1545897861689},{"_id":"source/_posts/java/reference/weak-reference.md","hash":"ab042bd88c6a2cb8b2bf91e64c8f2c45ba835264","modified":1545897861707},{"_id":"themes/indigos/layout/_partial/plugins/baidu.ejs","hash":"e44d526029f122e9c2c74f3a647c35002c818cbe","modified":1545719561512},{"_id":"themes/indigos/layout/_partial/plugins/disqus.ejs","hash":"4a0c01e4195f685f9825fcd016d01249dbdd52ca","modified":1545719561512},{"_id":"themes/indigos/layout/_partial/plugins/dynamic-title.ejs","hash":"23c101d45911eb0846533aaa2d409c43aa5e899a","modified":1545719561513},{"_id":"themes/indigos/layout/_partial/plugins/gitment.ejs","hash":"5723d507eca4390e8e5d18c0770e7953b8c22f5a","modified":1545719561513},{"_id":"themes/indigos/layout/_partial/plugins/google-analytics.ejs","hash":"a947f4076b54b48d4df5baf2d5b3c39b632c7576","modified":1545719561513},{"_id":"themes/indigos/layout/_partial/plugins/hyper-comments.ejs","hash":"e5a83acc7c2e385b0c9abf428e86e8fdfd3a5202","modified":1545719561513},{"_id":"themes/indigos/layout/_partial/plugins/mathjax.ejs","hash":"ea603a057196de53bd6afab1fddb93d11f27eb81","modified":1545719561513},{"_id":"themes/indigos/layout/_partial/plugins/page-visit.ejs","hash":"2decb77bf3c1a064ea6ce1d4e78892c434d9c884","modified":1545719561514},{"_id":"themes/indigos/layout/_partial/plugins/site-visit.ejs","hash":"8fbd0910828f1ab6eba728bdecc9811d623baae2","modified":1545719561514},{"_id":"themes/indigos/layout/_partial/plugins/tajs.ejs","hash":"97b48fe10be1c71d4ff25ccec3bd92d97466c9c5","modified":1545719561514},{"_id":"themes/indigos/layout/_partial/plugins/uyan.ejs","hash":"e370bd04ea5cf1c83e0c20516aff7ba3ca8b2d0b","modified":1545719561514},{"_id":"themes/indigos/layout/_partial/plugins/valine.ejs","hash":"a976ca36bd09aeb2902bf94fcc7a59975ea25148","modified":1545719561514},{"_id":"themes/indigos/layout/_partial/post/category.ejs","hash":"c7476165721a3a5e34d00d8c5c07e1e5474cd800","modified":1545719561515},{"_id":"themes/indigos/layout/_partial/post/comment.ejs","hash":"bcc3bd7a9023d71778f15e98c88552335ae69a69","modified":1545719561515},{"_id":"themes/indigos/layout/_partial/post/copyright.ejs","hash":"5305ed30ee35cf50f87656737d0ffe85f5bfc16b","modified":1545719561515},{"_id":"themes/indigos/layout/_partial/post/date.ejs","hash":"ea85b46e12d3b9c3612eef7aa76289a663fbc096","modified":1545719561516},{"_id":"themes/indigos/layout/_partial/post/head-meta.ejs","hash":"b0c680ce5b8aaf461a6731b1ff1287bd140c168a","modified":1545719561516},{"_id":"themes/indigos/layout/_partial/post/nav.ejs","hash":"11e7d504f7c7a3c4c052da13cfa8ea4862c9383e","modified":1545719561516},{"_id":"themes/indigos/layout/_partial/post/reward-btn.ejs","hash":"41c242fe3159dc68cec8dd00ab6d2663f5a51179","modified":1545719561516},{"_id":"themes/indigos/layout/_partial/post/reward.ejs","hash":"23719e09689b3afbb19214c6603eb02f896cb9ba","modified":1545719561517},{"_id":"themes/indigos/layout/_partial/post/share-fab.ejs","hash":"93482ad7d1e01b966f5ee1c5d12b88564e02b349","modified":1545719561517},{"_id":"themes/indigos/layout/_partial/post/share.ejs","hash":"8df0d7bf6f8e106cdbdac2dd10a97367aa0695f8","modified":1545719561517},{"_id":"themes/indigos/layout/_partial/post/tag.ejs","hash":"b3dc38652c4a018a37418136478dcd522fc49f79","modified":1545719561517},{"_id":"themes/indigos/layout/_partial/post/title.ejs","hash":"062d56cb88ae2be3a6616b911d4ebeffcbfe3cff","modified":1545719561517},{"_id":"themes/indigos/layout/_partial/post/toc.ejs","hash":"ad287a70724eb7cd8cd2a03a45b68032ee99973d","modified":1545719561518},{"_id":"themes/indigos/layout/_partial/post/updated.ejs","hash":"5caa71745aa340ce57938a930f3b898ee7518d74","modified":1545719561518},{"_id":"themes/indigos/source/css/_partial/archives.less","hash":"7d2a6886265386c640e94ffca3f042675f701a35","modified":1545719561521},{"_id":"themes/indigos/source/css/_partial/article.less","hash":"d476cd3537bcd8a02d055cc223f5c805b8638cc2","modified":1545719561521},{"_id":"themes/indigos/source/css/_partial/gotop.less","hash":"b7db31b9bc563c10b9e3cf3e6d9cfddfeb3e805a","modified":1545719561522},{"_id":"themes/indigos/source/css/_partial/header.less","hash":"90f0948a9182c14b1dac1e9dbed3c883543266f9","modified":1545719561523},{"_id":"themes/indigos/source/css/_partial/highlight.less","hash":"58492b7cdb45fe09b026b2f34e8ae69c2ddb8228","modified":1545719561523},{"_id":"themes/indigos/source/css/_partial/layout.less","hash":"4390ed22abad59c8b28ed1a479a52f15b5f9cf4a","modified":1545719561523},{"_id":"themes/indigos/source/css/_partial/lightbox.less","hash":"9b961eb1d70e7658f42cf2ca895fa5e35a6b6541","modified":1545719561523},{"_id":"themes/indigos/source/css/_partial/loading.less","hash":"f9d06a1e24fb4857fd18d7a0bfbb3a0ab2d1c742","modified":1545719561523},{"_id":"themes/indigos/source/css/_partial/page.less","hash":"e92ccb53e6ac73a51498c6a9672db9d0d2bc7f1a","modified":1545719561524},{"_id":"themes/indigos/source/css/_partial/postlist.less","hash":"1c041bf91106808e5480c60d9ece45431bb503b3","modified":1545719561524},{"_id":"themes/indigos/source/css/_partial/reward.less","hash":"4857f90bb57fc22ca3f942d8934d86d5e9e82c1e","modified":1545719561524},{"_id":"themes/indigos/source/css/_partial/roboto.less","hash":"2e0469ed8161d5672d903ca1a8027cd65fe007f1","modified":1545719561524},{"_id":"themes/indigos/source/css/_partial/search.less","hash":"1d6641ae7568a0153d24beba9fd9704d2b155f6c","modified":1545719561524},{"_id":"themes/indigos/source/css/_partial/share.less","hash":"27d80bcc96a53dd1e7eaa9a7d746e4b212357302","modified":1545719561525},{"_id":"themes/indigos/source/css/_partial/tags.less","hash":"959f4373fda6e45f6a4041a995ed3ea8a05a5170","modified":1545719561525},{"_id":"themes/indigos/source/css/_partial/variable.less","hash":"082896b966ed25b39c74e7b007b4f54c235685a4","modified":1545719561525},{"_id":"themes/indigos/source/css/_partial/waves.less","hash":"77bfd0b373b0469eb0176167fb076ccda4edf2a7","modified":1545719561525},{"_id":"themes/indigos/source/css/_plugin/valine.less","hash":"ddbb7647d83f732f9b0d5d817d40a748006949cc","modified":1545719561526},{"_id":"themes/indigos/source/img/wechat.jpg","hash":"c7887fd95a3383371b957667d4bfbc3c8c2cbe53","modified":1545721370643},{"_id":"themes/indigos/source/img/alipay.jpg","hash":"d2e76219d3f688a805c9f30e004f48e79daf03ab","modified":1545721413724},{"_id":"source/_posts/java/collection/weakhashmap-4.png","hash":"ca0ae5597535eb89f027c74cf3e92369cffb0bd4","modified":1545897772213},{"_id":"source/_posts/java/collection/weakhashmap-3.png","hash":"a1971c4b5102b3a6c222ed1014712e399a6e3ce2","modified":1545897772202},{"_id":"source/_posts/java/introduction/1-jdk-windows.png","hash":"8f643602c33a1a98b96e46349952dea4dae4981b","modified":1545897750285},{"_id":"source/_posts/java/introduction/11-jdk-mac.png","hash":"09153cd9a58d2ea84f64bc4105fee92a0691c221","modified":1545897750585},{"_id":"source/_posts/java/introduction/15-jdk-mac.png","hash":"115d45c94471ff20db11d361a5111108181273f9","modified":1545897750667},{"_id":"source/_posts/java/introduction/java-ide-4.png","hash":"41e84a42900e891648f3b37130a080606f531181","modified":1545897750832},{"_id":"themes/indigos/source/css/_partial/fontawesome.less","hash":"ca30b732d2efbb0cd55a272ecdabc97f895aee78","modified":1545719561522},{"_id":"source/_posts/java/introduction/2-jdk-mac.png","hash":"bef4170c81af99efbdb89dafa2094fd127648889","modified":1545897750293},{"_id":"source/_posts/java/introduction/java-started-1.png","hash":"83c77b655ea24647ff6c55c830924baa4e90b845","modified":1545983120160},{"_id":"source/_posts/java/reference/141.png","hash":"accf4d56385ac11f9ae611c005ee807214bfc1af","modified":1545897861342},{"_id":"source/_posts/java/reference/0001.png","hash":"5646e88cc49bea8fb2744a8a131c94b2b55b266f","modified":1545897861131},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1545719561539},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1545719561541},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1545719561542},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1545719561542},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1545719561544},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1545719561545},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1545719561545},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1545719561547},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1545719561548},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1545719561548},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1545719561551},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1545719561551},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1545719561551},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1545719561553},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1545719561554},{"_id":"source/_posts/java/reference/0009.png","hash":"785e1957c7aea321a1933bbaf37a7e7b834212e6","modified":1545897861174},{"_id":"source/_posts/java/introduction/3-jdk-mac.png","hash":"0b4bb944db5070a12b706f7ffaf451f5d558cfd9","modified":1545897750310},{"_id":"source/_posts/java/introduction/java-ide-2.png","hash":"9e81a827e3e5793b7f262df0eda5de1746c65899","modified":1545897750788},{"_id":"themes/indigos/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1545719561538},{"_id":"themes/indigos/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1545719561537},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1545719561540},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1545719561543},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1545719561550},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1545719561547},{"_id":"source/_posts/java/introduction/4-jdk-mac.png","hash":"df019bad4cac078997c8a067a59d69be97a34adc","modified":1545897750367},{"_id":"source/_posts/java/introduction/java-started/java-started-1.png","hash":"83c77b655ea24647ff6c55c830924baa4e90b845","modified":1545958752475},{"_id":"themes/indigos/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1545719561528},{"_id":"themes/indigos/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1545719561530},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1545719561553},{"_id":"themes/indigos/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1545719561536},{"_id":"themes/indigos/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1545719561534},{"_id":"source/_posts/java/introduction/1-jdk-mac.png","hash":"4acf222e3a5d9728d358cd16a2f0d4300ae6700e","modified":1545897750275},{"_id":"source/_posts/java/introduction/java-ide-1.png","hash":"ab6bb5ebfc5b292263824a72ba6eeca819f31f14","modified":1545897750769},{"_id":"source/_posts/java/basic/java-package.md","hash":"6f85b225a58887e6e8fdac5df001931d6ec927c0","modified":1545993645464},{"_id":"source/_posts/java/introduction/java-environment-mac/10-jdk-mac.png","hash":"a058e42380742e3be7911c30ea4c54263f2e99e9","modified":1545987773638},{"_id":"source/_posts/java/introduction/java-environment-mac/12-jdk-mac.png","hash":"79b6a623b06142723ea9dc4981f3ef12ff3bcd75","modified":1545987773639},{"_id":"source/_posts/java/introduction/java-environment-mac/13-jdk-mac.png","hash":"aa4d7a93b28afb3424a5c107724b07cb9cbeed3d","modified":1545987773639},{"_id":"source/_posts/java/introduction/java-environment-mac/16-jdk-mac.png","hash":"5451e575e4bf08b384335bb070bb46817edad5bd","modified":1545987773639},{"_id":"source/_posts/java/introduction/java-environment-mac/14-jdk-mac.png","hash":"4bc54995d9f778084a8b486634bc30793f1592f0","modified":1545987773639},{"_id":"source/_posts/java/introduction/java-environment-mac/5-jdk-mac.png","hash":"b65be8a8b49518b8fc8ea4f1c1b7d1113352180c","modified":1545987773638},{"_id":"source/_posts/java/introduction/java-environment-mac/6-jdk-mac.png","hash":"cc0550022513036a612d666bab64f1876d703ec3","modified":1545987773638},{"_id":"source/_posts/java/introduction/java-environment-mac/7-jdk-mac.png","hash":"57310fc56a96be434f0ad69eb6387a82f54d0d5a","modified":1545987773638},{"_id":"source/_posts/java/introduction/java-environment-mac/8-jdk-mac.png","hash":"52eacf47993855414045b0719196da9001ccb153","modified":1545987773638},{"_id":"source/_posts/java/introduction/java-environment-mac/9-jdk-mac.png","hash":"1c9dbad3045f234695be69fb4c27c0cd53ab1918","modified":1545987773638},{"_id":"source/_posts/java/introduction/java-environment-windows/2-jdk-windows.png","hash":"4d1cb8168cde93a8aabef63c8d12a8ccb56a60e4","modified":1545987636754},{"_id":"source/_posts/java/introduction/java-environment-windows/3-jdk-windows.png","hash":"2a89504a729c391003e94d74941aeada3fde7e4a","modified":1545987636754},{"_id":"source/_posts/java/introduction/java-environment-windows/5-jdk-windows.png","hash":"ac4f6a18554f2d1aae972e1bf6737dd60551613d","modified":1545987636755},{"_id":"source/_posts/java/introduction/java-environment-windows/4-jdk-windows.png","hash":"155d9ca099b6138a5f3c2df3b826f6ce972d847a","modified":1545987636754},{"_id":"source/_posts/java/introduction/java-environment-windows/8-jdk-windows.png","hash":"884e1c6927bf1394dc9941de017deb3b9901daeb","modified":1545987642456},{"_id":"source/_posts/java/introduction/java-environment-windows/9-jdk-windows.png","hash":"8defa728fac888e8203a5e6151596c5ce15280d3","modified":1545987642456},{"_id":"source/_posts/java/introduction/java-environment-windows/6-jdk-windows.png","hash":"f26f02913932acf206e345b96a2749c22d68a7c1","modified":1545987636755},{"_id":"source/_posts/java/introduction/java-environment-windows/7-jdk-windows.png","hash":"79f375c43ac760ce5a88aef12df9e788494f0643","modified":1545987636754},{"_id":"source/_posts/java/introduction/java-ide/java-ide-3.png","hash":"5616c391ba4e9a1341b4c6213758924b9e8124d1","modified":1545988148472},{"_id":"source/_posts/java/introduction/java-ide/java-ide-5.png","hash":"627cfbad99d15a6962df90269eb9df896a6b6021","modified":1545988148473},{"_id":"source/_posts/java/introduction/java-ide/java-ide-7.png","hash":"db6fcb1e3350c32db0a5ad41400ee7e22023eed1","modified":1545988148473},{"_id":"source/_posts/java/introduction/java-ide/java-ide-6.png","hash":"bc4523f962ca5301e062c864166cf4cc2dfd6f34","modified":1545988148472},{"_id":"source/_posts/java/introduction/java-ide/java-ide-8.png","hash":"311e7f7643a2facb45dc3165c938af1bd84b28b7","modified":1545988148473},{"_id":"source/_posts/java/introduction/java-ide/java-ide-9.png","hash":"b7cb86602219d3609159f856c4449b7b85ae0aac","modified":1545988148473},{"_id":"source/_posts/java/introduction/java-simple-example/java-simple-example-1.png","hash":"7be12cd9b902847ed3ca8ce7a6f06139103f1180","modified":1545990049919},{"_id":"source/_posts/java/introduction/java-simple-example/java-simple-example-2.png","hash":"404e3de6764fab8a109a7efceabfb4bc6942fb30","modified":1545990049919},{"_id":"source/_posts/java/introduction/java-simple-example/java-simple-example-3.png","hash":"9b42950df71c6cb651d76dec741a4549e4855fd5","modified":1545990049919},{"_id":"source/_posts/java/introduction/java-environment-mac/15-jdk-mac.png","hash":"115d45c94471ff20db11d361a5111108181273f9","modified":1545987773639},{"_id":"source/_posts/java/introduction/java-environment-windows/1-jdk-windows.png","hash":"8f643602c33a1a98b96e46349952dea4dae4981b","modified":1545987624287},{"_id":"source/_posts/java/introduction/java-ide/java-ide-4.png","hash":"41e84a42900e891648f3b37130a080606f531181","modified":1545988148472},{"_id":"source/_posts/java/introduction/java-environment-mac/11-jdk-mac.png","hash":"09153cd9a58d2ea84f64bc4105fee92a0691c221","modified":1545987773638},{"_id":"source/_posts/java/introduction/java-environment-mac/2-jdk-mac.png","hash":"bef4170c81af99efbdb89dafa2094fd127648889","modified":1545987773638},{"_id":"source/_posts/java/introduction/java-environment-mac/3-jdk-mac.png","hash":"0b4bb944db5070a12b706f7ffaf451f5d558cfd9","modified":1545987773638},{"_id":"source/_posts/java/introduction/java-ide/java-ide-2.png","hash":"9e81a827e3e5793b7f262df0eda5de1746c65899","modified":1545988148472},{"_id":"source/_posts/java/introduction/java-environment-mac/4-jdk-mac.png","hash":"df019bad4cac078997c8a067a59d69be97a34adc","modified":1545987773638},{"_id":"source/_posts/java/introduction/java-environment-mac/1-jdk-mac.png","hash":"4acf222e3a5d9728d358cd16a2f0d4300ae6700e","modified":1545987773639},{"_id":"source/_posts/java/introduction/java-ide/java-ide-1.png","hash":"ab6bb5ebfc5b292263824a72ba6eeca819f31f14","modified":1545988148473},{"_id":"public/atom.xml","hash":"e58129021d8a115a5a2ba553a947e9f9528fd06e","modified":1545993662880},{"_id":"public/content.json","hash":"84c6b1e70d74b48a7a7657df00951886a9b7c658","modified":1545993662881},{"_id":"public/uncategorized/README.html","hash":"761f275a82e240b9b3cfd407226f9e9cf4f29d61","modified":1545993664332},{"_id":"public/archives/page/3/index.html","hash":"7f19b51b3a969aec54f0f95efe634fcd765e57e3","modified":1545993664332},{"_id":"public/archives/page/5/index.html","hash":"7afdc0c37ca0c3263970cd7cc5e9f5292f4efb9b","modified":1545993664332},{"_id":"public/archives/page/6/index.html","hash":"e8bc53ae16590cb480c1e901f6066c3ce0031dfd","modified":1545993664332},{"_id":"public/archives/2018/page/3/index.html","hash":"3953b0471f7c6e8f3c0817aa58f2564e4577e443","modified":1545993664332},{"_id":"public/archives/2018/page/5/index.html","hash":"45810db60a315fd2fd10bddf4fa05f5b896e1702","modified":1545993664332},{"_id":"public/archives/2018/page/6/index.html","hash":"997d430748592d4f0fefb8d38915aa4c0d861022","modified":1545993664332},{"_id":"public/archives/2018/09/index.html","hash":"cd3b5be190bb6b09d89660e18fc59d8c59ed4e41","modified":1545993664332},{"_id":"public/archives/2018/10/index.html","hash":"11e43eb43256ad42b91a99e2b9703d0ecffd20d7","modified":1545993664332},{"_id":"public/archives/2018/11/index.html","hash":"b188a99bea800bb44ba6463b4d398b0dae955312","modified":1545993664332},{"_id":"public/archives/2018/12/page/3/index.html","hash":"32fe3234a1c7b9b16c48331157912beb0f05cf91","modified":1545993664332},{"_id":"public/archives/2018/12/page/5/index.html","hash":"6d1201008ce175bcf96c4fc624bb79db9dcc0f3c","modified":1545993664332},{"_id":"public/categories/Hexo/index.html","hash":"1d81a48ba69a2705cfec0897f64e3898c89d4c30","modified":1545993664332},{"_id":"public/categories/reading/index.html","hash":"1b7e4f35a8eba8328174a3d7fd66a668053ff4b6","modified":1545993664332},{"_id":"public/categories/programming/page/2/index.html","hash":"8b2c2953d7fc2fce3ceefc6d6f1cc8eb129fe497","modified":1545993664332},{"_id":"public/page/6/index.html","hash":"d96041bbe79bafeedb63c82db8bf0a044bfeb924","modified":1545993664332},{"_id":"public/tags/digest/index.html","hash":"99ceab9ef0b2d7fda88c9ded052c0139aacc6c4e","modified":1545993664332},{"_id":"public/tags/multithread/index.html","hash":"79955d5a7c85bcff5a84cab37ab7b9e936d7a477","modified":1545993664332},{"_id":"public/tags/reading-notes/index.html","hash":"8e5015575005343800dbeefccf04be4483ba0298","modified":1545993664332},{"_id":"public/tags/enviroment/index.html","hash":"6da608a970bbbe5314a7d74a01a301d8b22c2ed6","modified":1545993664333},{"_id":"public/categories/index.html","hash":"0300b10f84e1c5b6d8adc03dc48967553cddfe88","modified":1545993664333},{"_id":"public/tags/index.html","hash":"85c5dbfd9c003af2d3143bbd9cdabd8c5dd1913c","modified":1545993664333},{"_id":"public/programming/java/basic/java-class.html","hash":"a27a74ae30433665ee8c44d1550e8e346d43bfd5","modified":1545993664333},{"_id":"public/programming/java/basic/java-variable.html","hash":"9dd51f7138bdfada9da4f2c1c4a54ce67c0236b6","modified":1545993664333},{"_id":"public/programming/java/basic/java-package.html","hash":"445f2cdb12a691bfa513335e258b9cd959bda940","modified":1545993664333},{"_id":"public/programming/java/basic/java-simple-structure.html","hash":"f323edd7090fdc287cf73fb0490f3ccedf2a862f","modified":1545993664333},{"_id":"public/programming/java/basic/java-basic.html","hash":"f8d91320311bbf9529fa14bd9e2e17f574b138d1","modified":1545993664333},{"_id":"public/programming/java/introduction/java-primer-conclusion.html","hash":"88f1c97a1171533af6854cdca27516ac3f1bb0ba","modified":1545993664333},{"_id":"public/programming/java/introduction/java-simple-example.html","hash":"8b60116a38006c1a0da15510dcf2ce493448974f","modified":1545993664333},{"_id":"public/programming/java/introduction/java-introduction.html","hash":"9d4e223b6b86b3abcea60bff9847176751cfd276","modified":1545993664333},{"_id":"public/programming/java/introduction/java-ide.html","hash":"b25af29a1f1a12a6b19db4a7d947153618d10d8f","modified":1545993664333},{"_id":"public/programming/java/introduction/java-environment-mac.html","hash":"81b7281de0e200896dfdab908b83a620fc2ca707","modified":1545993664333},{"_id":"public/programming/java/introduction/java-environment-windows.html","hash":"b3d04a64b1b16c44d31271323ec330795399aae2","modified":1545993664333},{"_id":"public/programming/java/introduction/java-environment.html","hash":"a66297135351027c322ad3ff8d7a06028d5b630a","modified":1545993664333},{"_id":"public/programming/java/introduction/java-started.html","hash":"e4a2859f7dc34a090ee8e03778d96de3914f2da6","modified":1545993664334},{"_id":"public/uncategorized/java/reference/weak-reference.html","hash":"5aabe727ce30f68c9055b896345e17f36d3bbcd0","modified":1545993664334},{"_id":"public/uncategorized/java/reference/weak-reference-code-detail.html","hash":"8166af80008cb6e0dc5b518fce4b411ce1f68a86","modified":1545993664334},{"_id":"public/uncategorized/java/reference/strong-reference.html","hash":"6ac50927605c854df1afb2f55ab1cc645910d7ec","modified":1545993664334},{"_id":"public/uncategorized/java/reference/soft-reference.html","hash":"68732ff7cf3ed0b1d29468905110303fc4a018ed","modified":1545993664334},{"_id":"public/uncategorized/java/reference/soft-reference-code-detail.html","hash":"ba81a1ef306ce9dc4ab1d7f15428c006ca49bc72","modified":1545993664334},{"_id":"public/uncategorized/java/reference/reference-summary.html","hash":"94b1f43743647bf84e563e07af470b756fb0a7ff","modified":1545993664334},{"_id":"public/uncategorized/java/reference/reference-queue-code-detail.html","hash":"183acf064ed104308926823c621c9c453418739c","modified":1545993664334},{"_id":"public/uncategorized/java/reference/reference-code-detail.html","hash":"7719fc17ef532da4a16624ac67b37c8d4b6284ef","modified":1545993664334},{"_id":"public/uncategorized/java/reference/phantom-reference.html","hash":"52e79357515b0b9241358494f5163b14a4bc1bc7","modified":1545993664334},{"_id":"public/uncategorized/java/reference/phantom-reference-code-detail.html","hash":"53a8db29551adbb2c4d69da4cc87ae3cd6a8022e","modified":1545993664334},{"_id":"public/uncategorized/java/reference/four-kinds-of-reference.html","hash":"acf928ea582ff973433519db03dd87e8e40de45a","modified":1545993664334},{"_id":"public/uncategorized/java/reference/final-reference-code-detail.html","hash":"5f8c5ac68d0da50711b655bbacc474e0cd20786e","modified":1545993664334},{"_id":"public/uncategorized/java/README.html","hash":"969f4cf33f1ed727d3b8cb0e987520347343a9f8","modified":1545993664335},{"_id":"public/uncategorized/java/multithread/multithread-start.html","hash":"15f02e7fb849fbb635e558fb8db81de3add10e8c","modified":1545993664335},{"_id":"public/uncategorized/java/jvm/reachable.html","hash":"0f2b4a108b31c8a59dc9db7103590f30dda42b81","modified":1545993664335},{"_id":"public/uncategorized/java/jvm/reachable-in-hotspot.html","hash":"5058a8508c74a9dcc90b35f0970f8407e3ee8697","modified":1545993664335},{"_id":"public/uncategorized/java/jvm/object-self-rescue.html","hash":"818d43ab4101a22b4a981792f02d7f17d58ef771","modified":1545993664335},{"_id":"public/uncategorized/java/jvm/memory-leak.html","hash":"37eac5586986c5ce1135eba82dcc4c68cb76fec4","modified":1545993664335},{"_id":"public/uncategorized/java/jvm/garbage-collection.html","hash":"5566b250efcf9c62db5c4cd3a988866e1bb027d1","modified":1545993664335},{"_id":"public/uncategorized/java/collection/weakhashmap-code-detail.html","hash":"f800ffebe6164d425ea240d0a4f0f8a3c8988427","modified":1545993664335},{"_id":"public/uncategorized/java/basic/java-operator.html","hash":"088ef79325490d1b2025dbfc04cbe7e646912b50","modified":1545993664335},{"_id":"public/uncategorized/java/basic/java-data-type.html","hash":"70374434108a47cd91bd7674bbc809acf97f631a","modified":1545993664335},{"_id":"public/reading/reading/the-power-of-habit.html","hash":"d523a04df61518eef0c765c67c4237993c70fcd8","modified":1545993664335},{"_id":"public/reading/reading/java-multithread-programming-guide-in-action.html","hash":"3ce2a49f69f7db27e02dd71124341203644e71cc","modified":1545993664335},{"_id":"public/reading/reading/java-multithread-programming-guide-in-action-digest.html","hash":"706c3d6dd287e1c3c84ef1fc7dd1455a4d762f2b","modified":1545993664335},{"_id":"public/reading/reading/the-power-of-habit-digest.html","hash":"4b3b7eec8ffcc507102d561b070d34f7b57a0050","modified":1545993664335},{"_id":"public/Hexo/hello-world.html","hash":"b9f3143b4334d13850e4227745e3ecf68ea68686","modified":1545993664336},{"_id":"public/uncategorized/leetcode/Design-Linked-List.html","hash":"0307b8acf1fbc5e35c1325086f0043b0d437f9d6","modified":1545993664336},{"_id":"public/uncategorized/leetcode/README.html","hash":"4285e55818e655f267cd1aac4e5452de5ed854d8","modified":1545993664336},{"_id":"public/uncategorized/life-thinking/README.html","hash":"12aaaa5cdd5131432fd583854ada4773de4b8ffd","modified":1545993664336},{"_id":"public/uncategorized/reading/README.html","hash":"8f51b9c5c53fe09e74d907fa0887e89a92407be0","modified":1545993664336},{"_id":"public/uncategorized/guide/background-skill.html","hash":"9bc55e747aff0598aaf6fad16c0a779319ddfa53","modified":1545993664336},{"_id":"public/uncategorized/guide/README.html","hash":"7b6e74a168e7d1c1133899042eb8e819f25de2ea","modified":1545993664336},{"_id":"public/uncategorized/architecture/domain-driven-design/ddd-outline.html","hash":"52fbad7cba99ea3c84c5ed387e8d1e2a0c26af07","modified":1545993664336},{"_id":"public/uncategorized/architecture/domain-driven-design/ddd-steps.html","hash":"ea30a3044e2b48f954bacb2d52c5fdebf46fd841","modified":1545993664336},{"_id":"public/uncategorized/architecture/domain-driven-design/ddd-recommendation.html","hash":"353d198bb47f5970deece83f86faefaad1d8758c","modified":1545993664336},{"_id":"public/uncategorized/ops/centos-jdk8-installation.html","hash":"b03401184a624744f4d87073bc94836b1ad2a0c6","modified":1545993664336},{"_id":"public/uncategorized/ops/deploy-vuepress-on-centos7.html","hash":"a0de9a567d8ac0dd1d33ac622a19bdff57069aea","modified":1545993664336},{"_id":"public/uncategorized/ops/jenkins-work-with-github-webhook.html","hash":"e282bdc5490c1bb50a3114b850a27071c7695d38","modified":1545993664336},{"_id":"public/archives/index.html","hash":"be261557f9f2a4e53c149be863a232ee23629c1d","modified":1545993664336},{"_id":"public/archives/page/2/index.html","hash":"6af5d4e1e2ac0a1591bba97f4442652d3300a3c8","modified":1545993664336},{"_id":"public/archives/page/4/index.html","hash":"72d55549fb0ac1400bb0976306812343ae5a17ce","modified":1545993664336},{"_id":"public/archives/2018/index.html","hash":"ded68df0bd31846629a9632024437f2d26dde41c","modified":1545993664337},{"_id":"public/archives/2018/page/2/index.html","hash":"7d38bbaa5dfb73a6e4e218a295bcda3761635a51","modified":1545993664337},{"_id":"public/archives/2018/page/4/index.html","hash":"36e93998a5626e6a04f2625358ba0615ee536a0b","modified":1545993664337},{"_id":"public/archives/2018/12/index.html","hash":"612a49bb71cea8a2dff9f7707d9e3370f3fd9d14","modified":1545993664337},{"_id":"public/archives/2018/12/page/2/index.html","hash":"52fc6e9a5ed1dc95ab149e5cd602828ed0dd0ec1","modified":1545993664337},{"_id":"public/archives/2018/12/page/4/index.html","hash":"4809f223630572c53bb02fa39e46a0b1d5830ae3","modified":1545993664337},{"_id":"public/categories/programming/index.html","hash":"a53cde711c01bd8c69da7785c4d109db9a1f6e57","modified":1545993664337},{"_id":"public/index.html","hash":"56e382b9c83a2fd54a79a64d3ddb9562b20795aa","modified":1545993664337},{"_id":"public/page/2/index.html","hash":"eb9713e6b628112256104b3add4af88eb867b633","modified":1545993664337},{"_id":"public/page/3/index.html","hash":"a98fdb5dc352cd2fefd998ce59159ae402bc0abb","modified":1545993664337},{"_id":"public/page/4/index.html","hash":"3d909b35d129a91c110e0c08bf737d2b5932e16d","modified":1545993664337},{"_id":"public/page/5/index.html","hash":"40648617c988ec50b683f982287b50a0bc69ee6c","modified":1545993664337},{"_id":"public/tags/java/index.html","hash":"f814c4127fd31950120fc15787007396bbb80bed","modified":1545993664337},{"_id":"public/tags/java/page/2/index.html","hash":"0374331d3e913fb62d9ea9bd1f4d185c76cf8913","modified":1545993664337},{"_id":"public/tags/java-base/index.html","hash":"53cc3438113c997c7cad07ca57f6f9902ef8f1b2","modified":1545993664337},{"_id":"public/tags/java-introduction/index.html","hash":"c0ae6b677850c7461340a8ee58a52671b3891b4b","modified":1545993664337},{"_id":"public/img/avatar.jpg","hash":"96f2506c587325147a383aad3ada8d5993e6cdf8","modified":1545993664347},{"_id":"public/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1545993664347},{"_id":"public/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1545993664347},{"_id":"public/img/favicon.ico","hash":"c88cd0044daea8f5b87913d71c4ade2aa31387c9","modified":1545993664347},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1545993664347},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1545993664347},{"_id":"public/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1545993664347},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1545993664347},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1545993664347},{"_id":"public/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1545993664347},{"_id":"public/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1545993664347},{"_id":"public/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1545993664347},{"_id":"public/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1545993664347},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1545993664348},{"_id":"public/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1545993664348},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1545993664348},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1545993664348},{"_id":"public/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1545993664348},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1545993664348},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1545993664348},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1545993664348},{"_id":"public/programming/java/introduction/java-environment-windows/7-jdk-windows.png","hash":"79f375c43ac760ce5a88aef12df9e788494f0643","modified":1545993664348},{"_id":"public/programming/java/introduction/java-environment-windows/2-jdk-windows.png","hash":"4d1cb8168cde93a8aabef63c8d12a8ccb56a60e4","modified":1545993664348},{"_id":"public/programming/java/introduction/java-environment-windows/3-jdk-windows.png","hash":"2a89504a729c391003e94d74941aeada3fde7e4a","modified":1545993664348},{"_id":"public/programming/java/introduction/java-environment-windows/4-jdk-windows.png","hash":"155d9ca099b6138a5f3c2df3b826f6ce972d847a","modified":1545993664348},{"_id":"public/programming/java/introduction/java-environment-windows/5-jdk-windows.png","hash":"ac4f6a18554f2d1aae972e1bf6737dd60551613d","modified":1545993664348},{"_id":"public/programming/java/introduction/java-environment-windows/6-jdk-windows.png","hash":"f26f02913932acf206e345b96a2749c22d68a7c1","modified":1545993664348},{"_id":"public/programming/java/introduction/java-environment-windows/8-jdk-windows.png","hash":"884e1c6927bf1394dc9941de017deb3b9901daeb","modified":1545993664348},{"_id":"public/programming/java/introduction/java-environment-windows/9-jdk-windows.png","hash":"8defa728fac888e8203a5e6151596c5ce15280d3","modified":1545993664349},{"_id":"public/programming/java/introduction/java-environment-mac/5-jdk-mac.png","hash":"b65be8a8b49518b8fc8ea4f1c1b7d1113352180c","modified":1545993664349},{"_id":"public/programming/java/introduction/java-environment-mac/6-jdk-mac.png","hash":"cc0550022513036a612d666bab64f1876d703ec3","modified":1545993664349},{"_id":"public/programming/java/introduction/java-environment-mac/9-jdk-mac.png","hash":"1c9dbad3045f234695be69fb4c27c0cd53ab1918","modified":1545993664349},{"_id":"public/programming/java/introduction/java-environment-mac/10-jdk-mac.png","hash":"a058e42380742e3be7911c30ea4c54263f2e99e9","modified":1545993664349},{"_id":"public/programming/java/introduction/java-environment-mac/12-jdk-mac.png","hash":"79b6a623b06142723ea9dc4981f3ef12ff3bcd75","modified":1545993664349},{"_id":"public/programming/java/introduction/java-environment-mac/8-jdk-mac.png","hash":"52eacf47993855414045b0719196da9001ccb153","modified":1545993664349},{"_id":"public/programming/java/introduction/java-environment-mac/13-jdk-mac.png","hash":"aa4d7a93b28afb3424a5c107724b07cb9cbeed3d","modified":1545993664349},{"_id":"public/programming/java/introduction/java-environment-mac/7-jdk-mac.png","hash":"57310fc56a96be434f0ad69eb6387a82f54d0d5a","modified":1545993664349},{"_id":"public/programming/java/introduction/java-environment-mac/14-jdk-mac.png","hash":"4bc54995d9f778084a8b486634bc30793f1592f0","modified":1545993664349},{"_id":"public/programming/java/introduction/java-environment-mac/16-jdk-mac.png","hash":"5451e575e4bf08b384335bb070bb46817edad5bd","modified":1545993664349},{"_id":"public/programming/java/introduction/java-ide/java-ide-3.png","hash":"5616c391ba4e9a1341b4c6213758924b9e8124d1","modified":1545993664349},{"_id":"public/programming/java/introduction/java-ide/java-ide-7.png","hash":"db6fcb1e3350c32db0a5ad41400ee7e22023eed1","modified":1545993664349},{"_id":"public/programming/java/introduction/java-ide/java-ide-8.png","hash":"311e7f7643a2facb45dc3165c938af1bd84b28b7","modified":1545993664349},{"_id":"public/programming/java/introduction/java-ide/java-ide-5.png","hash":"627cfbad99d15a6962df90269eb9df896a6b6021","modified":1545993664349},{"_id":"public/programming/java/introduction/java-ide/java-ide-9.png","hash":"b7cb86602219d3609159f856c4449b7b85ae0aac","modified":1545993664350},{"_id":"public/programming/java/introduction/java-simple-example/java-simple-example-2.png","hash":"404e3de6764fab8a109a7efceabfb4bc6942fb30","modified":1545993664350},{"_id":"public/programming/java/introduction/java-simple-example/java-simple-example-3.png","hash":"9b42950df71c6cb651d76dec741a4549e4855fd5","modified":1545993664350},{"_id":"public/programming/java/introduction/java-ide/java-ide-6.png","hash":"bc4523f962ca5301e062c864166cf4cc2dfd6f34","modified":1545993664350},{"_id":"public/programming/java/introduction/java-simple-example/java-simple-example-1.png","hash":"7be12cd9b902847ed3ca8ce7a6f06139103f1180","modified":1545993664350},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1545993664372},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1545993664372},{"_id":"public/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1545993664372},{"_id":"public/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1545993664372},{"_id":"public/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1545993664372},{"_id":"public/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1545993664373},{"_id":"public/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1545993664373},{"_id":"public/programming/java/introduction/java-environment-windows/1-jdk-windows.png","hash":"8f643602c33a1a98b96e46349952dea4dae4981b","modified":1545993664373},{"_id":"public/programming/java/introduction/java-environment-mac/11-jdk-mac.png","hash":"09153cd9a58d2ea84f64bc4105fee92a0691c221","modified":1545993664373},{"_id":"public/programming/java/introduction/java-environment-mac/15-jdk-mac.png","hash":"115d45c94471ff20db11d361a5111108181273f9","modified":1545993664373},{"_id":"public/programming/java/introduction/java-ide/java-ide-4.png","hash":"41e84a42900e891648f3b37130a080606f531181","modified":1545993664373},{"_id":"public/js/main.min.js","hash":"8acf4480f8ab859423b8926b9b790c67b5a77276","modified":1545993664378},{"_id":"public/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1545993664378},{"_id":"public/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1545993664379},{"_id":"public/js/main.js","hash":"300b2e963683ced162e28afcd24ffc970fc23ac2","modified":1545993664379},{"_id":"public/img/wechat.jpg","hash":"c7887fd95a3383371b957667d4bfbc3c8c2cbe53","modified":1545993664379},{"_id":"public/img/alipay.jpg","hash":"d2e76219d3f688a805c9f30e004f48e79daf03ab","modified":1545993664379},{"_id":"public/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1545993664379},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1545993664379},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1545993664379},{"_id":"public/programming/java/introduction/java-started/java-started-1.png","hash":"83c77b655ea24647ff6c55c830924baa4e90b845","modified":1545993664379},{"_id":"public/programming/java/introduction/java-environment-mac/2-jdk-mac.png","hash":"bef4170c81af99efbdb89dafa2094fd127648889","modified":1545993664379},{"_id":"public/programming/java/introduction/java-environment-mac/3-jdk-mac.png","hash":"0b4bb944db5070a12b706f7ffaf451f5d558cfd9","modified":1545993664384},{"_id":"public/programming/java/introduction/java-ide/java-ide-2.png","hash":"9e81a827e3e5793b7f262df0eda5de1746c65899","modified":1545993664385},{"_id":"public/programming/java/introduction/java-environment-mac/4-jdk-mac.png","hash":"df019bad4cac078997c8a067a59d69be97a34adc","modified":1545993664389},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1545993664396},{"_id":"public/css/style.css","hash":"4f59712181405c963fe7e80740071022050bc096","modified":1545993664813},{"_id":"public/programming/java/introduction/java-ide/java-ide-1.png","hash":"ab6bb5ebfc5b292263824a72ba6eeca819f31f14","modified":1545993664816},{"_id":"public/programming/java/introduction/java-environment-mac/1-jdk-mac.png","hash":"4acf222e3a5d9728d358cd16a2f0d4300ae6700e","modified":1545993664816}],"Category":[{"name":"Hexo","_id":"cjq7rm5ko0004wu9k3p01mvob"},{"name":"阅读","_id":"cjq7rm5nd000iwu9kpejg8xaf"},{"name":"编程","_id":"cjq7rm5pq001ewu9k8jvdop1y"}],"Data":[{"_id":"menu","data":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}],"Page":[{"layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"layout: categories\ncomments: false\n---","date":"2018-12-25T06:49:05.170Z","updated":"2018-12-25T06:49:05.170Z","path":"categories/index.html","title":"","_id":"cjq7rm5ki0001wu9ko4rykmtg","content":"","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":""},{"layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"layout: tags\ncomments: false\n---","date":"2018-12-25T06:48:28.305Z","updated":"2018-12-25T06:48:28.305Z","path":"tags/index.html","title":"","_id":"cjq7rm5kl0003wu9k2vmvw0hx","content":"","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":""}],"Post":[{"home":true,"heroImage":"/hero.png","actionText":"开启阅读","actionLink":"/guide/","footer":"MIT Licensed | Copyright © 2018-present Frank","_content":"","source":"_posts/README.md","raw":"---\nhome: true\nheroImage: /hero.png\nactionText: 开启阅读\nactionLink: /guide/\nfooter: MIT Licensed | Copyright © 2018-present Frank\n---\n","slug":"README","published":1,"date":"2018-09-13T02:50:01.045Z","updated":"2018-11-11T07:36:06.722Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5kf0000wu9kcoed2to4","content":"","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":""},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ncategories:\n- Hexo\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-12-25T06:29:25.034Z","updated":"2018-12-26T10:34:32.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5kj0002wu9kz30r3imr","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"sidebar":false,"_content":"\n# Java核心技术\n\n::: tip 一言\n\n不忘初心，方得始终。\n\n:::\n\n## 说明\n\n本篇章内容主要介绍与Java相关的基础内容，包括Java的入门、基础部分，Java中的容器类，常用类的源码剖析，nio，并发容器，多线程等等。\n\n<LabelBlock>Java 开发入门篇  </LabelBlock>\n\n1. [Java开发起航篇](../java/introduction/java-started.md)\n2. [Java开发环境搭建——概念说明](../java/introduction/java-environment.md)\n3. [Java开发环境搭建——Windows篇](../java/introduction/java-environment-windows.md)\n4. [Java开发环境搭建——Mac篇](../java/introduction/java-environment-mac.md)\n5. [Java 集成开发环境—IDEA安装](../java/introduction/java-ide.md)\n6. [Java开发简介](../java/introduction/java-introduction.md)\n7. [Java简单示例](../java/introduction/java-simple-example.md)\n8. [Java中的package与import](../java/introduction/java-package.md)\n9. [Java入门篇小结](../java/introduction/java-primer-conclusion.md)\n\n<LabelBlock>Java 开发基础篇  </LabelBlock>\n\n1. [Java开发基础篇](../java/basic/java-basic.md)\n2. [Java程序基本结构](../java/basic/java-simple-structure.md)\n3. [Java变量](../java/basic/java-variable.md)\n4. [Java中的类与对象](../java/basic/java-class.md)\n5. Java中的注释\n6. 基本数据类型\n7. 运算符\n8. 字符串\n9. 输入与输出\n10. 流程控制\n11. 数组\n12. 类的组成\n13. 对象的创建与初始化\n14. 访问权限\n15. 类的封装\n16. 类的继承\n17. 类的多态\n18. Object类\n19. 枚举类\n20. 反射\n21. 接口\n22. 内部类\n23. 代理\n24. 异常\n25. 断言\n26. 日志\n27. 泛型\n28. 集合\n\n<LabelBlock>Java 开发进阶篇  </LabelBlock>\n\n1. Java开发进阶篇\n2. 线程\n3. 线程的生命周期\n4. 线程的同步\n5. 线程安全的集合\n6. 线程池\n7. 同步器\n8. JVM\n9. \n\n<LabelBlock>Java集合框架  </LabelBlock>\n\n[WeakHashMap源码详解](../java/collections/weakhashmap-code-detail.md)\n\n\n\n<LabelBlock>Java引用类型  </LabelBlock>\n\n1. [强引用、软引用、弱引用和虚引用深入探讨](../java/reference/four-kinds-of-reference.md)\n2. [强引用](../java/reference/strong-reference.md)\n3. [软引用](../java/reference/soft-reference.md)\n4. [弱引用](../java/reference/weak-reference.md)\n5. [虚引用](../java/reference/phantom-reference.md)\n6. [Reference源码详解](../java/reference/reference-code-detail.md)\n7. [ReferenceQueue源码详解](../java/reference/reference-queue-code-detail.md)\n8. [SoftReference源码详解](../java/reference/soft-reference-code-detail.md)\n9. [WeakReference源码详解](../java/reference/weak-reference-code-detail.md)\n10. [PhantomReference源码详解](../java/reference/phantom-reference-code-detail.md)\n11. [FinalReference 与 Finalizer 详解](../java/reference/final-reference-code-detail.md)\n12. [四种引用类型总结](../java/reference/reference-summary.md)\n\n","source":"_posts/java/README.md","raw":"---\nsidebar: false\n\n\n---\n\n# Java核心技术\n\n::: tip 一言\n\n不忘初心，方得始终。\n\n:::\n\n## 说明\n\n本篇章内容主要介绍与Java相关的基础内容，包括Java的入门、基础部分，Java中的容器类，常用类的源码剖析，nio，并发容器，多线程等等。\n\n<LabelBlock>Java 开发入门篇  </LabelBlock>\n\n1. [Java开发起航篇](../java/introduction/java-started.md)\n2. [Java开发环境搭建——概念说明](../java/introduction/java-environment.md)\n3. [Java开发环境搭建——Windows篇](../java/introduction/java-environment-windows.md)\n4. [Java开发环境搭建——Mac篇](../java/introduction/java-environment-mac.md)\n5. [Java 集成开发环境—IDEA安装](../java/introduction/java-ide.md)\n6. [Java开发简介](../java/introduction/java-introduction.md)\n7. [Java简单示例](../java/introduction/java-simple-example.md)\n8. [Java中的package与import](../java/introduction/java-package.md)\n9. [Java入门篇小结](../java/introduction/java-primer-conclusion.md)\n\n<LabelBlock>Java 开发基础篇  </LabelBlock>\n\n1. [Java开发基础篇](../java/basic/java-basic.md)\n2. [Java程序基本结构](../java/basic/java-simple-structure.md)\n3. [Java变量](../java/basic/java-variable.md)\n4. [Java中的类与对象](../java/basic/java-class.md)\n5. Java中的注释\n6. 基本数据类型\n7. 运算符\n8. 字符串\n9. 输入与输出\n10. 流程控制\n11. 数组\n12. 类的组成\n13. 对象的创建与初始化\n14. 访问权限\n15. 类的封装\n16. 类的继承\n17. 类的多态\n18. Object类\n19. 枚举类\n20. 反射\n21. 接口\n22. 内部类\n23. 代理\n24. 异常\n25. 断言\n26. 日志\n27. 泛型\n28. 集合\n\n<LabelBlock>Java 开发进阶篇  </LabelBlock>\n\n1. Java开发进阶篇\n2. 线程\n3. 线程的生命周期\n4. 线程的同步\n5. 线程安全的集合\n6. 线程池\n7. 同步器\n8. JVM\n9. \n\n<LabelBlock>Java集合框架  </LabelBlock>\n\n[WeakHashMap源码详解](../java/collections/weakhashmap-code-detail.md)\n\n\n\n<LabelBlock>Java引用类型  </LabelBlock>\n\n1. [强引用、软引用、弱引用和虚引用深入探讨](../java/reference/four-kinds-of-reference.md)\n2. [强引用](../java/reference/strong-reference.md)\n3. [软引用](../java/reference/soft-reference.md)\n4. [弱引用](../java/reference/weak-reference.md)\n5. [虚引用](../java/reference/phantom-reference.md)\n6. [Reference源码详解](../java/reference/reference-code-detail.md)\n7. [ReferenceQueue源码详解](../java/reference/reference-queue-code-detail.md)\n8. [SoftReference源码详解](../java/reference/soft-reference-code-detail.md)\n9. [WeakReference源码详解](../java/reference/weak-reference-code-detail.md)\n10. [PhantomReference源码详解](../java/reference/phantom-reference-code-detail.md)\n11. [FinalReference 与 Finalizer 详解](../java/reference/final-reference-code-detail.md)\n12. [四种引用类型总结](../java/reference/reference-summary.md)\n\n","slug":"java/README","published":1,"date":"2018-12-27T08:04:00.342Z","updated":"2018-12-27T08:04:00.342Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5mr0006wu9kzc77lhu6","content":"<h1 id=\"Java核心技术\"><a href=\"#Java核心技术\" class=\"headerlink\" title=\"Java核心技术\"></a>Java核心技术</h1><p>::: tip 一言</p>\n<p>不忘初心，方得始终。</p>\n<p>:::</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>本篇章内容主要介绍与Java相关的基础内容，包括Java的入门、基础部分，Java中的容器类，常用类的源码剖析，nio，并发容器，多线程等等。</p>\n<labelblock>Java 开发入门篇  </labelblock>\n\n<ol>\n<li><a href=\"../java/introduction/java-started.md\">Java开发起航篇</a></li>\n<li><a href=\"../java/introduction/java-environment.md\">Java开发环境搭建——概念说明</a></li>\n<li><a href=\"../java/introduction/java-environment-windows.md\">Java开发环境搭建——Windows篇</a></li>\n<li><a href=\"../java/introduction/java-environment-mac.md\">Java开发环境搭建——Mac篇</a></li>\n<li><a href=\"../java/introduction/java-ide.md\">Java 集成开发环境—IDEA安装</a></li>\n<li><a href=\"../java/introduction/java-introduction.md\">Java开发简介</a></li>\n<li><a href=\"../java/introduction/java-simple-example.md\">Java简单示例</a></li>\n<li><a href=\"../java/introduction/java-package.md\">Java中的package与import</a></li>\n<li><a href=\"../java/introduction/java-primer-conclusion.md\">Java入门篇小结</a></li>\n</ol>\n<labelblock>Java 开发基础篇  </labelblock>\n\n<ol>\n<li><a href=\"../java/basic/java-basic.md\">Java开发基础篇</a></li>\n<li><a href=\"../java/basic/java-simple-structure.md\">Java程序基本结构</a></li>\n<li><a href=\"../java/basic/java-variable.md\">Java变量</a></li>\n<li><a href=\"../java/basic/java-class.md\">Java中的类与对象</a></li>\n<li>Java中的注释</li>\n<li>基本数据类型</li>\n<li>运算符</li>\n<li>字符串</li>\n<li>输入与输出</li>\n<li>流程控制</li>\n<li>数组</li>\n<li>类的组成</li>\n<li>对象的创建与初始化</li>\n<li>访问权限</li>\n<li>类的封装</li>\n<li>类的继承</li>\n<li>类的多态</li>\n<li>Object类</li>\n<li>枚举类</li>\n<li>反射</li>\n<li>接口</li>\n<li>内部类</li>\n<li>代理</li>\n<li>异常</li>\n<li>断言</li>\n<li>日志</li>\n<li>泛型</li>\n<li>集合</li>\n</ol>\n<labelblock>Java 开发进阶篇  </labelblock>\n\n<ol>\n<li>Java开发进阶篇</li>\n<li>线程</li>\n<li>线程的生命周期</li>\n<li>线程的同步</li>\n<li>线程安全的集合</li>\n<li>线程池</li>\n<li>同步器</li>\n<li>JVM</li>\n<li></li>\n</ol>\n<labelblock>Java集合框架  </labelblock>\n\n<p><a href=\"../java/collections/weakhashmap-code-detail.md\">WeakHashMap源码详解</a></p>\n<labelblock>Java引用类型  </labelblock>\n\n<ol>\n<li><a href=\"../java/reference/four-kinds-of-reference.md\">强引用、软引用、弱引用和虚引用深入探讨</a></li>\n<li><a href=\"../java/reference/strong-reference.md\">强引用</a></li>\n<li><a href=\"../java/reference/soft-reference.md\">软引用</a></li>\n<li><a href=\"../java/reference/weak-reference.md\">弱引用</a></li>\n<li><a href=\"../java/reference/phantom-reference.md\">虚引用</a></li>\n<li><a href=\"../java/reference/reference-code-detail.md\">Reference源码详解</a></li>\n<li><a href=\"../java/reference/reference-queue-code-detail.md\">ReferenceQueue源码详解</a></li>\n<li><a href=\"../java/reference/soft-reference-code-detail.md\">SoftReference源码详解</a></li>\n<li><a href=\"../java/reference/weak-reference-code-detail.md\">WeakReference源码详解</a></li>\n<li><a href=\"../java/reference/phantom-reference-code-detail.md\">PhantomReference源码详解</a></li>\n<li><a href=\"../java/reference/final-reference-code-detail.md\">FinalReference 与 Finalizer 详解</a></li>\n<li><a href=\"../java/reference/reference-summary.md\">四种引用类型总结</a></li>\n</ol>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"Java核心技术\"><a href=\"#Java核心技术\" class=\"headerlink\" title=\"Java核心技术\"></a>Java核心技术</h1><p>::: tip 一言</p>\n<p>不忘初心，方得始终。</p>\n<p>:::</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>本篇章内容主要介绍与Java相关的基础内容，包括Java的入门、基础部分，Java中的容器类，常用类的源码剖析，nio，并发容器，多线程等等。</p>\n<labelblock>Java 开发入门篇  </labelblock>\n\n<ol>\n<li><a href=\"../java/introduction/java-started.md\">Java开发起航篇</a></li>\n<li><a href=\"../java/introduction/java-environment.md\">Java开发环境搭建——概念说明</a></li>\n<li><a href=\"../java/introduction/java-environment-windows.md\">Java开发环境搭建——Windows篇</a></li>\n<li><a href=\"../java/introduction/java-environment-mac.md\">Java开发环境搭建——Mac篇</a></li>\n<li><a href=\"../java/introduction/java-ide.md\">Java 集成开发环境—IDEA安装</a></li>\n<li><a href=\"../java/introduction/java-introduction.md\">Java开发简介</a></li>\n<li><a href=\"../java/introduction/java-simple-example.md\">Java简单示例</a></li>\n<li><a href=\"../java/introduction/java-package.md\">Java中的package与import</a></li>\n<li><a href=\"../java/introduction/java-primer-conclusion.md\">Java入门篇小结</a></li>\n</ol>\n<labelblock>Java 开发基础篇  </labelblock>\n\n<ol>\n<li><a href=\"../java/basic/java-basic.md\">Java开发基础篇</a></li>\n<li><a href=\"../java/basic/java-simple-structure.md\">Java程序基本结构</a></li>\n<li><a href=\"../java/basic/java-variable.md\">Java变量</a></li>\n<li><a href=\"../java/basic/java-class.md\">Java中的类与对象</a></li>\n<li>Java中的注释</li>\n<li>基本数据类型</li>\n<li>运算符</li>\n<li>字符串</li>\n<li>输入与输出</li>\n<li>流程控制</li>\n<li>数组</li>\n<li>类的组成</li>\n<li>对象的创建与初始化</li>\n<li>访问权限</li>\n<li>类的封装</li>\n<li>类的继承</li>\n<li>类的多态</li>\n<li>Object类</li>\n<li>枚举类</li>\n<li>反射</li>\n<li>接口</li>\n<li>内部类</li>\n<li>代理</li>\n<li>异常</li>\n<li>断言</li>\n<li>日志</li>\n<li>泛型</li>\n<li>集合</li>\n</ol>\n<labelblock>Java 开发进阶篇  </labelblock>\n\n<ol>\n<li>Java开发进阶篇</li>\n<li>线程</li>\n<li>线程的生命周期</li>\n<li>线程的同步</li>\n<li>线程安全的集合</li>\n<li>线程池</li>\n<li>同步器</li>\n<li>JVM</li>\n<li></li>\n</ol>\n<labelblock>Java集合框架  </labelblock>\n\n<p><a href=\"../java/collections/weakhashmap-code-detail.md\">WeakHashMap源码详解</a></p>\n<labelblock>Java引用类型  </labelblock>\n\n<ol>\n<li><a href=\"../java/reference/four-kinds-of-reference.md\">强引用、软引用、弱引用和虚引用深入探讨</a></li>\n<li><a href=\"../java/reference/strong-reference.md\">强引用</a></li>\n<li><a href=\"../java/reference/soft-reference.md\">软引用</a></li>\n<li><a href=\"../java/reference/weak-reference.md\">弱引用</a></li>\n<li><a href=\"../java/reference/phantom-reference.md\">虚引用</a></li>\n<li><a href=\"../java/reference/reference-code-detail.md\">Reference源码详解</a></li>\n<li><a href=\"../java/reference/reference-queue-code-detail.md\">ReferenceQueue源码详解</a></li>\n<li><a href=\"../java/reference/soft-reference-code-detail.md\">SoftReference源码详解</a></li>\n<li><a href=\"../java/reference/weak-reference-code-detail.md\">WeakReference源码详解</a></li>\n<li><a href=\"../java/reference/phantom-reference-code-detail.md\">PhantomReference源码详解</a></li>\n<li><a href=\"../java/reference/final-reference-code-detail.md\">FinalReference 与 Finalizer 详解</a></li>\n<li><a href=\"../java/reference/reference-summary.md\">四种引用类型总结</a></li>\n</ol>\n"},{"sidebar":false,"_content":"\n# 主页导航\n\n::: tip 一言\n生活需要一点仪式感和一点想象力。\n:::\n\n## 说明\n\n本wiki是用[vuepress](https://vuepress.vuejs.org/)搭建，风格比较简洁大方，逼格还可以，颇得我心。:stuck_out_tongue_closed_eyes:\n\n这个wiki主要是用来梳理总结自己的知识体系，顺便也记录一路走来的点滴，生活总需要记录些什么，不然回首的时候，记忆中空缺的。这个wiki看起来会很舒服，写起来也比较舒心，写的时候还会带有一点点仪式感，对自己写下的内容也会反复斟酌。顺便安利一款写markdown的工具——Typora，在mac和windows上都可以获得同样的使用体验，很赞。\n\n<img src=\"./8100.png\"/>\n\n---\n\n## 技术篇\n\n+ [Java核心技术](../java/README.md)\n+  [LeetCode题解](../leetcode/README.md)\n\n## 闲聊篇\n\n+  [读书笔记](../reading-notes/README.md)\n+  [生活随想](../life-thinking/README.md)\n\n\n\n----\n\n\n\n","source":"_posts/guide/README.md","raw":"---\nsidebar: false\n\n\n---\n\n# 主页导航\n\n::: tip 一言\n生活需要一点仪式感和一点想象力。\n:::\n\n## 说明\n\n本wiki是用[vuepress](https://vuepress.vuejs.org/)搭建，风格比较简洁大方，逼格还可以，颇得我心。:stuck_out_tongue_closed_eyes:\n\n这个wiki主要是用来梳理总结自己的知识体系，顺便也记录一路走来的点滴，生活总需要记录些什么，不然回首的时候，记忆中空缺的。这个wiki看起来会很舒服，写起来也比较舒心，写的时候还会带有一点点仪式感，对自己写下的内容也会反复斟酌。顺便安利一款写markdown的工具——Typora，在mac和windows上都可以获得同样的使用体验，很赞。\n\n<img src=\"./8100.png\"/>\n\n---\n\n## 技术篇\n\n+ [Java核心技术](../java/README.md)\n+  [LeetCode题解](../leetcode/README.md)\n\n## 闲聊篇\n\n+  [读书笔记](../reading-notes/README.md)\n+  [生活随想](../life-thinking/README.md)\n\n\n\n----\n\n\n\n","slug":"guide/README","published":1,"date":"2018-12-13T07:50:40.547Z","updated":"2018-12-17T06:39:34.937Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5mr0007wu9kgbm6ps73","content":"<h1 id=\"主页导航\"><a href=\"#主页导航\" class=\"headerlink\" title=\"主页导航\"></a>主页导航</h1><p>::: tip 一言<br>生活需要一点仪式感和一点想象力。<br>:::</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>本wiki是用<a href=\"https://vuepress.vuejs.org/\" target=\"_blank\" rel=\"noopener\">vuepress</a>搭建，风格比较简洁大方，逼格还可以，颇得我心。:stuck_out_tongue_closed_eyes:</p>\n<p>这个wiki主要是用来梳理总结自己的知识体系，顺便也记录一路走来的点滴，生活总需要记录些什么，不然回首的时候，记忆中空缺的。这个wiki看起来会很舒服，写起来也比较舒心，写的时候还会带有一点点仪式感，对自己写下的内容也会反复斟酌。顺便安利一款写markdown的工具——Typora，在mac和windows上都可以获得同样的使用体验，很赞。</p>\n<p><img src=\"./8100.png\"></p>\n<hr>\n<h2 id=\"技术篇\"><a href=\"#技术篇\" class=\"headerlink\" title=\"技术篇\"></a>技术篇</h2><ul>\n<li><a href=\"../java/README.md\">Java核心技术</a></li>\n<li><a href=\"../leetcode/README.md\">LeetCode题解</a></li>\n</ul>\n<h2 id=\"闲聊篇\"><a href=\"#闲聊篇\" class=\"headerlink\" title=\"闲聊篇\"></a>闲聊篇</h2><ul>\n<li><a href=\"../reading-notes/README.md\">读书笔记</a></li>\n<li><a href=\"../life-thinking/README.md\">生活随想</a></li>\n</ul>\n<hr>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"主页导航\"><a href=\"#主页导航\" class=\"headerlink\" title=\"主页导航\"></a>主页导航</h1><p>::: tip 一言<br>生活需要一点仪式感和一点想象力。<br>:::</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>本wiki是用<a href=\"https://vuepress.vuejs.org/\" target=\"_blank\" rel=\"noopener\">vuepress</a>搭建，风格比较简洁大方，逼格还可以，颇得我心。:stuck_out_tongue_closed_eyes:</p>\n<p>这个wiki主要是用来梳理总结自己的知识体系，顺便也记录一路走来的点滴，生活总需要记录些什么，不然回首的时候，记忆中空缺的。这个wiki看起来会很舒服，写起来也比较舒心，写的时候还会带有一点点仪式感，对自己写下的内容也会反复斟酌。顺便安利一款写markdown的工具——Typora，在mac和windows上都可以获得同样的使用体验，很赞。</p>\n<p><img src=\"./8100.png\"></p>\n<hr>\n<h2 id=\"技术篇\"><a href=\"#技术篇\" class=\"headerlink\" title=\"技术篇\"></a>技术篇</h2><ul>\n<li><a href=\"../java/README.md\">Java核心技术</a></li>\n<li><a href=\"../leetcode/README.md\">LeetCode题解</a></li>\n</ul>\n<h2 id=\"闲聊篇\"><a href=\"#闲聊篇\" class=\"headerlink\" title=\"闲聊篇\"></a>闲聊篇</h2><ul>\n<li><a href=\"../reading-notes/README.md\">读书笔记</a></li>\n<li><a href=\"../life-thinking/README.md\">生活随想</a></li>\n</ul>\n<hr>\n"},{"_content":"## <CustomHeader>Java技术篇</CustomHeader>\n\n\n\n::: tip 说明\n本篇章内容主要介绍Java的各类技术，包括Java的基础部分，容器类，常用类的源码剖析，并发容器，多线程等等。\n:::\n\n<LabelBlock>Java 开发入门篇  </LabelBlock>\n\n1. [Java开发起航篇](../java/introduction/java-started.md)\n2. [Java开发环境搭建——概念说明](../java/introduction/java-environment.md)\n3. [Java开发环境搭建——Windows篇](../java/introduction/java-environment-windows.md)\n4. [Java开发环境搭建——Mac篇](../java/introduction/java-environment-mac.md)\n5. [Java 集成开发环境—IDEA安装](../java/introduction/java-ide.md)\n6. [Java开发简介](../java/introduction/java-introduction.md)\n7. [Java简单示例](../java/introduction/java-simple-example.md)\n8. [Java中的package与import](../java/introduction/java-package.md)\n9. [Java入门篇小结](../java/introduction/java-primer-conclusion.md)\n\n<LabelBlock>Java 开发基础篇  </LabelBlock>\n\n1. [Java开发基础篇](../java/basic/java-basic.md)\n2. [Java程序基本结构](../java/basic/java-simple-structure.md)\n3. [Java变量](../java/basic/java-variable.md)\n4. [Java中的类与对象](../java/basic/java-class.md)\n5. Java中的注释\n6. 基本数据类型\n7. 运算符\n8. 字符串\n9. 输入与输出\n10. 流程控制\n11. 数组\n12. 类的组成\n13. 对象的创建与初始化\n14. 访问权限\n15. 类的封装\n16. 类的继承\n17. 类的多态\n18. Object类\n19. 枚举类\n20. 反射\n21. 接口\n22. 内部类\n23. 代理\n24. 异常\n25. 断言\n26. 日志\n27. 泛型\n28. 集合\n\n<LabelBlock>Java 开发进阶篇  </LabelBlock>\n\n1. Java开发进阶篇\n2. 线程\n3. 线程的生命周期\n4. 线程的同步\n5. 线程安全的集合\n6. 线程池\n7. 同步器\n8. JVM\n9. \n\n<LabelBlock>Java集合框架  </LabelBlock>\n\n[WeakHashMap源码详解](../java/collections/weakhashmap-code-detail.md)\n\n\n\n<LabelBlock>Java核心技术  </LabelBlock>\n\n[强引用、软引用、弱引用和虚引用深入探讨](../java/reference/four-kinds-of-reference.md)\n\n\n\n<LabelBlock>Java多线程  </LabelBlock>\n\n\n\n<LabelBlock>Java工具类  </LabelBlock>\n\n\n\n## <CustomHeader>Java Web 开发篇</CustomHeader>\n\n::: tip 说明\n本篇章内容主要介绍Java Web开发中经常使用到的技术和框架\n:::\n\n<LabelBlock>Java EE  </LabelBlock>\n\n\n\n<LabelBlock>Spring  </LabelBlock>\n\n\n\n<LabelBlock>Spring Boot  </LabelBlock>\n\n\n\n<LabelBlock>Spring  Security</LabelBlock>\n\n\n\n<LabelBlock>Spring  Webflux</LabelBlock>\n\n\n\n<LabelBlock>Mybatis  </LabelBlock>\n\n\n\n<LabelBlock>Hibernate  </LabelBlock>\n\n\n\n<LabelBlock>Spring  Data JPA</LabelBlock>\n\n\n\n## <CustomHeader>架构篇 </CustomHeader>\n\n::: tip 说明\n本篇章内容主要介绍架构相关的内容\n:::\n\n<LabelBlock>领域驱动设计（Domain-Driven-Design） </LabelBlock>\n\n1. 初识领域驱动\n\n<LabelBlock>分布式架构 </LabelBlock>\n\n## <CustomHeader>服务器 </CustomHeader>\n\n\n\n<LabelBlock>Netty  </LabelBlock>\n\n\n\n<LabelBlock>Tomcat  </LabelBlock>\n\n\n\n<LabelBlock>Jetty </LabelBlock>\n\n\n\n<LabelBlock>Nginx </LabelBlock>\n\n\n\n## <CustomHeader>RPC框架 </CustomHeader>\n\n\n\n<LabelBlock>Dubbo  </LabelBlock>\n\n\n\n<LabelBlock>Thrift  </LabelBlock>\n\n\n\n<LabelBlock>GRPC  </LabelBlock>\n\n\n\n<LabelBlock>SOFARPC  </LabelBlock>\n\n\n\n<LabelBlock>Motan  </LabelBlock>\n\n\n\n<LabelBlock>Ribbon  </LabelBlock>\n\n\n\n## <CustomHeader>消息中间件</CustomHeader>\n\n\n\n<LabelBlock>Kafka  </LabelBlock>\n\n\n\n<LabelBlock>RocketMQ  </LabelBlock>\n\n\n\n<LabelBlock>RabbitMQ  </LabelBlock>\n\n\n\n<LabelBlock>ActiveMQ  </LabelBlock>\n\n\n\n## <CustomHeader>分布式篇 </CustomHeader>\n\n\n\n<LabelBlock>zookeeper  </LabelBlock>\n\n\n\n<LabelBlock>分布式缓存  </LabelBlock>\n\n\n\n<LabelBlock>一致性哈希  </LabelBlock>\n\n\n\n<LabelBlock>MyCat  </LabelBlock>\n\n\n\n<LabelBlock>Sharding JDBC  </LabelBlock>\n\n\n\n<LabelBlock>Sharding Sphere  </LabelBlock>\n\n\n\n## <CustomHeader>链路跟踪 </CustomHeader>\n\n\n\n<LabelBlock>SkyWalking  </LabelBlock>\n\n\n\n<LabelBlock>Zipkin  </LabelBlock>\n\n\n\n<LabelBlock>Pinpoint </LabelBlock>\n\n\n\n<LabelBlock>CAT </LabelBlock>\n\n\n\n## <CustomHeader>配置中心 </CustomHeader>\n\n\n\n<LabelBlock>Apollo  </LabelBlock>\n\n\n\n<LabelBlock>Disconf  </LabelBlock>\n\n\n\n<LabelBlock>Spring Cloud Config </LabelBlock>\n\n\n\n## <CustomHeader>作业调度 </CustomHeader>\n\n\n\n<LabelBlock>Elastic Job Lite  </LabelBlock>\n\n\n\n<LabelBlock>Elastic Job Cloud  </LabelBlock>\n\n\n\n<LabelBlock>Quartz  </LabelBlock>\n\n\n\n<LabelBlock>XXL-Job  </LabelBlock>\n\n\n\n## <CustomHeader>数据库篇 </CustomHeader>\n\n\n\n<LabelBlock>Redis  </LabelBlock>\n\n\n\n<LabelBlock>Mysql  </LabelBlock>\n\n\n\n<LabelBlock>MongoDB  </LabelBlock>\n\n\n\n<LabelBlock>Memcached  </LabelBlock>\n\n\n\n<LabelBlock>Neo4J  </LabelBlock>\n\n\n\n<LabelBlock>TiDB  </LabelBlock>\n\n\n\n<LabelBlock>HikariCP  </LabelBlock>\n\n\n\n<LabelBlock>Druid  </LabelBlock>\n\n\n\n## <CustomHeader>数据结构与算法</CustomHeader>\n\n\n\n<LabelBlock>数据结构  </LabelBlock>\n\n\n\n<LabelBlock>算法  </LabelBlock>\n\n\n\n<LabelBlock>Leecode  </LabelBlock>\n\n\n\n## <CustomHeader>微服务篇 </CustomHeader>\n\n\n\n<LabelBlock>Dubbo  </LabelBlock>\n\n\n\n<LabelBlock>Spring Cloud </LabelBlock>\n\n\n\n## <CustomHeader>Devops</CustomHeader>\n\n\n\n<LabelBlock>Linux </LabelBlock>\n\n\n\n<LabelBlock>Nginx </LabelBlock>\n\n\n\n<LabelBlock>Docker </LabelBlock>\n\n\n\n<LabelBlock>Swarm </LabelBlock>\n\n\n\n<LabelBlock>kubernetes </LabelBlock>\n\n\n\n## <CustomHeader>持续集成与部署</CustomHeader>\n\n\n\n<LabelBlock>Jenkins </LabelBlock>\n\n\n\n<LabelBlock>TeamCity </LabelBlock>\n\n\n\n<LabelBlock>自动化测试 </LabelBlock>\n\n\n\n## <CustomHeader>ELK</CustomHeader>\n\n\n\n<LabelBlock>Lucene </LabelBlock>\n\n\n\n<LabelBlock>ElasticSearch </LabelBlock>\n\n\n\n<LabelBlock>Logstash </LabelBlock>\n\n\n\n<LabelBlock>Kibana </LabelBlock>\n\n<LabelBlock>Solr </LabelBlock>\n\n\n\n## <CustomHeader>数据可视化</CustomHeader>\n\n\n\n<LabelBlock>python  </LabelBlock>\n\n\n\n<LabelBlock>R </LabelBlock>\n\n\n\n## <CustomHeader>大数据</CustomHeader>\n\n\n\n<LabelBlock>Hadoop </LabelBlock>\n\n\n\n<LabelBlock>HBase  </LabelBlock>\n\n\n\n<LabelBlock>Hive  </LabelBlock>\n\n\n\n<LabelBlock>Spark  </LabelBlock>\n\n\n\n## <CustomHeader>流处理</CustomHeader>\n\n\n\n<LabelBlock>Spark Streaming </LabelBlock>\n\n\n\n<LabelBlock>Flink </LabelBlock>\n\n\n\n<LabelBlock>Storming </LabelBlock>\n\n\n\n## <CustomHeader>其它</CustomHeader>\n\n\n\n<LabelBlock>UML</LabelBlock>\n\n\n\n<img src=\"8101.png\"/>\n\n想要一起学习交流的小伙伴欢迎加QQ群：529253292","source":"_posts/guide/background-skill.md","raw":"## <CustomHeader>Java技术篇</CustomHeader>\n\n\n\n::: tip 说明\n本篇章内容主要介绍Java的各类技术，包括Java的基础部分，容器类，常用类的源码剖析，并发容器，多线程等等。\n:::\n\n<LabelBlock>Java 开发入门篇  </LabelBlock>\n\n1. [Java开发起航篇](../java/introduction/java-started.md)\n2. [Java开发环境搭建——概念说明](../java/introduction/java-environment.md)\n3. [Java开发环境搭建——Windows篇](../java/introduction/java-environment-windows.md)\n4. [Java开发环境搭建——Mac篇](../java/introduction/java-environment-mac.md)\n5. [Java 集成开发环境—IDEA安装](../java/introduction/java-ide.md)\n6. [Java开发简介](../java/introduction/java-introduction.md)\n7. [Java简单示例](../java/introduction/java-simple-example.md)\n8. [Java中的package与import](../java/introduction/java-package.md)\n9. [Java入门篇小结](../java/introduction/java-primer-conclusion.md)\n\n<LabelBlock>Java 开发基础篇  </LabelBlock>\n\n1. [Java开发基础篇](../java/basic/java-basic.md)\n2. [Java程序基本结构](../java/basic/java-simple-structure.md)\n3. [Java变量](../java/basic/java-variable.md)\n4. [Java中的类与对象](../java/basic/java-class.md)\n5. Java中的注释\n6. 基本数据类型\n7. 运算符\n8. 字符串\n9. 输入与输出\n10. 流程控制\n11. 数组\n12. 类的组成\n13. 对象的创建与初始化\n14. 访问权限\n15. 类的封装\n16. 类的继承\n17. 类的多态\n18. Object类\n19. 枚举类\n20. 反射\n21. 接口\n22. 内部类\n23. 代理\n24. 异常\n25. 断言\n26. 日志\n27. 泛型\n28. 集合\n\n<LabelBlock>Java 开发进阶篇  </LabelBlock>\n\n1. Java开发进阶篇\n2. 线程\n3. 线程的生命周期\n4. 线程的同步\n5. 线程安全的集合\n6. 线程池\n7. 同步器\n8. JVM\n9. \n\n<LabelBlock>Java集合框架  </LabelBlock>\n\n[WeakHashMap源码详解](../java/collections/weakhashmap-code-detail.md)\n\n\n\n<LabelBlock>Java核心技术  </LabelBlock>\n\n[强引用、软引用、弱引用和虚引用深入探讨](../java/reference/four-kinds-of-reference.md)\n\n\n\n<LabelBlock>Java多线程  </LabelBlock>\n\n\n\n<LabelBlock>Java工具类  </LabelBlock>\n\n\n\n## <CustomHeader>Java Web 开发篇</CustomHeader>\n\n::: tip 说明\n本篇章内容主要介绍Java Web开发中经常使用到的技术和框架\n:::\n\n<LabelBlock>Java EE  </LabelBlock>\n\n\n\n<LabelBlock>Spring  </LabelBlock>\n\n\n\n<LabelBlock>Spring Boot  </LabelBlock>\n\n\n\n<LabelBlock>Spring  Security</LabelBlock>\n\n\n\n<LabelBlock>Spring  Webflux</LabelBlock>\n\n\n\n<LabelBlock>Mybatis  </LabelBlock>\n\n\n\n<LabelBlock>Hibernate  </LabelBlock>\n\n\n\n<LabelBlock>Spring  Data JPA</LabelBlock>\n\n\n\n## <CustomHeader>架构篇 </CustomHeader>\n\n::: tip 说明\n本篇章内容主要介绍架构相关的内容\n:::\n\n<LabelBlock>领域驱动设计（Domain-Driven-Design） </LabelBlock>\n\n1. 初识领域驱动\n\n<LabelBlock>分布式架构 </LabelBlock>\n\n## <CustomHeader>服务器 </CustomHeader>\n\n\n\n<LabelBlock>Netty  </LabelBlock>\n\n\n\n<LabelBlock>Tomcat  </LabelBlock>\n\n\n\n<LabelBlock>Jetty </LabelBlock>\n\n\n\n<LabelBlock>Nginx </LabelBlock>\n\n\n\n## <CustomHeader>RPC框架 </CustomHeader>\n\n\n\n<LabelBlock>Dubbo  </LabelBlock>\n\n\n\n<LabelBlock>Thrift  </LabelBlock>\n\n\n\n<LabelBlock>GRPC  </LabelBlock>\n\n\n\n<LabelBlock>SOFARPC  </LabelBlock>\n\n\n\n<LabelBlock>Motan  </LabelBlock>\n\n\n\n<LabelBlock>Ribbon  </LabelBlock>\n\n\n\n## <CustomHeader>消息中间件</CustomHeader>\n\n\n\n<LabelBlock>Kafka  </LabelBlock>\n\n\n\n<LabelBlock>RocketMQ  </LabelBlock>\n\n\n\n<LabelBlock>RabbitMQ  </LabelBlock>\n\n\n\n<LabelBlock>ActiveMQ  </LabelBlock>\n\n\n\n## <CustomHeader>分布式篇 </CustomHeader>\n\n\n\n<LabelBlock>zookeeper  </LabelBlock>\n\n\n\n<LabelBlock>分布式缓存  </LabelBlock>\n\n\n\n<LabelBlock>一致性哈希  </LabelBlock>\n\n\n\n<LabelBlock>MyCat  </LabelBlock>\n\n\n\n<LabelBlock>Sharding JDBC  </LabelBlock>\n\n\n\n<LabelBlock>Sharding Sphere  </LabelBlock>\n\n\n\n## <CustomHeader>链路跟踪 </CustomHeader>\n\n\n\n<LabelBlock>SkyWalking  </LabelBlock>\n\n\n\n<LabelBlock>Zipkin  </LabelBlock>\n\n\n\n<LabelBlock>Pinpoint </LabelBlock>\n\n\n\n<LabelBlock>CAT </LabelBlock>\n\n\n\n## <CustomHeader>配置中心 </CustomHeader>\n\n\n\n<LabelBlock>Apollo  </LabelBlock>\n\n\n\n<LabelBlock>Disconf  </LabelBlock>\n\n\n\n<LabelBlock>Spring Cloud Config </LabelBlock>\n\n\n\n## <CustomHeader>作业调度 </CustomHeader>\n\n\n\n<LabelBlock>Elastic Job Lite  </LabelBlock>\n\n\n\n<LabelBlock>Elastic Job Cloud  </LabelBlock>\n\n\n\n<LabelBlock>Quartz  </LabelBlock>\n\n\n\n<LabelBlock>XXL-Job  </LabelBlock>\n\n\n\n## <CustomHeader>数据库篇 </CustomHeader>\n\n\n\n<LabelBlock>Redis  </LabelBlock>\n\n\n\n<LabelBlock>Mysql  </LabelBlock>\n\n\n\n<LabelBlock>MongoDB  </LabelBlock>\n\n\n\n<LabelBlock>Memcached  </LabelBlock>\n\n\n\n<LabelBlock>Neo4J  </LabelBlock>\n\n\n\n<LabelBlock>TiDB  </LabelBlock>\n\n\n\n<LabelBlock>HikariCP  </LabelBlock>\n\n\n\n<LabelBlock>Druid  </LabelBlock>\n\n\n\n## <CustomHeader>数据结构与算法</CustomHeader>\n\n\n\n<LabelBlock>数据结构  </LabelBlock>\n\n\n\n<LabelBlock>算法  </LabelBlock>\n\n\n\n<LabelBlock>Leecode  </LabelBlock>\n\n\n\n## <CustomHeader>微服务篇 </CustomHeader>\n\n\n\n<LabelBlock>Dubbo  </LabelBlock>\n\n\n\n<LabelBlock>Spring Cloud </LabelBlock>\n\n\n\n## <CustomHeader>Devops</CustomHeader>\n\n\n\n<LabelBlock>Linux </LabelBlock>\n\n\n\n<LabelBlock>Nginx </LabelBlock>\n\n\n\n<LabelBlock>Docker </LabelBlock>\n\n\n\n<LabelBlock>Swarm </LabelBlock>\n\n\n\n<LabelBlock>kubernetes </LabelBlock>\n\n\n\n## <CustomHeader>持续集成与部署</CustomHeader>\n\n\n\n<LabelBlock>Jenkins </LabelBlock>\n\n\n\n<LabelBlock>TeamCity </LabelBlock>\n\n\n\n<LabelBlock>自动化测试 </LabelBlock>\n\n\n\n## <CustomHeader>ELK</CustomHeader>\n\n\n\n<LabelBlock>Lucene </LabelBlock>\n\n\n\n<LabelBlock>ElasticSearch </LabelBlock>\n\n\n\n<LabelBlock>Logstash </LabelBlock>\n\n\n\n<LabelBlock>Kibana </LabelBlock>\n\n<LabelBlock>Solr </LabelBlock>\n\n\n\n## <CustomHeader>数据可视化</CustomHeader>\n\n\n\n<LabelBlock>python  </LabelBlock>\n\n\n\n<LabelBlock>R </LabelBlock>\n\n\n\n## <CustomHeader>大数据</CustomHeader>\n\n\n\n<LabelBlock>Hadoop </LabelBlock>\n\n\n\n<LabelBlock>HBase  </LabelBlock>\n\n\n\n<LabelBlock>Hive  </LabelBlock>\n\n\n\n<LabelBlock>Spark  </LabelBlock>\n\n\n\n## <CustomHeader>流处理</CustomHeader>\n\n\n\n<LabelBlock>Spark Streaming </LabelBlock>\n\n\n\n<LabelBlock>Flink </LabelBlock>\n\n\n\n<LabelBlock>Storming </LabelBlock>\n\n\n\n## <CustomHeader>其它</CustomHeader>\n\n\n\n<LabelBlock>UML</LabelBlock>\n\n\n\n<img src=\"8101.png\"/>\n\n想要一起学习交流的小伙伴欢迎加QQ群：529253292","slug":"guide/background-skill","published":1,"date":"2018-12-13T07:50:40.547Z","updated":"2018-12-13T07:50:40.547Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5ms0008wu9k3w80ubd4","content":"<h2 id=\"Java技术篇\"><a href=\"#Java技术篇\" class=\"headerlink\" title=\"Java技术篇\"></a><customheader>Java技术篇</customheader></h2><p>::: tip 说明<br>本篇章内容主要介绍Java的各类技术，包括Java的基础部分，容器类，常用类的源码剖析，并发容器，多线程等等。<br>:::</p>\n<labelblock>Java 开发入门篇  </labelblock>\n\n<ol>\n<li><a href=\"../java/introduction/java-started.md\">Java开发起航篇</a></li>\n<li><a href=\"../java/introduction/java-environment.md\">Java开发环境搭建——概念说明</a></li>\n<li><a href=\"../java/introduction/java-environment-windows.md\">Java开发环境搭建——Windows篇</a></li>\n<li><a href=\"../java/introduction/java-environment-mac.md\">Java开发环境搭建——Mac篇</a></li>\n<li><a href=\"../java/introduction/java-ide.md\">Java 集成开发环境—IDEA安装</a></li>\n<li><a href=\"../java/introduction/java-introduction.md\">Java开发简介</a></li>\n<li><a href=\"../java/introduction/java-simple-example.md\">Java简单示例</a></li>\n<li><a href=\"../java/introduction/java-package.md\">Java中的package与import</a></li>\n<li><a href=\"../java/introduction/java-primer-conclusion.md\">Java入门篇小结</a></li>\n</ol>\n<labelblock>Java 开发基础篇  </labelblock>\n\n<ol>\n<li><a href=\"../java/basic/java-basic.md\">Java开发基础篇</a></li>\n<li><a href=\"../java/basic/java-simple-structure.md\">Java程序基本结构</a></li>\n<li><a href=\"../java/basic/java-variable.md\">Java变量</a></li>\n<li><a href=\"../java/basic/java-class.md\">Java中的类与对象</a></li>\n<li>Java中的注释</li>\n<li>基本数据类型</li>\n<li>运算符</li>\n<li>字符串</li>\n<li>输入与输出</li>\n<li>流程控制</li>\n<li>数组</li>\n<li>类的组成</li>\n<li>对象的创建与初始化</li>\n<li>访问权限</li>\n<li>类的封装</li>\n<li>类的继承</li>\n<li>类的多态</li>\n<li>Object类</li>\n<li>枚举类</li>\n<li>反射</li>\n<li>接口</li>\n<li>内部类</li>\n<li>代理</li>\n<li>异常</li>\n<li>断言</li>\n<li>日志</li>\n<li>泛型</li>\n<li>集合</li>\n</ol>\n<labelblock>Java 开发进阶篇  </labelblock>\n\n<ol>\n<li>Java开发进阶篇</li>\n<li>线程</li>\n<li>线程的生命周期</li>\n<li>线程的同步</li>\n<li>线程安全的集合</li>\n<li>线程池</li>\n<li>同步器</li>\n<li>JVM</li>\n<li></li>\n</ol>\n<labelblock>Java集合框架  </labelblock>\n\n<p><a href=\"../java/collections/weakhashmap-code-detail.md\">WeakHashMap源码详解</a></p>\n<labelblock>Java核心技术  </labelblock>\n\n<p><a href=\"../java/reference/four-kinds-of-reference.md\">强引用、软引用、弱引用和虚引用深入探讨</a></p>\n<labelblock>Java多线程  </labelblock>\n\n\n\n<labelblock>Java工具类  </labelblock>\n\n\n\n<h2 id=\"Java-Web-开发篇\"><a href=\"#Java-Web-开发篇\" class=\"headerlink\" title=\"Java Web 开发篇\"></a><customheader>Java Web 开发篇</customheader></h2><p>::: tip 说明<br>本篇章内容主要介绍Java Web开发中经常使用到的技术和框架<br>:::</p>\n<labelblock>Java EE  </labelblock>\n\n\n\n<labelblock>Spring  </labelblock>\n\n\n\n<labelblock>Spring Boot  </labelblock>\n\n\n\n<labelblock>Spring  Security</labelblock>\n\n\n\n<labelblock>Spring  Webflux</labelblock>\n\n\n\n<labelblock>Mybatis  </labelblock>\n\n\n\n<labelblock>Hibernate  </labelblock>\n\n\n\n<labelblock>Spring  Data JPA</labelblock>\n\n\n\n<h2 id=\"架构篇\"><a href=\"#架构篇\" class=\"headerlink\" title=\"架构篇 \"></a><customheader>架构篇 </customheader></h2><p>::: tip 说明<br>本篇章内容主要介绍架构相关的内容<br>:::</p>\n<labelblock>领域驱动设计（Domain-Driven-Design） </labelblock>\n\n<ol>\n<li>初识领域驱动</li>\n</ol>\n<labelblock>分布式架构 </labelblock>\n\n<h2 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器 \"></a><customheader>服务器 </customheader></h2><labelblock>Netty  </labelblock>\n\n\n\n<labelblock>Tomcat  </labelblock>\n\n\n\n<labelblock>Jetty </labelblock>\n\n\n\n<labelblock>Nginx </labelblock>\n\n\n\n<h2 id=\"RPC框架\"><a href=\"#RPC框架\" class=\"headerlink\" title=\"RPC框架 \"></a><customheader>RPC框架 </customheader></h2><labelblock>Dubbo  </labelblock>\n\n\n\n<labelblock>Thrift  </labelblock>\n\n\n\n<labelblock>GRPC  </labelblock>\n\n\n\n<labelblock>SOFARPC  </labelblock>\n\n\n\n<labelblock>Motan  </labelblock>\n\n\n\n<labelblock>Ribbon  </labelblock>\n\n\n\n<h2 id=\"消息中间件\"><a href=\"#消息中间件\" class=\"headerlink\" title=\"消息中间件\"></a><customheader>消息中间件</customheader></h2><labelblock>Kafka  </labelblock>\n\n\n\n<labelblock>RocketMQ  </labelblock>\n\n\n\n<labelblock>RabbitMQ  </labelblock>\n\n\n\n<labelblock>ActiveMQ  </labelblock>\n\n\n\n<h2 id=\"分布式篇\"><a href=\"#分布式篇\" class=\"headerlink\" title=\"分布式篇 \"></a><customheader>分布式篇 </customheader></h2><labelblock>zookeeper  </labelblock>\n\n\n\n<labelblock>分布式缓存  </labelblock>\n\n\n\n<labelblock>一致性哈希  </labelblock>\n\n\n\n<labelblock>MyCat  </labelblock>\n\n\n\n<labelblock>Sharding JDBC  </labelblock>\n\n\n\n<labelblock>Sharding Sphere  </labelblock>\n\n\n\n<h2 id=\"链路跟踪\"><a href=\"#链路跟踪\" class=\"headerlink\" title=\"链路跟踪 \"></a><customheader>链路跟踪 </customheader></h2><labelblock>SkyWalking  </labelblock>\n\n\n\n<labelblock>Zipkin  </labelblock>\n\n\n\n<labelblock>Pinpoint </labelblock>\n\n\n\n<labelblock>CAT </labelblock>\n\n\n\n<h2 id=\"配置中心\"><a href=\"#配置中心\" class=\"headerlink\" title=\"配置中心 \"></a><customheader>配置中心 </customheader></h2><labelblock>Apollo  </labelblock>\n\n\n\n<labelblock>Disconf  </labelblock>\n\n\n\n<labelblock>Spring Cloud Config </labelblock>\n\n\n\n<h2 id=\"作业调度\"><a href=\"#作业调度\" class=\"headerlink\" title=\"作业调度 \"></a><customheader>作业调度 </customheader></h2><labelblock>Elastic Job Lite  </labelblock>\n\n\n\n<labelblock>Elastic Job Cloud  </labelblock>\n\n\n\n<labelblock>Quartz  </labelblock>\n\n\n\n<labelblock>XXL-Job  </labelblock>\n\n\n\n<h2 id=\"数据库篇\"><a href=\"#数据库篇\" class=\"headerlink\" title=\"数据库篇 \"></a><customheader>数据库篇 </customheader></h2><labelblock>Redis  </labelblock>\n\n\n\n<labelblock>Mysql  </labelblock>\n\n\n\n<labelblock>MongoDB  </labelblock>\n\n\n\n<labelblock>Memcached  </labelblock>\n\n\n\n<labelblock>Neo4J  </labelblock>\n\n\n\n<labelblock>TiDB  </labelblock>\n\n\n\n<labelblock>HikariCP  </labelblock>\n\n\n\n<labelblock>Druid  </labelblock>\n\n\n\n<h2 id=\"数据结构与算法\"><a href=\"#数据结构与算法\" class=\"headerlink\" title=\"数据结构与算法\"></a><customheader>数据结构与算法</customheader></h2><labelblock>数据结构  </labelblock>\n\n\n\n<labelblock>算法  </labelblock>\n\n\n\n<labelblock>Leecode  </labelblock>\n\n\n\n<h2 id=\"微服务篇\"><a href=\"#微服务篇\" class=\"headerlink\" title=\"微服务篇 \"></a><customheader>微服务篇 </customheader></h2><labelblock>Dubbo  </labelblock>\n\n\n\n<labelblock>Spring Cloud </labelblock>\n\n\n\n<h2 id=\"Devops\"><a href=\"#Devops\" class=\"headerlink\" title=\"Devops\"></a><customheader>Devops</customheader></h2><labelblock>Linux </labelblock>\n\n\n\n<labelblock>Nginx </labelblock>\n\n\n\n<labelblock>Docker </labelblock>\n\n\n\n<labelblock>Swarm </labelblock>\n\n\n\n<labelblock>kubernetes </labelblock>\n\n\n\n<h2 id=\"持续集成与部署\"><a href=\"#持续集成与部署\" class=\"headerlink\" title=\"持续集成与部署\"></a><customheader>持续集成与部署</customheader></h2><labelblock>Jenkins </labelblock>\n\n\n\n<labelblock>TeamCity </labelblock>\n\n\n\n<labelblock>自动化测试 </labelblock>\n\n\n\n<h2 id=\"ELK\"><a href=\"#ELK\" class=\"headerlink\" title=\"ELK\"></a><customheader>ELK</customheader></h2><labelblock>Lucene </labelblock>\n\n\n\n<labelblock>ElasticSearch </labelblock>\n\n\n\n<labelblock>Logstash </labelblock>\n\n\n\n<labelblock>Kibana </labelblock>\n\n<labelblock>Solr </labelblock>\n\n\n\n<h2 id=\"数据可视化\"><a href=\"#数据可视化\" class=\"headerlink\" title=\"数据可视化\"></a><customheader>数据可视化</customheader></h2><labelblock>python  </labelblock>\n\n\n\n<labelblock>R </labelblock>\n\n\n\n<h2 id=\"大数据\"><a href=\"#大数据\" class=\"headerlink\" title=\"大数据\"></a><customheader>大数据</customheader></h2><labelblock>Hadoop </labelblock>\n\n\n\n<labelblock>HBase  </labelblock>\n\n\n\n<labelblock>Hive  </labelblock>\n\n\n\n<labelblock>Spark  </labelblock>\n\n\n\n<h2 id=\"流处理\"><a href=\"#流处理\" class=\"headerlink\" title=\"流处理\"></a><customheader>流处理</customheader></h2><labelblock>Spark Streaming </labelblock>\n\n\n\n<labelblock>Flink </labelblock>\n\n\n\n<labelblock>Storming </labelblock>\n\n\n\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a><customheader>其它</customheader></h2><labelblock>UML</labelblock>\n\n\n\n<p><img src=\"8101.png\"></p>\n<p>想要一起学习交流的小伙伴欢迎加QQ群：529253292</p>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h2 id=\"Java技术篇\"><a href=\"#Java技术篇\" class=\"headerlink\" title=\"Java技术篇\"></a><customheader>Java技术篇</customheader></h2><p>::: tip 说明<br>本篇章内容主要介绍Java的各类技术，包括Java的基础部分，容器类，常用类的源码剖析，并发容器，多线程等等。<br>:::</p>\n<labelblock>Java 开发入门篇  </labelblock>\n\n<ol>\n<li><a href=\"../java/introduction/java-started.md\">Java开发起航篇</a></li>\n<li><a href=\"../java/introduction/java-environment.md\">Java开发环境搭建——概念说明</a></li>\n<li><a href=\"../java/introduction/java-environment-windows.md\">Java开发环境搭建——Windows篇</a></li>\n<li><a href=\"../java/introduction/java-environment-mac.md\">Java开发环境搭建——Mac篇</a></li>\n<li><a href=\"../java/introduction/java-ide.md\">Java 集成开发环境—IDEA安装</a></li>\n<li><a href=\"../java/introduction/java-introduction.md\">Java开发简介</a></li>\n<li><a href=\"../java/introduction/java-simple-example.md\">Java简单示例</a></li>\n<li><a href=\"../java/introduction/java-package.md\">Java中的package与import</a></li>\n<li><a href=\"../java/introduction/java-primer-conclusion.md\">Java入门篇小结</a></li>\n</ol>\n<labelblock>Java 开发基础篇  </labelblock>\n\n<ol>\n<li><a href=\"../java/basic/java-basic.md\">Java开发基础篇</a></li>\n<li><a href=\"../java/basic/java-simple-structure.md\">Java程序基本结构</a></li>\n<li><a href=\"../java/basic/java-variable.md\">Java变量</a></li>\n<li><a href=\"../java/basic/java-class.md\">Java中的类与对象</a></li>\n<li>Java中的注释</li>\n<li>基本数据类型</li>\n<li>运算符</li>\n<li>字符串</li>\n<li>输入与输出</li>\n<li>流程控制</li>\n<li>数组</li>\n<li>类的组成</li>\n<li>对象的创建与初始化</li>\n<li>访问权限</li>\n<li>类的封装</li>\n<li>类的继承</li>\n<li>类的多态</li>\n<li>Object类</li>\n<li>枚举类</li>\n<li>反射</li>\n<li>接口</li>\n<li>内部类</li>\n<li>代理</li>\n<li>异常</li>\n<li>断言</li>\n<li>日志</li>\n<li>泛型</li>\n<li>集合</li>\n</ol>\n<labelblock>Java 开发进阶篇  </labelblock>\n\n<ol>\n<li>Java开发进阶篇</li>\n<li>线程</li>\n<li>线程的生命周期</li>\n<li>线程的同步</li>\n<li>线程安全的集合</li>\n<li>线程池</li>\n<li>同步器</li>\n<li>JVM</li>\n<li></li>\n</ol>\n<labelblock>Java集合框架  </labelblock>\n\n<p><a href=\"../java/collections/weakhashmap-code-detail.md\">WeakHashMap源码详解</a></p>\n<labelblock>Java核心技术  </labelblock>\n\n<p><a href=\"../java/reference/four-kinds-of-reference.md\">强引用、软引用、弱引用和虚引用深入探讨</a></p>\n<labelblock>Java多线程  </labelblock>\n\n\n\n<labelblock>Java工具类  </labelblock>\n\n\n\n<h2 id=\"Java-Web-开发篇\"><a href=\"#Java-Web-开发篇\" class=\"headerlink\" title=\"Java Web 开发篇\"></a><customheader>Java Web 开发篇</customheader></h2><p>::: tip 说明<br>本篇章内容主要介绍Java Web开发中经常使用到的技术和框架<br>:::</p>\n<labelblock>Java EE  </labelblock>\n\n\n\n<labelblock>Spring  </labelblock>\n\n\n\n<labelblock>Spring Boot  </labelblock>\n\n\n\n<labelblock>Spring  Security</labelblock>\n\n\n\n<labelblock>Spring  Webflux</labelblock>\n\n\n\n<labelblock>Mybatis  </labelblock>\n\n\n\n<labelblock>Hibernate  </labelblock>\n\n\n\n<labelblock>Spring  Data JPA</labelblock>\n\n\n\n<h2 id=\"架构篇\"><a href=\"#架构篇\" class=\"headerlink\" title=\"架构篇 \"></a><customheader>架构篇 </customheader></h2><p>::: tip 说明<br>本篇章内容主要介绍架构相关的内容<br>:::</p>\n<labelblock>领域驱动设计（Domain-Driven-Design） </labelblock>\n\n<ol>\n<li>初识领域驱动</li>\n</ol>\n<labelblock>分布式架构 </labelblock>\n\n<h2 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器 \"></a><customheader>服务器 </customheader></h2><labelblock>Netty  </labelblock>\n\n\n\n<labelblock>Tomcat  </labelblock>\n\n\n\n<labelblock>Jetty </labelblock>\n\n\n\n<labelblock>Nginx </labelblock>\n\n\n\n<h2 id=\"RPC框架\"><a href=\"#RPC框架\" class=\"headerlink\" title=\"RPC框架 \"></a><customheader>RPC框架 </customheader></h2><labelblock>Dubbo  </labelblock>\n\n\n\n<labelblock>Thrift  </labelblock>\n\n\n\n<labelblock>GRPC  </labelblock>\n\n\n\n<labelblock>SOFARPC  </labelblock>\n\n\n\n<labelblock>Motan  </labelblock>\n\n\n\n<labelblock>Ribbon  </labelblock>\n\n\n\n<h2 id=\"消息中间件\"><a href=\"#消息中间件\" class=\"headerlink\" title=\"消息中间件\"></a><customheader>消息中间件</customheader></h2><labelblock>Kafka  </labelblock>\n\n\n\n<labelblock>RocketMQ  </labelblock>\n\n\n\n<labelblock>RabbitMQ  </labelblock>\n\n\n\n<labelblock>ActiveMQ  </labelblock>\n\n\n\n<h2 id=\"分布式篇\"><a href=\"#分布式篇\" class=\"headerlink\" title=\"分布式篇 \"></a><customheader>分布式篇 </customheader></h2><labelblock>zookeeper  </labelblock>\n\n\n\n<labelblock>分布式缓存  </labelblock>\n\n\n\n<labelblock>一致性哈希  </labelblock>\n\n\n\n<labelblock>MyCat  </labelblock>\n\n\n\n<labelblock>Sharding JDBC  </labelblock>\n\n\n\n<labelblock>Sharding Sphere  </labelblock>\n\n\n\n<h2 id=\"链路跟踪\"><a href=\"#链路跟踪\" class=\"headerlink\" title=\"链路跟踪 \"></a><customheader>链路跟踪 </customheader></h2><labelblock>SkyWalking  </labelblock>\n\n\n\n<labelblock>Zipkin  </labelblock>\n\n\n\n<labelblock>Pinpoint </labelblock>\n\n\n\n<labelblock>CAT </labelblock>\n\n\n\n<h2 id=\"配置中心\"><a href=\"#配置中心\" class=\"headerlink\" title=\"配置中心 \"></a><customheader>配置中心 </customheader></h2><labelblock>Apollo  </labelblock>\n\n\n\n<labelblock>Disconf  </labelblock>\n\n\n\n<labelblock>Spring Cloud Config </labelblock>\n\n\n\n<h2 id=\"作业调度\"><a href=\"#作业调度\" class=\"headerlink\" title=\"作业调度 \"></a><customheader>作业调度 </customheader></h2><labelblock>Elastic Job Lite  </labelblock>\n\n\n\n<labelblock>Elastic Job Cloud  </labelblock>\n\n\n\n<labelblock>Quartz  </labelblock>\n\n\n\n<labelblock>XXL-Job  </labelblock>\n\n\n\n<h2 id=\"数据库篇\"><a href=\"#数据库篇\" class=\"headerlink\" title=\"数据库篇 \"></a><customheader>数据库篇 </customheader></h2><labelblock>Redis  </labelblock>\n\n\n\n<labelblock>Mysql  </labelblock>\n\n\n\n<labelblock>MongoDB  </labelblock>\n\n\n\n<labelblock>Memcached  </labelblock>\n\n\n\n<labelblock>Neo4J  </labelblock>\n\n\n\n<labelblock>TiDB  </labelblock>\n\n\n\n<labelblock>HikariCP  </labelblock>\n\n\n\n<labelblock>Druid  </labelblock>\n\n\n\n<h2 id=\"数据结构与算法\"><a href=\"#数据结构与算法\" class=\"headerlink\" title=\"数据结构与算法\"></a><customheader>数据结构与算法</customheader></h2><labelblock>数据结构  </labelblock>\n\n\n\n<labelblock>算法  </labelblock>\n\n\n\n<labelblock>Leecode  </labelblock>\n\n\n\n<h2 id=\"微服务篇\"><a href=\"#微服务篇\" class=\"headerlink\" title=\"微服务篇 \"></a><customheader>微服务篇 </customheader></h2><labelblock>Dubbo  </labelblock>\n\n\n\n<labelblock>Spring Cloud </labelblock>\n\n\n\n<h2 id=\"Devops\"><a href=\"#Devops\" class=\"headerlink\" title=\"Devops\"></a><customheader>Devops</customheader></h2><labelblock>Linux </labelblock>\n\n\n\n<labelblock>Nginx </labelblock>\n\n\n\n<labelblock>Docker </labelblock>\n\n\n\n<labelblock>Swarm </labelblock>\n\n\n\n<labelblock>kubernetes </labelblock>\n\n\n\n<h2 id=\"持续集成与部署\"><a href=\"#持续集成与部署\" class=\"headerlink\" title=\"持续集成与部署\"></a><customheader>持续集成与部署</customheader></h2><labelblock>Jenkins </labelblock>\n\n\n\n<labelblock>TeamCity </labelblock>\n\n\n\n<labelblock>自动化测试 </labelblock>\n\n\n\n<h2 id=\"ELK\"><a href=\"#ELK\" class=\"headerlink\" title=\"ELK\"></a><customheader>ELK</customheader></h2><labelblock>Lucene </labelblock>\n\n\n\n<labelblock>ElasticSearch </labelblock>\n\n\n\n<labelblock>Logstash </labelblock>\n\n\n\n<labelblock>Kibana </labelblock>\n\n<labelblock>Solr </labelblock>\n\n\n\n<h2 id=\"数据可视化\"><a href=\"#数据可视化\" class=\"headerlink\" title=\"数据可视化\"></a><customheader>数据可视化</customheader></h2><labelblock>python  </labelblock>\n\n\n\n<labelblock>R </labelblock>\n\n\n\n<h2 id=\"大数据\"><a href=\"#大数据\" class=\"headerlink\" title=\"大数据\"></a><customheader>大数据</customheader></h2><labelblock>Hadoop </labelblock>\n\n\n\n<labelblock>HBase  </labelblock>\n\n\n\n<labelblock>Hive  </labelblock>\n\n\n\n<labelblock>Spark  </labelblock>\n\n\n\n<h2 id=\"流处理\"><a href=\"#流处理\" class=\"headerlink\" title=\"流处理\"></a><customheader>流处理</customheader></h2><labelblock>Spark Streaming </labelblock>\n\n\n\n<labelblock>Flink </labelblock>\n\n\n\n<labelblock>Storming </labelblock>\n\n\n\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a><customheader>其它</customheader></h2><labelblock>UML</labelblock>\n\n\n\n<p><img src=\"8101.png\"></p>\n<p>想要一起学习交流的小伙伴欢迎加QQ群：529253292</p>\n"},{"prev":"README","next":false,"_content":"\n# Design-Linked-List\n\n[LeetCode链接](https://leetcode.com/explore/learn/card/linked-list/209/singly-linked-list/1290/)\n\n## 要求\n\nDesign your implementation of the linked list. You can choose to use the singly linked list or the doubly linked list. A node in a singly linked list should have two attributes: `val` and `next`. `val` is the value of the current node, and `next` is a pointer/reference to the next node. If you want to use the doubly linked list, you will need one more attribute `prev` to indicate the previous node in the linked list. Assume all nodes in the linked list are 0-indexed.\n\nImplement these functions in your linked list class:\n\n- get(index) : Get the value of the `index`-th node in the linked list. If the index is invalid, return `-1`.\n- addAtHead(val) : Add a node of value `val` before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.\n- addAtTail(val) : Append a node of value `val` to the last element of the linked list.\n- addAtIndex(index, val) : Add a node of value `val` before the `index`-th node in the linked list. If `index` equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.\n- deleteAtIndex(index) : Delete the `index`-th node in the linked list, if the index is valid.\n\n**Example:**\n\n```\nMyLinkedList linkedList = new MyLinkedList();\nlinkedList.addAtHead(1);\nlinkedList.addAtTail(3);\nlinkedList.addAtIndex(1, 2);  // linked list becomes 1->2->3\nlinkedList.get(1);            // returns 2\nlinkedList.deleteAtIndex(1);  // now the linked list is 1->3\nlinkedList.get(1);            // returns 3\n```\n\n**Note:**\n\n- All values will be in the range of `[1, 1000]`.\n- The number of operations will be in the range of `[1, 1000]`.\n- Please do not use the built-in LinkedList library.\n\n## 分析","source":"_posts/leetcode/Design-Linked-List.md","raw":"---\nprev: README\nnext: false\n---\n\n# Design-Linked-List\n\n[LeetCode链接](https://leetcode.com/explore/learn/card/linked-list/209/singly-linked-list/1290/)\n\n## 要求\n\nDesign your implementation of the linked list. You can choose to use the singly linked list or the doubly linked list. A node in a singly linked list should have two attributes: `val` and `next`. `val` is the value of the current node, and `next` is a pointer/reference to the next node. If you want to use the doubly linked list, you will need one more attribute `prev` to indicate the previous node in the linked list. Assume all nodes in the linked list are 0-indexed.\n\nImplement these functions in your linked list class:\n\n- get(index) : Get the value of the `index`-th node in the linked list. If the index is invalid, return `-1`.\n- addAtHead(val) : Add a node of value `val` before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.\n- addAtTail(val) : Append a node of value `val` to the last element of the linked list.\n- addAtIndex(index, val) : Add a node of value `val` before the `index`-th node in the linked list. If `index` equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.\n- deleteAtIndex(index) : Delete the `index`-th node in the linked list, if the index is valid.\n\n**Example:**\n\n```\nMyLinkedList linkedList = new MyLinkedList();\nlinkedList.addAtHead(1);\nlinkedList.addAtTail(3);\nlinkedList.addAtIndex(1, 2);  // linked list becomes 1->2->3\nlinkedList.get(1);            // returns 2\nlinkedList.deleteAtIndex(1);  // now the linked list is 1->3\nlinkedList.get(1);            // returns 3\n```\n\n**Note:**\n\n- All values will be in the range of `[1, 1000]`.\n- The number of operations will be in the range of `[1, 1000]`.\n- Please do not use the built-in LinkedList library.\n\n## 分析","slug":"leetcode/Design-Linked-List","published":1,"date":"2018-12-14T09:39:37.062Z","updated":"2018-12-14T09:51:01.638Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5mt0009wu9kiat2fw6m","content":"<h1 id=\"Design-Linked-List\"><a href=\"#Design-Linked-List\" class=\"headerlink\" title=\"Design-Linked-List\"></a>Design-Linked-List</h1><p><a href=\"https://leetcode.com/explore/learn/card/linked-list/209/singly-linked-list/1290/\" target=\"_blank\" rel=\"noopener\">LeetCode链接</a></p>\n<h2 id=\"要求\"><a href=\"#要求\" class=\"headerlink\" title=\"要求\"></a>要求</h2><p>Design your implementation of the linked list. You can choose to use the singly linked list or the doubly linked list. A node in a singly linked list should have two attributes: <code>val</code> and <code>next</code>. <code>val</code> is the value of the current node, and <code>next</code> is a pointer/reference to the next node. If you want to use the doubly linked list, you will need one more attribute <code>prev</code> to indicate the previous node in the linked list. Assume all nodes in the linked list are 0-indexed.</p>\n<p>Implement these functions in your linked list class:</p>\n<ul>\n<li>get(index) : Get the value of the <code>index</code>-th node in the linked list. If the index is invalid, return <code>-1</code>.</li>\n<li>addAtHead(val) : Add a node of value <code>val</code> before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.</li>\n<li>addAtTail(val) : Append a node of value <code>val</code> to the last element of the linked list.</li>\n<li>addAtIndex(index, val) : Add a node of value <code>val</code> before the <code>index</code>-th node in the linked list. If <code>index</code> equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.</li>\n<li>deleteAtIndex(index) : Delete the <code>index</code>-th node in the linked list, if the index is valid.</li>\n</ul>\n<p><strong>Example:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyLinkedList linkedList = new MyLinkedList();</span><br><span class=\"line\">linkedList.addAtHead(1);</span><br><span class=\"line\">linkedList.addAtTail(3);</span><br><span class=\"line\">linkedList.addAtIndex(1, 2);  // linked list becomes 1-&gt;2-&gt;3</span><br><span class=\"line\">linkedList.get(1);            // returns 2</span><br><span class=\"line\">linkedList.deleteAtIndex(1);  // now the linked list is 1-&gt;3</span><br><span class=\"line\">linkedList.get(1);            // returns 3</span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong></p>\n<ul>\n<li>All values will be in the range of <code>[1, 1000]</code>.</li>\n<li>The number of operations will be in the range of <code>[1, 1000]</code>.</li>\n<li>Please do not use the built-in LinkedList library.</li>\n</ul>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2>","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"Design-Linked-List\"><a href=\"#Design-Linked-List\" class=\"headerlink\" title=\"Design-Linked-List\"></a>Design-Linked-List</h1><p><a href=\"https://leetcode.com/explore/learn/card/linked-list/209/singly-linked-list/1290/\" target=\"_blank\" rel=\"noopener\">LeetCode链接</a></p>\n<h2 id=\"要求\"><a href=\"#要求\" class=\"headerlink\" title=\"要求\"></a>要求</h2><p>Design your implementation of the linked list. You can choose to use the singly linked list or the doubly linked list. A node in a singly linked list should have two attributes: <code>val</code> and <code>next</code>. <code>val</code> is the value of the current node, and <code>next</code> is a pointer/reference to the next node. If you want to use the doubly linked list, you will need one more attribute <code>prev</code> to indicate the previous node in the linked list. Assume all nodes in the linked list are 0-indexed.</p>\n<p>Implement these functions in your linked list class:</p>\n<ul>\n<li>get(index) : Get the value of the <code>index</code>-th node in the linked list. If the index is invalid, return <code>-1</code>.</li>\n<li>addAtHead(val) : Add a node of value <code>val</code> before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.</li>\n<li>addAtTail(val) : Append a node of value <code>val</code> to the last element of the linked list.</li>\n<li>addAtIndex(index, val) : Add a node of value <code>val</code> before the <code>index</code>-th node in the linked list. If <code>index</code> equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.</li>\n<li>deleteAtIndex(index) : Delete the <code>index</code>-th node in the linked list, if the index is valid.</li>\n</ul>\n<p><strong>Example:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyLinkedList linkedList = new MyLinkedList();</span><br><span class=\"line\">linkedList.addAtHead(1);</span><br><span class=\"line\">linkedList.addAtTail(3);</span><br><span class=\"line\">linkedList.addAtIndex(1, 2);  // linked list becomes 1-&gt;2-&gt;3</span><br><span class=\"line\">linkedList.get(1);            // returns 2</span><br><span class=\"line\">linkedList.deleteAtIndex(1);  // now the linked list is 1-&gt;3</span><br><span class=\"line\">linkedList.get(1);            // returns 3</span><br></pre></td></tr></table></figure>\n<p><strong>Note:</strong></p>\n<ul>\n<li>All values will be in the range of <code>[1, 1000]</code>.</li>\n<li>The number of operations will be in the range of <code>[1, 1000]</code>.</li>\n<li>Please do not use the built-in LinkedList library.</li>\n</ul>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2>"},{"sidebar":false,"_content":"\n# 生活随想\n\n","source":"_posts/life-thinking/README.md","raw":"---\nsidebar: false\n\n---\n\n# 生活随想\n\n","slug":"life-thinking/README","published":1,"date":"2018-12-13T07:57:34.312Z","updated":"2018-12-14T09:29:45.247Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5mw000awu9kxi6m05be","content":"<h1 id=\"生活随想\"><a href=\"#生活随想\" class=\"headerlink\" title=\"生活随想\"></a>生活随想</h1>","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"生活随想\"><a href=\"#生活随想\" class=\"headerlink\" title=\"生活随想\"></a>生活随想</h1>"},{"prev":false,"next":"Design-Linked-List","_content":"\n# LeetCode 题解\n\n今天开始每天刷一道LeetCode题，补一补算法基础。\n\n## 题解列表\n\n+ [Design-Linked-List(设计链表)](./Design-Linked-List.md)\n\n","source":"_posts/leetcode/README.md","raw":"---\nprev: false\nnext: Design-Linked-List\n\n---\n\n# LeetCode 题解\n\n今天开始每天刷一道LeetCode题，补一补算法基础。\n\n## 题解列表\n\n+ [Design-Linked-List(设计链表)](./Design-Linked-List.md)\n\n","slug":"leetcode/README","published":1,"date":"2018-12-14T09:29:37.647Z","updated":"2018-12-14T09:46:17.203Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5n1000bwu9k9g6d7q6v","content":"<h1 id=\"LeetCode-题解\"><a href=\"#LeetCode-题解\" class=\"headerlink\" title=\"LeetCode 题解\"></a>LeetCode 题解</h1><p>今天开始每天刷一道LeetCode题，补一补算法基础。</p>\n<h2 id=\"题解列表\"><a href=\"#题解列表\" class=\"headerlink\" title=\"题解列表\"></a>题解列表</h2><ul>\n<li><a href=\"./Design-Linked-List.md\">Design-Linked-List(设计链表)</a></li>\n</ul>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"LeetCode-题解\"><a href=\"#LeetCode-题解\" class=\"headerlink\" title=\"LeetCode 题解\"></a>LeetCode 题解</h1><p>今天开始每天刷一道LeetCode题，补一补算法基础。</p>\n<h2 id=\"题解列表\"><a href=\"#题解列表\" class=\"headerlink\" title=\"题解列表\"></a>题解列表</h2><ul>\n<li><a href=\"./Design-Linked-List.md\">Design-Linked-List(设计链表)</a></li>\n</ul>\n"},{"sidebar":"auto","_content":"\n# 在CentOS上安装JDK8 \n\n","source":"_posts/ops/centos-jdk8-installation.md","raw":"---\nsidebar: auto\n\n\n---\n\n# 在CentOS上安装JDK8 \n\n","slug":"ops/centos-jdk8-installation","published":1,"date":"2018-10-10T05:44:50.273Z","updated":"2018-10-10T05:46:31.016Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5n4000cwu9khwn6y3xt","content":"<h1 id=\"在CentOS上安装JDK8\"><a href=\"#在CentOS上安装JDK8\" class=\"headerlink\" title=\"在CentOS上安装JDK8\"></a>在CentOS上安装JDK8</h1>","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"在CentOS上安装JDK8\"><a href=\"#在CentOS上安装JDK8\" class=\"headerlink\" title=\"在CentOS上安装JDK8\"></a>在CentOS上安装JDK8</h1>"},{"sidebar":"auto","_content":"\n# Github 配置webhook触发Jenkins构建\n\n\n\n","source":"_posts/ops/jenkins-work-with-github-webhook.md","raw":"---\nsidebar: auto\n\n\n---\n\n# Github 配置webhook触发Jenkins构建\n\n\n\n","slug":"ops/jenkins-work-with-github-webhook","published":1,"date":"2018-09-13T11:06:36.220Z","updated":"2018-09-14T03:10:35.618Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5n6000dwu9khy9w9fds","content":"<h1 id=\"Github-配置webhook触发Jenkins构建\"><a href=\"#Github-配置webhook触发Jenkins构建\" class=\"headerlink\" title=\"Github 配置webhook触发Jenkins构建\"></a>Github 配置webhook触发Jenkins构建</h1>","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"Github-配置webhook触发Jenkins构建\"><a href=\"#Github-配置webhook触发Jenkins构建\" class=\"headerlink\" title=\"Github 配置webhook触发Jenkins构建\"></a>Github 配置webhook触发Jenkins构建</h1>"},{"_content":"# 读书笔记\n\n## 说明\n\n平时喜欢看一些书，包括技术类书籍，也包括一些文学类和方法论的书籍，曾经也是一个文学爱好者，阴差阳错的走上了开发的不归路，从此`文艺小清新`的标签就与我无缘了，大家更关注的是我的头发（手动默哀）。\n\n这里将会记录一些平时阅读书籍时的感悟和收获，阅读一本好书是一件很享受的事情，但这个过程如果不记录和回顾，那就不会有太多的知识沉淀，对自己的影响也会很有限。所以慢慢的，追求的不再是“那本书我看过”，“我今年已经看了XX本书了”，这样浮于表面的满足感，开始关注真正有意义的部分，那就是从阅读中的收获和感悟。\n\n知识或者感动，就像是一团火，我在这里添柴加薪，把我的火焰留在了这里，希望能为路过的你添加一点温暖，也希望能把这份温暖传递下去。\n\n## 非技术类书籍\n\n1. [《习惯的力量》](.\\The-Power-of-Habit.md)\n2. \n\n## 技术类书籍\n\n1. [《Java多线程编程实战指南》（核心篇）](./Java-Multithread-Programming-Guide-In-Action.md)\n2. 《Java并发编程实战》\n3. 《Java并发编程的艺术》\n\n","source":"_posts/reading/README.md","raw":"# 读书笔记\n\n## 说明\n\n平时喜欢看一些书，包括技术类书籍，也包括一些文学类和方法论的书籍，曾经也是一个文学爱好者，阴差阳错的走上了开发的不归路，从此`文艺小清新`的标签就与我无缘了，大家更关注的是我的头发（手动默哀）。\n\n这里将会记录一些平时阅读书籍时的感悟和收获，阅读一本好书是一件很享受的事情，但这个过程如果不记录和回顾，那就不会有太多的知识沉淀，对自己的影响也会很有限。所以慢慢的，追求的不再是“那本书我看过”，“我今年已经看了XX本书了”，这样浮于表面的满足感，开始关注真正有意义的部分，那就是从阅读中的收获和感悟。\n\n知识或者感动，就像是一团火，我在这里添柴加薪，把我的火焰留在了这里，希望能为路过的你添加一点温暖，也希望能把这份温暖传递下去。\n\n## 非技术类书籍\n\n1. [《习惯的力量》](.\\The-Power-of-Habit.md)\n2. \n\n## 技术类书籍\n\n1. [《Java多线程编程实战指南》（核心篇）](./Java-Multithread-Programming-Guide-In-Action.md)\n2. 《Java并发编程实战》\n3. 《Java并发编程的艺术》\n\n","slug":"reading/README","published":1,"date":"2018-12-13T07:55:59.875Z","updated":"2018-12-19T00:21:13.496Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5n7000ewu9kmrilv409","content":"<h1 id=\"读书笔记\"><a href=\"#读书笔记\" class=\"headerlink\" title=\"读书笔记\"></a>读书笔记</h1><h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>平时喜欢看一些书，包括技术类书籍，也包括一些文学类和方法论的书籍，曾经也是一个文学爱好者，阴差阳错的走上了开发的不归路，从此<code>文艺小清新</code>的标签就与我无缘了，大家更关注的是我的头发（手动默哀）。</p>\n<p>这里将会记录一些平时阅读书籍时的感悟和收获，阅读一本好书是一件很享受的事情，但这个过程如果不记录和回顾，那就不会有太多的知识沉淀，对自己的影响也会很有限。所以慢慢的，追求的不再是“那本书我看过”，“我今年已经看了XX本书了”，这样浮于表面的满足感，开始关注真正有意义的部分，那就是从阅读中的收获和感悟。</p>\n<p>知识或者感动，就像是一团火，我在这里添柴加薪，把我的火焰留在了这里，希望能为路过的你添加一点温暖，也希望能把这份温暖传递下去。</p>\n<h2 id=\"非技术类书籍\"><a href=\"#非技术类书籍\" class=\"headerlink\" title=\"非技术类书籍\"></a>非技术类书籍</h2><ol>\n<li><a href=\".\\The-Power-of-Habit.md\">《习惯的力量》</a></li>\n<li></li>\n</ol>\n<h2 id=\"技术类书籍\"><a href=\"#技术类书籍\" class=\"headerlink\" title=\"技术类书籍\"></a>技术类书籍</h2><ol>\n<li><a href=\"./Java-Multithread-Programming-Guide-In-Action.md\">《Java多线程编程实战指南》（核心篇）</a></li>\n<li>《Java并发编程实战》</li>\n<li>《Java并发编程的艺术》</li>\n</ol>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"读书笔记\"><a href=\"#读书笔记\" class=\"headerlink\" title=\"读书笔记\"></a>读书笔记</h1><h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>平时喜欢看一些书，包括技术类书籍，也包括一些文学类和方法论的书籍，曾经也是一个文学爱好者，阴差阳错的走上了开发的不归路，从此<code>文艺小清新</code>的标签就与我无缘了，大家更关注的是我的头发（手动默哀）。</p>\n<p>这里将会记录一些平时阅读书籍时的感悟和收获，阅读一本好书是一件很享受的事情，但这个过程如果不记录和回顾，那就不会有太多的知识沉淀，对自己的影响也会很有限。所以慢慢的，追求的不再是“那本书我看过”，“我今年已经看了XX本书了”，这样浮于表面的满足感，开始关注真正有意义的部分，那就是从阅读中的收获和感悟。</p>\n<p>知识或者感动，就像是一团火，我在这里添柴加薪，把我的火焰留在了这里，希望能为路过的你添加一点温暖，也希望能把这份温暖传递下去。</p>\n<h2 id=\"非技术类书籍\"><a href=\"#非技术类书籍\" class=\"headerlink\" title=\"非技术类书籍\"></a>非技术类书籍</h2><ol>\n<li><a href=\".\\The-Power-of-Habit.md\">《习惯的力量》</a></li>\n<li></li>\n</ol>\n<h2 id=\"技术类书籍\"><a href=\"#技术类书籍\" class=\"headerlink\" title=\"技术类书籍\"></a>技术类书籍</h2><ol>\n<li><a href=\"./Java-Multithread-Programming-Guide-In-Action.md\">《Java多线程编程实战指南》（核心篇）</a></li>\n<li>《Java并发编程实战》</li>\n<li>《Java并发编程的艺术》</li>\n</ol>\n"},{"sidebar":"auto","_content":"\n# 在centos7 上部署 vuepress\n\n> vuepress是一款十分优秀简洁的文档生成器，可以根据目录下的md文档自动生成对应的html文件，界面简洁大方。每一个由 VuePress 生成的页面都带有预渲染好的 HTML，也因此具有非常好的加载性能和搜索引擎优化（SEO）。本文将介绍如何在CentOS7环境下部署vuepress。\n\n官方主页：https://vuepress.vuejs.org/zh/  \n\n官方文档：https://vuepress.vuejs.org/zh/guide/（官方文档就是用Vuepress搭建的，包括上面的主页）\n\n项目地址：https://github.com/vuejs/vuepress\n\n## 一、安装nodejs\n\n``` bash\ncurl -sL https://rpm.nodesource.com/setup_8.x | sudo bash -\nyum install nodejs\n```\n\n## 二、安装vuepress\n\n``` bash\nnpm install -g vuepress\n```\n\n## 三、创建工作目录\n\n``` bash\nmkdir project\ncd project\nmkdir docs\n```\n\n## 四、初始化前\n\n``` bash\nnpm init -y\nvim package.json\n```\n\n编辑成如下内容，这里其实是设置命令别名。\n\n```javascript\n{\n    \"scripts\": {\n    \t\"docs:dev\": \"vuepress dev docs\",\n    \t\"docs:build\": \"vuepress build docs\"\n    }\n}\n```\n\n创建.vuepress目录。\n\n``` bash\nmkdir .vuepress\ncd .vuepress\n```\n\n创建config.js，这是vuepress的全局配置文件，大部分属性在这里设置。\n\n``` bash\nmkdir public\nvim config.js\n```\n\n修改成如下内容，对应内容可以自行修改。\n\n``` bash\nmodule.exports = {\n\ttitle: '清风wiki',\n\tdescription: '我在等风，也在等你',\n\t// 相对于git仓库的路径 如全路径为：https://mfrank2016.github.io/wikibook/ 则设置为'/wikibook/'\n\tbase: '/wikibook/',\n\thost: '0.0.0.0',\n\t// 运行端口\n\tport: 8081,\n\n\tthemeConfig: {\n\t\t//gitc 仓库地址\n    \trepo: 'https://github.com/MFrank2016/wikibook',\n    \t// 如果你的文档不在仓库的根部\n   \t\tdocsDir: 'docs',\n    \t// 可选，默认为 master\n    \tdocsBranch: 'master',\n    \t// 默认为 true，设置为 false 来禁用\n    \teditLinks: true,\n    \t//导航栏\n    \tnav: [\n      \t\t{ text: 'Home', link: '/' },\n      \t\t{ text: 'Guide', link: '/guide/' },\n      \t\t{ text: 'External', link: 'https://google.com' },\n      \t\t{ text: 'Languages',\n      \t\titems: [\n      \t\t{ text: 'Chinese', link: '/language/chinese' },\n      \t\t{ text: 'Japanese', link: '/language/japanese' }\n      \t\t]}],\n      \tsidebar: [{\n        \ttitle: 'Group 1',\n        \tcollapsable: false,\n        \tchildren: [\n          \t\t'/'\n        \t\t]\n      \t\t},\n      \t\t{\n        \ttitle: 'Group 2',\n        \tchildren: [\n            \t'/'\n        \t\t]\n      \t\t}\n    \t]\n  \t},  \n    //搜索\n    search: true,\n    searchMaxSuggestions: 10,\n    lastUpdated: 'Last Updated', // string | boolean\n}\n```\n\n整体结构\n\n``` bash\nproject\n├─── docs\n│ ├── README.md\n│ ├── .vuepress\n│   ├── config.js\n│   └── public\n│     └── hero.png\n│ └── guide\n│   └── README.md \n└── package.json\n```\n\n## 五、初始化\n\n在docs目录下创建README.md\n\n```bash\n---\nhome: true\nheroImage: /hero.png\nactionText: 点击阅读\nactionLink: /guide/\nfooter: MIT Licensed | Copyright © 2018-present Frank\n---\n```\n\n然后回到project目录\n\n```bash\n# 开启调试模式，运行服务，此时打开 http://localhost:8081 (这里即上面设置的端口) 即能看到最简单的页面\nvuepress dev\n\n# 构建，此时会将md文档转化成html文件存储在docs/.vuepress/dist目录\nvuepress build\n```\n\n## 六、调试部署\n\n此时静态网页已经生成在了**docs/.vuepress/dist**目录下，可以先开启调试模式，然后使用ftp等软件先对服务器进行远程连接，修改docs下面的文档，每次修改上传后，会自动重新编译，当然整个过程需要一两分钟时间，这取决于服务器的性能。调整到合适的程度即可将其移动到nginx或者apache相应目录下即可。\n\n\n\n\n","source":"_posts/ops/deploy-vuepress-on-centos7.md","raw":"---\nsidebar: auto\n\n\n---\n\n# 在centos7 上部署 vuepress\n\n> vuepress是一款十分优秀简洁的文档生成器，可以根据目录下的md文档自动生成对应的html文件，界面简洁大方。每一个由 VuePress 生成的页面都带有预渲染好的 HTML，也因此具有非常好的加载性能和搜索引擎优化（SEO）。本文将介绍如何在CentOS7环境下部署vuepress。\n\n官方主页：https://vuepress.vuejs.org/zh/  \n\n官方文档：https://vuepress.vuejs.org/zh/guide/（官方文档就是用Vuepress搭建的，包括上面的主页）\n\n项目地址：https://github.com/vuejs/vuepress\n\n## 一、安装nodejs\n\n``` bash\ncurl -sL https://rpm.nodesource.com/setup_8.x | sudo bash -\nyum install nodejs\n```\n\n## 二、安装vuepress\n\n``` bash\nnpm install -g vuepress\n```\n\n## 三、创建工作目录\n\n``` bash\nmkdir project\ncd project\nmkdir docs\n```\n\n## 四、初始化前\n\n``` bash\nnpm init -y\nvim package.json\n```\n\n编辑成如下内容，这里其实是设置命令别名。\n\n```javascript\n{\n    \"scripts\": {\n    \t\"docs:dev\": \"vuepress dev docs\",\n    \t\"docs:build\": \"vuepress build docs\"\n    }\n}\n```\n\n创建.vuepress目录。\n\n``` bash\nmkdir .vuepress\ncd .vuepress\n```\n\n创建config.js，这是vuepress的全局配置文件，大部分属性在这里设置。\n\n``` bash\nmkdir public\nvim config.js\n```\n\n修改成如下内容，对应内容可以自行修改。\n\n``` bash\nmodule.exports = {\n\ttitle: '清风wiki',\n\tdescription: '我在等风，也在等你',\n\t// 相对于git仓库的路径 如全路径为：https://mfrank2016.github.io/wikibook/ 则设置为'/wikibook/'\n\tbase: '/wikibook/',\n\thost: '0.0.0.0',\n\t// 运行端口\n\tport: 8081,\n\n\tthemeConfig: {\n\t\t//gitc 仓库地址\n    \trepo: 'https://github.com/MFrank2016/wikibook',\n    \t// 如果你的文档不在仓库的根部\n   \t\tdocsDir: 'docs',\n    \t// 可选，默认为 master\n    \tdocsBranch: 'master',\n    \t// 默认为 true，设置为 false 来禁用\n    \teditLinks: true,\n    \t//导航栏\n    \tnav: [\n      \t\t{ text: 'Home', link: '/' },\n      \t\t{ text: 'Guide', link: '/guide/' },\n      \t\t{ text: 'External', link: 'https://google.com' },\n      \t\t{ text: 'Languages',\n      \t\titems: [\n      \t\t{ text: 'Chinese', link: '/language/chinese' },\n      \t\t{ text: 'Japanese', link: '/language/japanese' }\n      \t\t]}],\n      \tsidebar: [{\n        \ttitle: 'Group 1',\n        \tcollapsable: false,\n        \tchildren: [\n          \t\t'/'\n        \t\t]\n      \t\t},\n      \t\t{\n        \ttitle: 'Group 2',\n        \tchildren: [\n            \t'/'\n        \t\t]\n      \t\t}\n    \t]\n  \t},  \n    //搜索\n    search: true,\n    searchMaxSuggestions: 10,\n    lastUpdated: 'Last Updated', // string | boolean\n}\n```\n\n整体结构\n\n``` bash\nproject\n├─── docs\n│ ├── README.md\n│ ├── .vuepress\n│   ├── config.js\n│   └── public\n│     └── hero.png\n│ └── guide\n│   └── README.md \n└── package.json\n```\n\n## 五、初始化\n\n在docs目录下创建README.md\n\n```bash\n---\nhome: true\nheroImage: /hero.png\nactionText: 点击阅读\nactionLink: /guide/\nfooter: MIT Licensed | Copyright © 2018-present Frank\n---\n```\n\n然后回到project目录\n\n```bash\n# 开启调试模式，运行服务，此时打开 http://localhost:8081 (这里即上面设置的端口) 即能看到最简单的页面\nvuepress dev\n\n# 构建，此时会将md文档转化成html文件存储在docs/.vuepress/dist目录\nvuepress build\n```\n\n## 六、调试部署\n\n此时静态网页已经生成在了**docs/.vuepress/dist**目录下，可以先开启调试模式，然后使用ftp等软件先对服务器进行远程连接，修改docs下面的文档，每次修改上传后，会自动重新编译，当然整个过程需要一两分钟时间，这取决于服务器的性能。调整到合适的程度即可将其移动到nginx或者apache相应目录下即可。\n\n\n\n\n","slug":"ops/deploy-vuepress-on-centos7","published":1,"date":"2018-09-17T01:03:49.778Z","updated":"2018-09-17T01:03:49.779Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5n9000fwu9kex5oibvt","content":"<h1 id=\"在centos7-上部署-vuepress\"><a href=\"#在centos7-上部署-vuepress\" class=\"headerlink\" title=\"在centos7 上部署 vuepress\"></a>在centos7 上部署 vuepress</h1><blockquote>\n<p>vuepress是一款十分优秀简洁的文档生成器，可以根据目录下的md文档自动生成对应的html文件，界面简洁大方。每一个由 VuePress 生成的页面都带有预渲染好的 HTML，也因此具有非常好的加载性能和搜索引擎优化（SEO）。本文将介绍如何在CentOS7环境下部署vuepress。</p>\n</blockquote>\n<p>官方主页：<a href=\"https://vuepress.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener\">https://vuepress.vuejs.org/zh/</a>  </p>\n<p>官方文档：<a href=\"https://vuepress.vuejs.org/zh/guide/（官方文档就是用Vuepress搭建的，包括上面的主页）\" target=\"_blank\" rel=\"noopener\">https://vuepress.vuejs.org/zh/guide/（官方文档就是用Vuepress搭建的，包括上面的主页）</a></p>\n<p>项目地址：<a href=\"https://github.com/vuejs/vuepress\" target=\"_blank\" rel=\"noopener\">https://github.com/vuejs/vuepress</a></p>\n<h2 id=\"一、安装nodejs\"><a href=\"#一、安装nodejs\" class=\"headerlink\" title=\"一、安装nodejs\"></a>一、安装nodejs</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sL https://rpm.nodesource.com/setup_8.x | sudo bash -</span><br><span class=\"line\">yum install nodejs</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、安装vuepress\"><a href=\"#二、安装vuepress\" class=\"headerlink\" title=\"二、安装vuepress\"></a>二、安装vuepress</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g vuepress</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、创建工作目录\"><a href=\"#三、创建工作目录\" class=\"headerlink\" title=\"三、创建工作目录\"></a>三、创建工作目录</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir project</span><br><span class=\"line\"><span class=\"built_in\">cd</span> project</span><br><span class=\"line\">mkdir docs</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、初始化前\"><a href=\"#四、初始化前\" class=\"headerlink\" title=\"四、初始化前\"></a>四、初始化前</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br><span class=\"line\">vim package.json</span><br></pre></td></tr></table></figure>\n<p>编辑成如下内容，这里其实是设置命令别名。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    \t<span class=\"string\">\"docs:dev\"</span>: <span class=\"string\">\"vuepress dev docs\"</span>,</span><br><span class=\"line\">    \t<span class=\"string\">\"docs:build\"</span>: <span class=\"string\">\"vuepress build docs\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建.vuepress目录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir .vuepress</span><br><span class=\"line\"><span class=\"built_in\">cd</span> .vuepress</span><br></pre></td></tr></table></figure>\n<p>创建config.js，这是vuepress的全局配置文件，大部分属性在这里设置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir public</span><br><span class=\"line\">vim config.js</span><br></pre></td></tr></table></figure>\n<p>修改成如下内容，对应内容可以自行修改。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">\ttitle: <span class=\"string\">'清风wiki'</span>,</span><br><span class=\"line\">\tdescription: <span class=\"string\">'我在等风，也在等你'</span>,</span><br><span class=\"line\">\t// 相对于git仓库的路径 如全路径为：https://mfrank2016.github.io/wikibook/ 则设置为<span class=\"string\">'/wikibook/'</span></span><br><span class=\"line\">\tbase: <span class=\"string\">'/wikibook/'</span>,</span><br><span class=\"line\">\thost: <span class=\"string\">'0.0.0.0'</span>,</span><br><span class=\"line\">\t// 运行端口</span><br><span class=\"line\">\tport: 8081,</span><br><span class=\"line\"></span><br><span class=\"line\">\tthemeConfig: &#123;</span><br><span class=\"line\">\t\t//gitc 仓库地址</span><br><span class=\"line\">    \trepo: <span class=\"string\">'https://github.com/MFrank2016/wikibook'</span>,</span><br><span class=\"line\">    \t// 如果你的文档不在仓库的根部</span><br><span class=\"line\">   \t\tdocsDir: <span class=\"string\">'docs'</span>,</span><br><span class=\"line\">    \t// 可选，默认为 master</span><br><span class=\"line\">    \tdocsBranch: <span class=\"string\">'master'</span>,</span><br><span class=\"line\">    \t// 默认为 <span class=\"literal\">true</span>，设置为 <span class=\"literal\">false</span> 来禁用</span><br><span class=\"line\">    \teditLinks: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    \t//导航栏</span><br><span class=\"line\">    \tnav: [</span><br><span class=\"line\">      \t\t&#123; text: <span class=\"string\">'Home'</span>, link: <span class=\"string\">'/'</span> &#125;,</span><br><span class=\"line\">      \t\t&#123; text: <span class=\"string\">'Guide'</span>, link: <span class=\"string\">'/guide/'</span> &#125;,</span><br><span class=\"line\">      \t\t&#123; text: <span class=\"string\">'External'</span>, link: <span class=\"string\">'https://google.com'</span> &#125;,</span><br><span class=\"line\">      \t\t&#123; text: <span class=\"string\">'Languages'</span>,</span><br><span class=\"line\">      \t\titems: [</span><br><span class=\"line\">      \t\t&#123; text: <span class=\"string\">'Chinese'</span>, link: <span class=\"string\">'/language/chinese'</span> &#125;,</span><br><span class=\"line\">      \t\t&#123; text: <span class=\"string\">'Japanese'</span>, link: <span class=\"string\">'/language/japanese'</span> &#125;</span><br><span class=\"line\">      \t\t]&#125;],</span><br><span class=\"line\">      \tsidebar: [&#123;</span><br><span class=\"line\">        \ttitle: <span class=\"string\">'Group 1'</span>,</span><br><span class=\"line\">        \tcollapsable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        \tchildren: [</span><br><span class=\"line\">          \t\t<span class=\"string\">'/'</span></span><br><span class=\"line\">        \t\t]</span><br><span class=\"line\">      \t\t&#125;,</span><br><span class=\"line\">      \t\t&#123;</span><br><span class=\"line\">        \ttitle: <span class=\"string\">'Group 2'</span>,</span><br><span class=\"line\">        \tchildren: [</span><br><span class=\"line\">            \t<span class=\"string\">'/'</span></span><br><span class=\"line\">        \t\t]</span><br><span class=\"line\">      \t\t&#125;</span><br><span class=\"line\">    \t]</span><br><span class=\"line\">  \t&#125;,  </span><br><span class=\"line\">    //搜索</span><br><span class=\"line\">    search: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    searchMaxSuggestions: 10,</span><br><span class=\"line\">    lastUpdated: <span class=\"string\">'Last Updated'</span>, // string | boolean</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>整体结构</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">project</span><br><span class=\"line\">├─── docs</span><br><span class=\"line\">│ ├── README.md</span><br><span class=\"line\">│ ├── .vuepress</span><br><span class=\"line\">│   ├── config.js</span><br><span class=\"line\">│   └── public</span><br><span class=\"line\">│     └── hero.png</span><br><span class=\"line\">│ └── guide</span><br><span class=\"line\">│   └── README.md </span><br><span class=\"line\">└── package.json</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、初始化\"><a href=\"#五、初始化\" class=\"headerlink\" title=\"五、初始化\"></a>五、初始化</h2><p>在docs目录下创建README.md</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">home: <span class=\"literal\">true</span></span><br><span class=\"line\">heroImage: /hero.png</span><br><span class=\"line\">actionText: 点击阅读</span><br><span class=\"line\">actionLink: /guide/</span><br><span class=\"line\">footer: MIT Licensed | Copyright © 2018-present Frank</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>然后回到project目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 开启调试模式，运行服务，此时打开 http://localhost:8081 (这里即上面设置的端口) 即能看到最简单的页面</span></span><br><span class=\"line\">vuepress dev</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 构建，此时会将md文档转化成html文件存储在docs/.vuepress/dist目录</span></span><br><span class=\"line\">vuepress build</span><br></pre></td></tr></table></figure>\n<h2 id=\"六、调试部署\"><a href=\"#六、调试部署\" class=\"headerlink\" title=\"六、调试部署\"></a>六、调试部署</h2><p>此时静态网页已经生成在了<strong>docs/.vuepress/dist</strong>目录下，可以先开启调试模式，然后使用ftp等软件先对服务器进行远程连接，修改docs下面的文档，每次修改上传后，会自动重新编译，当然整个过程需要一两分钟时间，这取决于服务器的性能。调整到合适的程度即可将其移动到nginx或者apache相应目录下即可。</p>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"在centos7-上部署-vuepress\"><a href=\"#在centos7-上部署-vuepress\" class=\"headerlink\" title=\"在centos7 上部署 vuepress\"></a>在centos7 上部署 vuepress</h1><blockquote>\n<p>vuepress是一款十分优秀简洁的文档生成器，可以根据目录下的md文档自动生成对应的html文件，界面简洁大方。每一个由 VuePress 生成的页面都带有预渲染好的 HTML，也因此具有非常好的加载性能和搜索引擎优化（SEO）。本文将介绍如何在CentOS7环境下部署vuepress。</p>\n</blockquote>\n<p>官方主页：<a href=\"https://vuepress.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener\">https://vuepress.vuejs.org/zh/</a>  </p>\n<p>官方文档：<a href=\"https://vuepress.vuejs.org/zh/guide/（官方文档就是用Vuepress搭建的，包括上面的主页）\" target=\"_blank\" rel=\"noopener\">https://vuepress.vuejs.org/zh/guide/（官方文档就是用Vuepress搭建的，包括上面的主页）</a></p>\n<p>项目地址：<a href=\"https://github.com/vuejs/vuepress\" target=\"_blank\" rel=\"noopener\">https://github.com/vuejs/vuepress</a></p>\n<h2 id=\"一、安装nodejs\"><a href=\"#一、安装nodejs\" class=\"headerlink\" title=\"一、安装nodejs\"></a>一、安装nodejs</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sL https://rpm.nodesource.com/setup_8.x | sudo bash -</span><br><span class=\"line\">yum install nodejs</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、安装vuepress\"><a href=\"#二、安装vuepress\" class=\"headerlink\" title=\"二、安装vuepress\"></a>二、安装vuepress</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g vuepress</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、创建工作目录\"><a href=\"#三、创建工作目录\" class=\"headerlink\" title=\"三、创建工作目录\"></a>三、创建工作目录</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir project</span><br><span class=\"line\"><span class=\"built_in\">cd</span> project</span><br><span class=\"line\">mkdir docs</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、初始化前\"><a href=\"#四、初始化前\" class=\"headerlink\" title=\"四、初始化前\"></a>四、初始化前</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br><span class=\"line\">vim package.json</span><br></pre></td></tr></table></figure>\n<p>编辑成如下内容，这里其实是设置命令别名。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    \t<span class=\"string\">\"docs:dev\"</span>: <span class=\"string\">\"vuepress dev docs\"</span>,</span><br><span class=\"line\">    \t<span class=\"string\">\"docs:build\"</span>: <span class=\"string\">\"vuepress build docs\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建.vuepress目录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir .vuepress</span><br><span class=\"line\"><span class=\"built_in\">cd</span> .vuepress</span><br></pre></td></tr></table></figure>\n<p>创建config.js，这是vuepress的全局配置文件，大部分属性在这里设置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir public</span><br><span class=\"line\">vim config.js</span><br></pre></td></tr></table></figure>\n<p>修改成如下内容，对应内容可以自行修改。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">\ttitle: <span class=\"string\">'清风wiki'</span>,</span><br><span class=\"line\">\tdescription: <span class=\"string\">'我在等风，也在等你'</span>,</span><br><span class=\"line\">\t// 相对于git仓库的路径 如全路径为：https://mfrank2016.github.io/wikibook/ 则设置为<span class=\"string\">'/wikibook/'</span></span><br><span class=\"line\">\tbase: <span class=\"string\">'/wikibook/'</span>,</span><br><span class=\"line\">\thost: <span class=\"string\">'0.0.0.0'</span>,</span><br><span class=\"line\">\t// 运行端口</span><br><span class=\"line\">\tport: 8081,</span><br><span class=\"line\"></span><br><span class=\"line\">\tthemeConfig: &#123;</span><br><span class=\"line\">\t\t//gitc 仓库地址</span><br><span class=\"line\">    \trepo: <span class=\"string\">'https://github.com/MFrank2016/wikibook'</span>,</span><br><span class=\"line\">    \t// 如果你的文档不在仓库的根部</span><br><span class=\"line\">   \t\tdocsDir: <span class=\"string\">'docs'</span>,</span><br><span class=\"line\">    \t// 可选，默认为 master</span><br><span class=\"line\">    \tdocsBranch: <span class=\"string\">'master'</span>,</span><br><span class=\"line\">    \t// 默认为 <span class=\"literal\">true</span>，设置为 <span class=\"literal\">false</span> 来禁用</span><br><span class=\"line\">    \teditLinks: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    \t//导航栏</span><br><span class=\"line\">    \tnav: [</span><br><span class=\"line\">      \t\t&#123; text: <span class=\"string\">'Home'</span>, link: <span class=\"string\">'/'</span> &#125;,</span><br><span class=\"line\">      \t\t&#123; text: <span class=\"string\">'Guide'</span>, link: <span class=\"string\">'/guide/'</span> &#125;,</span><br><span class=\"line\">      \t\t&#123; text: <span class=\"string\">'External'</span>, link: <span class=\"string\">'https://google.com'</span> &#125;,</span><br><span class=\"line\">      \t\t&#123; text: <span class=\"string\">'Languages'</span>,</span><br><span class=\"line\">      \t\titems: [</span><br><span class=\"line\">      \t\t&#123; text: <span class=\"string\">'Chinese'</span>, link: <span class=\"string\">'/language/chinese'</span> &#125;,</span><br><span class=\"line\">      \t\t&#123; text: <span class=\"string\">'Japanese'</span>, link: <span class=\"string\">'/language/japanese'</span> &#125;</span><br><span class=\"line\">      \t\t]&#125;],</span><br><span class=\"line\">      \tsidebar: [&#123;</span><br><span class=\"line\">        \ttitle: <span class=\"string\">'Group 1'</span>,</span><br><span class=\"line\">        \tcollapsable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        \tchildren: [</span><br><span class=\"line\">          \t\t<span class=\"string\">'/'</span></span><br><span class=\"line\">        \t\t]</span><br><span class=\"line\">      \t\t&#125;,</span><br><span class=\"line\">      \t\t&#123;</span><br><span class=\"line\">        \ttitle: <span class=\"string\">'Group 2'</span>,</span><br><span class=\"line\">        \tchildren: [</span><br><span class=\"line\">            \t<span class=\"string\">'/'</span></span><br><span class=\"line\">        \t\t]</span><br><span class=\"line\">      \t\t&#125;</span><br><span class=\"line\">    \t]</span><br><span class=\"line\">  \t&#125;,  </span><br><span class=\"line\">    //搜索</span><br><span class=\"line\">    search: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    searchMaxSuggestions: 10,</span><br><span class=\"line\">    lastUpdated: <span class=\"string\">'Last Updated'</span>, // string | boolean</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>整体结构</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">project</span><br><span class=\"line\">├─── docs</span><br><span class=\"line\">│ ├── README.md</span><br><span class=\"line\">│ ├── .vuepress</span><br><span class=\"line\">│   ├── config.js</span><br><span class=\"line\">│   └── public</span><br><span class=\"line\">│     └── hero.png</span><br><span class=\"line\">│ └── guide</span><br><span class=\"line\">│   └── README.md </span><br><span class=\"line\">└── package.json</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、初始化\"><a href=\"#五、初始化\" class=\"headerlink\" title=\"五、初始化\"></a>五、初始化</h2><p>在docs目录下创建README.md</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">home: <span class=\"literal\">true</span></span><br><span class=\"line\">heroImage: /hero.png</span><br><span class=\"line\">actionText: 点击阅读</span><br><span class=\"line\">actionLink: /guide/</span><br><span class=\"line\">footer: MIT Licensed | Copyright © 2018-present Frank</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>然后回到project目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 开启调试模式，运行服务，此时打开 http://localhost:8081 (这里即上面设置的端口) 即能看到最简单的页面</span></span><br><span class=\"line\">vuepress dev</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 构建，此时会将md文档转化成html文件存储在docs/.vuepress/dist目录</span></span><br><span class=\"line\">vuepress build</span><br></pre></td></tr></table></figure>\n<h2 id=\"六、调试部署\"><a href=\"#六、调试部署\" class=\"headerlink\" title=\"六、调试部署\"></a>六、调试部署</h2><p>此时静态网页已经生成在了<strong>docs/.vuepress/dist</strong>目录下，可以先开启调试模式，然后使用ftp等软件先对服务器进行远程连接，修改docs下面的文档，每次修改上传后，会自动重新编译，当然整个过程需要一两分钟时间，这取决于服务器的性能。调整到合适的程度即可将其移动到nginx或者apache相应目录下即可。</p>\n"},{"title":"《Java多线程编程实战指南》（核心篇）—— 摘要","date":"2018-12-26T11:55:51.000Z","_content":"> 书籍作者：黄文海\n> 出版社：电子工业出版社\n\n## 思维导图\n\n[全文思维导图](https://mubu.com/doc/lW2C-KYYy0)\n\n## 第一章 走进Java世界中的线程\n\n1. `进程`是程序向操作系统申请资源的基本单位，`线程`是进程中可独立执行的最小单位。\n2. 一个进程可以包含多个线程。\n3. 线程所要完成的计算被称为`任务`。\n4. 启动一个线程的实质是请求Java虚拟机运行相应的线程，而这个线程具体何时能够运行是由线程调度器决定的。\n5. Java虚拟机会为每个线程分配调用栈所需的内存空间。\n6. Java平台中的任意一段代码总是由确定的线程负责执行的，这个线程就相应的被称为这段代码的`执行线程`。可以通过调用Thread.currentThread()来获取这段代码的执行线程。\n7. 线程的属性：\n\n| 属性               | 类型及用途                                                   | 注意事项                                                     |\n| ------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 编号（ID）         | Long。用于标识不同的线程。                                   | 不同线程虽然拥有的编号不同，但是某个编号的线程运行结束后，该编号可能被后续创建的线程使用，这种编号的唯一性只在Java虚拟机的一次运行中有效。 |\n| 名称（name）       | String。用于区分不同线程。（面向人）默认值与线程编号有关，默认值格式为：“Thread-线程编号” | 为每一个线程设置一个简短而含义明确的名称有助于多线程程序的调试和问题定位。 |\n| 线程类别（Daemon） | boolean。true表示相应的线程为守护线程，否则表示相应的线程为用户线程。 | 该属性必须在线程启动之前设置，否则setDaemon方法会抛出异常。负责一些关键任务的线程不适合设置为守护线程。 |\n| 优先级（Priority） | int。该属性本质上是给线程调度器的提示，用于表示应用程序希望线程能够优先得以运行。Java定义了1~10的10个优先级，默认值为5。 | 一般使用默认优先级即可。   |\n\n8. `用户线程`会阻止Java虚拟机的正常停止，即一个Java虚拟机只有在其所有用户线程都运行结束的情况下才能正常停止。而`守护线程`则不会影响Java虚拟机的正常停止，守护线程通常用于执行一些重要性不是很高的任务，例如用于监视其他线程的运行情况。\n9. Thread的`join`方法的作用相当于执行该方法的线程和线程调度器说：“我得先暂停一下，等到另外一个线程运行结束后我才能继续干活。”\n10. `yield`静态方法的作用相当于执行该方法的线程对线程调度器说：“我现在不急，如果别人需要处理器资源极度话先给他用吧。当然，如果没有其他人要用，我也不介意继续占用。”\n11. `sleep`静态方法的作用相当于执行该方法的线程对线程调度器说：“我想小憩一会儿，过段时间再叫醒我继续干活吧。”\n12. 假设线程A所执行的代码创建了线程B，那么，习惯上我们称线程B为线程A的`子线程`，相应地线程A就被称为线程B的`父线程`。\n13. 在Java平台中，一个线程是否是守护线程默认取决于其父线程。\n14. 一个线程的优先级默认值为该线程的父线程的优先级。\n15. `Thread.State`是一个枚举类型，用来表示线程的当前状态。\n    1. `NEW`：一个已创建而未启动的线程处于该状态。 \n    2. `RUNNABLE`：该状态可以被看成一个复合状态。它包括两个子状态：READY和RUNNING。\n    3. `BLOCKED`：线程进行阻塞式操作或申请由其他线程正在独占的资源时，相应的线程会处于该状态。\n    4. `WAITING`：执行某些特定方法之后就会处于这种等待状态，包括：Object.wait(),Thread.join(),LockSupport.park(),Condition.await()。能够使相应线程从WAITING变更为RUNNABLE的相应方法包括：Objeck.notify()/notifyAll()、LockSupport.unpark()、Condition.signal()。\n    5. `TIMED WAITING`：限时等待状态。\n    6. `TERMINATED`：已执行结束的线程处于该状态。\n16. Java程序的线程转储包含的线程具体信息包括线程的属性、生命周期状态、线程的调用栈以及锁相关的信息。\n17. 多线程编程具有以下优势：\n    1. 提高系统的**吞吐率**。\n    2. 提高**响应性**。\n    3. 充分利用多核优势。\n    4. 最小化对系统资源的使用。\n    5. 简化程序的结构\n18. 多线程编程的风险：\n    1. 线程安全问题。\n    2. 线程活性问题。\n    3. 上下文切换。\n    4. 可靠性。\n\n## 第二章 多线程编程的目标与挑战\n\n1. 多线程编程的实质就是将任务的处理方式由串行改为`并发`，即实现并发化，以发挥并发的优势。\n2. `状态变量`：即类的实例变量、静态变量。\n3. `共享变量`：即可以被多个线程共同访问的变量。\n4. `竞态`是指计算的正确性依赖于相对时间顺序或者线程的交错。\n5. 竞态往往伴随着读取`脏数据`问题。\n6. 竞态的两种模式：`read-modify-write`（读-改-写）和`check-then-act`（检测后行动）。\n7. 如果一个类在单线程环境下能够运行正常，并且在多线程环境下，在其使用方不必为其做任何改变的情况下也能运作正常，那么我们就称其是`线程安全`的，相应地，我们称这个类具有线程安全性。\n8. 对于涉及共享变量访问的操作，若该操作从其执行线程以外的任意线程来看是不可分割的，那么该操作就是原子操作，相应地我们称该操作具有`原子性`。\n9. Java中有两种方式来实现原子性。一种是使用`锁`，另一种是利用处理器提供的专门`CAS`指令。\n10. 在多线程环境下，一个线程对某个变量进行更新之后，后续访问该变量的线程可能无法立刻读取到这个更新的结果，甚至永远也无法读取到这个更新的结果，这就是线程安全的另一个表现形式：`可见性`。\n11. 可见性问题可能来源于JIT编译器的优化，也可能来源于`寄存器`和`高速缓存`。\n12. 虽然一个处理器的高速缓存中的内容不能被另一个处理器直接读取，但是一个处理器可以通过`缓存一致性协议`来读取其他处理器的高速缓存的数据，并将读到的数据更新到该处理器的高速缓存中。\n13. `volatile`关键字所起到的一个作用就是，提示JIT编译器被修饰的变量可能被多个线程共享，以阻止JIT编译器做出可能导致程序运行不正常的优化。另外一个作用是读取一个volatile关键字修饰的变量会使相应的处理器执行刷新处理器缓存的动作，写一个volatile关键字修饰的变量会使相应的处理器执行冲刷处理器缓存的动作，从而保障可见性。\n14. 对于同一个共享变量而言，一个线程更新了该变量的值之后，其他线程能够读取到这个更新后的值，那么这个值就被称为该变量的相对新值。\n15. 父线程在启动子线程之前对共享变量的更新对于子线程来说是可见的。\n16. 一个线程终止后该线程对共享变量的更新对于调用该线程的`join`方法的线程而言是可见的。\n17. `有序性`指在什么情况下一个处理器上运行的一个线程所执行的内存访问操作在另一个处理器上运行的其他线程看起来是乱序的。\n18. `重排序`是对内存访问有关的操作所做的一种优化，它可以在不影响单线程程序正确性的情况下提升程序的性能。重排序主要包括：`指令重排序`和`存储子系统重排序`。\n19. 重排序可能导致线程安全问题。\n20. 重排序不是必然出现的。\n21. 处理器也可能执行指令重排序，这使得执行顺序和程序顺序不一致，处理器对指令进行重排序也被称为处理器的乱序执行。处理器乱序执行并不会对单线程程序的正确性产生影响。\n22. 主内存相对于处理器是一个慢速设备。为了避免其拖后腿，处理器并不是直接访问主内存，而是通过高速缓存访问主内存的。\n23. 内存重排序包括：LoadLoad重排序、StoreStore重排序、LoadStore重排序、StoreLoad重排序。\n24. 存在数据依赖关系的语句不会被重排序，只有不存在数据依赖关系的语句才可能会被重排序。\n25. 可见性是有序性的基础，有序性影响可见性。\n26. 一个线程由于其时间片用完或者其自身原因被迫或者主动暂停其运行时，另外一个线程可以被操作系统选中占用处理器开始或者继续其运行。这种一个线程暂停，另一个线程被选中开始或者继续运行的过程就叫做`上下文切换`。\n27. 进度信息就被称为上下文，它一般包括通用寄存器的内容和程序计数器的内容。\n28. 自发性上下文切换指线程由于其自身因素导致的切出。如执行以下指令：Thread.sleep()、Object.wait()、Thread.join()、LockSupport.park()。\n29. 非自发性上下文切换指线程由于线程调度器的原因被迫切出。\n30. 上下文切换的开销包括**直接开销**和**间接开销**。\n    1. 操作系统保存和恢复上下文所需的开销，这主要是处理器时间开销。\n    2. 线程调度器进行线程调度的开销。\n    3. 处理器高速缓存重新加载的开销。\n    4. 上下文切换也可能导致整个一级高速缓存中的内容被冲刷。\n31. 这些由于资源稀缺性或者程序自身的问题和缺陷导致线程一直处于非RUNNABLE状态，或者线程虽然处于RUNNABLE状态但是其要执行的任务却一直无法进展的现象就被称为`线程活性故障`。常见的活性故障包括：\n    1. 死锁\n    2. 锁死\n    3. 活锁\n    4. 饥饿\n32. 一次只能够被一个线程占用的资源被称为`排他性`资源。在一个线程占用一个排他性资源进行访问时，其他线程视图访问该资源的现象就被称为`资源争用`。\n33. 同一时间内，处于运行状态的线程数量越多，我们就称并发程度越高，简称`高并发`。\n34. 在多个线程申请同一个排他性资源的情况下，决定哪个线程会被授予该资源的独占权，即选择哪个申请者占用该资源的过程就是`资源的调度`。\n35. 如果资源的任何一个先申请者总是能够比任何一个后申请者先获得该资源的独占权，那么相应的资源调度策略就被称为是`公平`的，如果资源的后申请者可能比先申请者先获得资源的独占权，那么相应的资源调度策略就被称为`非公平`的。\n36. 在极端的情况下，非公平调度策略可能导致等待队列中的线程永远无法获得其所需的资源，即出现`饥饿`。\n37. 一般来说，非公平调度策略的**吞吐率高**，即单位时间内它可以为更多的申请者调配资源。其缺点是，从申请者个体的角度来看这些申请者获得相应资源的独占权所需要的**时间偏差**可能比较大。\n38. 非公平调度策略可能带来一个好处——减少上下文切换的次数。\n39. 多数线程占用资源的时间相当长的情况下不适合使用**非公平调度策略**。\n40. 非公平调度策略是我们多数情况下的**首选**调度策略。其优点是吞吐率较大；缺点是资源申请者申请资源所需的时间偏差可能较大，并可能导致饥饿。公平调度策略适合在资源的时间相对长或资源的平均申请时间间隔相对长的情况下，或者对资源申请所需的时间偏差有所要求的情况下使用。其优点是线程申请资源所需的时间偏差较小，并且不会导致线程饥饿现象；其缺点是吞吐率较小。\n\n## 第三章 Java线程同步机制\n\n1. `线程同步机制`是一套用于协调线程间的数据访问及活动的机制，该机制用用户保障线程安全以及实现这些线程的共同目标。\n\n2. 线程安全问题的产生前提是多个线程并发访问共享变量、共享资源。\n\n3. 锁的持有线程在其获得锁之后和释放锁之前这段时间内所执行的代码被称为`临界区`。\n\n4. Java平台中的锁包括`内部锁`和`显示锁`。\n\n5. 锁是通过`互斥`保障原子性的。\n\n6. 一个锁实例锁保护的共享数据的数量大小就被称为锁的`粒度`。\n\n7. 锁的开销包括锁的申请和释放锁产生的开销，以及锁可能导致的上下文切换的开销，这些开销主要是处理器时间。\n\n8. `锁泄漏`是指一个线程获得某个锁之后，由于程序的错误缺陷致使该锁一直无法被释放而导致其他线程一直无法获得该锁的现象。\n\n9. Java平台中的任何一个对象都有唯一的一个与之关联的锁。这种锁被称为`监视器`或者`内部锁`。内部锁是一种`排他锁`，它能保障原子性、可见性和有序性。\n\n10. Java虚拟机会为每个内部锁分配一个`入口集`，用于记录等待获得相应内部锁的线程。多个线程申请同一个锁的时候，只有一个申请者能够成为该锁的持有线程，而其他申请者的申请操作会失败。\n\n11. 公平锁保障锁调度的公平性往往是以增加了线程的暂停和唤醒的可能性，即增加了上下文切换为代价的。因此公平锁适合于锁被持有的时间相对长或者线程申请锁的平均间隔时间相对长的情形。总得来说使用公平锁的开销比使用非公平锁的开销要大，因此显式锁默认使用的是非公平调度策略。\n\n12. `读写锁`是一种改进型的排它锁，也被称为共享/排它锁。读锁是`共享`的，写锁是`排他`的。\n\n13. 读写锁适合于在以下条件同时得以满足的场景中使用：\n\n    1. 只读操作比写操作要频繁得多。\n    2. 读线程持有锁的时间比较长。\n\n14. `ReetrantReadWriteLock`所实现的读写锁是`个可重入锁`。ReetrantReadWriteLock支持写锁的`降级`，即一个线程持有读写锁的写锁的情况下可以继续获得相应的读锁。\n\n15. `ReetrantReadWriteLock`并不支持锁的升级。读线程如果要转而申请写锁，需要先释放读锁，然后申请相应的写锁。\n\n16. `内存屏障`是对一类仅针对内存读、写操作指令的跨处理器架构的比较底层的抽象。内存屏障是被插入到两个指令之间进行使用的，其作用是**禁止编译器、处理器重排序从而保障有序性**。\n\n17. 按照可见性保障来划分，`内存屏障`可分为`加载屏障`和`存储屏障`。加载屏障的作用是**刷新处理器缓存**，存储屏障的作用是**冲刷处理器缓存**。Java虚拟机会在MonitorExit对应的机器码指令之后插入一个`存储屏障`，这就保障了写线程在释放锁之前在临界区中对共享变量所做的更新对读线程是可同步的。相应的，Java虚拟机会在MonitorEnter对应的机器码指令之后临界区开始之前的地方插入一个`加载屏障`，这使得读线程的执行处理器能够将写线程对相应共享变量所做的更新从其他处理器同步到该处理器的高速缓存中。\n\n18. 按照有序性保障来划分，`内存屏障`可以分为`获取屏障`和`释放屏障`。获取屏障的使用方式是在一个读操作之后插入该内存屏障，其作用是**禁止该读操作与其后的任何读写操作之间进行重排序**，这相当于在进行后续操作之前先要获得相应共享数据的所有权。释放屏障的使用方式是在一个写操作之前插入该内存屏障，其作用是**禁止该写操作与其前面的任何读写操作之间进行重排序**。Java虚拟机会在MonitorEnter对应的机器码指令之后临界区开始之前的地方插入一个获取屏障，并在临界区结束之后MonitorExit对应的机器码指令之前的地方插入一个释放屏障。\n\n19. 临界区之外的语句可以被重排序到临界区之内，而临界区内的操作无法被重排序到临界区之外。\n\n    1. 临界区内的操作不允许被重排序到临界区之外。\n\n    2. 临界区内的操作之间允许被重排序。\n\n    3. 临界区外的操作之间可以被重排序。\n\n    4. 锁申请与锁释放操作不能被重排序。\n\n    5. 两个锁申请操作不能被重排序。\n\n    6. 两个锁释放操作不能被重排序。\n\n    7. 临界区外的操作可以被重排到临界区之内。\n\n20. `volatile`变量不会被编译器分配到寄存器进行存储，对volatile变量的读写操作都是内存访问操作。\n\n21. `volatile`关键字常被称为`轻量级锁`，其作用与锁的作用有相同的地方：保证可见性和有序性。原子性方面它仅能保证写volatile变量操作的原子性，但没有锁的排他性。其次，volatile关键字的使用不会引起上下文切换。\n\n22. 一个赋值操作：\n\n    ```java\n    volatile Map aMap = new HashMap();\n    ```\n\n    可以分解为如下伪代码所示的几个子操作：\n\n    ```java\n    objRef = allocate(HashMap.class); // 子操作1：分配对象所需的存储空间\n    invokeConstructor(objRef); // 子操作2：初始化objRef引用的对象\n    aMap = objRef; // 子操作3：将对象引用写入变量aMap\n    ```\n\n    虽然volatile关键字仅保障其中的子操作3是一个原子操作，但是由于子操作1与子操作2仅涉及局部变量而未涉及共享变量，因此对变量aMap的赋值操作仍然是一个原子操作。\n\n23. 对于volatile变量的写操作，Java虚拟机会在操作之前插入一个`释放屏障`，并在该操作之后插入一个`存储屏障`。\n\n24. 对于volatile变量的读操作，Java虚拟机会在操作之前插入一个`加载屏障`，并在该操作之后插入一个`获取屏障`。\n\n25. 写volatile变量操作与该操作之前的任何读、写操作**不会被重排序**。\n\n26. 读volatile变量操作与该操作之后的任何读、写操作**不会被重排序**。\n\n27. volatile关键字在可见性方面仅仅是保证读线程能够读取到共享变量的相对新值。对于引用型变量和数组变量，volatile关键字并不能保证读线程能够读取到对象相应的字段、元素的相对新值。\n\n28. volatile变量的读、写操作都不会导致上下文切换，因此volatile的开销比锁要小。\n\n29. volatile使用的典型场景：\n\n    1. 使用volatile变量作为`状态标志`。\n\n    2. 使用volatile保障`可见性`。\n\n    3. 使用volatile变量代替锁。\n\n    4. 使用volatile实现简易版的读写锁。\n\n30. volatile关键字并非锁的代替品，volatile关键字和锁各有其适用条件。前者更适合于多个线程共享一个状态变量，而后者更适合于多个线程共享一组状态变量。某些情形下，我们可以将多个线程共享的一组状态变量合并成一个对象，用一个volatile变量来引用该对象，从而使我们不必要使用锁。\n\n31. `原子变量类`是基于CAS实现的能够保障对共享变量进行`read-modify-write`更新操作的原子性和可见性的一组工具类。\n\n32. `对象发布`是指使对象能够被其作用域之外的线程访问。\n\n33. 常见的对象发布形式包括：\n\n    1. 将对象引用存储到public变量中。\n\n    2. 在非private方法中返回一个对象。\n\n    3. 创建内部类，使得当前对象能够被这个内部类使用。\n\n    4. 通过方法调用将对象传递给外部方法。\n\n34. `static`关键字在多线程环境下有其特殊的含义，它能够保证一个线程即使在未使用其他同步机制的情况下也总是可以读取到一个类的静态变量的初始值。\n\n35. 对于引用型静态变量，`static`关键字还能够保障一个线程读取到该变量的初始值时，这个值所指向的对象已经初始化完毕。\n\n36. `static` 关键字仅仅保障读线程能够读取到相应字段的初始值，而不是相对新值。\n\n37. 当一个对象被发布到其他线程的时候，该对象的所有`final`字段都是初始化完毕的。\n\n38. 对于引用型`final`字段，`final`关键字还进一步确保该字段所引用的对象已经初始化完毕，即这些线程读取该字段所引用的对象的各个字段时所读取到的值都是相应字段的初始值。\n\n39. 当一个对象的引用对其他线程可见的时候，这些线程所看到的该对象的final字段必然是初始化完毕的。final关键字的作用仅是这种有序性的保障，它并不能保障包含final字段的对象的引用自身对其他线程的可见性。\n\n40. `安全发布`就是指对象以一种线程安全的方式被发布。\n\n41. 当一个对象的发布出现我们不期望的结果或者对象发布本身不是我们所期望的时候，我们就称该对象`逸出`。\n\n42. 对象逸出包括：\n\n    1. 在构造函器中将this赋值给一个共享变量。\n\n    2. 在构造器中将this作为方法参数传递给其他方法。\n\n    3. 在构造器中启动基于匿名类的线程。\n\n43. 一个对象在其初始化过程中没有出现this逸出，我们就称该对象为正确创建的对象。\n\n44. 实现对象的安全发布，通常可以依照以下顺序选择适用且开销最小的线程同步机制。\n\n    1. 使用staic关键字引用该对象的变量。\n\n    2. 使用final关键字修饰引用该对象的变量。\n\n    3. 使用volatile关键字修饰引用该对象的变量。\n\n    4. 使用AtomicReference来引用该对象。\n\n    5. 对访问该对象的代码进行加锁。\n\n## 第四章 牛刀小试：玩转线程\n\n1. 多线程编程中分而治之的使用主要有两种方式：**基于数据的分割**和**基于任务的分割**。\n\n2. 基于数据的分割的结果是产生多个`同质工作者线程`，即任务处理逻辑相同的线程。需要考虑如下因素：\n\n   1. 工作者线程数量的合理设置问题。\n\n   2. 工作者线程的异常处理问题。\n\n   3. 原始输入规模未知问题。\n\n   4. 程序的复杂性增加的问题。\n\n3. 为了提高任务的执行效率，我们可能使用多个线程去共同完成一个任务的执行。这就是基于任务的分割，其基本思想就是将任务按照一定的规则分解成若干子任务，并使用专门的工作者线程去执行这些子任务，从而实现任务的并发执行。\n\n4. 线程所执行的任务按照 其消耗的主要资源可划分为`CPU密集型`任务和`IO密集型`任务。\n\n5. CPU密集型任务执行过程中消耗的主要资源是CPU时间，CPU密集型任务的一个典型例子是加密和解密；IO密集型任务执行过程中消耗的主要资源是IO资源，典型的IO密集型任务就包括文件读写、网络读写等。\n\n6. 基于任务的分割结果是产生多个相互协作的`异质工作者线程`。\n\n7. `Amdahl’s 定律`描述了线程数与多线程程序相对于单线程程序的提速之间的关系。\n   $$\n   S_{max} = \\frac{1}{P + \\frac{1 - P}{N}}\n   $$\n   其中，N为处理器数量，程序中必须串行化的部分耗时占程序全部耗时的比率为P。\n\n8. 为使多线程程序能够获得较大的提速，我们**应该从算法入手，减少程序中必须串行的部分，而不是寄希望于增加线程数**。\n\n9. 线程数设置得过少可能导致无法充分利用处理器资源；而线程数设置得过大则又可能导致过多的上下文切换，从而反倒降低了系统的性能。\n\n10. 线程数的合理值可以根据以下规则设置：\n\n    1. 对于CPU密集型线程，考虑到这类线程执行任务时消耗的主要是处理器资源，我们可以将这类线程的线程数设置为$N_{cpu} $个。因为CPU密集型线程也可能由于某些原因（比如缺页中断）而被切出，此时为了避免处理器资源的浪费，我们也可以为这类线程设置一个额外的线程，即将线程数设置为$N_{cpu}  + 1$\n\n    2. 对于IO密集型线程，考虑到IO操作可能导致上下文切换，为这样的线程设置过多的线程会导致过多的额外系统开销。因此如果一个这样的工作者线程就可以满足我们的要求，那么就不要设置更多的线程数。如果一个工作者线程仍然不够用，那么我们可以考虑将这类线程的数量设置为$2 * N_{cpu} $\n\n11. **挖掘出程序中可并发点**是实现多线程编程的目标——并发计算的前提。\n\n12. 实现并发化的策略包括基于数据的分割策略和基于任务的分割策略。\n\n## 第五章 线程间协作\n\n1. 一个线程因其执行目标动作所需的保护条件未满足而被暂停的过程被称为`等待`。\n\n2. 一个线程更新了系统的状态，使得其他线程所需的保护条件得以满足的时候唤醒那些被暂停的线程的过程就被称为`通知`。\n\n3. 由于一个线程只有在持有一个对象的内部所的情况下才能够调用该对象的wait方法，因此Object.wait()调用总是放在相应对象所引导的临界区之中。\n\n4. 等待线程对保护条件的判断、Object.wait()的执行以及目标动作的执行必须放在同一个对象所引导的临界区之中。\n\n5. `Object.wait()`暂停当前线程时释放的锁只是与该wait方法所属对象的内部锁。当前线程所持有的其他内部锁、显示锁并不会因此而被释放。\n\n6. `Object.notify()`的执行线程持有的相应对象的内部锁只有在Object.notify()调用所在的临界区代码执行结束后才会被释放，而Object.notify()本身并不会将这个内部锁释放。因此，为了 使等待线程在其被唤醒之后能够尽快再次获得相应的内部锁，我们要尽可能地将Object.notify()调用放在靠近临界区结束的地方。\n\n7. `等待线程`和`通知线程`是同步在同一对象之上的两种线程。\n\n8. Java虚拟机会为每个对象维护一个`入口集`用于存储申请该对象内部锁的线程。Java虚拟机还会为每个对象维护一个被称为`等待集`的队列，该队列用于存储该对象上的等待线程。Object.wait()将当前线程暂停并释放相应的内部锁的同时会将当前线程存入该方法所属对象的等待集中。\n\n9. wait/notify的开销及问题\n\n   1. 过早唤醒问题\n\n   2. 信号丢失问题\n\n   3. 欺骗性唤醒问题\n\n   4. 上下文切换问题\n\n10. 只有在有证据表明使用`Object.notify()`足够的情况下才使用`Object.notify()`，只有在下列条件全部满足的情况下才能够用于替代`notifyAll`方法：\n\n    1. 一次通知仅需要唤醒至多一个线程。\n\n    2. 相应对象的等待集中仅包含同质等待线程。\n\n11. `join(long)`允许我们指定一个超时时间。如果目标线程没有在指定的时间内终止，那么当前线程也会继续运行。`join(long)`实际上就是使用了`wait/notify`来实现的。\n\n12. Java虚拟机会在目标线程的run方法运行结束后执行该线程的`notifyAll`方法来通知所有的等待线程。\n\n13. `Condition`接口可作为`wait/notify`的替代品来实现等待/通知，它为解决过早唤醒问题提供了支持，并解决了`Object.wait(long)`不能区分其返回是否是由等待超时而导致的问题。\n\n14. `Condition.await()/signal()`也要求其执行线程持有创建该Condition实例的显示锁。Condition实例也被称为条件变量或者条件队列。每个Condition实例内部都维护了一个用于存储等待线程的队列。\n\n15. `Condition`接口本身只是对解决过早唤醒问题提供了支持。要真正解决过早唤醒问题，我们需要通过应用代码维护保护条件与条件变量的await方法来实现其等待，并使通知线程在更新了相关共享变量之后，仅调用与这些共享变量有关的保护条件所对应的条件变量的`signal/signalAll`方法来实现通知。\n\n16. `Condition.awaitUntil(Date deadline)`可以用于实现带超时时间限制的等待，并且该方法的返回值能够区分该方法调用是由于等待超时而返回还是由于其他线程执行了相应条件变量的`signal/signalAll`方法而返回。\n\n17. 等待线程因执行`Condition.await()/awaitUntil(Date)`而被暂停的同时，其持有的相应显示锁也会被释放，等待线程被唤醒之后得以继续运行时需要再次申请相应的显示锁，然后等待线程对`Condition.await()/awaitUntil(Date)`的调用才能返回。\n\n18. `CountDownLatch`可以用来实现一个线程等待其他线程完成一组特定的操作之后才继续运行。这组操作被称为`先决操作`。\n\n19. `CountDownLatch`内部计数器值达到0后其值就恒定不变，后续执行该CountDownLatch实例的await方法的任何一个线程都不会被暂停。为了避免等待线程永远被暂停，`CountDownLatch.countDown()`调用必须放在代码中总是可以被执行到的地方，例如`finally`块中。\n\n20. 使用`CyclicBarrier`实现等待的线程被称为`参与方`，参与方只需要执行`CyclicBarrier.await()`就可以实现等待。\n\n21. 最后一个线程执行`CyclicBarrier.await()`会使得使用相应`CyclicBarrier`实例的其他所有参与方被唤醒，而最后一个线程自身并不会被暂停。\n\n22. 由于`CyclicBarrier`内部实现是基于条件变量的，因此`CyclicBarrier`的开销与条件变量的开销相似，其主要开销在可能产生的上下文切换。\n\n23. CyclicBarrier内部使用了一个条件变量trip来实现等待/通知。CyclicBarrier内部实现使用了分代的概念用于表示CyclicBarrier实例是可以重复使用的。\n\n24. 最后一个线程相当于通知线程，它执行费CyclicBarrier.await()会使得相应实例的parties值变为0，此时该线程会先执行barrierAction.run()，然后再执行 trip.signalAll()来唤醒所有等待线程。接着，开始下一个分代，即使得CyclicBarrier的parties指又重新恢复为其初始值。\n\n25. CyclicBarrier的典型应用场景包括以下几个:\n\n    1. 使得迭代算法并发化。\n\n    2. 在测试代码中模拟高并发。\n\n26. 将产品存入传输通道的线程就被称为生产者线程，从传输通道中取出产品进行消费的线程就被称为消费者线程。\n\n27. 一个方法或者操作如果能够导致其执行线程被暂停，那么我们就称相应的方法/操作为阻塞方法。阻塞方法能够导致上下文切换。\n\n28. 阻塞队列按照其存储空间的容量是否受限制来划分，可分为有界队列和无界队列。有界队列的存储容量限制是由应用程序制定的，无界队列的最大存储容量为Interger.MAX_VALUE($2^{31} - 1$)个元素。\n\n29. ArrayBlockingQueue的缺点是其内部在实现put、take操作的时候使用的是同一个锁，从而可能导致锁的高争用，进而导致较多的上下文切换。\n\n30. LinkedBlockingQueue既能实现无界队列，也能实现有界队列。\n\n31. LinkedBlockingQueue的优点是其内部在实现\bput、take操作的时候分别使用了两个显示锁（putLock和takeLock），这\b降低了锁争用的可能性。LinkedBlockingQueue的内部存储空间是一个链表，而链表节点所需的存储空间是动态分配的，put操作、take操作都会导致链表节点的动态创建和移除，因此LinkedBlockingQueue的缺点是它可能增加垃圾回收的负担。\n\n32. SynchronousQueue可以被看做一种特殊的有界队列。\n\n33. SynchronousQueue适合于在消费者处理能力和生产者处理能力相差不大的情况下使用。\n34. ArrayBlockingQueue和SynchronousQueue都既支持非公平调度也支持公平调度，而LinkedBlockingQueue仅支持非公平调度。\n35. 如果生产者线程和消费者线程之间的并发程度比较大，那么这些线程对传输通道内部所使用的锁的争用可能性也随之增加。这时，有界队列的实现适合选用LinkedBlockingQueue，否则我们可以考虑ArrayBlockingQueue。\n36. 使用无界队列作为传输通道的一个好处是put操作并不会导致生产者线程被阻塞。一般我们在使用无界队列作为传输通道的时候会同时限制生产者的生产速率。\n37. Semaphore.acquire() 和 Semaphore.release()总是配对使用。\n38. Semaphore.release()调用总是应该放在一个finally块中。\n39. 创建Semaphore时如果构造函数中的参数permits值为1，那么所创建的Semaphore实例相当于一个互斥锁。与其他互斥锁不同的是，由于一个线程可以在未执行过Semaphore.acquire()的情况下执行Semaphore.release()，因此这种互斥锁允许一个线程释放另一个线程所持有的锁。\n40. PipedOutputStream和PipedInputStream适合在两个线程间使用，即适用于单生产者-单消费者的情形。\n41. 输出异常的处理。如果生产者线程在其执行过程中出现了不可恢复的异常，那么消费者线程就会永远也无法读取到新的数据。\n42. 当消费者线程消费一个已填充的缓冲区时，另外一个缓冲区可以由生产者线程进行填充，从而实现了数据生成与消费的并发。这种缓冲技术就被称为双缓冲。\n43. Exchanger.exchange(V)的返回值是对方线程执行该方法时所指定的参数x的值。因此，Exchanger.exchange(V)的返回值就造成一种生产者线程和消费者线程之间交换缓冲区的效果。\n44. 中断可以被看做由一个线程发送给另一个线程的一种指示，该指示用于表示发起线程希望目标线程停止其正在执行的操作。中断仅仅代表发起线程的一个诉求，目标线程可能会满足发起线程的诉求，也可能根本不会理会发起线程的诉求。Java平台会为每个线程维护一个被称为中断标记的布尔型状态变量用于表示相应线程释放接收到了中断。\n45. 目标线程检查中断标记后所执行的操作，被称为目标线程对中断的响应，简称中断响应。\n46. 能够响应中断的方法通常是在执行阻塞操作之前判断中断标志，若中断标志值为true则抛出InterruptedException。\n47. 如果发起线程给目标线程发送中断的那一刻，目标线程已经由于执行了一些阻塞方法操作而被暂停，那么此时Java虚拟机可能会设置目标线程的线程中断标记并将该线程唤醒，从而使目标线程被唤醒后继续执行的代码再次得到相应中断的机会。所以，给目标线程发送中断还能够产生唤醒目标线程的效果。\n48. 在单生产者-单消费者模式中，停止生产者、消费者线程有一种简单的方法：生产者线程在其终止前往传’输通道中存入一个特殊产品作为消费者线程的线程停止标记，消费者线程取出这个产品之后就可以退出run方法而终止了。\n\n## 第六章 保障线程安全的设计技术\n","source":"_posts/reading/java-multithread-programming-guide-in-action-digest.md","raw":"---\ntitle: 《Java多线程编程实战指南》（核心篇）—— 摘要\ntags: \n - 摘要\n - Java\n - 多线程\ncategories: 阅读\ndate: 2018-12-26 19:55:51\n---\n> 书籍作者：黄文海\n> 出版社：电子工业出版社\n\n## 思维导图\n\n[全文思维导图](https://mubu.com/doc/lW2C-KYYy0)\n\n## 第一章 走进Java世界中的线程\n\n1. `进程`是程序向操作系统申请资源的基本单位，`线程`是进程中可独立执行的最小单位。\n2. 一个进程可以包含多个线程。\n3. 线程所要完成的计算被称为`任务`。\n4. 启动一个线程的实质是请求Java虚拟机运行相应的线程，而这个线程具体何时能够运行是由线程调度器决定的。\n5. Java虚拟机会为每个线程分配调用栈所需的内存空间。\n6. Java平台中的任意一段代码总是由确定的线程负责执行的，这个线程就相应的被称为这段代码的`执行线程`。可以通过调用Thread.currentThread()来获取这段代码的执行线程。\n7. 线程的属性：\n\n| 属性               | 类型及用途                                                   | 注意事项                                                     |\n| ------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 编号（ID）         | Long。用于标识不同的线程。                                   | 不同线程虽然拥有的编号不同，但是某个编号的线程运行结束后，该编号可能被后续创建的线程使用，这种编号的唯一性只在Java虚拟机的一次运行中有效。 |\n| 名称（name）       | String。用于区分不同线程。（面向人）默认值与线程编号有关，默认值格式为：“Thread-线程编号” | 为每一个线程设置一个简短而含义明确的名称有助于多线程程序的调试和问题定位。 |\n| 线程类别（Daemon） | boolean。true表示相应的线程为守护线程，否则表示相应的线程为用户线程。 | 该属性必须在线程启动之前设置，否则setDaemon方法会抛出异常。负责一些关键任务的线程不适合设置为守护线程。 |\n| 优先级（Priority） | int。该属性本质上是给线程调度器的提示，用于表示应用程序希望线程能够优先得以运行。Java定义了1~10的10个优先级，默认值为5。 | 一般使用默认优先级即可。   |\n\n8. `用户线程`会阻止Java虚拟机的正常停止，即一个Java虚拟机只有在其所有用户线程都运行结束的情况下才能正常停止。而`守护线程`则不会影响Java虚拟机的正常停止，守护线程通常用于执行一些重要性不是很高的任务，例如用于监视其他线程的运行情况。\n9. Thread的`join`方法的作用相当于执行该方法的线程和线程调度器说：“我得先暂停一下，等到另外一个线程运行结束后我才能继续干活。”\n10. `yield`静态方法的作用相当于执行该方法的线程对线程调度器说：“我现在不急，如果别人需要处理器资源极度话先给他用吧。当然，如果没有其他人要用，我也不介意继续占用。”\n11. `sleep`静态方法的作用相当于执行该方法的线程对线程调度器说：“我想小憩一会儿，过段时间再叫醒我继续干活吧。”\n12. 假设线程A所执行的代码创建了线程B，那么，习惯上我们称线程B为线程A的`子线程`，相应地线程A就被称为线程B的`父线程`。\n13. 在Java平台中，一个线程是否是守护线程默认取决于其父线程。\n14. 一个线程的优先级默认值为该线程的父线程的优先级。\n15. `Thread.State`是一个枚举类型，用来表示线程的当前状态。\n    1. `NEW`：一个已创建而未启动的线程处于该状态。 \n    2. `RUNNABLE`：该状态可以被看成一个复合状态。它包括两个子状态：READY和RUNNING。\n    3. `BLOCKED`：线程进行阻塞式操作或申请由其他线程正在独占的资源时，相应的线程会处于该状态。\n    4. `WAITING`：执行某些特定方法之后就会处于这种等待状态，包括：Object.wait(),Thread.join(),LockSupport.park(),Condition.await()。能够使相应线程从WAITING变更为RUNNABLE的相应方法包括：Objeck.notify()/notifyAll()、LockSupport.unpark()、Condition.signal()。\n    5. `TIMED WAITING`：限时等待状态。\n    6. `TERMINATED`：已执行结束的线程处于该状态。\n16. Java程序的线程转储包含的线程具体信息包括线程的属性、生命周期状态、线程的调用栈以及锁相关的信息。\n17. 多线程编程具有以下优势：\n    1. 提高系统的**吞吐率**。\n    2. 提高**响应性**。\n    3. 充分利用多核优势。\n    4. 最小化对系统资源的使用。\n    5. 简化程序的结构\n18. 多线程编程的风险：\n    1. 线程安全问题。\n    2. 线程活性问题。\n    3. 上下文切换。\n    4. 可靠性。\n\n## 第二章 多线程编程的目标与挑战\n\n1. 多线程编程的实质就是将任务的处理方式由串行改为`并发`，即实现并发化，以发挥并发的优势。\n2. `状态变量`：即类的实例变量、静态变量。\n3. `共享变量`：即可以被多个线程共同访问的变量。\n4. `竞态`是指计算的正确性依赖于相对时间顺序或者线程的交错。\n5. 竞态往往伴随着读取`脏数据`问题。\n6. 竞态的两种模式：`read-modify-write`（读-改-写）和`check-then-act`（检测后行动）。\n7. 如果一个类在单线程环境下能够运行正常，并且在多线程环境下，在其使用方不必为其做任何改变的情况下也能运作正常，那么我们就称其是`线程安全`的，相应地，我们称这个类具有线程安全性。\n8. 对于涉及共享变量访问的操作，若该操作从其执行线程以外的任意线程来看是不可分割的，那么该操作就是原子操作，相应地我们称该操作具有`原子性`。\n9. Java中有两种方式来实现原子性。一种是使用`锁`，另一种是利用处理器提供的专门`CAS`指令。\n10. 在多线程环境下，一个线程对某个变量进行更新之后，后续访问该变量的线程可能无法立刻读取到这个更新的结果，甚至永远也无法读取到这个更新的结果，这就是线程安全的另一个表现形式：`可见性`。\n11. 可见性问题可能来源于JIT编译器的优化，也可能来源于`寄存器`和`高速缓存`。\n12. 虽然一个处理器的高速缓存中的内容不能被另一个处理器直接读取，但是一个处理器可以通过`缓存一致性协议`来读取其他处理器的高速缓存的数据，并将读到的数据更新到该处理器的高速缓存中。\n13. `volatile`关键字所起到的一个作用就是，提示JIT编译器被修饰的变量可能被多个线程共享，以阻止JIT编译器做出可能导致程序运行不正常的优化。另外一个作用是读取一个volatile关键字修饰的变量会使相应的处理器执行刷新处理器缓存的动作，写一个volatile关键字修饰的变量会使相应的处理器执行冲刷处理器缓存的动作，从而保障可见性。\n14. 对于同一个共享变量而言，一个线程更新了该变量的值之后，其他线程能够读取到这个更新后的值，那么这个值就被称为该变量的相对新值。\n15. 父线程在启动子线程之前对共享变量的更新对于子线程来说是可见的。\n16. 一个线程终止后该线程对共享变量的更新对于调用该线程的`join`方法的线程而言是可见的。\n17. `有序性`指在什么情况下一个处理器上运行的一个线程所执行的内存访问操作在另一个处理器上运行的其他线程看起来是乱序的。\n18. `重排序`是对内存访问有关的操作所做的一种优化，它可以在不影响单线程程序正确性的情况下提升程序的性能。重排序主要包括：`指令重排序`和`存储子系统重排序`。\n19. 重排序可能导致线程安全问题。\n20. 重排序不是必然出现的。\n21. 处理器也可能执行指令重排序，这使得执行顺序和程序顺序不一致，处理器对指令进行重排序也被称为处理器的乱序执行。处理器乱序执行并不会对单线程程序的正确性产生影响。\n22. 主内存相对于处理器是一个慢速设备。为了避免其拖后腿，处理器并不是直接访问主内存，而是通过高速缓存访问主内存的。\n23. 内存重排序包括：LoadLoad重排序、StoreStore重排序、LoadStore重排序、StoreLoad重排序。\n24. 存在数据依赖关系的语句不会被重排序，只有不存在数据依赖关系的语句才可能会被重排序。\n25. 可见性是有序性的基础，有序性影响可见性。\n26. 一个线程由于其时间片用完或者其自身原因被迫或者主动暂停其运行时，另外一个线程可以被操作系统选中占用处理器开始或者继续其运行。这种一个线程暂停，另一个线程被选中开始或者继续运行的过程就叫做`上下文切换`。\n27. 进度信息就被称为上下文，它一般包括通用寄存器的内容和程序计数器的内容。\n28. 自发性上下文切换指线程由于其自身因素导致的切出。如执行以下指令：Thread.sleep()、Object.wait()、Thread.join()、LockSupport.park()。\n29. 非自发性上下文切换指线程由于线程调度器的原因被迫切出。\n30. 上下文切换的开销包括**直接开销**和**间接开销**。\n    1. 操作系统保存和恢复上下文所需的开销，这主要是处理器时间开销。\n    2. 线程调度器进行线程调度的开销。\n    3. 处理器高速缓存重新加载的开销。\n    4. 上下文切换也可能导致整个一级高速缓存中的内容被冲刷。\n31. 这些由于资源稀缺性或者程序自身的问题和缺陷导致线程一直处于非RUNNABLE状态，或者线程虽然处于RUNNABLE状态但是其要执行的任务却一直无法进展的现象就被称为`线程活性故障`。常见的活性故障包括：\n    1. 死锁\n    2. 锁死\n    3. 活锁\n    4. 饥饿\n32. 一次只能够被一个线程占用的资源被称为`排他性`资源。在一个线程占用一个排他性资源进行访问时，其他线程视图访问该资源的现象就被称为`资源争用`。\n33. 同一时间内，处于运行状态的线程数量越多，我们就称并发程度越高，简称`高并发`。\n34. 在多个线程申请同一个排他性资源的情况下，决定哪个线程会被授予该资源的独占权，即选择哪个申请者占用该资源的过程就是`资源的调度`。\n35. 如果资源的任何一个先申请者总是能够比任何一个后申请者先获得该资源的独占权，那么相应的资源调度策略就被称为是`公平`的，如果资源的后申请者可能比先申请者先获得资源的独占权，那么相应的资源调度策略就被称为`非公平`的。\n36. 在极端的情况下，非公平调度策略可能导致等待队列中的线程永远无法获得其所需的资源，即出现`饥饿`。\n37. 一般来说，非公平调度策略的**吞吐率高**，即单位时间内它可以为更多的申请者调配资源。其缺点是，从申请者个体的角度来看这些申请者获得相应资源的独占权所需要的**时间偏差**可能比较大。\n38. 非公平调度策略可能带来一个好处——减少上下文切换的次数。\n39. 多数线程占用资源的时间相当长的情况下不适合使用**非公平调度策略**。\n40. 非公平调度策略是我们多数情况下的**首选**调度策略。其优点是吞吐率较大；缺点是资源申请者申请资源所需的时间偏差可能较大，并可能导致饥饿。公平调度策略适合在资源的时间相对长或资源的平均申请时间间隔相对长的情况下，或者对资源申请所需的时间偏差有所要求的情况下使用。其优点是线程申请资源所需的时间偏差较小，并且不会导致线程饥饿现象；其缺点是吞吐率较小。\n\n## 第三章 Java线程同步机制\n\n1. `线程同步机制`是一套用于协调线程间的数据访问及活动的机制，该机制用用户保障线程安全以及实现这些线程的共同目标。\n\n2. 线程安全问题的产生前提是多个线程并发访问共享变量、共享资源。\n\n3. 锁的持有线程在其获得锁之后和释放锁之前这段时间内所执行的代码被称为`临界区`。\n\n4. Java平台中的锁包括`内部锁`和`显示锁`。\n\n5. 锁是通过`互斥`保障原子性的。\n\n6. 一个锁实例锁保护的共享数据的数量大小就被称为锁的`粒度`。\n\n7. 锁的开销包括锁的申请和释放锁产生的开销，以及锁可能导致的上下文切换的开销，这些开销主要是处理器时间。\n\n8. `锁泄漏`是指一个线程获得某个锁之后，由于程序的错误缺陷致使该锁一直无法被释放而导致其他线程一直无法获得该锁的现象。\n\n9. Java平台中的任何一个对象都有唯一的一个与之关联的锁。这种锁被称为`监视器`或者`内部锁`。内部锁是一种`排他锁`，它能保障原子性、可见性和有序性。\n\n10. Java虚拟机会为每个内部锁分配一个`入口集`，用于记录等待获得相应内部锁的线程。多个线程申请同一个锁的时候，只有一个申请者能够成为该锁的持有线程，而其他申请者的申请操作会失败。\n\n11. 公平锁保障锁调度的公平性往往是以增加了线程的暂停和唤醒的可能性，即增加了上下文切换为代价的。因此公平锁适合于锁被持有的时间相对长或者线程申请锁的平均间隔时间相对长的情形。总得来说使用公平锁的开销比使用非公平锁的开销要大，因此显式锁默认使用的是非公平调度策略。\n\n12. `读写锁`是一种改进型的排它锁，也被称为共享/排它锁。读锁是`共享`的，写锁是`排他`的。\n\n13. 读写锁适合于在以下条件同时得以满足的场景中使用：\n\n    1. 只读操作比写操作要频繁得多。\n    2. 读线程持有锁的时间比较长。\n\n14. `ReetrantReadWriteLock`所实现的读写锁是`个可重入锁`。ReetrantReadWriteLock支持写锁的`降级`，即一个线程持有读写锁的写锁的情况下可以继续获得相应的读锁。\n\n15. `ReetrantReadWriteLock`并不支持锁的升级。读线程如果要转而申请写锁，需要先释放读锁，然后申请相应的写锁。\n\n16. `内存屏障`是对一类仅针对内存读、写操作指令的跨处理器架构的比较底层的抽象。内存屏障是被插入到两个指令之间进行使用的，其作用是**禁止编译器、处理器重排序从而保障有序性**。\n\n17. 按照可见性保障来划分，`内存屏障`可分为`加载屏障`和`存储屏障`。加载屏障的作用是**刷新处理器缓存**，存储屏障的作用是**冲刷处理器缓存**。Java虚拟机会在MonitorExit对应的机器码指令之后插入一个`存储屏障`，这就保障了写线程在释放锁之前在临界区中对共享变量所做的更新对读线程是可同步的。相应的，Java虚拟机会在MonitorEnter对应的机器码指令之后临界区开始之前的地方插入一个`加载屏障`，这使得读线程的执行处理器能够将写线程对相应共享变量所做的更新从其他处理器同步到该处理器的高速缓存中。\n\n18. 按照有序性保障来划分，`内存屏障`可以分为`获取屏障`和`释放屏障`。获取屏障的使用方式是在一个读操作之后插入该内存屏障，其作用是**禁止该读操作与其后的任何读写操作之间进行重排序**，这相当于在进行后续操作之前先要获得相应共享数据的所有权。释放屏障的使用方式是在一个写操作之前插入该内存屏障，其作用是**禁止该写操作与其前面的任何读写操作之间进行重排序**。Java虚拟机会在MonitorEnter对应的机器码指令之后临界区开始之前的地方插入一个获取屏障，并在临界区结束之后MonitorExit对应的机器码指令之前的地方插入一个释放屏障。\n\n19. 临界区之外的语句可以被重排序到临界区之内，而临界区内的操作无法被重排序到临界区之外。\n\n    1. 临界区内的操作不允许被重排序到临界区之外。\n\n    2. 临界区内的操作之间允许被重排序。\n\n    3. 临界区外的操作之间可以被重排序。\n\n    4. 锁申请与锁释放操作不能被重排序。\n\n    5. 两个锁申请操作不能被重排序。\n\n    6. 两个锁释放操作不能被重排序。\n\n    7. 临界区外的操作可以被重排到临界区之内。\n\n20. `volatile`变量不会被编译器分配到寄存器进行存储，对volatile变量的读写操作都是内存访问操作。\n\n21. `volatile`关键字常被称为`轻量级锁`，其作用与锁的作用有相同的地方：保证可见性和有序性。原子性方面它仅能保证写volatile变量操作的原子性，但没有锁的排他性。其次，volatile关键字的使用不会引起上下文切换。\n\n22. 一个赋值操作：\n\n    ```java\n    volatile Map aMap = new HashMap();\n    ```\n\n    可以分解为如下伪代码所示的几个子操作：\n\n    ```java\n    objRef = allocate(HashMap.class); // 子操作1：分配对象所需的存储空间\n    invokeConstructor(objRef); // 子操作2：初始化objRef引用的对象\n    aMap = objRef; // 子操作3：将对象引用写入变量aMap\n    ```\n\n    虽然volatile关键字仅保障其中的子操作3是一个原子操作，但是由于子操作1与子操作2仅涉及局部变量而未涉及共享变量，因此对变量aMap的赋值操作仍然是一个原子操作。\n\n23. 对于volatile变量的写操作，Java虚拟机会在操作之前插入一个`释放屏障`，并在该操作之后插入一个`存储屏障`。\n\n24. 对于volatile变量的读操作，Java虚拟机会在操作之前插入一个`加载屏障`，并在该操作之后插入一个`获取屏障`。\n\n25. 写volatile变量操作与该操作之前的任何读、写操作**不会被重排序**。\n\n26. 读volatile变量操作与该操作之后的任何读、写操作**不会被重排序**。\n\n27. volatile关键字在可见性方面仅仅是保证读线程能够读取到共享变量的相对新值。对于引用型变量和数组变量，volatile关键字并不能保证读线程能够读取到对象相应的字段、元素的相对新值。\n\n28. volatile变量的读、写操作都不会导致上下文切换，因此volatile的开销比锁要小。\n\n29. volatile使用的典型场景：\n\n    1. 使用volatile变量作为`状态标志`。\n\n    2. 使用volatile保障`可见性`。\n\n    3. 使用volatile变量代替锁。\n\n    4. 使用volatile实现简易版的读写锁。\n\n30. volatile关键字并非锁的代替品，volatile关键字和锁各有其适用条件。前者更适合于多个线程共享一个状态变量，而后者更适合于多个线程共享一组状态变量。某些情形下，我们可以将多个线程共享的一组状态变量合并成一个对象，用一个volatile变量来引用该对象，从而使我们不必要使用锁。\n\n31. `原子变量类`是基于CAS实现的能够保障对共享变量进行`read-modify-write`更新操作的原子性和可见性的一组工具类。\n\n32. `对象发布`是指使对象能够被其作用域之外的线程访问。\n\n33. 常见的对象发布形式包括：\n\n    1. 将对象引用存储到public变量中。\n\n    2. 在非private方法中返回一个对象。\n\n    3. 创建内部类，使得当前对象能够被这个内部类使用。\n\n    4. 通过方法调用将对象传递给外部方法。\n\n34. `static`关键字在多线程环境下有其特殊的含义，它能够保证一个线程即使在未使用其他同步机制的情况下也总是可以读取到一个类的静态变量的初始值。\n\n35. 对于引用型静态变量，`static`关键字还能够保障一个线程读取到该变量的初始值时，这个值所指向的对象已经初始化完毕。\n\n36. `static` 关键字仅仅保障读线程能够读取到相应字段的初始值，而不是相对新值。\n\n37. 当一个对象被发布到其他线程的时候，该对象的所有`final`字段都是初始化完毕的。\n\n38. 对于引用型`final`字段，`final`关键字还进一步确保该字段所引用的对象已经初始化完毕，即这些线程读取该字段所引用的对象的各个字段时所读取到的值都是相应字段的初始值。\n\n39. 当一个对象的引用对其他线程可见的时候，这些线程所看到的该对象的final字段必然是初始化完毕的。final关键字的作用仅是这种有序性的保障，它并不能保障包含final字段的对象的引用自身对其他线程的可见性。\n\n40. `安全发布`就是指对象以一种线程安全的方式被发布。\n\n41. 当一个对象的发布出现我们不期望的结果或者对象发布本身不是我们所期望的时候，我们就称该对象`逸出`。\n\n42. 对象逸出包括：\n\n    1. 在构造函器中将this赋值给一个共享变量。\n\n    2. 在构造器中将this作为方法参数传递给其他方法。\n\n    3. 在构造器中启动基于匿名类的线程。\n\n43. 一个对象在其初始化过程中没有出现this逸出，我们就称该对象为正确创建的对象。\n\n44. 实现对象的安全发布，通常可以依照以下顺序选择适用且开销最小的线程同步机制。\n\n    1. 使用staic关键字引用该对象的变量。\n\n    2. 使用final关键字修饰引用该对象的变量。\n\n    3. 使用volatile关键字修饰引用该对象的变量。\n\n    4. 使用AtomicReference来引用该对象。\n\n    5. 对访问该对象的代码进行加锁。\n\n## 第四章 牛刀小试：玩转线程\n\n1. 多线程编程中分而治之的使用主要有两种方式：**基于数据的分割**和**基于任务的分割**。\n\n2. 基于数据的分割的结果是产生多个`同质工作者线程`，即任务处理逻辑相同的线程。需要考虑如下因素：\n\n   1. 工作者线程数量的合理设置问题。\n\n   2. 工作者线程的异常处理问题。\n\n   3. 原始输入规模未知问题。\n\n   4. 程序的复杂性增加的问题。\n\n3. 为了提高任务的执行效率，我们可能使用多个线程去共同完成一个任务的执行。这就是基于任务的分割，其基本思想就是将任务按照一定的规则分解成若干子任务，并使用专门的工作者线程去执行这些子任务，从而实现任务的并发执行。\n\n4. 线程所执行的任务按照 其消耗的主要资源可划分为`CPU密集型`任务和`IO密集型`任务。\n\n5. CPU密集型任务执行过程中消耗的主要资源是CPU时间，CPU密集型任务的一个典型例子是加密和解密；IO密集型任务执行过程中消耗的主要资源是IO资源，典型的IO密集型任务就包括文件读写、网络读写等。\n\n6. 基于任务的分割结果是产生多个相互协作的`异质工作者线程`。\n\n7. `Amdahl’s 定律`描述了线程数与多线程程序相对于单线程程序的提速之间的关系。\n   $$\n   S_{max} = \\frac{1}{P + \\frac{1 - P}{N}}\n   $$\n   其中，N为处理器数量，程序中必须串行化的部分耗时占程序全部耗时的比率为P。\n\n8. 为使多线程程序能够获得较大的提速，我们**应该从算法入手，减少程序中必须串行的部分，而不是寄希望于增加线程数**。\n\n9. 线程数设置得过少可能导致无法充分利用处理器资源；而线程数设置得过大则又可能导致过多的上下文切换，从而反倒降低了系统的性能。\n\n10. 线程数的合理值可以根据以下规则设置：\n\n    1. 对于CPU密集型线程，考虑到这类线程执行任务时消耗的主要是处理器资源，我们可以将这类线程的线程数设置为$N_{cpu} $个。因为CPU密集型线程也可能由于某些原因（比如缺页中断）而被切出，此时为了避免处理器资源的浪费，我们也可以为这类线程设置一个额外的线程，即将线程数设置为$N_{cpu}  + 1$\n\n    2. 对于IO密集型线程，考虑到IO操作可能导致上下文切换，为这样的线程设置过多的线程会导致过多的额外系统开销。因此如果一个这样的工作者线程就可以满足我们的要求，那么就不要设置更多的线程数。如果一个工作者线程仍然不够用，那么我们可以考虑将这类线程的数量设置为$2 * N_{cpu} $\n\n11. **挖掘出程序中可并发点**是实现多线程编程的目标——并发计算的前提。\n\n12. 实现并发化的策略包括基于数据的分割策略和基于任务的分割策略。\n\n## 第五章 线程间协作\n\n1. 一个线程因其执行目标动作所需的保护条件未满足而被暂停的过程被称为`等待`。\n\n2. 一个线程更新了系统的状态，使得其他线程所需的保护条件得以满足的时候唤醒那些被暂停的线程的过程就被称为`通知`。\n\n3. 由于一个线程只有在持有一个对象的内部所的情况下才能够调用该对象的wait方法，因此Object.wait()调用总是放在相应对象所引导的临界区之中。\n\n4. 等待线程对保护条件的判断、Object.wait()的执行以及目标动作的执行必须放在同一个对象所引导的临界区之中。\n\n5. `Object.wait()`暂停当前线程时释放的锁只是与该wait方法所属对象的内部锁。当前线程所持有的其他内部锁、显示锁并不会因此而被释放。\n\n6. `Object.notify()`的执行线程持有的相应对象的内部锁只有在Object.notify()调用所在的临界区代码执行结束后才会被释放，而Object.notify()本身并不会将这个内部锁释放。因此，为了 使等待线程在其被唤醒之后能够尽快再次获得相应的内部锁，我们要尽可能地将Object.notify()调用放在靠近临界区结束的地方。\n\n7. `等待线程`和`通知线程`是同步在同一对象之上的两种线程。\n\n8. Java虚拟机会为每个对象维护一个`入口集`用于存储申请该对象内部锁的线程。Java虚拟机还会为每个对象维护一个被称为`等待集`的队列，该队列用于存储该对象上的等待线程。Object.wait()将当前线程暂停并释放相应的内部锁的同时会将当前线程存入该方法所属对象的等待集中。\n\n9. wait/notify的开销及问题\n\n   1. 过早唤醒问题\n\n   2. 信号丢失问题\n\n   3. 欺骗性唤醒问题\n\n   4. 上下文切换问题\n\n10. 只有在有证据表明使用`Object.notify()`足够的情况下才使用`Object.notify()`，只有在下列条件全部满足的情况下才能够用于替代`notifyAll`方法：\n\n    1. 一次通知仅需要唤醒至多一个线程。\n\n    2. 相应对象的等待集中仅包含同质等待线程。\n\n11. `join(long)`允许我们指定一个超时时间。如果目标线程没有在指定的时间内终止，那么当前线程也会继续运行。`join(long)`实际上就是使用了`wait/notify`来实现的。\n\n12. Java虚拟机会在目标线程的run方法运行结束后执行该线程的`notifyAll`方法来通知所有的等待线程。\n\n13. `Condition`接口可作为`wait/notify`的替代品来实现等待/通知，它为解决过早唤醒问题提供了支持，并解决了`Object.wait(long)`不能区分其返回是否是由等待超时而导致的问题。\n\n14. `Condition.await()/signal()`也要求其执行线程持有创建该Condition实例的显示锁。Condition实例也被称为条件变量或者条件队列。每个Condition实例内部都维护了一个用于存储等待线程的队列。\n\n15. `Condition`接口本身只是对解决过早唤醒问题提供了支持。要真正解决过早唤醒问题，我们需要通过应用代码维护保护条件与条件变量的await方法来实现其等待，并使通知线程在更新了相关共享变量之后，仅调用与这些共享变量有关的保护条件所对应的条件变量的`signal/signalAll`方法来实现通知。\n\n16. `Condition.awaitUntil(Date deadline)`可以用于实现带超时时间限制的等待，并且该方法的返回值能够区分该方法调用是由于等待超时而返回还是由于其他线程执行了相应条件变量的`signal/signalAll`方法而返回。\n\n17. 等待线程因执行`Condition.await()/awaitUntil(Date)`而被暂停的同时，其持有的相应显示锁也会被释放，等待线程被唤醒之后得以继续运行时需要再次申请相应的显示锁，然后等待线程对`Condition.await()/awaitUntil(Date)`的调用才能返回。\n\n18. `CountDownLatch`可以用来实现一个线程等待其他线程完成一组特定的操作之后才继续运行。这组操作被称为`先决操作`。\n\n19. `CountDownLatch`内部计数器值达到0后其值就恒定不变，后续执行该CountDownLatch实例的await方法的任何一个线程都不会被暂停。为了避免等待线程永远被暂停，`CountDownLatch.countDown()`调用必须放在代码中总是可以被执行到的地方，例如`finally`块中。\n\n20. 使用`CyclicBarrier`实现等待的线程被称为`参与方`，参与方只需要执行`CyclicBarrier.await()`就可以实现等待。\n\n21. 最后一个线程执行`CyclicBarrier.await()`会使得使用相应`CyclicBarrier`实例的其他所有参与方被唤醒，而最后一个线程自身并不会被暂停。\n\n22. 由于`CyclicBarrier`内部实现是基于条件变量的，因此`CyclicBarrier`的开销与条件变量的开销相似，其主要开销在可能产生的上下文切换。\n\n23. CyclicBarrier内部使用了一个条件变量trip来实现等待/通知。CyclicBarrier内部实现使用了分代的概念用于表示CyclicBarrier实例是可以重复使用的。\n\n24. 最后一个线程相当于通知线程，它执行费CyclicBarrier.await()会使得相应实例的parties值变为0，此时该线程会先执行barrierAction.run()，然后再执行 trip.signalAll()来唤醒所有等待线程。接着，开始下一个分代，即使得CyclicBarrier的parties指又重新恢复为其初始值。\n\n25. CyclicBarrier的典型应用场景包括以下几个:\n\n    1. 使得迭代算法并发化。\n\n    2. 在测试代码中模拟高并发。\n\n26. 将产品存入传输通道的线程就被称为生产者线程，从传输通道中取出产品进行消费的线程就被称为消费者线程。\n\n27. 一个方法或者操作如果能够导致其执行线程被暂停，那么我们就称相应的方法/操作为阻塞方法。阻塞方法能够导致上下文切换。\n\n28. 阻塞队列按照其存储空间的容量是否受限制来划分，可分为有界队列和无界队列。有界队列的存储容量限制是由应用程序制定的，无界队列的最大存储容量为Interger.MAX_VALUE($2^{31} - 1$)个元素。\n\n29. ArrayBlockingQueue的缺点是其内部在实现put、take操作的时候使用的是同一个锁，从而可能导致锁的高争用，进而导致较多的上下文切换。\n\n30. LinkedBlockingQueue既能实现无界队列，也能实现有界队列。\n\n31. LinkedBlockingQueue的优点是其内部在实现\bput、take操作的时候分别使用了两个显示锁（putLock和takeLock），这\b降低了锁争用的可能性。LinkedBlockingQueue的内部存储空间是一个链表，而链表节点所需的存储空间是动态分配的，put操作、take操作都会导致链表节点的动态创建和移除，因此LinkedBlockingQueue的缺点是它可能增加垃圾回收的负担。\n\n32. SynchronousQueue可以被看做一种特殊的有界队列。\n\n33. SynchronousQueue适合于在消费者处理能力和生产者处理能力相差不大的情况下使用。\n34. ArrayBlockingQueue和SynchronousQueue都既支持非公平调度也支持公平调度，而LinkedBlockingQueue仅支持非公平调度。\n35. 如果生产者线程和消费者线程之间的并发程度比较大，那么这些线程对传输通道内部所使用的锁的争用可能性也随之增加。这时，有界队列的实现适合选用LinkedBlockingQueue，否则我们可以考虑ArrayBlockingQueue。\n36. 使用无界队列作为传输通道的一个好处是put操作并不会导致生产者线程被阻塞。一般我们在使用无界队列作为传输通道的时候会同时限制生产者的生产速率。\n37. Semaphore.acquire() 和 Semaphore.release()总是配对使用。\n38. Semaphore.release()调用总是应该放在一个finally块中。\n39. 创建Semaphore时如果构造函数中的参数permits值为1，那么所创建的Semaphore实例相当于一个互斥锁。与其他互斥锁不同的是，由于一个线程可以在未执行过Semaphore.acquire()的情况下执行Semaphore.release()，因此这种互斥锁允许一个线程释放另一个线程所持有的锁。\n40. PipedOutputStream和PipedInputStream适合在两个线程间使用，即适用于单生产者-单消费者的情形。\n41. 输出异常的处理。如果生产者线程在其执行过程中出现了不可恢复的异常，那么消费者线程就会永远也无法读取到新的数据。\n42. 当消费者线程消费一个已填充的缓冲区时，另外一个缓冲区可以由生产者线程进行填充，从而实现了数据生成与消费的并发。这种缓冲技术就被称为双缓冲。\n43. Exchanger.exchange(V)的返回值是对方线程执行该方法时所指定的参数x的值。因此，Exchanger.exchange(V)的返回值就造成一种生产者线程和消费者线程之间交换缓冲区的效果。\n44. 中断可以被看做由一个线程发送给另一个线程的一种指示，该指示用于表示发起线程希望目标线程停止其正在执行的操作。中断仅仅代表发起线程的一个诉求，目标线程可能会满足发起线程的诉求，也可能根本不会理会发起线程的诉求。Java平台会为每个线程维护一个被称为中断标记的布尔型状态变量用于表示相应线程释放接收到了中断。\n45. 目标线程检查中断标记后所执行的操作，被称为目标线程对中断的响应，简称中断响应。\n46. 能够响应中断的方法通常是在执行阻塞操作之前判断中断标志，若中断标志值为true则抛出InterruptedException。\n47. 如果发起线程给目标线程发送中断的那一刻，目标线程已经由于执行了一些阻塞方法操作而被暂停，那么此时Java虚拟机可能会设置目标线程的线程中断标记并将该线程唤醒，从而使目标线程被唤醒后继续执行的代码再次得到相应中断的机会。所以，给目标线程发送中断还能够产生唤醒目标线程的效果。\n48. 在单生产者-单消费者模式中，停止生产者、消费者线程有一种简单的方法：生产者线程在其终止前往传’输通道中存入一个特殊产品作为消费者线程的线程停止标记，消费者线程取出这个产品之后就可以退出run方法而终止了。\n\n## 第六章 保障线程安全的设计技术\n","slug":"reading/java-multithread-programming-guide-in-action-digest","published":1,"updated":"2018-12-28T01:36:06.444Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5na000gwu9kls1nhb94","content":"<blockquote>\n<p>书籍作者：黄文海<br>出版社：电子工业出版社</p>\n</blockquote>\n<h2 id=\"思维导图\"><a href=\"#思维导图\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h2><p><a href=\"https://mubu.com/doc/lW2C-KYYy0\" target=\"_blank\" rel=\"noopener\">全文思维导图</a></p>\n<h2 id=\"第一章-走进Java世界中的线程\"><a href=\"#第一章-走进Java世界中的线程\" class=\"headerlink\" title=\"第一章 走进Java世界中的线程\"></a>第一章 走进Java世界中的线程</h2><ol>\n<li><code>进程</code>是程序向操作系统申请资源的基本单位，<code>线程</code>是进程中可独立执行的最小单位。</li>\n<li>一个进程可以包含多个线程。</li>\n<li>线程所要完成的计算被称为<code>任务</code>。</li>\n<li>启动一个线程的实质是请求Java虚拟机运行相应的线程，而这个线程具体何时能够运行是由线程调度器决定的。</li>\n<li>Java虚拟机会为每个线程分配调用栈所需的内存空间。</li>\n<li>Java平台中的任意一段代码总是由确定的线程负责执行的，这个线程就相应的被称为这段代码的<code>执行线程</code>。可以通过调用Thread.currentThread()来获取这段代码的执行线程。</li>\n<li>线程的属性：</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>类型及用途</th>\n<th>注意事项</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>编号（ID）</td>\n<td>Long。用于标识不同的线程。</td>\n<td>不同线程虽然拥有的编号不同，但是某个编号的线程运行结束后，该编号可能被后续创建的线程使用，这种编号的唯一性只在Java虚拟机的一次运行中有效。</td>\n</tr>\n<tr>\n<td>名称（name）</td>\n<td>String。用于区分不同线程。（面向人）默认值与线程编号有关，默认值格式为：“Thread-线程编号”</td>\n<td>为每一个线程设置一个简短而含义明确的名称有助于多线程程序的调试和问题定位。</td>\n</tr>\n<tr>\n<td>线程类别（Daemon）</td>\n<td>boolean。true表示相应的线程为守护线程，否则表示相应的线程为用户线程。</td>\n<td>该属性必须在线程启动之前设置，否则setDaemon方法会抛出异常。负责一些关键任务的线程不适合设置为守护线程。</td>\n</tr>\n<tr>\n<td>优先级（Priority）</td>\n<td>int。该属性本质上是给线程调度器的提示，用于表示应用程序希望线程能够优先得以运行。Java定义了1~10的10个优先级，默认值为5。</td>\n<td>一般使用默认优先级即可。</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"8\">\n<li><code>用户线程</code>会阻止Java虚拟机的正常停止，即一个Java虚拟机只有在其所有用户线程都运行结束的情况下才能正常停止。而<code>守护线程</code>则不会影响Java虚拟机的正常停止，守护线程通常用于执行一些重要性不是很高的任务，例如用于监视其他线程的运行情况。</li>\n<li>Thread的<code>join</code>方法的作用相当于执行该方法的线程和线程调度器说：“我得先暂停一下，等到另外一个线程运行结束后我才能继续干活。”</li>\n<li><code>yield</code>静态方法的作用相当于执行该方法的线程对线程调度器说：“我现在不急，如果别人需要处理器资源极度话先给他用吧。当然，如果没有其他人要用，我也不介意继续占用。”</li>\n<li><code>sleep</code>静态方法的作用相当于执行该方法的线程对线程调度器说：“我想小憩一会儿，过段时间再叫醒我继续干活吧。”</li>\n<li>假设线程A所执行的代码创建了线程B，那么，习惯上我们称线程B为线程A的<code>子线程</code>，相应地线程A就被称为线程B的<code>父线程</code>。</li>\n<li>在Java平台中，一个线程是否是守护线程默认取决于其父线程。</li>\n<li>一个线程的优先级默认值为该线程的父线程的优先级。</li>\n<li><code>Thread.State</code>是一个枚举类型，用来表示线程的当前状态。<ol>\n<li><code>NEW</code>：一个已创建而未启动的线程处于该状态。 </li>\n<li><code>RUNNABLE</code>：该状态可以被看成一个复合状态。它包括两个子状态：READY和RUNNING。</li>\n<li><code>BLOCKED</code>：线程进行阻塞式操作或申请由其他线程正在独占的资源时，相应的线程会处于该状态。</li>\n<li><code>WAITING</code>：执行某些特定方法之后就会处于这种等待状态，包括：Object.wait(),Thread.join(),LockSupport.park(),Condition.await()。能够使相应线程从WAITING变更为RUNNABLE的相应方法包括：Objeck.notify()/notifyAll()、LockSupport.unpark()、Condition.signal()。</li>\n<li><code>TIMED WAITING</code>：限时等待状态。</li>\n<li><code>TERMINATED</code>：已执行结束的线程处于该状态。</li>\n</ol>\n</li>\n<li>Java程序的线程转储包含的线程具体信息包括线程的属性、生命周期状态、线程的调用栈以及锁相关的信息。</li>\n<li>多线程编程具有以下优势：<ol>\n<li>提高系统的<strong>吞吐率</strong>。</li>\n<li>提高<strong>响应性</strong>。</li>\n<li>充分利用多核优势。</li>\n<li>最小化对系统资源的使用。</li>\n<li>简化程序的结构</li>\n</ol>\n</li>\n<li>多线程编程的风险：<ol>\n<li>线程安全问题。</li>\n<li>线程活性问题。</li>\n<li>上下文切换。</li>\n<li>可靠性。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"第二章-多线程编程的目标与挑战\"><a href=\"#第二章-多线程编程的目标与挑战\" class=\"headerlink\" title=\"第二章 多线程编程的目标与挑战\"></a>第二章 多线程编程的目标与挑战</h2><ol>\n<li>多线程编程的实质就是将任务的处理方式由串行改为<code>并发</code>，即实现并发化，以发挥并发的优势。</li>\n<li><code>状态变量</code>：即类的实例变量、静态变量。</li>\n<li><code>共享变量</code>：即可以被多个线程共同访问的变量。</li>\n<li><code>竞态</code>是指计算的正确性依赖于相对时间顺序或者线程的交错。</li>\n<li>竞态往往伴随着读取<code>脏数据</code>问题。</li>\n<li>竞态的两种模式：<code>read-modify-write</code>（读-改-写）和<code>check-then-act</code>（检测后行动）。</li>\n<li>如果一个类在单线程环境下能够运行正常，并且在多线程环境下，在其使用方不必为其做任何改变的情况下也能运作正常，那么我们就称其是<code>线程安全</code>的，相应地，我们称这个类具有线程安全性。</li>\n<li>对于涉及共享变量访问的操作，若该操作从其执行线程以外的任意线程来看是不可分割的，那么该操作就是原子操作，相应地我们称该操作具有<code>原子性</code>。</li>\n<li>Java中有两种方式来实现原子性。一种是使用<code>锁</code>，另一种是利用处理器提供的专门<code>CAS</code>指令。</li>\n<li>在多线程环境下，一个线程对某个变量进行更新之后，后续访问该变量的线程可能无法立刻读取到这个更新的结果，甚至永远也无法读取到这个更新的结果，这就是线程安全的另一个表现形式：<code>可见性</code>。</li>\n<li>可见性问题可能来源于JIT编译器的优化，也可能来源于<code>寄存器</code>和<code>高速缓存</code>。</li>\n<li>虽然一个处理器的高速缓存中的内容不能被另一个处理器直接读取，但是一个处理器可以通过<code>缓存一致性协议</code>来读取其他处理器的高速缓存的数据，并将读到的数据更新到该处理器的高速缓存中。</li>\n<li><code>volatile</code>关键字所起到的一个作用就是，提示JIT编译器被修饰的变量可能被多个线程共享，以阻止JIT编译器做出可能导致程序运行不正常的优化。另外一个作用是读取一个volatile关键字修饰的变量会使相应的处理器执行刷新处理器缓存的动作，写一个volatile关键字修饰的变量会使相应的处理器执行冲刷处理器缓存的动作，从而保障可见性。</li>\n<li>对于同一个共享变量而言，一个线程更新了该变量的值之后，其他线程能够读取到这个更新后的值，那么这个值就被称为该变量的相对新值。</li>\n<li>父线程在启动子线程之前对共享变量的更新对于子线程来说是可见的。</li>\n<li>一个线程终止后该线程对共享变量的更新对于调用该线程的<code>join</code>方法的线程而言是可见的。</li>\n<li><code>有序性</code>指在什么情况下一个处理器上运行的一个线程所执行的内存访问操作在另一个处理器上运行的其他线程看起来是乱序的。</li>\n<li><code>重排序</code>是对内存访问有关的操作所做的一种优化，它可以在不影响单线程程序正确性的情况下提升程序的性能。重排序主要包括：<code>指令重排序</code>和<code>存储子系统重排序</code>。</li>\n<li>重排序可能导致线程安全问题。</li>\n<li>重排序不是必然出现的。</li>\n<li>处理器也可能执行指令重排序，这使得执行顺序和程序顺序不一致，处理器对指令进行重排序也被称为处理器的乱序执行。处理器乱序执行并不会对单线程程序的正确性产生影响。</li>\n<li>主内存相对于处理器是一个慢速设备。为了避免其拖后腿，处理器并不是直接访问主内存，而是通过高速缓存访问主内存的。</li>\n<li>内存重排序包括：LoadLoad重排序、StoreStore重排序、LoadStore重排序、StoreLoad重排序。</li>\n<li>存在数据依赖关系的语句不会被重排序，只有不存在数据依赖关系的语句才可能会被重排序。</li>\n<li>可见性是有序性的基础，有序性影响可见性。</li>\n<li>一个线程由于其时间片用完或者其自身原因被迫或者主动暂停其运行时，另外一个线程可以被操作系统选中占用处理器开始或者继续其运行。这种一个线程暂停，另一个线程被选中开始或者继续运行的过程就叫做<code>上下文切换</code>。</li>\n<li>进度信息就被称为上下文，它一般包括通用寄存器的内容和程序计数器的内容。</li>\n<li>自发性上下文切换指线程由于其自身因素导致的切出。如执行以下指令：Thread.sleep()、Object.wait()、Thread.join()、LockSupport.park()。</li>\n<li>非自发性上下文切换指线程由于线程调度器的原因被迫切出。</li>\n<li>上下文切换的开销包括<strong>直接开销</strong>和<strong>间接开销</strong>。<ol>\n<li>操作系统保存和恢复上下文所需的开销，这主要是处理器时间开销。</li>\n<li>线程调度器进行线程调度的开销。</li>\n<li>处理器高速缓存重新加载的开销。</li>\n<li>上下文切换也可能导致整个一级高速缓存中的内容被冲刷。</li>\n</ol>\n</li>\n<li>这些由于资源稀缺性或者程序自身的问题和缺陷导致线程一直处于非RUNNABLE状态，或者线程虽然处于RUNNABLE状态但是其要执行的任务却一直无法进展的现象就被称为<code>线程活性故障</code>。常见的活性故障包括：<ol>\n<li>死锁</li>\n<li>锁死</li>\n<li>活锁</li>\n<li>饥饿</li>\n</ol>\n</li>\n<li>一次只能够被一个线程占用的资源被称为<code>排他性</code>资源。在一个线程占用一个排他性资源进行访问时，其他线程视图访问该资源的现象就被称为<code>资源争用</code>。</li>\n<li>同一时间内，处于运行状态的线程数量越多，我们就称并发程度越高，简称<code>高并发</code>。</li>\n<li>在多个线程申请同一个排他性资源的情况下，决定哪个线程会被授予该资源的独占权，即选择哪个申请者占用该资源的过程就是<code>资源的调度</code>。</li>\n<li>如果资源的任何一个先申请者总是能够比任何一个后申请者先获得该资源的独占权，那么相应的资源调度策略就被称为是<code>公平</code>的，如果资源的后申请者可能比先申请者先获得资源的独占权，那么相应的资源调度策略就被称为<code>非公平</code>的。</li>\n<li>在极端的情况下，非公平调度策略可能导致等待队列中的线程永远无法获得其所需的资源，即出现<code>饥饿</code>。</li>\n<li>一般来说，非公平调度策略的<strong>吞吐率高</strong>，即单位时间内它可以为更多的申请者调配资源。其缺点是，从申请者个体的角度来看这些申请者获得相应资源的独占权所需要的<strong>时间偏差</strong>可能比较大。</li>\n<li>非公平调度策略可能带来一个好处——减少上下文切换的次数。</li>\n<li>多数线程占用资源的时间相当长的情况下不适合使用<strong>非公平调度策略</strong>。</li>\n<li>非公平调度策略是我们多数情况下的<strong>首选</strong>调度策略。其优点是吞吐率较大；缺点是资源申请者申请资源所需的时间偏差可能较大，并可能导致饥饿。公平调度策略适合在资源的时间相对长或资源的平均申请时间间隔相对长的情况下，或者对资源申请所需的时间偏差有所要求的情况下使用。其优点是线程申请资源所需的时间偏差较小，并且不会导致线程饥饿现象；其缺点是吞吐率较小。</li>\n</ol>\n<h2 id=\"第三章-Java线程同步机制\"><a href=\"#第三章-Java线程同步机制\" class=\"headerlink\" title=\"第三章 Java线程同步机制\"></a>第三章 Java线程同步机制</h2><ol>\n<li><p><code>线程同步机制</code>是一套用于协调线程间的数据访问及活动的机制，该机制用用户保障线程安全以及实现这些线程的共同目标。</p>\n</li>\n<li><p>线程安全问题的产生前提是多个线程并发访问共享变量、共享资源。</p>\n</li>\n<li><p>锁的持有线程在其获得锁之后和释放锁之前这段时间内所执行的代码被称为<code>临界区</code>。</p>\n</li>\n<li><p>Java平台中的锁包括<code>内部锁</code>和<code>显示锁</code>。</p>\n</li>\n<li><p>锁是通过<code>互斥</code>保障原子性的。</p>\n</li>\n<li><p>一个锁实例锁保护的共享数据的数量大小就被称为锁的<code>粒度</code>。</p>\n</li>\n<li><p>锁的开销包括锁的申请和释放锁产生的开销，以及锁可能导致的上下文切换的开销，这些开销主要是处理器时间。</p>\n</li>\n<li><p><code>锁泄漏</code>是指一个线程获得某个锁之后，由于程序的错误缺陷致使该锁一直无法被释放而导致其他线程一直无法获得该锁的现象。</p>\n</li>\n<li><p>Java平台中的任何一个对象都有唯一的一个与之关联的锁。这种锁被称为<code>监视器</code>或者<code>内部锁</code>。内部锁是一种<code>排他锁</code>，它能保障原子性、可见性和有序性。</p>\n</li>\n<li><p>Java虚拟机会为每个内部锁分配一个<code>入口集</code>，用于记录等待获得相应内部锁的线程。多个线程申请同一个锁的时候，只有一个申请者能够成为该锁的持有线程，而其他申请者的申请操作会失败。</p>\n</li>\n<li><p>公平锁保障锁调度的公平性往往是以增加了线程的暂停和唤醒的可能性，即增加了上下文切换为代价的。因此公平锁适合于锁被持有的时间相对长或者线程申请锁的平均间隔时间相对长的情形。总得来说使用公平锁的开销比使用非公平锁的开销要大，因此显式锁默认使用的是非公平调度策略。</p>\n</li>\n<li><p><code>读写锁</code>是一种改进型的排它锁，也被称为共享/排它锁。读锁是<code>共享</code>的，写锁是<code>排他</code>的。</p>\n</li>\n<li><p>读写锁适合于在以下条件同时得以满足的场景中使用：</p>\n<ol>\n<li>只读操作比写操作要频繁得多。</li>\n<li>读线程持有锁的时间比较长。</li>\n</ol>\n</li>\n<li><p><code>ReetrantReadWriteLock</code>所实现的读写锁是<code>个可重入锁</code>。ReetrantReadWriteLock支持写锁的<code>降级</code>，即一个线程持有读写锁的写锁的情况下可以继续获得相应的读锁。</p>\n</li>\n<li><p><code>ReetrantReadWriteLock</code>并不支持锁的升级。读线程如果要转而申请写锁，需要先释放读锁，然后申请相应的写锁。</p>\n</li>\n<li><p><code>内存屏障</code>是对一类仅针对内存读、写操作指令的跨处理器架构的比较底层的抽象。内存屏障是被插入到两个指令之间进行使用的，其作用是<strong>禁止编译器、处理器重排序从而保障有序性</strong>。</p>\n</li>\n<li><p>按照可见性保障来划分，<code>内存屏障</code>可分为<code>加载屏障</code>和<code>存储屏障</code>。加载屏障的作用是<strong>刷新处理器缓存</strong>，存储屏障的作用是<strong>冲刷处理器缓存</strong>。Java虚拟机会在MonitorExit对应的机器码指令之后插入一个<code>存储屏障</code>，这就保障了写线程在释放锁之前在临界区中对共享变量所做的更新对读线程是可同步的。相应的，Java虚拟机会在MonitorEnter对应的机器码指令之后临界区开始之前的地方插入一个<code>加载屏障</code>，这使得读线程的执行处理器能够将写线程对相应共享变量所做的更新从其他处理器同步到该处理器的高速缓存中。</p>\n</li>\n<li><p>按照有序性保障来划分，<code>内存屏障</code>可以分为<code>获取屏障</code>和<code>释放屏障</code>。获取屏障的使用方式是在一个读操作之后插入该内存屏障，其作用是<strong>禁止该读操作与其后的任何读写操作之间进行重排序</strong>，这相当于在进行后续操作之前先要获得相应共享数据的所有权。释放屏障的使用方式是在一个写操作之前插入该内存屏障，其作用是<strong>禁止该写操作与其前面的任何读写操作之间进行重排序</strong>。Java虚拟机会在MonitorEnter对应的机器码指令之后临界区开始之前的地方插入一个获取屏障，并在临界区结束之后MonitorExit对应的机器码指令之前的地方插入一个释放屏障。</p>\n</li>\n<li><p>临界区之外的语句可以被重排序到临界区之内，而临界区内的操作无法被重排序到临界区之外。</p>\n<ol>\n<li><p>临界区内的操作不允许被重排序到临界区之外。</p>\n</li>\n<li><p>临界区内的操作之间允许被重排序。</p>\n</li>\n<li><p>临界区外的操作之间可以被重排序。</p>\n</li>\n<li><p>锁申请与锁释放操作不能被重排序。</p>\n</li>\n<li><p>两个锁申请操作不能被重排序。</p>\n</li>\n<li><p>两个锁释放操作不能被重排序。</p>\n</li>\n<li><p>临界区外的操作可以被重排到临界区之内。</p>\n</li>\n</ol>\n</li>\n<li><p><code>volatile</code>变量不会被编译器分配到寄存器进行存储，对volatile变量的读写操作都是内存访问操作。</p>\n</li>\n<li><p><code>volatile</code>关键字常被称为<code>轻量级锁</code>，其作用与锁的作用有相同的地方：保证可见性和有序性。原子性方面它仅能保证写volatile变量操作的原子性，但没有锁的排他性。其次，volatile关键字的使用不会引起上下文切换。</p>\n</li>\n<li><p>一个赋值操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">volatile</span> Map aMap = <span class=\"keyword\">new</span> HashMap();</span><br></pre></td></tr></table></figure>\n<p>可以分解为如下伪代码所示的几个子操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objRef = allocate(HashMap.class); <span class=\"comment\">// 子操作1：分配对象所需的存储空间</span></span><br><span class=\"line\">invokeConstructor(objRef); <span class=\"comment\">// 子操作2：初始化objRef引用的对象</span></span><br><span class=\"line\">aMap = objRef; <span class=\"comment\">// 子操作3：将对象引用写入变量aMap</span></span><br></pre></td></tr></table></figure>\n<p>虽然volatile关键字仅保障其中的子操作3是一个原子操作，但是由于子操作1与子操作2仅涉及局部变量而未涉及共享变量，因此对变量aMap的赋值操作仍然是一个原子操作。</p>\n</li>\n<li><p>对于volatile变量的写操作，Java虚拟机会在操作之前插入一个<code>释放屏障</code>，并在该操作之后插入一个<code>存储屏障</code>。</p>\n</li>\n<li><p>对于volatile变量的读操作，Java虚拟机会在操作之前插入一个<code>加载屏障</code>，并在该操作之后插入一个<code>获取屏障</code>。</p>\n</li>\n<li><p>写volatile变量操作与该操作之前的任何读、写操作<strong>不会被重排序</strong>。</p>\n</li>\n<li><p>读volatile变量操作与该操作之后的任何读、写操作<strong>不会被重排序</strong>。</p>\n</li>\n<li><p>volatile关键字在可见性方面仅仅是保证读线程能够读取到共享变量的相对新值。对于引用型变量和数组变量，volatile关键字并不能保证读线程能够读取到对象相应的字段、元素的相对新值。</p>\n</li>\n<li><p>volatile变量的读、写操作都不会导致上下文切换，因此volatile的开销比锁要小。</p>\n</li>\n<li><p>volatile使用的典型场景：</p>\n<ol>\n<li><p>使用volatile变量作为<code>状态标志</code>。</p>\n</li>\n<li><p>使用volatile保障<code>可见性</code>。</p>\n</li>\n<li><p>使用volatile变量代替锁。</p>\n</li>\n<li><p>使用volatile实现简易版的读写锁。</p>\n</li>\n</ol>\n</li>\n<li><p>volatile关键字并非锁的代替品，volatile关键字和锁各有其适用条件。前者更适合于多个线程共享一个状态变量，而后者更适合于多个线程共享一组状态变量。某些情形下，我们可以将多个线程共享的一组状态变量合并成一个对象，用一个volatile变量来引用该对象，从而使我们不必要使用锁。</p>\n</li>\n<li><p><code>原子变量类</code>是基于CAS实现的能够保障对共享变量进行<code>read-modify-write</code>更新操作的原子性和可见性的一组工具类。</p>\n</li>\n<li><p><code>对象发布</code>是指使对象能够被其作用域之外的线程访问。</p>\n</li>\n<li><p>常见的对象发布形式包括：</p>\n<ol>\n<li><p>将对象引用存储到public变量中。</p>\n</li>\n<li><p>在非private方法中返回一个对象。</p>\n</li>\n<li><p>创建内部类，使得当前对象能够被这个内部类使用。</p>\n</li>\n<li><p>通过方法调用将对象传递给外部方法。</p>\n</li>\n</ol>\n</li>\n<li><p><code>static</code>关键字在多线程环境下有其特殊的含义，它能够保证一个线程即使在未使用其他同步机制的情况下也总是可以读取到一个类的静态变量的初始值。</p>\n</li>\n<li><p>对于引用型静态变量，<code>static</code>关键字还能够保障一个线程读取到该变量的初始值时，这个值所指向的对象已经初始化完毕。</p>\n</li>\n<li><p><code>static</code> 关键字仅仅保障读线程能够读取到相应字段的初始值，而不是相对新值。</p>\n</li>\n<li><p>当一个对象被发布到其他线程的时候，该对象的所有<code>final</code>字段都是初始化完毕的。</p>\n</li>\n<li><p>对于引用型<code>final</code>字段，<code>final</code>关键字还进一步确保该字段所引用的对象已经初始化完毕，即这些线程读取该字段所引用的对象的各个字段时所读取到的值都是相应字段的初始值。</p>\n</li>\n<li><p>当一个对象的引用对其他线程可见的时候，这些线程所看到的该对象的final字段必然是初始化完毕的。final关键字的作用仅是这种有序性的保障，它并不能保障包含final字段的对象的引用自身对其他线程的可见性。</p>\n</li>\n<li><p><code>安全发布</code>就是指对象以一种线程安全的方式被发布。</p>\n</li>\n<li><p>当一个对象的发布出现我们不期望的结果或者对象发布本身不是我们所期望的时候，我们就称该对象<code>逸出</code>。</p>\n</li>\n<li><p>对象逸出包括：</p>\n<ol>\n<li><p>在构造函器中将this赋值给一个共享变量。</p>\n</li>\n<li><p>在构造器中将this作为方法参数传递给其他方法。</p>\n</li>\n<li><p>在构造器中启动基于匿名类的线程。</p>\n</li>\n</ol>\n</li>\n<li><p>一个对象在其初始化过程中没有出现this逸出，我们就称该对象为正确创建的对象。</p>\n</li>\n<li><p>实现对象的安全发布，通常可以依照以下顺序选择适用且开销最小的线程同步机制。</p>\n<ol>\n<li><p>使用staic关键字引用该对象的变量。</p>\n</li>\n<li><p>使用final关键字修饰引用该对象的变量。</p>\n</li>\n<li><p>使用volatile关键字修饰引用该对象的变量。</p>\n</li>\n<li><p>使用AtomicReference来引用该对象。</p>\n</li>\n<li><p>对访问该对象的代码进行加锁。</p>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"第四章-牛刀小试：玩转线程\"><a href=\"#第四章-牛刀小试：玩转线程\" class=\"headerlink\" title=\"第四章 牛刀小试：玩转线程\"></a>第四章 牛刀小试：玩转线程</h2><ol>\n<li><p>多线程编程中分而治之的使用主要有两种方式：<strong>基于数据的分割</strong>和<strong>基于任务的分割</strong>。</p>\n</li>\n<li><p>基于数据的分割的结果是产生多个<code>同质工作者线程</code>，即任务处理逻辑相同的线程。需要考虑如下因素：</p>\n<ol>\n<li><p>工作者线程数量的合理设置问题。</p>\n</li>\n<li><p>工作者线程的异常处理问题。</p>\n</li>\n<li><p>原始输入规模未知问题。</p>\n</li>\n<li><p>程序的复杂性增加的问题。</p>\n</li>\n</ol>\n</li>\n<li><p>为了提高任务的执行效率，我们可能使用多个线程去共同完成一个任务的执行。这就是基于任务的分割，其基本思想就是将任务按照一定的规则分解成若干子任务，并使用专门的工作者线程去执行这些子任务，从而实现任务的并发执行。</p>\n</li>\n<li><p>线程所执行的任务按照 其消耗的主要资源可划分为<code>CPU密集型</code>任务和<code>IO密集型</code>任务。</p>\n</li>\n<li><p>CPU密集型任务执行过程中消耗的主要资源是CPU时间，CPU密集型任务的一个典型例子是加密和解密；IO密集型任务执行过程中消耗的主要资源是IO资源，典型的IO密集型任务就包括文件读写、网络读写等。</p>\n</li>\n<li><p>基于任务的分割结果是产生多个相互协作的<code>异质工作者线程</code>。</p>\n</li>\n<li><p><code>Amdahl’s 定律</code>描述了线程数与多线程程序相对于单线程程序的提速之间的关系。<br>$$<br>S_{max} = \\frac{1}{P + \\frac{1 - P}{N}}<br>$$<br>其中，N为处理器数量，程序中必须串行化的部分耗时占程序全部耗时的比率为P。</p>\n</li>\n<li><p>为使多线程程序能够获得较大的提速，我们<strong>应该从算法入手，减少程序中必须串行的部分，而不是寄希望于增加线程数</strong>。</p>\n</li>\n<li><p>线程数设置得过少可能导致无法充分利用处理器资源；而线程数设置得过大则又可能导致过多的上下文切换，从而反倒降低了系统的性能。</p>\n</li>\n<li><p>线程数的合理值可以根据以下规则设置：</p>\n<ol>\n<li><p>对于CPU密集型线程，考虑到这类线程执行任务时消耗的主要是处理器资源，我们可以将这类线程的线程数设置为$N_{cpu} $个。因为CPU密集型线程也可能由于某些原因（比如缺页中断）而被切出，此时为了避免处理器资源的浪费，我们也可以为这类线程设置一个额外的线程，即将线程数设置为$N_{cpu}  + 1$</p>\n</li>\n<li><p>对于IO密集型线程，考虑到IO操作可能导致上下文切换，为这样的线程设置过多的线程会导致过多的额外系统开销。因此如果一个这样的工作者线程就可以满足我们的要求，那么就不要设置更多的线程数。如果一个工作者线程仍然不够用，那么我们可以考虑将这类线程的数量设置为$2 * N_{cpu} $</p>\n</li>\n</ol>\n</li>\n<li><p><strong>挖掘出程序中可并发点</strong>是实现多线程编程的目标——并发计算的前提。</p>\n</li>\n<li><p>实现并发化的策略包括基于数据的分割策略和基于任务的分割策略。</p>\n</li>\n</ol>\n<h2 id=\"第五章-线程间协作\"><a href=\"#第五章-线程间协作\" class=\"headerlink\" title=\"第五章 线程间协作\"></a>第五章 线程间协作</h2><ol>\n<li><p>一个线程因其执行目标动作所需的保护条件未满足而被暂停的过程被称为<code>等待</code>。</p>\n</li>\n<li><p>一个线程更新了系统的状态，使得其他线程所需的保护条件得以满足的时候唤醒那些被暂停的线程的过程就被称为<code>通知</code>。</p>\n</li>\n<li><p>由于一个线程只有在持有一个对象的内部所的情况下才能够调用该对象的wait方法，因此Object.wait()调用总是放在相应对象所引导的临界区之中。</p>\n</li>\n<li><p>等待线程对保护条件的判断、Object.wait()的执行以及目标动作的执行必须放在同一个对象所引导的临界区之中。</p>\n</li>\n<li><p><code>Object.wait()</code>暂停当前线程时释放的锁只是与该wait方法所属对象的内部锁。当前线程所持有的其他内部锁、显示锁并不会因此而被释放。</p>\n</li>\n<li><p><code>Object.notify()</code>的执行线程持有的相应对象的内部锁只有在Object.notify()调用所在的临界区代码执行结束后才会被释放，而Object.notify()本身并不会将这个内部锁释放。因此，为了 使等待线程在其被唤醒之后能够尽快再次获得相应的内部锁，我们要尽可能地将Object.notify()调用放在靠近临界区结束的地方。</p>\n</li>\n<li><p><code>等待线程</code>和<code>通知线程</code>是同步在同一对象之上的两种线程。</p>\n</li>\n<li><p>Java虚拟机会为每个对象维护一个<code>入口集</code>用于存储申请该对象内部锁的线程。Java虚拟机还会为每个对象维护一个被称为<code>等待集</code>的队列，该队列用于存储该对象上的等待线程。Object.wait()将当前线程暂停并释放相应的内部锁的同时会将当前线程存入该方法所属对象的等待集中。</p>\n</li>\n<li><p>wait/notify的开销及问题</p>\n<ol>\n<li><p>过早唤醒问题</p>\n</li>\n<li><p>信号丢失问题</p>\n</li>\n<li><p>欺骗性唤醒问题</p>\n</li>\n<li><p>上下文切换问题</p>\n</li>\n</ol>\n</li>\n<li><p>只有在有证据表明使用<code>Object.notify()</code>足够的情况下才使用<code>Object.notify()</code>，只有在下列条件全部满足的情况下才能够用于替代<code>notifyAll</code>方法：</p>\n<ol>\n<li><p>一次通知仅需要唤醒至多一个线程。</p>\n</li>\n<li><p>相应对象的等待集中仅包含同质等待线程。</p>\n</li>\n</ol>\n</li>\n<li><p><code>join(long)</code>允许我们指定一个超时时间。如果目标线程没有在指定的时间内终止，那么当前线程也会继续运行。<code>join(long)</code>实际上就是使用了<code>wait/notify</code>来实现的。</p>\n</li>\n<li><p>Java虚拟机会在目标线程的run方法运行结束后执行该线程的<code>notifyAll</code>方法来通知所有的等待线程。</p>\n</li>\n<li><p><code>Condition</code>接口可作为<code>wait/notify</code>的替代品来实现等待/通知，它为解决过早唤醒问题提供了支持，并解决了<code>Object.wait(long)</code>不能区分其返回是否是由等待超时而导致的问题。</p>\n</li>\n<li><p><code>Condition.await()/signal()</code>也要求其执行线程持有创建该Condition实例的显示锁。Condition实例也被称为条件变量或者条件队列。每个Condition实例内部都维护了一个用于存储等待线程的队列。</p>\n</li>\n<li><p><code>Condition</code>接口本身只是对解决过早唤醒问题提供了支持。要真正解决过早唤醒问题，我们需要通过应用代码维护保护条件与条件变量的await方法来实现其等待，并使通知线程在更新了相关共享变量之后，仅调用与这些共享变量有关的保护条件所对应的条件变量的<code>signal/signalAll</code>方法来实现通知。</p>\n</li>\n<li><p><code>Condition.awaitUntil(Date deadline)</code>可以用于实现带超时时间限制的等待，并且该方法的返回值能够区分该方法调用是由于等待超时而返回还是由于其他线程执行了相应条件变量的<code>signal/signalAll</code>方法而返回。</p>\n</li>\n<li><p>等待线程因执行<code>Condition.await()/awaitUntil(Date)</code>而被暂停的同时，其持有的相应显示锁也会被释放，等待线程被唤醒之后得以继续运行时需要再次申请相应的显示锁，然后等待线程对<code>Condition.await()/awaitUntil(Date)</code>的调用才能返回。</p>\n</li>\n<li><p><code>CountDownLatch</code>可以用来实现一个线程等待其他线程完成一组特定的操作之后才继续运行。这组操作被称为<code>先决操作</code>。</p>\n</li>\n<li><p><code>CountDownLatch</code>内部计数器值达到0后其值就恒定不变，后续执行该CountDownLatch实例的await方法的任何一个线程都不会被暂停。为了避免等待线程永远被暂停，<code>CountDownLatch.countDown()</code>调用必须放在代码中总是可以被执行到的地方，例如<code>finally</code>块中。</p>\n</li>\n<li><p>使用<code>CyclicBarrier</code>实现等待的线程被称为<code>参与方</code>，参与方只需要执行<code>CyclicBarrier.await()</code>就可以实现等待。</p>\n</li>\n<li><p>最后一个线程执行<code>CyclicBarrier.await()</code>会使得使用相应<code>CyclicBarrier</code>实例的其他所有参与方被唤醒，而最后一个线程自身并不会被暂停。</p>\n</li>\n<li><p>由于<code>CyclicBarrier</code>内部实现是基于条件变量的，因此<code>CyclicBarrier</code>的开销与条件变量的开销相似，其主要开销在可能产生的上下文切换。</p>\n</li>\n<li><p>CyclicBarrier内部使用了一个条件变量trip来实现等待/通知。CyclicBarrier内部实现使用了分代的概念用于表示CyclicBarrier实例是可以重复使用的。</p>\n</li>\n<li><p>最后一个线程相当于通知线程，它执行费CyclicBarrier.await()会使得相应实例的parties值变为0，此时该线程会先执行barrierAction.run()，然后再执行 trip.signalAll()来唤醒所有等待线程。接着，开始下一个分代，即使得CyclicBarrier的parties指又重新恢复为其初始值。</p>\n</li>\n<li><p>CyclicBarrier的典型应用场景包括以下几个:</p>\n<ol>\n<li><p>使得迭代算法并发化。</p>\n</li>\n<li><p>在测试代码中模拟高并发。</p>\n</li>\n</ol>\n</li>\n<li><p>将产品存入传输通道的线程就被称为生产者线程，从传输通道中取出产品进行消费的线程就被称为消费者线程。</p>\n</li>\n<li><p>一个方法或者操作如果能够导致其执行线程被暂停，那么我们就称相应的方法/操作为阻塞方法。阻塞方法能够导致上下文切换。</p>\n</li>\n<li><p>阻塞队列按照其存储空间的容量是否受限制来划分，可分为有界队列和无界队列。有界队列的存储容量限制是由应用程序制定的，无界队列的最大存储容量为Interger.MAX_VALUE($2^{31} - 1$)个元素。</p>\n</li>\n<li><p>ArrayBlockingQueue的缺点是其内部在实现put、take操作的时候使用的是同一个锁，从而可能导致锁的高争用，进而导致较多的上下文切换。</p>\n</li>\n<li><p>LinkedBlockingQueue既能实现无界队列，也能实现有界队列。</p>\n</li>\n<li><p>LinkedBlockingQueue的优点是其内部在实现\bput、take操作的时候分别使用了两个显示锁（putLock和takeLock），这\b降低了锁争用的可能性。LinkedBlockingQueue的内部存储空间是一个链表，而链表节点所需的存储空间是动态分配的，put操作、take操作都会导致链表节点的动态创建和移除，因此LinkedBlockingQueue的缺点是它可能增加垃圾回收的负担。</p>\n</li>\n<li><p>SynchronousQueue可以被看做一种特殊的有界队列。</p>\n</li>\n<li><p>SynchronousQueue适合于在消费者处理能力和生产者处理能力相差不大的情况下使用。</p>\n</li>\n<li>ArrayBlockingQueue和SynchronousQueue都既支持非公平调度也支持公平调度，而LinkedBlockingQueue仅支持非公平调度。</li>\n<li>如果生产者线程和消费者线程之间的并发程度比较大，那么这些线程对传输通道内部所使用的锁的争用可能性也随之增加。这时，有界队列的实现适合选用LinkedBlockingQueue，否则我们可以考虑ArrayBlockingQueue。</li>\n<li>使用无界队列作为传输通道的一个好处是put操作并不会导致生产者线程被阻塞。一般我们在使用无界队列作为传输通道的时候会同时限制生产者的生产速率。</li>\n<li>Semaphore.acquire() 和 Semaphore.release()总是配对使用。</li>\n<li>Semaphore.release()调用总是应该放在一个finally块中。</li>\n<li>创建Semaphore时如果构造函数中的参数permits值为1，那么所创建的Semaphore实例相当于一个互斥锁。与其他互斥锁不同的是，由于一个线程可以在未执行过Semaphore.acquire()的情况下执行Semaphore.release()，因此这种互斥锁允许一个线程释放另一个线程所持有的锁。</li>\n<li>PipedOutputStream和PipedInputStream适合在两个线程间使用，即适用于单生产者-单消费者的情形。</li>\n<li>输出异常的处理。如果生产者线程在其执行过程中出现了不可恢复的异常，那么消费者线程就会永远也无法读取到新的数据。</li>\n<li>当消费者线程消费一个已填充的缓冲区时，另外一个缓冲区可以由生产者线程进行填充，从而实现了数据生成与消费的并发。这种缓冲技术就被称为双缓冲。</li>\n<li>Exchanger.exchange(V)的返回值是对方线程执行该方法时所指定的参数x的值。因此，Exchanger.exchange(V)的返回值就造成一种生产者线程和消费者线程之间交换缓冲区的效果。</li>\n<li>中断可以被看做由一个线程发送给另一个线程的一种指示，该指示用于表示发起线程希望目标线程停止其正在执行的操作。中断仅仅代表发起线程的一个诉求，目标线程可能会满足发起线程的诉求，也可能根本不会理会发起线程的诉求。Java平台会为每个线程维护一个被称为中断标记的布尔型状态变量用于表示相应线程释放接收到了中断。</li>\n<li>目标线程检查中断标记后所执行的操作，被称为目标线程对中断的响应，简称中断响应。</li>\n<li>能够响应中断的方法通常是在执行阻塞操作之前判断中断标志，若中断标志值为true则抛出InterruptedException。</li>\n<li>如果发起线程给目标线程发送中断的那一刻，目标线程已经由于执行了一些阻塞方法操作而被暂停，那么此时Java虚拟机可能会设置目标线程的线程中断标记并将该线程唤醒，从而使目标线程被唤醒后继续执行的代码再次得到相应中断的机会。所以，给目标线程发送中断还能够产生唤醒目标线程的效果。</li>\n<li>在单生产者-单消费者模式中，停止生产者、消费者线程有一种简单的方法：生产者线程在其终止前往传’输通道中存入一个特殊产品作为消费者线程的线程停止标记，消费者线程取出这个产品之后就可以退出run方法而终止了。</li>\n</ol>\n<h2 id=\"第六章-保障线程安全的设计技术\"><a href=\"#第六章-保障线程安全的设计技术\" class=\"headerlink\" title=\"第六章 保障线程安全的设计技术\"></a>第六章 保障线程安全的设计技术</h2>","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<blockquote>\n<p>书籍作者：黄文海<br>出版社：电子工业出版社</p>\n</blockquote>\n<h2 id=\"思维导图\"><a href=\"#思维导图\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h2><p><a href=\"https://mubu.com/doc/lW2C-KYYy0\" target=\"_blank\" rel=\"noopener\">全文思维导图</a></p>\n<h2 id=\"第一章-走进Java世界中的线程\"><a href=\"#第一章-走进Java世界中的线程\" class=\"headerlink\" title=\"第一章 走进Java世界中的线程\"></a>第一章 走进Java世界中的线程</h2><ol>\n<li><code>进程</code>是程序向操作系统申请资源的基本单位，<code>线程</code>是进程中可独立执行的最小单位。</li>\n<li>一个进程可以包含多个线程。</li>\n<li>线程所要完成的计算被称为<code>任务</code>。</li>\n<li>启动一个线程的实质是请求Java虚拟机运行相应的线程，而这个线程具体何时能够运行是由线程调度器决定的。</li>\n<li>Java虚拟机会为每个线程分配调用栈所需的内存空间。</li>\n<li>Java平台中的任意一段代码总是由确定的线程负责执行的，这个线程就相应的被称为这段代码的<code>执行线程</code>。可以通过调用Thread.currentThread()来获取这段代码的执行线程。</li>\n<li>线程的属性：</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>类型及用途</th>\n<th>注意事项</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>编号（ID）</td>\n<td>Long。用于标识不同的线程。</td>\n<td>不同线程虽然拥有的编号不同，但是某个编号的线程运行结束后，该编号可能被后续创建的线程使用，这种编号的唯一性只在Java虚拟机的一次运行中有效。</td>\n</tr>\n<tr>\n<td>名称（name）</td>\n<td>String。用于区分不同线程。（面向人）默认值与线程编号有关，默认值格式为：“Thread-线程编号”</td>\n<td>为每一个线程设置一个简短而含义明确的名称有助于多线程程序的调试和问题定位。</td>\n</tr>\n<tr>\n<td>线程类别（Daemon）</td>\n<td>boolean。true表示相应的线程为守护线程，否则表示相应的线程为用户线程。</td>\n<td>该属性必须在线程启动之前设置，否则setDaemon方法会抛出异常。负责一些关键任务的线程不适合设置为守护线程。</td>\n</tr>\n<tr>\n<td>优先级（Priority）</td>\n<td>int。该属性本质上是给线程调度器的提示，用于表示应用程序希望线程能够优先得以运行。Java定义了1~10的10个优先级，默认值为5。</td>\n<td>一般使用默认优先级即可。</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"8\">\n<li><code>用户线程</code>会阻止Java虚拟机的正常停止，即一个Java虚拟机只有在其所有用户线程都运行结束的情况下才能正常停止。而<code>守护线程</code>则不会影响Java虚拟机的正常停止，守护线程通常用于执行一些重要性不是很高的任务，例如用于监视其他线程的运行情况。</li>\n<li>Thread的<code>join</code>方法的作用相当于执行该方法的线程和线程调度器说：“我得先暂停一下，等到另外一个线程运行结束后我才能继续干活。”</li>\n<li><code>yield</code>静态方法的作用相当于执行该方法的线程对线程调度器说：“我现在不急，如果别人需要处理器资源极度话先给他用吧。当然，如果没有其他人要用，我也不介意继续占用。”</li>\n<li><code>sleep</code>静态方法的作用相当于执行该方法的线程对线程调度器说：“我想小憩一会儿，过段时间再叫醒我继续干活吧。”</li>\n<li>假设线程A所执行的代码创建了线程B，那么，习惯上我们称线程B为线程A的<code>子线程</code>，相应地线程A就被称为线程B的<code>父线程</code>。</li>\n<li>在Java平台中，一个线程是否是守护线程默认取决于其父线程。</li>\n<li>一个线程的优先级默认值为该线程的父线程的优先级。</li>\n<li><code>Thread.State</code>是一个枚举类型，用来表示线程的当前状态。<ol>\n<li><code>NEW</code>：一个已创建而未启动的线程处于该状态。 </li>\n<li><code>RUNNABLE</code>：该状态可以被看成一个复合状态。它包括两个子状态：READY和RUNNING。</li>\n<li><code>BLOCKED</code>：线程进行阻塞式操作或申请由其他线程正在独占的资源时，相应的线程会处于该状态。</li>\n<li><code>WAITING</code>：执行某些特定方法之后就会处于这种等待状态，包括：Object.wait(),Thread.join(),LockSupport.park(),Condition.await()。能够使相应线程从WAITING变更为RUNNABLE的相应方法包括：Objeck.notify()/notifyAll()、LockSupport.unpark()、Condition.signal()。</li>\n<li><code>TIMED WAITING</code>：限时等待状态。</li>\n<li><code>TERMINATED</code>：已执行结束的线程处于该状态。</li>\n</ol>\n</li>\n<li>Java程序的线程转储包含的线程具体信息包括线程的属性、生命周期状态、线程的调用栈以及锁相关的信息。</li>\n<li>多线程编程具有以下优势：<ol>\n<li>提高系统的<strong>吞吐率</strong>。</li>\n<li>提高<strong>响应性</strong>。</li>\n<li>充分利用多核优势。</li>\n<li>最小化对系统资源的使用。</li>\n<li>简化程序的结构</li>\n</ol>\n</li>\n<li>多线程编程的风险：<ol>\n<li>线程安全问题。</li>\n<li>线程活性问题。</li>\n<li>上下文切换。</li>\n<li>可靠性。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"第二章-多线程编程的目标与挑战\"><a href=\"#第二章-多线程编程的目标与挑战\" class=\"headerlink\" title=\"第二章 多线程编程的目标与挑战\"></a>第二章 多线程编程的目标与挑战</h2><ol>\n<li>多线程编程的实质就是将任务的处理方式由串行改为<code>并发</code>，即实现并发化，以发挥并发的优势。</li>\n<li><code>状态变量</code>：即类的实例变量、静态变量。</li>\n<li><code>共享变量</code>：即可以被多个线程共同访问的变量。</li>\n<li><code>竞态</code>是指计算的正确性依赖于相对时间顺序或者线程的交错。</li>\n<li>竞态往往伴随着读取<code>脏数据</code>问题。</li>\n<li>竞态的两种模式：<code>read-modify-write</code>（读-改-写）和<code>check-then-act</code>（检测后行动）。</li>\n<li>如果一个类在单线程环境下能够运行正常，并且在多线程环境下，在其使用方不必为其做任何改变的情况下也能运作正常，那么我们就称其是<code>线程安全</code>的，相应地，我们称这个类具有线程安全性。</li>\n<li>对于涉及共享变量访问的操作，若该操作从其执行线程以外的任意线程来看是不可分割的，那么该操作就是原子操作，相应地我们称该操作具有<code>原子性</code>。</li>\n<li>Java中有两种方式来实现原子性。一种是使用<code>锁</code>，另一种是利用处理器提供的专门<code>CAS</code>指令。</li>\n<li>在多线程环境下，一个线程对某个变量进行更新之后，后续访问该变量的线程可能无法立刻读取到这个更新的结果，甚至永远也无法读取到这个更新的结果，这就是线程安全的另一个表现形式：<code>可见性</code>。</li>\n<li>可见性问题可能来源于JIT编译器的优化，也可能来源于<code>寄存器</code>和<code>高速缓存</code>。</li>\n<li>虽然一个处理器的高速缓存中的内容不能被另一个处理器直接读取，但是一个处理器可以通过<code>缓存一致性协议</code>来读取其他处理器的高速缓存的数据，并将读到的数据更新到该处理器的高速缓存中。</li>\n<li><code>volatile</code>关键字所起到的一个作用就是，提示JIT编译器被修饰的变量可能被多个线程共享，以阻止JIT编译器做出可能导致程序运行不正常的优化。另外一个作用是读取一个volatile关键字修饰的变量会使相应的处理器执行刷新处理器缓存的动作，写一个volatile关键字修饰的变量会使相应的处理器执行冲刷处理器缓存的动作，从而保障可见性。</li>\n<li>对于同一个共享变量而言，一个线程更新了该变量的值之后，其他线程能够读取到这个更新后的值，那么这个值就被称为该变量的相对新值。</li>\n<li>父线程在启动子线程之前对共享变量的更新对于子线程来说是可见的。</li>\n<li>一个线程终止后该线程对共享变量的更新对于调用该线程的<code>join</code>方法的线程而言是可见的。</li>\n<li><code>有序性</code>指在什么情况下一个处理器上运行的一个线程所执行的内存访问操作在另一个处理器上运行的其他线程看起来是乱序的。</li>\n<li><code>重排序</code>是对内存访问有关的操作所做的一种优化，它可以在不影响单线程程序正确性的情况下提升程序的性能。重排序主要包括：<code>指令重排序</code>和<code>存储子系统重排序</code>。</li>\n<li>重排序可能导致线程安全问题。</li>\n<li>重排序不是必然出现的。</li>\n<li>处理器也可能执行指令重排序，这使得执行顺序和程序顺序不一致，处理器对指令进行重排序也被称为处理器的乱序执行。处理器乱序执行并不会对单线程程序的正确性产生影响。</li>\n<li>主内存相对于处理器是一个慢速设备。为了避免其拖后腿，处理器并不是直接访问主内存，而是通过高速缓存访问主内存的。</li>\n<li>内存重排序包括：LoadLoad重排序、StoreStore重排序、LoadStore重排序、StoreLoad重排序。</li>\n<li>存在数据依赖关系的语句不会被重排序，只有不存在数据依赖关系的语句才可能会被重排序。</li>\n<li>可见性是有序性的基础，有序性影响可见性。</li>\n<li>一个线程由于其时间片用完或者其自身原因被迫或者主动暂停其运行时，另外一个线程可以被操作系统选中占用处理器开始或者继续其运行。这种一个线程暂停，另一个线程被选中开始或者继续运行的过程就叫做<code>上下文切换</code>。</li>\n<li>进度信息就被称为上下文，它一般包括通用寄存器的内容和程序计数器的内容。</li>\n<li>自发性上下文切换指线程由于其自身因素导致的切出。如执行以下指令：Thread.sleep()、Object.wait()、Thread.join()、LockSupport.park()。</li>\n<li>非自发性上下文切换指线程由于线程调度器的原因被迫切出。</li>\n<li>上下文切换的开销包括<strong>直接开销</strong>和<strong>间接开销</strong>。<ol>\n<li>操作系统保存和恢复上下文所需的开销，这主要是处理器时间开销。</li>\n<li>线程调度器进行线程调度的开销。</li>\n<li>处理器高速缓存重新加载的开销。</li>\n<li>上下文切换也可能导致整个一级高速缓存中的内容被冲刷。</li>\n</ol>\n</li>\n<li>这些由于资源稀缺性或者程序自身的问题和缺陷导致线程一直处于非RUNNABLE状态，或者线程虽然处于RUNNABLE状态但是其要执行的任务却一直无法进展的现象就被称为<code>线程活性故障</code>。常见的活性故障包括：<ol>\n<li>死锁</li>\n<li>锁死</li>\n<li>活锁</li>\n<li>饥饿</li>\n</ol>\n</li>\n<li>一次只能够被一个线程占用的资源被称为<code>排他性</code>资源。在一个线程占用一个排他性资源进行访问时，其他线程视图访问该资源的现象就被称为<code>资源争用</code>。</li>\n<li>同一时间内，处于运行状态的线程数量越多，我们就称并发程度越高，简称<code>高并发</code>。</li>\n<li>在多个线程申请同一个排他性资源的情况下，决定哪个线程会被授予该资源的独占权，即选择哪个申请者占用该资源的过程就是<code>资源的调度</code>。</li>\n<li>如果资源的任何一个先申请者总是能够比任何一个后申请者先获得该资源的独占权，那么相应的资源调度策略就被称为是<code>公平</code>的，如果资源的后申请者可能比先申请者先获得资源的独占权，那么相应的资源调度策略就被称为<code>非公平</code>的。</li>\n<li>在极端的情况下，非公平调度策略可能导致等待队列中的线程永远无法获得其所需的资源，即出现<code>饥饿</code>。</li>\n<li>一般来说，非公平调度策略的<strong>吞吐率高</strong>，即单位时间内它可以为更多的申请者调配资源。其缺点是，从申请者个体的角度来看这些申请者获得相应资源的独占权所需要的<strong>时间偏差</strong>可能比较大。</li>\n<li>非公平调度策略可能带来一个好处——减少上下文切换的次数。</li>\n<li>多数线程占用资源的时间相当长的情况下不适合使用<strong>非公平调度策略</strong>。</li>\n<li>非公平调度策略是我们多数情况下的<strong>首选</strong>调度策略。其优点是吞吐率较大；缺点是资源申请者申请资源所需的时间偏差可能较大，并可能导致饥饿。公平调度策略适合在资源的时间相对长或资源的平均申请时间间隔相对长的情况下，或者对资源申请所需的时间偏差有所要求的情况下使用。其优点是线程申请资源所需的时间偏差较小，并且不会导致线程饥饿现象；其缺点是吞吐率较小。</li>\n</ol>\n<h2 id=\"第三章-Java线程同步机制\"><a href=\"#第三章-Java线程同步机制\" class=\"headerlink\" title=\"第三章 Java线程同步机制\"></a>第三章 Java线程同步机制</h2><ol>\n<li><p><code>线程同步机制</code>是一套用于协调线程间的数据访问及活动的机制，该机制用用户保障线程安全以及实现这些线程的共同目标。</p>\n</li>\n<li><p>线程安全问题的产生前提是多个线程并发访问共享变量、共享资源。</p>\n</li>\n<li><p>锁的持有线程在其获得锁之后和释放锁之前这段时间内所执行的代码被称为<code>临界区</code>。</p>\n</li>\n<li><p>Java平台中的锁包括<code>内部锁</code>和<code>显示锁</code>。</p>\n</li>\n<li><p>锁是通过<code>互斥</code>保障原子性的。</p>\n</li>\n<li><p>一个锁实例锁保护的共享数据的数量大小就被称为锁的<code>粒度</code>。</p>\n</li>\n<li><p>锁的开销包括锁的申请和释放锁产生的开销，以及锁可能导致的上下文切换的开销，这些开销主要是处理器时间。</p>\n</li>\n<li><p><code>锁泄漏</code>是指一个线程获得某个锁之后，由于程序的错误缺陷致使该锁一直无法被释放而导致其他线程一直无法获得该锁的现象。</p>\n</li>\n<li><p>Java平台中的任何一个对象都有唯一的一个与之关联的锁。这种锁被称为<code>监视器</code>或者<code>内部锁</code>。内部锁是一种<code>排他锁</code>，它能保障原子性、可见性和有序性。</p>\n</li>\n<li><p>Java虚拟机会为每个内部锁分配一个<code>入口集</code>，用于记录等待获得相应内部锁的线程。多个线程申请同一个锁的时候，只有一个申请者能够成为该锁的持有线程，而其他申请者的申请操作会失败。</p>\n</li>\n<li><p>公平锁保障锁调度的公平性往往是以增加了线程的暂停和唤醒的可能性，即增加了上下文切换为代价的。因此公平锁适合于锁被持有的时间相对长或者线程申请锁的平均间隔时间相对长的情形。总得来说使用公平锁的开销比使用非公平锁的开销要大，因此显式锁默认使用的是非公平调度策略。</p>\n</li>\n<li><p><code>读写锁</code>是一种改进型的排它锁，也被称为共享/排它锁。读锁是<code>共享</code>的，写锁是<code>排他</code>的。</p>\n</li>\n<li><p>读写锁适合于在以下条件同时得以满足的场景中使用：</p>\n<ol>\n<li>只读操作比写操作要频繁得多。</li>\n<li>读线程持有锁的时间比较长。</li>\n</ol>\n</li>\n<li><p><code>ReetrantReadWriteLock</code>所实现的读写锁是<code>个可重入锁</code>。ReetrantReadWriteLock支持写锁的<code>降级</code>，即一个线程持有读写锁的写锁的情况下可以继续获得相应的读锁。</p>\n</li>\n<li><p><code>ReetrantReadWriteLock</code>并不支持锁的升级。读线程如果要转而申请写锁，需要先释放读锁，然后申请相应的写锁。</p>\n</li>\n<li><p><code>内存屏障</code>是对一类仅针对内存读、写操作指令的跨处理器架构的比较底层的抽象。内存屏障是被插入到两个指令之间进行使用的，其作用是<strong>禁止编译器、处理器重排序从而保障有序性</strong>。</p>\n</li>\n<li><p>按照可见性保障来划分，<code>内存屏障</code>可分为<code>加载屏障</code>和<code>存储屏障</code>。加载屏障的作用是<strong>刷新处理器缓存</strong>，存储屏障的作用是<strong>冲刷处理器缓存</strong>。Java虚拟机会在MonitorExit对应的机器码指令之后插入一个<code>存储屏障</code>，这就保障了写线程在释放锁之前在临界区中对共享变量所做的更新对读线程是可同步的。相应的，Java虚拟机会在MonitorEnter对应的机器码指令之后临界区开始之前的地方插入一个<code>加载屏障</code>，这使得读线程的执行处理器能够将写线程对相应共享变量所做的更新从其他处理器同步到该处理器的高速缓存中。</p>\n</li>\n<li><p>按照有序性保障来划分，<code>内存屏障</code>可以分为<code>获取屏障</code>和<code>释放屏障</code>。获取屏障的使用方式是在一个读操作之后插入该内存屏障，其作用是<strong>禁止该读操作与其后的任何读写操作之间进行重排序</strong>，这相当于在进行后续操作之前先要获得相应共享数据的所有权。释放屏障的使用方式是在一个写操作之前插入该内存屏障，其作用是<strong>禁止该写操作与其前面的任何读写操作之间进行重排序</strong>。Java虚拟机会在MonitorEnter对应的机器码指令之后临界区开始之前的地方插入一个获取屏障，并在临界区结束之后MonitorExit对应的机器码指令之前的地方插入一个释放屏障。</p>\n</li>\n<li><p>临界区之外的语句可以被重排序到临界区之内，而临界区内的操作无法被重排序到临界区之外。</p>\n<ol>\n<li><p>临界区内的操作不允许被重排序到临界区之外。</p>\n</li>\n<li><p>临界区内的操作之间允许被重排序。</p>\n</li>\n<li><p>临界区外的操作之间可以被重排序。</p>\n</li>\n<li><p>锁申请与锁释放操作不能被重排序。</p>\n</li>\n<li><p>两个锁申请操作不能被重排序。</p>\n</li>\n<li><p>两个锁释放操作不能被重排序。</p>\n</li>\n<li><p>临界区外的操作可以被重排到临界区之内。</p>\n</li>\n</ol>\n</li>\n<li><p><code>volatile</code>变量不会被编译器分配到寄存器进行存储，对volatile变量的读写操作都是内存访问操作。</p>\n</li>\n<li><p><code>volatile</code>关键字常被称为<code>轻量级锁</code>，其作用与锁的作用有相同的地方：保证可见性和有序性。原子性方面它仅能保证写volatile变量操作的原子性，但没有锁的排他性。其次，volatile关键字的使用不会引起上下文切换。</p>\n</li>\n<li><p>一个赋值操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">volatile</span> Map aMap = <span class=\"keyword\">new</span> HashMap();</span><br></pre></td></tr></table></figure>\n<p>可以分解为如下伪代码所示的几个子操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objRef = allocate(HashMap.class); <span class=\"comment\">// 子操作1：分配对象所需的存储空间</span></span><br><span class=\"line\">invokeConstructor(objRef); <span class=\"comment\">// 子操作2：初始化objRef引用的对象</span></span><br><span class=\"line\">aMap = objRef; <span class=\"comment\">// 子操作3：将对象引用写入变量aMap</span></span><br></pre></td></tr></table></figure>\n<p>虽然volatile关键字仅保障其中的子操作3是一个原子操作，但是由于子操作1与子操作2仅涉及局部变量而未涉及共享变量，因此对变量aMap的赋值操作仍然是一个原子操作。</p>\n</li>\n<li><p>对于volatile变量的写操作，Java虚拟机会在操作之前插入一个<code>释放屏障</code>，并在该操作之后插入一个<code>存储屏障</code>。</p>\n</li>\n<li><p>对于volatile变量的读操作，Java虚拟机会在操作之前插入一个<code>加载屏障</code>，并在该操作之后插入一个<code>获取屏障</code>。</p>\n</li>\n<li><p>写volatile变量操作与该操作之前的任何读、写操作<strong>不会被重排序</strong>。</p>\n</li>\n<li><p>读volatile变量操作与该操作之后的任何读、写操作<strong>不会被重排序</strong>。</p>\n</li>\n<li><p>volatile关键字在可见性方面仅仅是保证读线程能够读取到共享变量的相对新值。对于引用型变量和数组变量，volatile关键字并不能保证读线程能够读取到对象相应的字段、元素的相对新值。</p>\n</li>\n<li><p>volatile变量的读、写操作都不会导致上下文切换，因此volatile的开销比锁要小。</p>\n</li>\n<li><p>volatile使用的典型场景：</p>\n<ol>\n<li><p>使用volatile变量作为<code>状态标志</code>。</p>\n</li>\n<li><p>使用volatile保障<code>可见性</code>。</p>\n</li>\n<li><p>使用volatile变量代替锁。</p>\n</li>\n<li><p>使用volatile实现简易版的读写锁。</p>\n</li>\n</ol>\n</li>\n<li><p>volatile关键字并非锁的代替品，volatile关键字和锁各有其适用条件。前者更适合于多个线程共享一个状态变量，而后者更适合于多个线程共享一组状态变量。某些情形下，我们可以将多个线程共享的一组状态变量合并成一个对象，用一个volatile变量来引用该对象，从而使我们不必要使用锁。</p>\n</li>\n<li><p><code>原子变量类</code>是基于CAS实现的能够保障对共享变量进行<code>read-modify-write</code>更新操作的原子性和可见性的一组工具类。</p>\n</li>\n<li><p><code>对象发布</code>是指使对象能够被其作用域之外的线程访问。</p>\n</li>\n<li><p>常见的对象发布形式包括：</p>\n<ol>\n<li><p>将对象引用存储到public变量中。</p>\n</li>\n<li><p>在非private方法中返回一个对象。</p>\n</li>\n<li><p>创建内部类，使得当前对象能够被这个内部类使用。</p>\n</li>\n<li><p>通过方法调用将对象传递给外部方法。</p>\n</li>\n</ol>\n</li>\n<li><p><code>static</code>关键字在多线程环境下有其特殊的含义，它能够保证一个线程即使在未使用其他同步机制的情况下也总是可以读取到一个类的静态变量的初始值。</p>\n</li>\n<li><p>对于引用型静态变量，<code>static</code>关键字还能够保障一个线程读取到该变量的初始值时，这个值所指向的对象已经初始化完毕。</p>\n</li>\n<li><p><code>static</code> 关键字仅仅保障读线程能够读取到相应字段的初始值，而不是相对新值。</p>\n</li>\n<li><p>当一个对象被发布到其他线程的时候，该对象的所有<code>final</code>字段都是初始化完毕的。</p>\n</li>\n<li><p>对于引用型<code>final</code>字段，<code>final</code>关键字还进一步确保该字段所引用的对象已经初始化完毕，即这些线程读取该字段所引用的对象的各个字段时所读取到的值都是相应字段的初始值。</p>\n</li>\n<li><p>当一个对象的引用对其他线程可见的时候，这些线程所看到的该对象的final字段必然是初始化完毕的。final关键字的作用仅是这种有序性的保障，它并不能保障包含final字段的对象的引用自身对其他线程的可见性。</p>\n</li>\n<li><p><code>安全发布</code>就是指对象以一种线程安全的方式被发布。</p>\n</li>\n<li><p>当一个对象的发布出现我们不期望的结果或者对象发布本身不是我们所期望的时候，我们就称该对象<code>逸出</code>。</p>\n</li>\n<li><p>对象逸出包括：</p>\n<ol>\n<li><p>在构造函器中将this赋值给一个共享变量。</p>\n</li>\n<li><p>在构造器中将this作为方法参数传递给其他方法。</p>\n</li>\n<li><p>在构造器中启动基于匿名类的线程。</p>\n</li>\n</ol>\n</li>\n<li><p>一个对象在其初始化过程中没有出现this逸出，我们就称该对象为正确创建的对象。</p>\n</li>\n<li><p>实现对象的安全发布，通常可以依照以下顺序选择适用且开销最小的线程同步机制。</p>\n<ol>\n<li><p>使用staic关键字引用该对象的变量。</p>\n</li>\n<li><p>使用final关键字修饰引用该对象的变量。</p>\n</li>\n<li><p>使用volatile关键字修饰引用该对象的变量。</p>\n</li>\n<li><p>使用AtomicReference来引用该对象。</p>\n</li>\n<li><p>对访问该对象的代码进行加锁。</p>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"第四章-牛刀小试：玩转线程\"><a href=\"#第四章-牛刀小试：玩转线程\" class=\"headerlink\" title=\"第四章 牛刀小试：玩转线程\"></a>第四章 牛刀小试：玩转线程</h2><ol>\n<li><p>多线程编程中分而治之的使用主要有两种方式：<strong>基于数据的分割</strong>和<strong>基于任务的分割</strong>。</p>\n</li>\n<li><p>基于数据的分割的结果是产生多个<code>同质工作者线程</code>，即任务处理逻辑相同的线程。需要考虑如下因素：</p>\n<ol>\n<li><p>工作者线程数量的合理设置问题。</p>\n</li>\n<li><p>工作者线程的异常处理问题。</p>\n</li>\n<li><p>原始输入规模未知问题。</p>\n</li>\n<li><p>程序的复杂性增加的问题。</p>\n</li>\n</ol>\n</li>\n<li><p>为了提高任务的执行效率，我们可能使用多个线程去共同完成一个任务的执行。这就是基于任务的分割，其基本思想就是将任务按照一定的规则分解成若干子任务，并使用专门的工作者线程去执行这些子任务，从而实现任务的并发执行。</p>\n</li>\n<li><p>线程所执行的任务按照 其消耗的主要资源可划分为<code>CPU密集型</code>任务和<code>IO密集型</code>任务。</p>\n</li>\n<li><p>CPU密集型任务执行过程中消耗的主要资源是CPU时间，CPU密集型任务的一个典型例子是加密和解密；IO密集型任务执行过程中消耗的主要资源是IO资源，典型的IO密集型任务就包括文件读写、网络读写等。</p>\n</li>\n<li><p>基于任务的分割结果是产生多个相互协作的<code>异质工作者线程</code>。</p>\n</li>\n<li><p><code>Amdahl’s 定律</code>描述了线程数与多线程程序相对于单线程程序的提速之间的关系。<br>$$<br>S_{max} = \\frac{1}{P + \\frac{1 - P}{N}}<br>$$<br>其中，N为处理器数量，程序中必须串行化的部分耗时占程序全部耗时的比率为P。</p>\n</li>\n<li><p>为使多线程程序能够获得较大的提速，我们<strong>应该从算法入手，减少程序中必须串行的部分，而不是寄希望于增加线程数</strong>。</p>\n</li>\n<li><p>线程数设置得过少可能导致无法充分利用处理器资源；而线程数设置得过大则又可能导致过多的上下文切换，从而反倒降低了系统的性能。</p>\n</li>\n<li><p>线程数的合理值可以根据以下规则设置：</p>\n<ol>\n<li><p>对于CPU密集型线程，考虑到这类线程执行任务时消耗的主要是处理器资源，我们可以将这类线程的线程数设置为$N_{cpu} $个。因为CPU密集型线程也可能由于某些原因（比如缺页中断）而被切出，此时为了避免处理器资源的浪费，我们也可以为这类线程设置一个额外的线程，即将线程数设置为$N_{cpu}  + 1$</p>\n</li>\n<li><p>对于IO密集型线程，考虑到IO操作可能导致上下文切换，为这样的线程设置过多的线程会导致过多的额外系统开销。因此如果一个这样的工作者线程就可以满足我们的要求，那么就不要设置更多的线程数。如果一个工作者线程仍然不够用，那么我们可以考虑将这类线程的数量设置为$2 * N_{cpu} $</p>\n</li>\n</ol>\n</li>\n<li><p><strong>挖掘出程序中可并发点</strong>是实现多线程编程的目标——并发计算的前提。</p>\n</li>\n<li><p>实现并发化的策略包括基于数据的分割策略和基于任务的分割策略。</p>\n</li>\n</ol>\n<h2 id=\"第五章-线程间协作\"><a href=\"#第五章-线程间协作\" class=\"headerlink\" title=\"第五章 线程间协作\"></a>第五章 线程间协作</h2><ol>\n<li><p>一个线程因其执行目标动作所需的保护条件未满足而被暂停的过程被称为<code>等待</code>。</p>\n</li>\n<li><p>一个线程更新了系统的状态，使得其他线程所需的保护条件得以满足的时候唤醒那些被暂停的线程的过程就被称为<code>通知</code>。</p>\n</li>\n<li><p>由于一个线程只有在持有一个对象的内部所的情况下才能够调用该对象的wait方法，因此Object.wait()调用总是放在相应对象所引导的临界区之中。</p>\n</li>\n<li><p>等待线程对保护条件的判断、Object.wait()的执行以及目标动作的执行必须放在同一个对象所引导的临界区之中。</p>\n</li>\n<li><p><code>Object.wait()</code>暂停当前线程时释放的锁只是与该wait方法所属对象的内部锁。当前线程所持有的其他内部锁、显示锁并不会因此而被释放。</p>\n</li>\n<li><p><code>Object.notify()</code>的执行线程持有的相应对象的内部锁只有在Object.notify()调用所在的临界区代码执行结束后才会被释放，而Object.notify()本身并不会将这个内部锁释放。因此，为了 使等待线程在其被唤醒之后能够尽快再次获得相应的内部锁，我们要尽可能地将Object.notify()调用放在靠近临界区结束的地方。</p>\n</li>\n<li><p><code>等待线程</code>和<code>通知线程</code>是同步在同一对象之上的两种线程。</p>\n</li>\n<li><p>Java虚拟机会为每个对象维护一个<code>入口集</code>用于存储申请该对象内部锁的线程。Java虚拟机还会为每个对象维护一个被称为<code>等待集</code>的队列，该队列用于存储该对象上的等待线程。Object.wait()将当前线程暂停并释放相应的内部锁的同时会将当前线程存入该方法所属对象的等待集中。</p>\n</li>\n<li><p>wait/notify的开销及问题</p>\n<ol>\n<li><p>过早唤醒问题</p>\n</li>\n<li><p>信号丢失问题</p>\n</li>\n<li><p>欺骗性唤醒问题</p>\n</li>\n<li><p>上下文切换问题</p>\n</li>\n</ol>\n</li>\n<li><p>只有在有证据表明使用<code>Object.notify()</code>足够的情况下才使用<code>Object.notify()</code>，只有在下列条件全部满足的情况下才能够用于替代<code>notifyAll</code>方法：</p>\n<ol>\n<li><p>一次通知仅需要唤醒至多一个线程。</p>\n</li>\n<li><p>相应对象的等待集中仅包含同质等待线程。</p>\n</li>\n</ol>\n</li>\n<li><p><code>join(long)</code>允许我们指定一个超时时间。如果目标线程没有在指定的时间内终止，那么当前线程也会继续运行。<code>join(long)</code>实际上就是使用了<code>wait/notify</code>来实现的。</p>\n</li>\n<li><p>Java虚拟机会在目标线程的run方法运行结束后执行该线程的<code>notifyAll</code>方法来通知所有的等待线程。</p>\n</li>\n<li><p><code>Condition</code>接口可作为<code>wait/notify</code>的替代品来实现等待/通知，它为解决过早唤醒问题提供了支持，并解决了<code>Object.wait(long)</code>不能区分其返回是否是由等待超时而导致的问题。</p>\n</li>\n<li><p><code>Condition.await()/signal()</code>也要求其执行线程持有创建该Condition实例的显示锁。Condition实例也被称为条件变量或者条件队列。每个Condition实例内部都维护了一个用于存储等待线程的队列。</p>\n</li>\n<li><p><code>Condition</code>接口本身只是对解决过早唤醒问题提供了支持。要真正解决过早唤醒问题，我们需要通过应用代码维护保护条件与条件变量的await方法来实现其等待，并使通知线程在更新了相关共享变量之后，仅调用与这些共享变量有关的保护条件所对应的条件变量的<code>signal/signalAll</code>方法来实现通知。</p>\n</li>\n<li><p><code>Condition.awaitUntil(Date deadline)</code>可以用于实现带超时时间限制的等待，并且该方法的返回值能够区分该方法调用是由于等待超时而返回还是由于其他线程执行了相应条件变量的<code>signal/signalAll</code>方法而返回。</p>\n</li>\n<li><p>等待线程因执行<code>Condition.await()/awaitUntil(Date)</code>而被暂停的同时，其持有的相应显示锁也会被释放，等待线程被唤醒之后得以继续运行时需要再次申请相应的显示锁，然后等待线程对<code>Condition.await()/awaitUntil(Date)</code>的调用才能返回。</p>\n</li>\n<li><p><code>CountDownLatch</code>可以用来实现一个线程等待其他线程完成一组特定的操作之后才继续运行。这组操作被称为<code>先决操作</code>。</p>\n</li>\n<li><p><code>CountDownLatch</code>内部计数器值达到0后其值就恒定不变，后续执行该CountDownLatch实例的await方法的任何一个线程都不会被暂停。为了避免等待线程永远被暂停，<code>CountDownLatch.countDown()</code>调用必须放在代码中总是可以被执行到的地方，例如<code>finally</code>块中。</p>\n</li>\n<li><p>使用<code>CyclicBarrier</code>实现等待的线程被称为<code>参与方</code>，参与方只需要执行<code>CyclicBarrier.await()</code>就可以实现等待。</p>\n</li>\n<li><p>最后一个线程执行<code>CyclicBarrier.await()</code>会使得使用相应<code>CyclicBarrier</code>实例的其他所有参与方被唤醒，而最后一个线程自身并不会被暂停。</p>\n</li>\n<li><p>由于<code>CyclicBarrier</code>内部实现是基于条件变量的，因此<code>CyclicBarrier</code>的开销与条件变量的开销相似，其主要开销在可能产生的上下文切换。</p>\n</li>\n<li><p>CyclicBarrier内部使用了一个条件变量trip来实现等待/通知。CyclicBarrier内部实现使用了分代的概念用于表示CyclicBarrier实例是可以重复使用的。</p>\n</li>\n<li><p>最后一个线程相当于通知线程，它执行费CyclicBarrier.await()会使得相应实例的parties值变为0，此时该线程会先执行barrierAction.run()，然后再执行 trip.signalAll()来唤醒所有等待线程。接着，开始下一个分代，即使得CyclicBarrier的parties指又重新恢复为其初始值。</p>\n</li>\n<li><p>CyclicBarrier的典型应用场景包括以下几个:</p>\n<ol>\n<li><p>使得迭代算法并发化。</p>\n</li>\n<li><p>在测试代码中模拟高并发。</p>\n</li>\n</ol>\n</li>\n<li><p>将产品存入传输通道的线程就被称为生产者线程，从传输通道中取出产品进行消费的线程就被称为消费者线程。</p>\n</li>\n<li><p>一个方法或者操作如果能够导致其执行线程被暂停，那么我们就称相应的方法/操作为阻塞方法。阻塞方法能够导致上下文切换。</p>\n</li>\n<li><p>阻塞队列按照其存储空间的容量是否受限制来划分，可分为有界队列和无界队列。有界队列的存储容量限制是由应用程序制定的，无界队列的最大存储容量为Interger.MAX_VALUE($2^{31} - 1$)个元素。</p>\n</li>\n<li><p>ArrayBlockingQueue的缺点是其内部在实现put、take操作的时候使用的是同一个锁，从而可能导致锁的高争用，进而导致较多的上下文切换。</p>\n</li>\n<li><p>LinkedBlockingQueue既能实现无界队列，也能实现有界队列。</p>\n</li>\n<li><p>LinkedBlockingQueue的优点是其内部在实现\bput、take操作的时候分别使用了两个显示锁（putLock和takeLock），这\b降低了锁争用的可能性。LinkedBlockingQueue的内部存储空间是一个链表，而链表节点所需的存储空间是动态分配的，put操作、take操作都会导致链表节点的动态创建和移除，因此LinkedBlockingQueue的缺点是它可能增加垃圾回收的负担。</p>\n</li>\n<li><p>SynchronousQueue可以被看做一种特殊的有界队列。</p>\n</li>\n<li><p>SynchronousQueue适合于在消费者处理能力和生产者处理能力相差不大的情况下使用。</p>\n</li>\n<li>ArrayBlockingQueue和SynchronousQueue都既支持非公平调度也支持公平调度，而LinkedBlockingQueue仅支持非公平调度。</li>\n<li>如果生产者线程和消费者线程之间的并发程度比较大，那么这些线程对传输通道内部所使用的锁的争用可能性也随之增加。这时，有界队列的实现适合选用LinkedBlockingQueue，否则我们可以考虑ArrayBlockingQueue。</li>\n<li>使用无界队列作为传输通道的一个好处是put操作并不会导致生产者线程被阻塞。一般我们在使用无界队列作为传输通道的时候会同时限制生产者的生产速率。</li>\n<li>Semaphore.acquire() 和 Semaphore.release()总是配对使用。</li>\n<li>Semaphore.release()调用总是应该放在一个finally块中。</li>\n<li>创建Semaphore时如果构造函数中的参数permits值为1，那么所创建的Semaphore实例相当于一个互斥锁。与其他互斥锁不同的是，由于一个线程可以在未执行过Semaphore.acquire()的情况下执行Semaphore.release()，因此这种互斥锁允许一个线程释放另一个线程所持有的锁。</li>\n<li>PipedOutputStream和PipedInputStream适合在两个线程间使用，即适用于单生产者-单消费者的情形。</li>\n<li>输出异常的处理。如果生产者线程在其执行过程中出现了不可恢复的异常，那么消费者线程就会永远也无法读取到新的数据。</li>\n<li>当消费者线程消费一个已填充的缓冲区时，另外一个缓冲区可以由生产者线程进行填充，从而实现了数据生成与消费的并发。这种缓冲技术就被称为双缓冲。</li>\n<li>Exchanger.exchange(V)的返回值是对方线程执行该方法时所指定的参数x的值。因此，Exchanger.exchange(V)的返回值就造成一种生产者线程和消费者线程之间交换缓冲区的效果。</li>\n<li>中断可以被看做由一个线程发送给另一个线程的一种指示，该指示用于表示发起线程希望目标线程停止其正在执行的操作。中断仅仅代表发起线程的一个诉求，目标线程可能会满足发起线程的诉求，也可能根本不会理会发起线程的诉求。Java平台会为每个线程维护一个被称为中断标记的布尔型状态变量用于表示相应线程释放接收到了中断。</li>\n<li>目标线程检查中断标记后所执行的操作，被称为目标线程对中断的响应，简称中断响应。</li>\n<li>能够响应中断的方法通常是在执行阻塞操作之前判断中断标志，若中断标志值为true则抛出InterruptedException。</li>\n<li>如果发起线程给目标线程发送中断的那一刻，目标线程已经由于执行了一些阻塞方法操作而被暂停，那么此时Java虚拟机可能会设置目标线程的线程中断标记并将该线程唤醒，从而使目标线程被唤醒后继续执行的代码再次得到相应中断的机会。所以，给目标线程发送中断还能够产生唤醒目标线程的效果。</li>\n<li>在单生产者-单消费者模式中，停止生产者、消费者线程有一种简单的方法：生产者线程在其终止前往传’输通道中存入一个特殊产品作为消费者线程的线程停止标记，消费者线程取出这个产品之后就可以退出run方法而终止了。</li>\n</ol>\n<h2 id=\"第六章-保障线程安全的设计技术\"><a href=\"#第六章-保障线程安全的设计技术\" class=\"headerlink\" title=\"第六章 保障线程安全的设计技术\"></a>第六章 保障线程安全的设计技术</h2>"},{"title":"《Java多线程编程实战指南》（核心篇）—— 摘要","date":"2018-12-26T11:55:51.000Z","_content":"> 书籍作者：黄文海\n\n## 思维导图\n\n[全文思维导图](https://mubu.com/doc/lW2C-KYYy0)\n\n## 第一章 走进Java世界中的线程\n\n1. `进程`是程序向操作系统申请资源的基本单位，`线程`是进程中可独立执行的最小单位。\n2. 一个进程可以包含多个线程。\n3. 线程所要完成的计算被称为`任务`。\n4. 启动一个线程的实质是请求Java虚拟机运行相应的线程，而这个线程具体何时能够运行是由线程调度器决定的。\n5. Java虚拟机会为每个线程分配调用栈所需的内存空间。\n6. Java平台中的任意一段代码总是由确定的线程负责执行的，这个线程就相应的被称为这段代码的`执行线程`。可以通过调用Thread.currentThread()来获取这段代码的执行线程。\n7. 线程的属性：\n\n| 属性               | 类型及用途                                                   | 注意事项                                                     |\n| ------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 编号（ID）         | Long。用于标识不同的线程。                                   | 不同线程虽然拥有的编号不同，但是某个编号的线程运行结束后，该编号可能被后续创建的线程使用，这种编号的唯一性只在Java虚拟机的一次运行中有效。 |\n| 名称（name）       | String。用于区分不同线程。（面向人）默认值与线程编号有关，默认值格式为：“Thread-线程编号” | 为每一个线程设置一个简短而含义明确的名称有助于多线程程序的调试和问题定位。 |\n| 线程类别（Daemon） | boolean。true表示相应的线程为守护线程，否则表示相应的线程为用户线程。 | 该属性必须在线程启动之前设置，否则setDaemon方法会抛出异常。负责一些关键任务的线程不适合设置为守护线程。 |\n| 优先级（Priority） | int。该属性本质上是给线程调度器的提示，用于表示应用程序希望线程能够优先得以运行。Java定义了1~10的10个优先级，默认值为5。 | 一般使用默认优先级即可。   |\n\n8. `用户线程`会阻止Java虚拟机的正常停止，即一个Java虚拟机只有在其所有用户线程都运行结束的情况下才能正常停止。而`守护线程`则不会影响Java虚拟机的正常停止，守护线程通常用于执行一些重要性不是很高的任务，例如用于监视其他线程的运行情况。\n9. Thread的`join`方法的作用相当于执行该方法的线程和线程调度器说：“我得先暂停一下，等到另外一个线程运行结束后我才能继续干活。”\n10. `yield`静态方法的作用相当于执行该方法的线程对线程调度器说：“我现在不急，如果别人需要处理器资源极度话先给他用吧。当然，如果没有其他人要用，我也不介意继续占用。”\n11. `sleep`静态方法的作用相当于执行该方法的线程对线程调度器说：“我想小憩一会儿，过段时间再叫醒我继续干活吧。”\n12. 假设线程A所执行的代码创建了线程B，那么，习惯上我们称线程B为线程A的`子线程`，相应地线程A就被称为线程B的`父线程`。\n13. 在Java平台中，一个线程是否是守护线程默认取决于其父线程。\n14. 一个线程的优先级默认值为该线程的父线程的优先级。\n15. `Thread.State`是一个枚举类型，用来表示线程的当前状态。\n    1. `NEW`：一个已创建而未启动的线程处于该状态。 \n    2. `RUNNABLE`：该状态可以被看成一个复合状态。它包括两个子状态：READY和RUNNING。\n    3. `BLOCKED`：线程进行阻塞式操作或申请由其他线程正在独占的资源时，相应的线程会处于该状态。\n    4. `WAITING`：执行某些特定方法之后就会处于这种等待状态，包括：Object.wait(),Thread.join(),LockSupport.park(),Condition.await()。能够使相应线程从WAITING变更为RUNNABLE的相应方法包括：Objeck.notify()/notifyAll()、LockSupport.unpark()、Condition.signal()。\n    5. `TIMED WAITING`：限时等待状态。\n    6. `TERMINATED`：已执行结束的线程处于该状态。\n16. Java程序的线程转储包含的线程具体信息包括线程的属性、生命周期状态、线程的调用栈以及锁相关的信息。\n17. 多线程编程具有以下优势：\n    1. 提高系统的**吞吐率**。\n    2. 提高**响应性**。\n    3. 充分利用多核优势。\n    4. 最小化对系统资源的使用。\n    5. 简化程序的结构\n18. 多线程编程的风险：\n    1. 线程安全问题。\n    2. 线程活性问题。\n    3. 上下文切换。\n    4. 可靠性。\n\n## 第二章 多线程编程的目标与挑战\n\n1. 多线程编程的实质就是将任务的处理方式由串行改为`并发`，即实现并发化，以发挥并发的优势。\n2. `状态变量`：即类的实例变量、静态变量。\n3. `共享变量`：即可以被多个线程共同访问的变量。\n4. `竞态`是指计算的正确性依赖于相对时间顺序或者线程的交错。\n5. 竞态往往伴随着读取`脏数据`问题。\n6. 竞态的两种模式：`read-modify-write`（读-改-写）和`check-then-act`（检测后行动）。\n7. 如果一个类在单线程环境下能够运行正常，并且在多线程环境下，在其使用方不必为其做任何改变的情况下也能运作正常，那么我们就称其是`线程安全`的，相应地，我们称这个类具有线程安全性。\n8. 对于涉及共享变量访问的操作，若该操作从其执行线程以外的任意线程来看是不可分割的，那么该操作就是原子操作，相应地我们称该操作具有`原子性`。\n9. Java中有两种方式来实现原子性。一种是使用`锁`，另一种是利用处理器提供的专门`CAS`指令。\n10. 在多线程环境下，一个线程对某个变量进行更新之后，后续访问该变量的线程可能无法立刻读取到这个更新的结果，甚至永远也无法读取到这个更新的结果，这就是线程安全的另一个表现形式：`可见性`。\n11. 可见性问题可能来源于JIT编译器的优化，也可能来源于`寄存器`和`高速缓存`。\n12. 虽然一个处理器的高速缓存中的内容不能被另一个处理器直接读取，但是一个处理器可以通过`缓存一致性协议`来读取其他处理器的高速缓存的数据，并将读到的数据更新到该处理器的高速缓存中。\n13. `volatile`关键字所起到的一个作用就是，提示JIT编译器被修饰的变量可能被多个线程共享，以阻止JIT编译器做出可能导致程序运行不正常的优化。另外一个作用是读取一个volatile关键字修饰的变量会使相应的处理器执行刷新处理器缓存的动作，写一个volatile关键字修饰的变量会使相应的处理器执行冲刷处理器缓存的动作，从而保障可见性。\n14. 对于同一个共享变量而言，一个线程更新了该变量的值之后，其他线程能够读取到这个更新后的值，那么这个值就被称为该变量的相对新值。\n15. 父线程在启动子线程之前对共享变量的更新对于子线程来说是可见的。\n16. 一个线程终止后该线程对共享变量的更新对于调用该线程的`join`方法的线程而言是可见的。\n17. `有序性`指在什么情况下一个处理器上运行的一个线程所执行的内存访问操作在另一个处理器上运行的其他线程看起来是乱序的。\n18. `重排序`是对内存访问有关的操作所做的一种优化，它可以在不影响单线程程序正确性的情况下提升程序的性能。重排序主要包括：`指令重排序`和`存储子系统重排序`。\n19. 重排序可能导致线程安全问题。\n20. 重排序不是必然出现的。\n21. 处理器也可能执行指令重排序，这使得执行顺序和程序顺序不一致，处理器对指令进行重排序也被称为处理器的乱序执行。处理器乱序执行并不会对单线程程序的正确性产生影响。\n22. 主内存相对于处理器是一个慢速设备。为了避免其拖后腿，处理器并不是直接访问主内存，而是通过高速缓存访问主内存的。\n23. 内存重排序包括：LoadLoad重排序、StoreStore重排序、LoadStore重排序、StoreLoad重排序。\n24. 存在数据依赖关系的语句不会被重排序，只有不存在数据依赖关系的语句才可能会被重排序。\n25. 可见性是有序性的基础，有序性影响可见性。\n26. 一个线程由于其时间片用完或者其自身原因被迫或者主动暂停其运行时，另外一个线程可以被操作系统选中占用处理器开始或者继续其运行。这种一个线程暂停，另一个线程被选中开始或者继续运行的过程就叫做`上下文切换`。\n27. 进度信息就被称为上下文，它一般包括通用寄存器的内容和程序计数器的内容。\n28. 自发性上下文切换指线程由于其自身因素导致的切出。如执行以下指令：Thread.sleep()、Object.wait()、Thread.join()、LockSupport.park()。\n29. 非自发性上下文切换指线程由于线程调度器的原因被迫切出。\n30. 上下文切换的开销包括**直接开销**和**间接开销**。\n    1. 操作系统保存和恢复上下文所需的开销，这主要是处理器时间开销。\n    2. 线程调度器进行线程调度的开销。\n    3. 处理器高速缓存重新加载的开销。\n    4. 上下文切换也可能导致整个一级高速缓存中的内容被冲刷。\n31. 这些由于资源稀缺性或者程序自身的问题和缺陷导致线程一直处于非RUNNABLE状态，或者线程虽然处于RUNNABLE状态但是其要执行的任务却一直无法进展的现象就被称为`线程活性故障`。常见的活性故障包括：\n    1. 死锁\n    2. 锁死\n    3. 活锁\n    4. 饥饿\n32. 一次只能够被一个线程占用的资源被称为`排他性`资源。在一个线程占用一个排他性资源进行访问时，其他线程视图访问该资源的现象就被称为`资源争用`。\n33. 同一时间内，处于运行状态的线程数量越多，我们就称并发程度越高，简称`高并发`。\n34. 在多个线程申请同一个排他性资源的情况下，决定哪个线程会被授予该资源的独占权，即选择哪个申请者占用该资源的过程就是`资源的调度`。\n35. 如果资源的任何一个先申请者总是能够比任何一个后申请者先获得该资源的独占权，那么相应的资源调度策略就被称为是`公平`的，如果资源的后申请者可能比先申请者先获得资源的独占权，那么相应的资源调度策略就被称为`非公平`的。\n36. 在极端的情况下，非公平调度策略可能导致等待队列中的线程永远无法获得其所需的资源，即出现`饥饿`。\n37. 一般来说，非公平调度策略的**吞吐率高**，即单位时间内它可以为更多的申请者调配资源。其缺点是，从申请者个体的角度来看这些申请者获得相应资源的独占权所需要的**时间偏差**可能比较大。\n38. 非公平调度策略可能带来一个好处——减少上下文切换的次数。\n39. 多数线程占用资源的时间相当长的情况下不适合使用**非公平调度策略**。\n40. 非公平调度策略是我们多数情况下的**首选**调度策略。其优点是吞吐率较大；缺点是资源申请者申请资源所需的时间偏差可能较大，并可能导致饥饿。公平调度策略适合在资源的时间相对长或资源的平均申请时间间隔相对长的情况下，或者对资源申请所需的时间偏差有所要求的情况下使用。其优点是线程申请资源所需的时间偏差较小，并且不会导致线程饥饿现象；其缺点是吞吐率较小。\n\n## 第三章 Java线程同步机制\n\n1. `线程同步机制`是一套用于协调线程间的数据访问及活动的机制，该机制用用户保障线程安全以及实现这些线程的共同目标。\n\n2. 线程安全问题的产生前提是多个线程并发访问共享变量、共享资源。\n\n3. 锁的持有线程在其获得锁之后和释放锁之前这段时间内所执行的代码被称为`临界区`。\n\n4. Java平台中的锁包括`内部锁`和`显示锁`。\n\n5. 锁是通过`互斥`保障原子性的。\n\n6. 一个锁实例锁保护的共享数据的数量大小就被称为锁的`粒度`。\n\n7. 锁的开销包括锁的申请和释放锁产生的开销，以及锁可能导致的上下文切换的开销，这些开销主要是处理器时间。\n\n8. `锁泄漏`是指一个线程获得某个锁之后，由于程序的错误缺陷致使该锁一直无法被释放而导致其他线程一直无法获得该锁的现象。\n\n9. Java平台中的任何一个对象都有唯一的一个与之关联的锁。这种锁被称为`监视器`或者`内部锁`。内部锁是一种`排他锁`，它能保障原子性、可见性和有序性。\n\n10. Java虚拟机会为每个内部锁分配一个`入口集`，用于记录等待获得相应内部锁的线程。多个线程申请同一个锁的时候，只有一个申请者能够成为该锁的持有线程，而其他申请者的申请操作会失败。\n\n11. 公平锁保障锁调度的公平性往往是以增加了线程的暂停和唤醒的可能性，即增加了上下文切换为代价的。因此公平锁适合于锁被持有的时间相对长或者线程申请锁的平均间隔时间相对长的情形。总得来说使用公平锁的开销比使用非公平锁的开销要大，因此显式锁默认使用的是非公平调度策略。\n\n12. `读写锁`是一种改进型的排它锁，也被称为共享/排它锁。读锁是`共享`的，写锁是`排他`的。\n\n13. 读写锁适合于在以下条件同时得以满足的场景中使用：\n\n    1. 只读操作比写操作要频繁得多。\n    2. 读线程持有锁的时间比较长。\n\n14. `ReetrantReadWriteLock`所实现的读写锁是`个可重入锁`。ReetrantReadWriteLock支持写锁的`降级`，即一个线程持有读写锁的写锁的情况下可以继续获得相应的读锁。\n\n15. `ReetrantReadWriteLock`并不支持锁的升级。读线程如果要转而申请写锁，需要先释放读锁，然后申请相应的写锁。\n\n16. `内存屏障`是对一类仅针对内存读、写操作指令的跨处理器架构的比较底层的抽象。内存屏障是被插入到两个指令之间进行使用的，其作用是**禁止编译器、处理器重排序从而保障有序性**。\n\n17. 按照可见性保障来划分，`内存屏障`可分为`加载屏障`和`存储屏障`。加载屏障的作用是**刷新处理器缓存**，存储屏障的作用是**冲刷处理器缓存**。Java虚拟机会在MonitorExit对应的机器码指令之后插入一个`存储屏障`，这就保障了写线程在释放锁之前在临界区中对共享变量所做的更新对读线程是可同步的。相应的，Java虚拟机会在MonitorEnter对应的机器码指令之后临界区开始之前的地方插入一个`加载屏障`，这使得读线程的执行处理器能够将写线程对相应共享变量所做的更新从其他处理器同步到该处理器的高速缓存中。\n\n18. 按照有序性保障来划分，`内存屏障`可以分为`获取屏障`和`释放屏障`。获取屏障的使用方式是在一个读操作之后插入该内存屏障，其作用是**禁止该读操作与其后的任何读写操作之间进行重排序**，这相当于在进行后续操作之前先要获得相应共享数据的所有权。释放屏障的使用方式是在一个写操作之前插入该内存屏障，其作用是**禁止该写操作与其前面的任何读写操作之间进行重排序**。Java虚拟机会在MonitorEnter对应的机器码指令之后临界区开始之前的地方插入一个获取屏障，并在临界区结束之后MonitorExit对应的机器码指令之前的地方插入一个释放屏障。\n\n19. 临界区之外的语句可以被重排序到临界区之内，而临界区内的操作无法被重排序到临界区之外。\n\n    1. 临界区内的操作不允许被重排序到临界区之外。\n\n    2. 临界区内的操作之间允许被重排序。\n\n    3. 临界区外的操作之间可以被重排序。\n\n    4. 锁申请与锁释放操作不能被重排序。\n\n    5. 两个锁申请操作不能被重排序。\n\n    6. 两个锁释放操作不能被重排序。\n\n    7. 临界区外的操作可以被重排到临界区之内。\n\n20. `volatile`变量不会被编译器分配到寄存器进行存储，对volatile变量的读写操作都是内存访问操作。\n\n21. `volatile`关键字常被称为`轻量级锁`，其作用与锁的作用有相同的地方：保证可见性和有序性。原子性方面它仅能保证写volatile变量操作的原子性，但没有锁的排他性。其次，volatile关键字的使用不会引起上下文切换。\n\n22. 一个赋值操作：\n\n    ```java\n    volatile Map aMap = new HashMap();\n    ```\n\n    可以分解为如下伪代码所示的几个子操作：\n\n    ```java\n    objRef = allocate(HashMap.class); // 子操作1：分配对象所需的存储空间\n    invokeConstructor(objRef); // 子操作2：初始化objRef引用的对象\n    aMap = objRef; // 子操作3：将对象引用写入变量aMap\n    ```\n\n    虽然volatile关键字仅保障其中的子操作3是一个原子操作，但是由于子操作1与子操作2仅涉及局部变量而未涉及共享变量，因此对变量aMap的赋值操作仍然是一个原子操作。\n\n23. 对于volatile变量的写操作，Java虚拟机会在操作之前插入一个`释放屏障`，并在该操作之后插入一个`存储屏障`。\n\n24. 对于volatile变量的读操作，Java虚拟机会在操作之前插入一个`加载屏障`，并在该操作之后插入一个`获取屏障`。\n\n25. 写volatile变量操作与该操作之前的任何读、写操作**不会被重排序**。\n\n26. 读volatile变量操作与该操作之后的任何读、写操作**不会被重排序**。\n\n27. volatile关键字在可见性方面仅仅是保证读线程能够读取到共享变量的相对新值。对于引用型变量和数组变量，volatile关键字并不能保证读线程能够读取到对象相应的字段、元素的相对新值。\n\n28. volatile变量的读、写操作都不会导致上下文切换，因此volatile的开销比锁要小。\n\n29. volatile使用的典型场景：\n\n    1. 使用volatile变量作为`状态标志`。\n\n    2. 使用volatile保障`可见性`。\n\n    3. 使用volatile变量代替锁。\n\n    4. 使用volatile实现简易版的读写锁。\n\n30. volatile关键字并非锁的代替品，volatile关键字和锁各有其适用条件。前者更适合于多个线程共享一个状态变量，而后者更适合于多个线程共享一组状态变量。某些情形下，我们可以将多个线程共享的一组状态变量合并成一个对象，用一个volatile变量来引用该对象，从而使我们不必要使用锁。\n\n31. `原子变量类`是基于CAS实现的能够保障对共享变量进行`read-modify-write`更新操作的原子性和可见性的一组工具类。\n\n32. `对象发布`是指使对象能够被其作用域之外的线程访问。\n\n33. 常见的对象发布形式包括：\n\n    1. 将对象引用存储到public变量中。\n\n    2. 在非private方法中返回一个对象。\n\n    3. 创建内部类，使得当前对象能够被这个内部类使用。\n\n    4. 通过方法调用将对象传递给外部方法。\n\n34. `static`关键字在多线程环境下有其特殊的含义，它能够保证一个线程即使在未使用其他同步机制的情况下也总是可以读取到一个类的静态变量的初始值。\n\n35. 对于引用型静态变量，`static`关键字还能够保障一个线程读取到该变量的初始值时，这个值所指向的对象已经初始化完毕。\n\n36. `static` 关键字仅仅保障读线程能够读取到相应字段的初始值，而不是相对新值。\n\n37. 当一个对象被发布到其他线程的时候，该对象的所有`final`字段都是初始化完毕的。\n\n38. 对于引用型`final`字段，`final`关键字还进一步确保该字段所引用的对象已经初始化完毕，即这些线程读取该字段所引用的对象的各个字段时所读取到的值都是相应字段的初始值。\n\n39. 当一个对象的引用对其他线程可见的时候，这些线程所看到的该对象的final字段必然是初始化完毕的。final关键字的作用仅是这种有序性的保障，它并不能保障包含final字段的对象的引用自身对其他线程的可见性。\n\n40. `安全发布`就是指对象以一种线程安全的方式被发布。\n\n41. 当一个对象的发布出现我们不期望的结果或者对象发布本身不是我们所期望的时候，我们就称该对象`逸出`。\n\n42. 对象逸出包括：\n\n    1. 在构造函器中将this赋值给一个共享变量。\n\n    2. 在构造器中将this作为方法参数传递给其他方法。\n\n    3. 在构造器中启动基于匿名类的线程。\n\n43. 一个对象在其初始化过程中没有出现this逸出，我们就称该对象为正确创建的对象。\n\n44. 实现对象的安全发布，通常可以依照以下顺序选择适用且开销最小的线程同步机制。\n\n    1. 使用staic关键字引用该对象的变量。\n\n    2. 使用final关键字修饰引用该对象的变量。\n\n    3. 使用volatile关键字修饰引用该对象的变量。\n\n    4. 使用AtomicReference来引用该对象。\n\n    5. 对访问该对象的代码进行加锁。\n\n## 第四章 牛刀小试：玩转线程\n\n1. 多线程编程中分而治之的使用主要有两种方式：**基于数据的分割**和**基于任务的分割**。\n\n2. 基于数据的分割的结果是产生多个`同质工作者线程`，即任务处理逻辑相同的线程。需要考虑如下因素：\n\n   1. 工作者线程数量的合理设置问题。\n\n   2. 工作者线程的异常处理问题。\n\n   3. 原始输入规模未知问题。\n\n   4. 程序的复杂性增加的问题。\n\n3. 为了提高任务的执行效率，我们可能使用多个线程去共同完成一个任务的执行。这就是基于任务的分割，其基本思想就是将任务按照一定的规则分解成若干子任务，并使用专门的工作者线程去执行这些子任务，从而实现任务的并发执行。\n\n4. 线程所执行的任务按照 其消耗的主要资源可划分为`CPU密集型`任务和`IO密集型`任务。\n\n5. CPU密集型任务执行过程中消耗的主要资源是CPU时间，CPU密集型任务的一个典型例子是加密和解密；IO密集型任务执行过程中消耗的主要资源是IO资源，典型的IO密集型任务就包括文件读写、网络读写等。\n\n6. 基于任务的分割结果是产生多个相互协作的`异质工作者线程`。\n\n7. `Amdahl’s 定律`描述了线程数与多线程程序相对于单线程程序的提速之间的关系。\n   $$\n   S_{max} = \\frac{1}{P + \\frac{1 - P}{N}}\n   $$\n   其中，N为处理器数量，程序中必须串行化的部分耗时占程序全部耗时的比率为P。\n\n8. 为使多线程程序能够获得较大的提速，我们**应该从算法入手，减少程序中必须串行的部分，而不是寄希望于增加线程数**。\n\n9. 线程数设置得过少可能导致无法充分利用处理器资源；而线程数设置得过大则又可能导致过多的上下文切换，从而反倒降低了系统的性能。\n\n10. 线程数的合理值可以根据以下规则设置：\n\n    1. 对于CPU密集型线程，考虑到这类线程执行任务时消耗的主要是处理器资源，我们可以将这类线程的线程数设置为$N_{cpu} $个。因为CPU密集型线程也可能由于某些原因（比如缺页中断）而被切出，此时为了避免处理器资源的浪费，我们也可以为这类线程设置一个额外的线程，即将线程数设置为$N_{cpu}  + 1$\n\n    2. 对于IO密集型线程，考虑到IO操作可能导致上下文切换，为这样的线程设置过多的线程会导致过多的额外系统开销。因此如果一个这样的工作者线程就可以满足我们的要求，那么就不要设置更多的线程数。如果一个工作者线程仍然不够用，那么我们可以考虑将这类线程的数量设置为$2 * N_{cpu} $\n\n11. **挖掘出程序中可并发点**是实现多线程编程的目标——并发计算的前提。\n\n12. 实现并发化的策略包括基于数据的分割策略和基于任务的分割策略。\n\n## 第五章 线程间协作\n\n1. 一个线程因其执行目标动作所需的保护条件未满足而被暂停的过程被称为`等待`。\n\n2. 一个线程更新了系统的状态，使得其他线程所需的保护条件得以满足的时候唤醒那些被暂停的线程的过程就被称为`通知`。\n\n3. 由于一个线程只有在持有一个对象的内部所的情况下才能够调用该对象的wait方法，因此Object.wait()调用总是放在相应对象所引导的临界区之中。\n\n4. 等待线程对保护条件的判断、Object.wait()的执行以及目标动作的执行必须放在同一个对象所引导的临界区之中。\n\n5. `Object.wait()`暂停当前线程时释放的锁只是与该wait方法所属对象的内部锁。当前线程所持有的其他内部锁、显示锁并不会因此而被释放。\n\n6. `Object.notify()`的执行线程持有的相应对象的内部锁只有在Object.notify()调用所在的临界区代码执行结束后才会被释放，而Object.notify()本身并不会将这个内部锁释放。因此，为了 使等待线程在其被唤醒之后能够尽快再次获得相应的内部锁，我们要尽可能地将Object.notify()调用放在靠近临界区结束的地方。\n\n7. `等待线程`和`通知线程`是同步在同一对象之上的两种线程。\n\n8. Java虚拟机会为每个对象维护一个`入口集`用于存储申请该对象内部锁的线程。Java虚拟机还会为每个对象维护一个被称为`等待集`的队列，该队列用于存储该对象上的等待线程。Object.wait()将当前线程暂停并释放相应的内部锁的同时会将当前线程存入该方法所属对象的等待集中。\n\n9. wait/notify的开销及问题\n\n   1. 过早唤醒问题\n\n   2. 信号丢失问题\n\n   3. 欺骗性唤醒问题\n\n   4. 上下文切换问题\n\n10. 只有在有证据表明使用`Object.notify()`足够的情况下才使用`Object.notify()`，只有在下列条件全部满足的情况下才能够用于替代`notifyAll`方法：\n\n    1. 一次通知仅需要唤醒至多一个线程。\n\n    2. 相应对象的等待集中仅包含同质等待线程。\n\n11. `join(long)`允许我们指定一个超时时间。如果目标线程没有在指定的时间内终止，那么当前线程也会继续运行。`join(long)`实际上就是使用了`wait/notify`来实现的。\n\n12. Java虚拟机会在目标线程的run方法运行结束后执行该线程的`notifyAll`方法来通知所有的等待线程。\n\n13. `Condition`接口可作为`wait/notify`的替代品来实现等待/通知，它为解决过早唤醒问题提供了支持，并解决了`Object.wait(long)`不能区分其返回是否是由等待超时而导致的问题。\n\n14. `Condition.await()/signal()`也要求其执行线程持有创建该Condition实例的显示锁。Condition实例也被称为条件变量或者条件队列。每个Condition实例内部都维护了一个用于存储等待线程的队列。\n\n15. `Condition`接口本身只是对解决过早唤醒问题提供了支持。要真正解决过早唤醒问题，我们需要通过应用代码维护保护条件与条件变量的await方法来实现其等待，并使通知线程在更新了相关共享变量之后，仅调用与这些共享变量有关的保护条件所对应的条件变量的`signal/signalAll`方法来实现通知。\n\n16. `Condition.awaitUntil(Date deadline)`可以用于实现带超时时间限制的等待，并且该方法的返回值能够区分该方法调用是由于等待超时而返回还是由于其他线程执行了相应条件变量的`signal/signalAll`方法而返回。\n\n17. 等待线程因执行`Condition.await()/awaitUntil(Date)`而被暂停的同时，其持有的相应显示锁也会被释放，等待线程被唤醒之后得以继续运行时需要再次申请相应的显示锁，然后等待线程对`Condition.await()/awaitUntil(Date)`的调用才能返回。\n\n18. `CountDownLatch`可以用来实现一个线程等待其他线程完成一组特定的操作之后才继续运行。这组操作被称为`先决操作`。\n\n19. `CountDownLatch`内部计数器值达到0后其值就恒定不变，后续执行该CountDownLatch实例的await方法的任何一个线程都不会被暂停。为了避免等待线程永远被暂停，`CountDownLatch.countDown()`调用必须放在代码中总是可以被执行到的地方，例如`finally`块中。\n\n20. 使用`CyclicBarrier`实现等待的线程被称为`参与方`，参与方只需要执行`CyclicBarrier.await()`就可以实现等待。\n\n21. 最后一个线程执行`CyclicBarrier.await()`会使得使用相应`CyclicBarrier`实例的其他所有参与方被唤醒，而最后一个线程自身并不会被暂停。\n\n22. 由于`CyclicBarrier`内部实现是基于条件变量的，因此`CyclicBarrier`的开销与条件变量的开销相似，其主要开销在可能产生的上下文切换。\n\n23. CyclicBarrier内部使用了一个条件变量trip来实现等待/通知。CyclicBarrier内部实现使用了分代的概念用于表示CyclicBarrier实例是可以重复使用的。\n\n24. 最后一个线程相当于通知线程，它执行费CyclicBarrier.await()会使得相应实例的parties值变为0，此时该线程会先执行barrierAction.run()，然后再执行 trip.signalAll()来唤醒所有等待线程。接着，开始下一个分代，即使得CyclicBarrier的parties指又重新恢复为其初始值。\n\n25. CyclicBarrier的典型应用场景包括以下几个:\n\n    1. 使得迭代算法并发化。\n\n    2. 在测试代码中模拟高并发。\n\n26. 将产品存入传输通道的线程就被称为生产者线程，从传输通道中取出产品进行消费的线程就被称为消费者线程。\n\n27. 一个方法或者操作如果能够导致其执行线程被暂停，那么我们就称相应的方法/操作为阻塞方法。阻塞方法能够导致上下文切换。\n\n28. 阻塞队列按照其存储空间的容量是否受限制来划分，可分为有界队列和无界队列。有界队列的存储容量限制是由应用程序制定的，无界队列的最大存储容量为Interger.MAX_VALUE($2^{31} - 1$)个元素。\n\n29. ArrayBlockingQueue的缺点是其内部在实现put、take操作的时候使用的是同一个锁，从而可能导致锁的高争用，进而导致较多的上下文切换。\n\n30. LinkedBlockingQueue既能实现无界队列，也能实现有界队列。\n\n31. LinkedBlockingQueue的优点是其内部在实现\bput、take操作的时候分别使用了两个显示锁（putLock和takeLock），这\b降低了锁争用的可能性。LinkedBlockingQueue的内部存储空间是一个链表，而链表节点所需的存储空间是动态分配的，put操作、take操作都会导致链表节点的动态创建和移除，因此LinkedBlockingQueue的缺点是它可能增加垃圾回收的负担。\n\n32. SynchronousQueue可以被看做一种特殊的有界队列。\n\n33. \n","source":"_posts/reading/java-multithread-programming-guide-in-action.md","raw":"---\ntitle: 《Java多线程编程实战指南》（核心篇）—— 摘要\ntags: \n - 摘要\n - Java\n - 多线程\ncategories: 阅读\ndate: 2018-12-26 19:55:51\n---\n> 书籍作者：黄文海\n\n## 思维导图\n\n[全文思维导图](https://mubu.com/doc/lW2C-KYYy0)\n\n## 第一章 走进Java世界中的线程\n\n1. `进程`是程序向操作系统申请资源的基本单位，`线程`是进程中可独立执行的最小单位。\n2. 一个进程可以包含多个线程。\n3. 线程所要完成的计算被称为`任务`。\n4. 启动一个线程的实质是请求Java虚拟机运行相应的线程，而这个线程具体何时能够运行是由线程调度器决定的。\n5. Java虚拟机会为每个线程分配调用栈所需的内存空间。\n6. Java平台中的任意一段代码总是由确定的线程负责执行的，这个线程就相应的被称为这段代码的`执行线程`。可以通过调用Thread.currentThread()来获取这段代码的执行线程。\n7. 线程的属性：\n\n| 属性               | 类型及用途                                                   | 注意事项                                                     |\n| ------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 编号（ID）         | Long。用于标识不同的线程。                                   | 不同线程虽然拥有的编号不同，但是某个编号的线程运行结束后，该编号可能被后续创建的线程使用，这种编号的唯一性只在Java虚拟机的一次运行中有效。 |\n| 名称（name）       | String。用于区分不同线程。（面向人）默认值与线程编号有关，默认值格式为：“Thread-线程编号” | 为每一个线程设置一个简短而含义明确的名称有助于多线程程序的调试和问题定位。 |\n| 线程类别（Daemon） | boolean。true表示相应的线程为守护线程，否则表示相应的线程为用户线程。 | 该属性必须在线程启动之前设置，否则setDaemon方法会抛出异常。负责一些关键任务的线程不适合设置为守护线程。 |\n| 优先级（Priority） | int。该属性本质上是给线程调度器的提示，用于表示应用程序希望线程能够优先得以运行。Java定义了1~10的10个优先级，默认值为5。 | 一般使用默认优先级即可。   |\n\n8. `用户线程`会阻止Java虚拟机的正常停止，即一个Java虚拟机只有在其所有用户线程都运行结束的情况下才能正常停止。而`守护线程`则不会影响Java虚拟机的正常停止，守护线程通常用于执行一些重要性不是很高的任务，例如用于监视其他线程的运行情况。\n9. Thread的`join`方法的作用相当于执行该方法的线程和线程调度器说：“我得先暂停一下，等到另外一个线程运行结束后我才能继续干活。”\n10. `yield`静态方法的作用相当于执行该方法的线程对线程调度器说：“我现在不急，如果别人需要处理器资源极度话先给他用吧。当然，如果没有其他人要用，我也不介意继续占用。”\n11. `sleep`静态方法的作用相当于执行该方法的线程对线程调度器说：“我想小憩一会儿，过段时间再叫醒我继续干活吧。”\n12. 假设线程A所执行的代码创建了线程B，那么，习惯上我们称线程B为线程A的`子线程`，相应地线程A就被称为线程B的`父线程`。\n13. 在Java平台中，一个线程是否是守护线程默认取决于其父线程。\n14. 一个线程的优先级默认值为该线程的父线程的优先级。\n15. `Thread.State`是一个枚举类型，用来表示线程的当前状态。\n    1. `NEW`：一个已创建而未启动的线程处于该状态。 \n    2. `RUNNABLE`：该状态可以被看成一个复合状态。它包括两个子状态：READY和RUNNING。\n    3. `BLOCKED`：线程进行阻塞式操作或申请由其他线程正在独占的资源时，相应的线程会处于该状态。\n    4. `WAITING`：执行某些特定方法之后就会处于这种等待状态，包括：Object.wait(),Thread.join(),LockSupport.park(),Condition.await()。能够使相应线程从WAITING变更为RUNNABLE的相应方法包括：Objeck.notify()/notifyAll()、LockSupport.unpark()、Condition.signal()。\n    5. `TIMED WAITING`：限时等待状态。\n    6. `TERMINATED`：已执行结束的线程处于该状态。\n16. Java程序的线程转储包含的线程具体信息包括线程的属性、生命周期状态、线程的调用栈以及锁相关的信息。\n17. 多线程编程具有以下优势：\n    1. 提高系统的**吞吐率**。\n    2. 提高**响应性**。\n    3. 充分利用多核优势。\n    4. 最小化对系统资源的使用。\n    5. 简化程序的结构\n18. 多线程编程的风险：\n    1. 线程安全问题。\n    2. 线程活性问题。\n    3. 上下文切换。\n    4. 可靠性。\n\n## 第二章 多线程编程的目标与挑战\n\n1. 多线程编程的实质就是将任务的处理方式由串行改为`并发`，即实现并发化，以发挥并发的优势。\n2. `状态变量`：即类的实例变量、静态变量。\n3. `共享变量`：即可以被多个线程共同访问的变量。\n4. `竞态`是指计算的正确性依赖于相对时间顺序或者线程的交错。\n5. 竞态往往伴随着读取`脏数据`问题。\n6. 竞态的两种模式：`read-modify-write`（读-改-写）和`check-then-act`（检测后行动）。\n7. 如果一个类在单线程环境下能够运行正常，并且在多线程环境下，在其使用方不必为其做任何改变的情况下也能运作正常，那么我们就称其是`线程安全`的，相应地，我们称这个类具有线程安全性。\n8. 对于涉及共享变量访问的操作，若该操作从其执行线程以外的任意线程来看是不可分割的，那么该操作就是原子操作，相应地我们称该操作具有`原子性`。\n9. Java中有两种方式来实现原子性。一种是使用`锁`，另一种是利用处理器提供的专门`CAS`指令。\n10. 在多线程环境下，一个线程对某个变量进行更新之后，后续访问该变量的线程可能无法立刻读取到这个更新的结果，甚至永远也无法读取到这个更新的结果，这就是线程安全的另一个表现形式：`可见性`。\n11. 可见性问题可能来源于JIT编译器的优化，也可能来源于`寄存器`和`高速缓存`。\n12. 虽然一个处理器的高速缓存中的内容不能被另一个处理器直接读取，但是一个处理器可以通过`缓存一致性协议`来读取其他处理器的高速缓存的数据，并将读到的数据更新到该处理器的高速缓存中。\n13. `volatile`关键字所起到的一个作用就是，提示JIT编译器被修饰的变量可能被多个线程共享，以阻止JIT编译器做出可能导致程序运行不正常的优化。另外一个作用是读取一个volatile关键字修饰的变量会使相应的处理器执行刷新处理器缓存的动作，写一个volatile关键字修饰的变量会使相应的处理器执行冲刷处理器缓存的动作，从而保障可见性。\n14. 对于同一个共享变量而言，一个线程更新了该变量的值之后，其他线程能够读取到这个更新后的值，那么这个值就被称为该变量的相对新值。\n15. 父线程在启动子线程之前对共享变量的更新对于子线程来说是可见的。\n16. 一个线程终止后该线程对共享变量的更新对于调用该线程的`join`方法的线程而言是可见的。\n17. `有序性`指在什么情况下一个处理器上运行的一个线程所执行的内存访问操作在另一个处理器上运行的其他线程看起来是乱序的。\n18. `重排序`是对内存访问有关的操作所做的一种优化，它可以在不影响单线程程序正确性的情况下提升程序的性能。重排序主要包括：`指令重排序`和`存储子系统重排序`。\n19. 重排序可能导致线程安全问题。\n20. 重排序不是必然出现的。\n21. 处理器也可能执行指令重排序，这使得执行顺序和程序顺序不一致，处理器对指令进行重排序也被称为处理器的乱序执行。处理器乱序执行并不会对单线程程序的正确性产生影响。\n22. 主内存相对于处理器是一个慢速设备。为了避免其拖后腿，处理器并不是直接访问主内存，而是通过高速缓存访问主内存的。\n23. 内存重排序包括：LoadLoad重排序、StoreStore重排序、LoadStore重排序、StoreLoad重排序。\n24. 存在数据依赖关系的语句不会被重排序，只有不存在数据依赖关系的语句才可能会被重排序。\n25. 可见性是有序性的基础，有序性影响可见性。\n26. 一个线程由于其时间片用完或者其自身原因被迫或者主动暂停其运行时，另外一个线程可以被操作系统选中占用处理器开始或者继续其运行。这种一个线程暂停，另一个线程被选中开始或者继续运行的过程就叫做`上下文切换`。\n27. 进度信息就被称为上下文，它一般包括通用寄存器的内容和程序计数器的内容。\n28. 自发性上下文切换指线程由于其自身因素导致的切出。如执行以下指令：Thread.sleep()、Object.wait()、Thread.join()、LockSupport.park()。\n29. 非自发性上下文切换指线程由于线程调度器的原因被迫切出。\n30. 上下文切换的开销包括**直接开销**和**间接开销**。\n    1. 操作系统保存和恢复上下文所需的开销，这主要是处理器时间开销。\n    2. 线程调度器进行线程调度的开销。\n    3. 处理器高速缓存重新加载的开销。\n    4. 上下文切换也可能导致整个一级高速缓存中的内容被冲刷。\n31. 这些由于资源稀缺性或者程序自身的问题和缺陷导致线程一直处于非RUNNABLE状态，或者线程虽然处于RUNNABLE状态但是其要执行的任务却一直无法进展的现象就被称为`线程活性故障`。常见的活性故障包括：\n    1. 死锁\n    2. 锁死\n    3. 活锁\n    4. 饥饿\n32. 一次只能够被一个线程占用的资源被称为`排他性`资源。在一个线程占用一个排他性资源进行访问时，其他线程视图访问该资源的现象就被称为`资源争用`。\n33. 同一时间内，处于运行状态的线程数量越多，我们就称并发程度越高，简称`高并发`。\n34. 在多个线程申请同一个排他性资源的情况下，决定哪个线程会被授予该资源的独占权，即选择哪个申请者占用该资源的过程就是`资源的调度`。\n35. 如果资源的任何一个先申请者总是能够比任何一个后申请者先获得该资源的独占权，那么相应的资源调度策略就被称为是`公平`的，如果资源的后申请者可能比先申请者先获得资源的独占权，那么相应的资源调度策略就被称为`非公平`的。\n36. 在极端的情况下，非公平调度策略可能导致等待队列中的线程永远无法获得其所需的资源，即出现`饥饿`。\n37. 一般来说，非公平调度策略的**吞吐率高**，即单位时间内它可以为更多的申请者调配资源。其缺点是，从申请者个体的角度来看这些申请者获得相应资源的独占权所需要的**时间偏差**可能比较大。\n38. 非公平调度策略可能带来一个好处——减少上下文切换的次数。\n39. 多数线程占用资源的时间相当长的情况下不适合使用**非公平调度策略**。\n40. 非公平调度策略是我们多数情况下的**首选**调度策略。其优点是吞吐率较大；缺点是资源申请者申请资源所需的时间偏差可能较大，并可能导致饥饿。公平调度策略适合在资源的时间相对长或资源的平均申请时间间隔相对长的情况下，或者对资源申请所需的时间偏差有所要求的情况下使用。其优点是线程申请资源所需的时间偏差较小，并且不会导致线程饥饿现象；其缺点是吞吐率较小。\n\n## 第三章 Java线程同步机制\n\n1. `线程同步机制`是一套用于协调线程间的数据访问及活动的机制，该机制用用户保障线程安全以及实现这些线程的共同目标。\n\n2. 线程安全问题的产生前提是多个线程并发访问共享变量、共享资源。\n\n3. 锁的持有线程在其获得锁之后和释放锁之前这段时间内所执行的代码被称为`临界区`。\n\n4. Java平台中的锁包括`内部锁`和`显示锁`。\n\n5. 锁是通过`互斥`保障原子性的。\n\n6. 一个锁实例锁保护的共享数据的数量大小就被称为锁的`粒度`。\n\n7. 锁的开销包括锁的申请和释放锁产生的开销，以及锁可能导致的上下文切换的开销，这些开销主要是处理器时间。\n\n8. `锁泄漏`是指一个线程获得某个锁之后，由于程序的错误缺陷致使该锁一直无法被释放而导致其他线程一直无法获得该锁的现象。\n\n9. Java平台中的任何一个对象都有唯一的一个与之关联的锁。这种锁被称为`监视器`或者`内部锁`。内部锁是一种`排他锁`，它能保障原子性、可见性和有序性。\n\n10. Java虚拟机会为每个内部锁分配一个`入口集`，用于记录等待获得相应内部锁的线程。多个线程申请同一个锁的时候，只有一个申请者能够成为该锁的持有线程，而其他申请者的申请操作会失败。\n\n11. 公平锁保障锁调度的公平性往往是以增加了线程的暂停和唤醒的可能性，即增加了上下文切换为代价的。因此公平锁适合于锁被持有的时间相对长或者线程申请锁的平均间隔时间相对长的情形。总得来说使用公平锁的开销比使用非公平锁的开销要大，因此显式锁默认使用的是非公平调度策略。\n\n12. `读写锁`是一种改进型的排它锁，也被称为共享/排它锁。读锁是`共享`的，写锁是`排他`的。\n\n13. 读写锁适合于在以下条件同时得以满足的场景中使用：\n\n    1. 只读操作比写操作要频繁得多。\n    2. 读线程持有锁的时间比较长。\n\n14. `ReetrantReadWriteLock`所实现的读写锁是`个可重入锁`。ReetrantReadWriteLock支持写锁的`降级`，即一个线程持有读写锁的写锁的情况下可以继续获得相应的读锁。\n\n15. `ReetrantReadWriteLock`并不支持锁的升级。读线程如果要转而申请写锁，需要先释放读锁，然后申请相应的写锁。\n\n16. `内存屏障`是对一类仅针对内存读、写操作指令的跨处理器架构的比较底层的抽象。内存屏障是被插入到两个指令之间进行使用的，其作用是**禁止编译器、处理器重排序从而保障有序性**。\n\n17. 按照可见性保障来划分，`内存屏障`可分为`加载屏障`和`存储屏障`。加载屏障的作用是**刷新处理器缓存**，存储屏障的作用是**冲刷处理器缓存**。Java虚拟机会在MonitorExit对应的机器码指令之后插入一个`存储屏障`，这就保障了写线程在释放锁之前在临界区中对共享变量所做的更新对读线程是可同步的。相应的，Java虚拟机会在MonitorEnter对应的机器码指令之后临界区开始之前的地方插入一个`加载屏障`，这使得读线程的执行处理器能够将写线程对相应共享变量所做的更新从其他处理器同步到该处理器的高速缓存中。\n\n18. 按照有序性保障来划分，`内存屏障`可以分为`获取屏障`和`释放屏障`。获取屏障的使用方式是在一个读操作之后插入该内存屏障，其作用是**禁止该读操作与其后的任何读写操作之间进行重排序**，这相当于在进行后续操作之前先要获得相应共享数据的所有权。释放屏障的使用方式是在一个写操作之前插入该内存屏障，其作用是**禁止该写操作与其前面的任何读写操作之间进行重排序**。Java虚拟机会在MonitorEnter对应的机器码指令之后临界区开始之前的地方插入一个获取屏障，并在临界区结束之后MonitorExit对应的机器码指令之前的地方插入一个释放屏障。\n\n19. 临界区之外的语句可以被重排序到临界区之内，而临界区内的操作无法被重排序到临界区之外。\n\n    1. 临界区内的操作不允许被重排序到临界区之外。\n\n    2. 临界区内的操作之间允许被重排序。\n\n    3. 临界区外的操作之间可以被重排序。\n\n    4. 锁申请与锁释放操作不能被重排序。\n\n    5. 两个锁申请操作不能被重排序。\n\n    6. 两个锁释放操作不能被重排序。\n\n    7. 临界区外的操作可以被重排到临界区之内。\n\n20. `volatile`变量不会被编译器分配到寄存器进行存储，对volatile变量的读写操作都是内存访问操作。\n\n21. `volatile`关键字常被称为`轻量级锁`，其作用与锁的作用有相同的地方：保证可见性和有序性。原子性方面它仅能保证写volatile变量操作的原子性，但没有锁的排他性。其次，volatile关键字的使用不会引起上下文切换。\n\n22. 一个赋值操作：\n\n    ```java\n    volatile Map aMap = new HashMap();\n    ```\n\n    可以分解为如下伪代码所示的几个子操作：\n\n    ```java\n    objRef = allocate(HashMap.class); // 子操作1：分配对象所需的存储空间\n    invokeConstructor(objRef); // 子操作2：初始化objRef引用的对象\n    aMap = objRef; // 子操作3：将对象引用写入变量aMap\n    ```\n\n    虽然volatile关键字仅保障其中的子操作3是一个原子操作，但是由于子操作1与子操作2仅涉及局部变量而未涉及共享变量，因此对变量aMap的赋值操作仍然是一个原子操作。\n\n23. 对于volatile变量的写操作，Java虚拟机会在操作之前插入一个`释放屏障`，并在该操作之后插入一个`存储屏障`。\n\n24. 对于volatile变量的读操作，Java虚拟机会在操作之前插入一个`加载屏障`，并在该操作之后插入一个`获取屏障`。\n\n25. 写volatile变量操作与该操作之前的任何读、写操作**不会被重排序**。\n\n26. 读volatile变量操作与该操作之后的任何读、写操作**不会被重排序**。\n\n27. volatile关键字在可见性方面仅仅是保证读线程能够读取到共享变量的相对新值。对于引用型变量和数组变量，volatile关键字并不能保证读线程能够读取到对象相应的字段、元素的相对新值。\n\n28. volatile变量的读、写操作都不会导致上下文切换，因此volatile的开销比锁要小。\n\n29. volatile使用的典型场景：\n\n    1. 使用volatile变量作为`状态标志`。\n\n    2. 使用volatile保障`可见性`。\n\n    3. 使用volatile变量代替锁。\n\n    4. 使用volatile实现简易版的读写锁。\n\n30. volatile关键字并非锁的代替品，volatile关键字和锁各有其适用条件。前者更适合于多个线程共享一个状态变量，而后者更适合于多个线程共享一组状态变量。某些情形下，我们可以将多个线程共享的一组状态变量合并成一个对象，用一个volatile变量来引用该对象，从而使我们不必要使用锁。\n\n31. `原子变量类`是基于CAS实现的能够保障对共享变量进行`read-modify-write`更新操作的原子性和可见性的一组工具类。\n\n32. `对象发布`是指使对象能够被其作用域之外的线程访问。\n\n33. 常见的对象发布形式包括：\n\n    1. 将对象引用存储到public变量中。\n\n    2. 在非private方法中返回一个对象。\n\n    3. 创建内部类，使得当前对象能够被这个内部类使用。\n\n    4. 通过方法调用将对象传递给外部方法。\n\n34. `static`关键字在多线程环境下有其特殊的含义，它能够保证一个线程即使在未使用其他同步机制的情况下也总是可以读取到一个类的静态变量的初始值。\n\n35. 对于引用型静态变量，`static`关键字还能够保障一个线程读取到该变量的初始值时，这个值所指向的对象已经初始化完毕。\n\n36. `static` 关键字仅仅保障读线程能够读取到相应字段的初始值，而不是相对新值。\n\n37. 当一个对象被发布到其他线程的时候，该对象的所有`final`字段都是初始化完毕的。\n\n38. 对于引用型`final`字段，`final`关键字还进一步确保该字段所引用的对象已经初始化完毕，即这些线程读取该字段所引用的对象的各个字段时所读取到的值都是相应字段的初始值。\n\n39. 当一个对象的引用对其他线程可见的时候，这些线程所看到的该对象的final字段必然是初始化完毕的。final关键字的作用仅是这种有序性的保障，它并不能保障包含final字段的对象的引用自身对其他线程的可见性。\n\n40. `安全发布`就是指对象以一种线程安全的方式被发布。\n\n41. 当一个对象的发布出现我们不期望的结果或者对象发布本身不是我们所期望的时候，我们就称该对象`逸出`。\n\n42. 对象逸出包括：\n\n    1. 在构造函器中将this赋值给一个共享变量。\n\n    2. 在构造器中将this作为方法参数传递给其他方法。\n\n    3. 在构造器中启动基于匿名类的线程。\n\n43. 一个对象在其初始化过程中没有出现this逸出，我们就称该对象为正确创建的对象。\n\n44. 实现对象的安全发布，通常可以依照以下顺序选择适用且开销最小的线程同步机制。\n\n    1. 使用staic关键字引用该对象的变量。\n\n    2. 使用final关键字修饰引用该对象的变量。\n\n    3. 使用volatile关键字修饰引用该对象的变量。\n\n    4. 使用AtomicReference来引用该对象。\n\n    5. 对访问该对象的代码进行加锁。\n\n## 第四章 牛刀小试：玩转线程\n\n1. 多线程编程中分而治之的使用主要有两种方式：**基于数据的分割**和**基于任务的分割**。\n\n2. 基于数据的分割的结果是产生多个`同质工作者线程`，即任务处理逻辑相同的线程。需要考虑如下因素：\n\n   1. 工作者线程数量的合理设置问题。\n\n   2. 工作者线程的异常处理问题。\n\n   3. 原始输入规模未知问题。\n\n   4. 程序的复杂性增加的问题。\n\n3. 为了提高任务的执行效率，我们可能使用多个线程去共同完成一个任务的执行。这就是基于任务的分割，其基本思想就是将任务按照一定的规则分解成若干子任务，并使用专门的工作者线程去执行这些子任务，从而实现任务的并发执行。\n\n4. 线程所执行的任务按照 其消耗的主要资源可划分为`CPU密集型`任务和`IO密集型`任务。\n\n5. CPU密集型任务执行过程中消耗的主要资源是CPU时间，CPU密集型任务的一个典型例子是加密和解密；IO密集型任务执行过程中消耗的主要资源是IO资源，典型的IO密集型任务就包括文件读写、网络读写等。\n\n6. 基于任务的分割结果是产生多个相互协作的`异质工作者线程`。\n\n7. `Amdahl’s 定律`描述了线程数与多线程程序相对于单线程程序的提速之间的关系。\n   $$\n   S_{max} = \\frac{1}{P + \\frac{1 - P}{N}}\n   $$\n   其中，N为处理器数量，程序中必须串行化的部分耗时占程序全部耗时的比率为P。\n\n8. 为使多线程程序能够获得较大的提速，我们**应该从算法入手，减少程序中必须串行的部分，而不是寄希望于增加线程数**。\n\n9. 线程数设置得过少可能导致无法充分利用处理器资源；而线程数设置得过大则又可能导致过多的上下文切换，从而反倒降低了系统的性能。\n\n10. 线程数的合理值可以根据以下规则设置：\n\n    1. 对于CPU密集型线程，考虑到这类线程执行任务时消耗的主要是处理器资源，我们可以将这类线程的线程数设置为$N_{cpu} $个。因为CPU密集型线程也可能由于某些原因（比如缺页中断）而被切出，此时为了避免处理器资源的浪费，我们也可以为这类线程设置一个额外的线程，即将线程数设置为$N_{cpu}  + 1$\n\n    2. 对于IO密集型线程，考虑到IO操作可能导致上下文切换，为这样的线程设置过多的线程会导致过多的额外系统开销。因此如果一个这样的工作者线程就可以满足我们的要求，那么就不要设置更多的线程数。如果一个工作者线程仍然不够用，那么我们可以考虑将这类线程的数量设置为$2 * N_{cpu} $\n\n11. **挖掘出程序中可并发点**是实现多线程编程的目标——并发计算的前提。\n\n12. 实现并发化的策略包括基于数据的分割策略和基于任务的分割策略。\n\n## 第五章 线程间协作\n\n1. 一个线程因其执行目标动作所需的保护条件未满足而被暂停的过程被称为`等待`。\n\n2. 一个线程更新了系统的状态，使得其他线程所需的保护条件得以满足的时候唤醒那些被暂停的线程的过程就被称为`通知`。\n\n3. 由于一个线程只有在持有一个对象的内部所的情况下才能够调用该对象的wait方法，因此Object.wait()调用总是放在相应对象所引导的临界区之中。\n\n4. 等待线程对保护条件的判断、Object.wait()的执行以及目标动作的执行必须放在同一个对象所引导的临界区之中。\n\n5. `Object.wait()`暂停当前线程时释放的锁只是与该wait方法所属对象的内部锁。当前线程所持有的其他内部锁、显示锁并不会因此而被释放。\n\n6. `Object.notify()`的执行线程持有的相应对象的内部锁只有在Object.notify()调用所在的临界区代码执行结束后才会被释放，而Object.notify()本身并不会将这个内部锁释放。因此，为了 使等待线程在其被唤醒之后能够尽快再次获得相应的内部锁，我们要尽可能地将Object.notify()调用放在靠近临界区结束的地方。\n\n7. `等待线程`和`通知线程`是同步在同一对象之上的两种线程。\n\n8. Java虚拟机会为每个对象维护一个`入口集`用于存储申请该对象内部锁的线程。Java虚拟机还会为每个对象维护一个被称为`等待集`的队列，该队列用于存储该对象上的等待线程。Object.wait()将当前线程暂停并释放相应的内部锁的同时会将当前线程存入该方法所属对象的等待集中。\n\n9. wait/notify的开销及问题\n\n   1. 过早唤醒问题\n\n   2. 信号丢失问题\n\n   3. 欺骗性唤醒问题\n\n   4. 上下文切换问题\n\n10. 只有在有证据表明使用`Object.notify()`足够的情况下才使用`Object.notify()`，只有在下列条件全部满足的情况下才能够用于替代`notifyAll`方法：\n\n    1. 一次通知仅需要唤醒至多一个线程。\n\n    2. 相应对象的等待集中仅包含同质等待线程。\n\n11. `join(long)`允许我们指定一个超时时间。如果目标线程没有在指定的时间内终止，那么当前线程也会继续运行。`join(long)`实际上就是使用了`wait/notify`来实现的。\n\n12. Java虚拟机会在目标线程的run方法运行结束后执行该线程的`notifyAll`方法来通知所有的等待线程。\n\n13. `Condition`接口可作为`wait/notify`的替代品来实现等待/通知，它为解决过早唤醒问题提供了支持，并解决了`Object.wait(long)`不能区分其返回是否是由等待超时而导致的问题。\n\n14. `Condition.await()/signal()`也要求其执行线程持有创建该Condition实例的显示锁。Condition实例也被称为条件变量或者条件队列。每个Condition实例内部都维护了一个用于存储等待线程的队列。\n\n15. `Condition`接口本身只是对解决过早唤醒问题提供了支持。要真正解决过早唤醒问题，我们需要通过应用代码维护保护条件与条件变量的await方法来实现其等待，并使通知线程在更新了相关共享变量之后，仅调用与这些共享变量有关的保护条件所对应的条件变量的`signal/signalAll`方法来实现通知。\n\n16. `Condition.awaitUntil(Date deadline)`可以用于实现带超时时间限制的等待，并且该方法的返回值能够区分该方法调用是由于等待超时而返回还是由于其他线程执行了相应条件变量的`signal/signalAll`方法而返回。\n\n17. 等待线程因执行`Condition.await()/awaitUntil(Date)`而被暂停的同时，其持有的相应显示锁也会被释放，等待线程被唤醒之后得以继续运行时需要再次申请相应的显示锁，然后等待线程对`Condition.await()/awaitUntil(Date)`的调用才能返回。\n\n18. `CountDownLatch`可以用来实现一个线程等待其他线程完成一组特定的操作之后才继续运行。这组操作被称为`先决操作`。\n\n19. `CountDownLatch`内部计数器值达到0后其值就恒定不变，后续执行该CountDownLatch实例的await方法的任何一个线程都不会被暂停。为了避免等待线程永远被暂停，`CountDownLatch.countDown()`调用必须放在代码中总是可以被执行到的地方，例如`finally`块中。\n\n20. 使用`CyclicBarrier`实现等待的线程被称为`参与方`，参与方只需要执行`CyclicBarrier.await()`就可以实现等待。\n\n21. 最后一个线程执行`CyclicBarrier.await()`会使得使用相应`CyclicBarrier`实例的其他所有参与方被唤醒，而最后一个线程自身并不会被暂停。\n\n22. 由于`CyclicBarrier`内部实现是基于条件变量的，因此`CyclicBarrier`的开销与条件变量的开销相似，其主要开销在可能产生的上下文切换。\n\n23. CyclicBarrier内部使用了一个条件变量trip来实现等待/通知。CyclicBarrier内部实现使用了分代的概念用于表示CyclicBarrier实例是可以重复使用的。\n\n24. 最后一个线程相当于通知线程，它执行费CyclicBarrier.await()会使得相应实例的parties值变为0，此时该线程会先执行barrierAction.run()，然后再执行 trip.signalAll()来唤醒所有等待线程。接着，开始下一个分代，即使得CyclicBarrier的parties指又重新恢复为其初始值。\n\n25. CyclicBarrier的典型应用场景包括以下几个:\n\n    1. 使得迭代算法并发化。\n\n    2. 在测试代码中模拟高并发。\n\n26. 将产品存入传输通道的线程就被称为生产者线程，从传输通道中取出产品进行消费的线程就被称为消费者线程。\n\n27. 一个方法或者操作如果能够导致其执行线程被暂停，那么我们就称相应的方法/操作为阻塞方法。阻塞方法能够导致上下文切换。\n\n28. 阻塞队列按照其存储空间的容量是否受限制来划分，可分为有界队列和无界队列。有界队列的存储容量限制是由应用程序制定的，无界队列的最大存储容量为Interger.MAX_VALUE($2^{31} - 1$)个元素。\n\n29. ArrayBlockingQueue的缺点是其内部在实现put、take操作的时候使用的是同一个锁，从而可能导致锁的高争用，进而导致较多的上下文切换。\n\n30. LinkedBlockingQueue既能实现无界队列，也能实现有界队列。\n\n31. LinkedBlockingQueue的优点是其内部在实现\bput、take操作的时候分别使用了两个显示锁（putLock和takeLock），这\b降低了锁争用的可能性。LinkedBlockingQueue的内部存储空间是一个链表，而链表节点所需的存储空间是动态分配的，put操作、take操作都会导致链表节点的动态创建和移除，因此LinkedBlockingQueue的缺点是它可能增加垃圾回收的负担。\n\n32. SynchronousQueue可以被看做一种特殊的有界队列。\n\n33. \n","slug":"reading/java-multithread-programming-guide-in-action","published":1,"updated":"2018-12-28T07:45:20.162Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5nc000hwu9kka9batrn","content":"<blockquote>\n<p>书籍作者：黄文海</p>\n</blockquote>\n<h2 id=\"思维导图\"><a href=\"#思维导图\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h2><p><a href=\"https://mubu.com/doc/lW2C-KYYy0\" target=\"_blank\" rel=\"noopener\">全文思维导图</a></p>\n<h2 id=\"第一章-走进Java世界中的线程\"><a href=\"#第一章-走进Java世界中的线程\" class=\"headerlink\" title=\"第一章 走进Java世界中的线程\"></a>第一章 走进Java世界中的线程</h2><ol>\n<li><code>进程</code>是程序向操作系统申请资源的基本单位，<code>线程</code>是进程中可独立执行的最小单位。</li>\n<li>一个进程可以包含多个线程。</li>\n<li>线程所要完成的计算被称为<code>任务</code>。</li>\n<li>启动一个线程的实质是请求Java虚拟机运行相应的线程，而这个线程具体何时能够运行是由线程调度器决定的。</li>\n<li>Java虚拟机会为每个线程分配调用栈所需的内存空间。</li>\n<li>Java平台中的任意一段代码总是由确定的线程负责执行的，这个线程就相应的被称为这段代码的<code>执行线程</code>。可以通过调用Thread.currentThread()来获取这段代码的执行线程。</li>\n<li>线程的属性：</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>类型及用途</th>\n<th>注意事项</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>编号（ID）</td>\n<td>Long。用于标识不同的线程。</td>\n<td>不同线程虽然拥有的编号不同，但是某个编号的线程运行结束后，该编号可能被后续创建的线程使用，这种编号的唯一性只在Java虚拟机的一次运行中有效。</td>\n</tr>\n<tr>\n<td>名称（name）</td>\n<td>String。用于区分不同线程。（面向人）默认值与线程编号有关，默认值格式为：“Thread-线程编号”</td>\n<td>为每一个线程设置一个简短而含义明确的名称有助于多线程程序的调试和问题定位。</td>\n</tr>\n<tr>\n<td>线程类别（Daemon）</td>\n<td>boolean。true表示相应的线程为守护线程，否则表示相应的线程为用户线程。</td>\n<td>该属性必须在线程启动之前设置，否则setDaemon方法会抛出异常。负责一些关键任务的线程不适合设置为守护线程。</td>\n</tr>\n<tr>\n<td>优先级（Priority）</td>\n<td>int。该属性本质上是给线程调度器的提示，用于表示应用程序希望线程能够优先得以运行。Java定义了1~10的10个优先级，默认值为5。</td>\n<td>一般使用默认优先级即可。</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"8\">\n<li><code>用户线程</code>会阻止Java虚拟机的正常停止，即一个Java虚拟机只有在其所有用户线程都运行结束的情况下才能正常停止。而<code>守护线程</code>则不会影响Java虚拟机的正常停止，守护线程通常用于执行一些重要性不是很高的任务，例如用于监视其他线程的运行情况。</li>\n<li>Thread的<code>join</code>方法的作用相当于执行该方法的线程和线程调度器说：“我得先暂停一下，等到另外一个线程运行结束后我才能继续干活。”</li>\n<li><code>yield</code>静态方法的作用相当于执行该方法的线程对线程调度器说：“我现在不急，如果别人需要处理器资源极度话先给他用吧。当然，如果没有其他人要用，我也不介意继续占用。”</li>\n<li><code>sleep</code>静态方法的作用相当于执行该方法的线程对线程调度器说：“我想小憩一会儿，过段时间再叫醒我继续干活吧。”</li>\n<li>假设线程A所执行的代码创建了线程B，那么，习惯上我们称线程B为线程A的<code>子线程</code>，相应地线程A就被称为线程B的<code>父线程</code>。</li>\n<li>在Java平台中，一个线程是否是守护线程默认取决于其父线程。</li>\n<li>一个线程的优先级默认值为该线程的父线程的优先级。</li>\n<li><code>Thread.State</code>是一个枚举类型，用来表示线程的当前状态。<ol>\n<li><code>NEW</code>：一个已创建而未启动的线程处于该状态。 </li>\n<li><code>RUNNABLE</code>：该状态可以被看成一个复合状态。它包括两个子状态：READY和RUNNING。</li>\n<li><code>BLOCKED</code>：线程进行阻塞式操作或申请由其他线程正在独占的资源时，相应的线程会处于该状态。</li>\n<li><code>WAITING</code>：执行某些特定方法之后就会处于这种等待状态，包括：Object.wait(),Thread.join(),LockSupport.park(),Condition.await()。能够使相应线程从WAITING变更为RUNNABLE的相应方法包括：Objeck.notify()/notifyAll()、LockSupport.unpark()、Condition.signal()。</li>\n<li><code>TIMED WAITING</code>：限时等待状态。</li>\n<li><code>TERMINATED</code>：已执行结束的线程处于该状态。</li>\n</ol>\n</li>\n<li>Java程序的线程转储包含的线程具体信息包括线程的属性、生命周期状态、线程的调用栈以及锁相关的信息。</li>\n<li>多线程编程具有以下优势：<ol>\n<li>提高系统的<strong>吞吐率</strong>。</li>\n<li>提高<strong>响应性</strong>。</li>\n<li>充分利用多核优势。</li>\n<li>最小化对系统资源的使用。</li>\n<li>简化程序的结构</li>\n</ol>\n</li>\n<li>多线程编程的风险：<ol>\n<li>线程安全问题。</li>\n<li>线程活性问题。</li>\n<li>上下文切换。</li>\n<li>可靠性。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"第二章-多线程编程的目标与挑战\"><a href=\"#第二章-多线程编程的目标与挑战\" class=\"headerlink\" title=\"第二章 多线程编程的目标与挑战\"></a>第二章 多线程编程的目标与挑战</h2><ol>\n<li>多线程编程的实质就是将任务的处理方式由串行改为<code>并发</code>，即实现并发化，以发挥并发的优势。</li>\n<li><code>状态变量</code>：即类的实例变量、静态变量。</li>\n<li><code>共享变量</code>：即可以被多个线程共同访问的变量。</li>\n<li><code>竞态</code>是指计算的正确性依赖于相对时间顺序或者线程的交错。</li>\n<li>竞态往往伴随着读取<code>脏数据</code>问题。</li>\n<li>竞态的两种模式：<code>read-modify-write</code>（读-改-写）和<code>check-then-act</code>（检测后行动）。</li>\n<li>如果一个类在单线程环境下能够运行正常，并且在多线程环境下，在其使用方不必为其做任何改变的情况下也能运作正常，那么我们就称其是<code>线程安全</code>的，相应地，我们称这个类具有线程安全性。</li>\n<li>对于涉及共享变量访问的操作，若该操作从其执行线程以外的任意线程来看是不可分割的，那么该操作就是原子操作，相应地我们称该操作具有<code>原子性</code>。</li>\n<li>Java中有两种方式来实现原子性。一种是使用<code>锁</code>，另一种是利用处理器提供的专门<code>CAS</code>指令。</li>\n<li>在多线程环境下，一个线程对某个变量进行更新之后，后续访问该变量的线程可能无法立刻读取到这个更新的结果，甚至永远也无法读取到这个更新的结果，这就是线程安全的另一个表现形式：<code>可见性</code>。</li>\n<li>可见性问题可能来源于JIT编译器的优化，也可能来源于<code>寄存器</code>和<code>高速缓存</code>。</li>\n<li>虽然一个处理器的高速缓存中的内容不能被另一个处理器直接读取，但是一个处理器可以通过<code>缓存一致性协议</code>来读取其他处理器的高速缓存的数据，并将读到的数据更新到该处理器的高速缓存中。</li>\n<li><code>volatile</code>关键字所起到的一个作用就是，提示JIT编译器被修饰的变量可能被多个线程共享，以阻止JIT编译器做出可能导致程序运行不正常的优化。另外一个作用是读取一个volatile关键字修饰的变量会使相应的处理器执行刷新处理器缓存的动作，写一个volatile关键字修饰的变量会使相应的处理器执行冲刷处理器缓存的动作，从而保障可见性。</li>\n<li>对于同一个共享变量而言，一个线程更新了该变量的值之后，其他线程能够读取到这个更新后的值，那么这个值就被称为该变量的相对新值。</li>\n<li>父线程在启动子线程之前对共享变量的更新对于子线程来说是可见的。</li>\n<li>一个线程终止后该线程对共享变量的更新对于调用该线程的<code>join</code>方法的线程而言是可见的。</li>\n<li><code>有序性</code>指在什么情况下一个处理器上运行的一个线程所执行的内存访问操作在另一个处理器上运行的其他线程看起来是乱序的。</li>\n<li><code>重排序</code>是对内存访问有关的操作所做的一种优化，它可以在不影响单线程程序正确性的情况下提升程序的性能。重排序主要包括：<code>指令重排序</code>和<code>存储子系统重排序</code>。</li>\n<li>重排序可能导致线程安全问题。</li>\n<li>重排序不是必然出现的。</li>\n<li>处理器也可能执行指令重排序，这使得执行顺序和程序顺序不一致，处理器对指令进行重排序也被称为处理器的乱序执行。处理器乱序执行并不会对单线程程序的正确性产生影响。</li>\n<li>主内存相对于处理器是一个慢速设备。为了避免其拖后腿，处理器并不是直接访问主内存，而是通过高速缓存访问主内存的。</li>\n<li>内存重排序包括：LoadLoad重排序、StoreStore重排序、LoadStore重排序、StoreLoad重排序。</li>\n<li>存在数据依赖关系的语句不会被重排序，只有不存在数据依赖关系的语句才可能会被重排序。</li>\n<li>可见性是有序性的基础，有序性影响可见性。</li>\n<li>一个线程由于其时间片用完或者其自身原因被迫或者主动暂停其运行时，另外一个线程可以被操作系统选中占用处理器开始或者继续其运行。这种一个线程暂停，另一个线程被选中开始或者继续运行的过程就叫做<code>上下文切换</code>。</li>\n<li>进度信息就被称为上下文，它一般包括通用寄存器的内容和程序计数器的内容。</li>\n<li>自发性上下文切换指线程由于其自身因素导致的切出。如执行以下指令：Thread.sleep()、Object.wait()、Thread.join()、LockSupport.park()。</li>\n<li>非自发性上下文切换指线程由于线程调度器的原因被迫切出。</li>\n<li>上下文切换的开销包括<strong>直接开销</strong>和<strong>间接开销</strong>。<ol>\n<li>操作系统保存和恢复上下文所需的开销，这主要是处理器时间开销。</li>\n<li>线程调度器进行线程调度的开销。</li>\n<li>处理器高速缓存重新加载的开销。</li>\n<li>上下文切换也可能导致整个一级高速缓存中的内容被冲刷。</li>\n</ol>\n</li>\n<li>这些由于资源稀缺性或者程序自身的问题和缺陷导致线程一直处于非RUNNABLE状态，或者线程虽然处于RUNNABLE状态但是其要执行的任务却一直无法进展的现象就被称为<code>线程活性故障</code>。常见的活性故障包括：<ol>\n<li>死锁</li>\n<li>锁死</li>\n<li>活锁</li>\n<li>饥饿</li>\n</ol>\n</li>\n<li>一次只能够被一个线程占用的资源被称为<code>排他性</code>资源。在一个线程占用一个排他性资源进行访问时，其他线程视图访问该资源的现象就被称为<code>资源争用</code>。</li>\n<li>同一时间内，处于运行状态的线程数量越多，我们就称并发程度越高，简称<code>高并发</code>。</li>\n<li>在多个线程申请同一个排他性资源的情况下，决定哪个线程会被授予该资源的独占权，即选择哪个申请者占用该资源的过程就是<code>资源的调度</code>。</li>\n<li>如果资源的任何一个先申请者总是能够比任何一个后申请者先获得该资源的独占权，那么相应的资源调度策略就被称为是<code>公平</code>的，如果资源的后申请者可能比先申请者先获得资源的独占权，那么相应的资源调度策略就被称为<code>非公平</code>的。</li>\n<li>在极端的情况下，非公平调度策略可能导致等待队列中的线程永远无法获得其所需的资源，即出现<code>饥饿</code>。</li>\n<li>一般来说，非公平调度策略的<strong>吞吐率高</strong>，即单位时间内它可以为更多的申请者调配资源。其缺点是，从申请者个体的角度来看这些申请者获得相应资源的独占权所需要的<strong>时间偏差</strong>可能比较大。</li>\n<li>非公平调度策略可能带来一个好处——减少上下文切换的次数。</li>\n<li>多数线程占用资源的时间相当长的情况下不适合使用<strong>非公平调度策略</strong>。</li>\n<li>非公平调度策略是我们多数情况下的<strong>首选</strong>调度策略。其优点是吞吐率较大；缺点是资源申请者申请资源所需的时间偏差可能较大，并可能导致饥饿。公平调度策略适合在资源的时间相对长或资源的平均申请时间间隔相对长的情况下，或者对资源申请所需的时间偏差有所要求的情况下使用。其优点是线程申请资源所需的时间偏差较小，并且不会导致线程饥饿现象；其缺点是吞吐率较小。</li>\n</ol>\n<h2 id=\"第三章-Java线程同步机制\"><a href=\"#第三章-Java线程同步机制\" class=\"headerlink\" title=\"第三章 Java线程同步机制\"></a>第三章 Java线程同步机制</h2><ol>\n<li><p><code>线程同步机制</code>是一套用于协调线程间的数据访问及活动的机制，该机制用用户保障线程安全以及实现这些线程的共同目标。</p>\n</li>\n<li><p>线程安全问题的产生前提是多个线程并发访问共享变量、共享资源。</p>\n</li>\n<li><p>锁的持有线程在其获得锁之后和释放锁之前这段时间内所执行的代码被称为<code>临界区</code>。</p>\n</li>\n<li><p>Java平台中的锁包括<code>内部锁</code>和<code>显示锁</code>。</p>\n</li>\n<li><p>锁是通过<code>互斥</code>保障原子性的。</p>\n</li>\n<li><p>一个锁实例锁保护的共享数据的数量大小就被称为锁的<code>粒度</code>。</p>\n</li>\n<li><p>锁的开销包括锁的申请和释放锁产生的开销，以及锁可能导致的上下文切换的开销，这些开销主要是处理器时间。</p>\n</li>\n<li><p><code>锁泄漏</code>是指一个线程获得某个锁之后，由于程序的错误缺陷致使该锁一直无法被释放而导致其他线程一直无法获得该锁的现象。</p>\n</li>\n<li><p>Java平台中的任何一个对象都有唯一的一个与之关联的锁。这种锁被称为<code>监视器</code>或者<code>内部锁</code>。内部锁是一种<code>排他锁</code>，它能保障原子性、可见性和有序性。</p>\n</li>\n<li><p>Java虚拟机会为每个内部锁分配一个<code>入口集</code>，用于记录等待获得相应内部锁的线程。多个线程申请同一个锁的时候，只有一个申请者能够成为该锁的持有线程，而其他申请者的申请操作会失败。</p>\n</li>\n<li><p>公平锁保障锁调度的公平性往往是以增加了线程的暂停和唤醒的可能性，即增加了上下文切换为代价的。因此公平锁适合于锁被持有的时间相对长或者线程申请锁的平均间隔时间相对长的情形。总得来说使用公平锁的开销比使用非公平锁的开销要大，因此显式锁默认使用的是非公平调度策略。</p>\n</li>\n<li><p><code>读写锁</code>是一种改进型的排它锁，也被称为共享/排它锁。读锁是<code>共享</code>的，写锁是<code>排他</code>的。</p>\n</li>\n<li><p>读写锁适合于在以下条件同时得以满足的场景中使用：</p>\n<ol>\n<li>只读操作比写操作要频繁得多。</li>\n<li>读线程持有锁的时间比较长。</li>\n</ol>\n</li>\n<li><p><code>ReetrantReadWriteLock</code>所实现的读写锁是<code>个可重入锁</code>。ReetrantReadWriteLock支持写锁的<code>降级</code>，即一个线程持有读写锁的写锁的情况下可以继续获得相应的读锁。</p>\n</li>\n<li><p><code>ReetrantReadWriteLock</code>并不支持锁的升级。读线程如果要转而申请写锁，需要先释放读锁，然后申请相应的写锁。</p>\n</li>\n<li><p><code>内存屏障</code>是对一类仅针对内存读、写操作指令的跨处理器架构的比较底层的抽象。内存屏障是被插入到两个指令之间进行使用的，其作用是<strong>禁止编译器、处理器重排序从而保障有序性</strong>。</p>\n</li>\n<li><p>按照可见性保障来划分，<code>内存屏障</code>可分为<code>加载屏障</code>和<code>存储屏障</code>。加载屏障的作用是<strong>刷新处理器缓存</strong>，存储屏障的作用是<strong>冲刷处理器缓存</strong>。Java虚拟机会在MonitorExit对应的机器码指令之后插入一个<code>存储屏障</code>，这就保障了写线程在释放锁之前在临界区中对共享变量所做的更新对读线程是可同步的。相应的，Java虚拟机会在MonitorEnter对应的机器码指令之后临界区开始之前的地方插入一个<code>加载屏障</code>，这使得读线程的执行处理器能够将写线程对相应共享变量所做的更新从其他处理器同步到该处理器的高速缓存中。</p>\n</li>\n<li><p>按照有序性保障来划分，<code>内存屏障</code>可以分为<code>获取屏障</code>和<code>释放屏障</code>。获取屏障的使用方式是在一个读操作之后插入该内存屏障，其作用是<strong>禁止该读操作与其后的任何读写操作之间进行重排序</strong>，这相当于在进行后续操作之前先要获得相应共享数据的所有权。释放屏障的使用方式是在一个写操作之前插入该内存屏障，其作用是<strong>禁止该写操作与其前面的任何读写操作之间进行重排序</strong>。Java虚拟机会在MonitorEnter对应的机器码指令之后临界区开始之前的地方插入一个获取屏障，并在临界区结束之后MonitorExit对应的机器码指令之前的地方插入一个释放屏障。</p>\n</li>\n<li><p>临界区之外的语句可以被重排序到临界区之内，而临界区内的操作无法被重排序到临界区之外。</p>\n<ol>\n<li><p>临界区内的操作不允许被重排序到临界区之外。</p>\n</li>\n<li><p>临界区内的操作之间允许被重排序。</p>\n</li>\n<li><p>临界区外的操作之间可以被重排序。</p>\n</li>\n<li><p>锁申请与锁释放操作不能被重排序。</p>\n</li>\n<li><p>两个锁申请操作不能被重排序。</p>\n</li>\n<li><p>两个锁释放操作不能被重排序。</p>\n</li>\n<li><p>临界区外的操作可以被重排到临界区之内。</p>\n</li>\n</ol>\n</li>\n<li><p><code>volatile</code>变量不会被编译器分配到寄存器进行存储，对volatile变量的读写操作都是内存访问操作。</p>\n</li>\n<li><p><code>volatile</code>关键字常被称为<code>轻量级锁</code>，其作用与锁的作用有相同的地方：保证可见性和有序性。原子性方面它仅能保证写volatile变量操作的原子性，但没有锁的排他性。其次，volatile关键字的使用不会引起上下文切换。</p>\n</li>\n<li><p>一个赋值操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">volatile</span> Map aMap = <span class=\"keyword\">new</span> HashMap();</span><br></pre></td></tr></table></figure>\n<p>可以分解为如下伪代码所示的几个子操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objRef = allocate(HashMap.class); <span class=\"comment\">// 子操作1：分配对象所需的存储空间</span></span><br><span class=\"line\">invokeConstructor(objRef); <span class=\"comment\">// 子操作2：初始化objRef引用的对象</span></span><br><span class=\"line\">aMap = objRef; <span class=\"comment\">// 子操作3：将对象引用写入变量aMap</span></span><br></pre></td></tr></table></figure>\n<p>虽然volatile关键字仅保障其中的子操作3是一个原子操作，但是由于子操作1与子操作2仅涉及局部变量而未涉及共享变量，因此对变量aMap的赋值操作仍然是一个原子操作。</p>\n</li>\n<li><p>对于volatile变量的写操作，Java虚拟机会在操作之前插入一个<code>释放屏障</code>，并在该操作之后插入一个<code>存储屏障</code>。</p>\n</li>\n<li><p>对于volatile变量的读操作，Java虚拟机会在操作之前插入一个<code>加载屏障</code>，并在该操作之后插入一个<code>获取屏障</code>。</p>\n</li>\n<li><p>写volatile变量操作与该操作之前的任何读、写操作<strong>不会被重排序</strong>。</p>\n</li>\n<li><p>读volatile变量操作与该操作之后的任何读、写操作<strong>不会被重排序</strong>。</p>\n</li>\n<li><p>volatile关键字在可见性方面仅仅是保证读线程能够读取到共享变量的相对新值。对于引用型变量和数组变量，volatile关键字并不能保证读线程能够读取到对象相应的字段、元素的相对新值。</p>\n</li>\n<li><p>volatile变量的读、写操作都不会导致上下文切换，因此volatile的开销比锁要小。</p>\n</li>\n<li><p>volatile使用的典型场景：</p>\n<ol>\n<li><p>使用volatile变量作为<code>状态标志</code>。</p>\n</li>\n<li><p>使用volatile保障<code>可见性</code>。</p>\n</li>\n<li><p>使用volatile变量代替锁。</p>\n</li>\n<li><p>使用volatile实现简易版的读写锁。</p>\n</li>\n</ol>\n</li>\n<li><p>volatile关键字并非锁的代替品，volatile关键字和锁各有其适用条件。前者更适合于多个线程共享一个状态变量，而后者更适合于多个线程共享一组状态变量。某些情形下，我们可以将多个线程共享的一组状态变量合并成一个对象，用一个volatile变量来引用该对象，从而使我们不必要使用锁。</p>\n</li>\n<li><p><code>原子变量类</code>是基于CAS实现的能够保障对共享变量进行<code>read-modify-write</code>更新操作的原子性和可见性的一组工具类。</p>\n</li>\n<li><p><code>对象发布</code>是指使对象能够被其作用域之外的线程访问。</p>\n</li>\n<li><p>常见的对象发布形式包括：</p>\n<ol>\n<li><p>将对象引用存储到public变量中。</p>\n</li>\n<li><p>在非private方法中返回一个对象。</p>\n</li>\n<li><p>创建内部类，使得当前对象能够被这个内部类使用。</p>\n</li>\n<li><p>通过方法调用将对象传递给外部方法。</p>\n</li>\n</ol>\n</li>\n<li><p><code>static</code>关键字在多线程环境下有其特殊的含义，它能够保证一个线程即使在未使用其他同步机制的情况下也总是可以读取到一个类的静态变量的初始值。</p>\n</li>\n<li><p>对于引用型静态变量，<code>static</code>关键字还能够保障一个线程读取到该变量的初始值时，这个值所指向的对象已经初始化完毕。</p>\n</li>\n<li><p><code>static</code> 关键字仅仅保障读线程能够读取到相应字段的初始值，而不是相对新值。</p>\n</li>\n<li><p>当一个对象被发布到其他线程的时候，该对象的所有<code>final</code>字段都是初始化完毕的。</p>\n</li>\n<li><p>对于引用型<code>final</code>字段，<code>final</code>关键字还进一步确保该字段所引用的对象已经初始化完毕，即这些线程读取该字段所引用的对象的各个字段时所读取到的值都是相应字段的初始值。</p>\n</li>\n<li><p>当一个对象的引用对其他线程可见的时候，这些线程所看到的该对象的final字段必然是初始化完毕的。final关键字的作用仅是这种有序性的保障，它并不能保障包含final字段的对象的引用自身对其他线程的可见性。</p>\n</li>\n<li><p><code>安全发布</code>就是指对象以一种线程安全的方式被发布。</p>\n</li>\n<li><p>当一个对象的发布出现我们不期望的结果或者对象发布本身不是我们所期望的时候，我们就称该对象<code>逸出</code>。</p>\n</li>\n<li><p>对象逸出包括：</p>\n<ol>\n<li><p>在构造函器中将this赋值给一个共享变量。</p>\n</li>\n<li><p>在构造器中将this作为方法参数传递给其他方法。</p>\n</li>\n<li><p>在构造器中启动基于匿名类的线程。</p>\n</li>\n</ol>\n</li>\n<li><p>一个对象在其初始化过程中没有出现this逸出，我们就称该对象为正确创建的对象。</p>\n</li>\n<li><p>实现对象的安全发布，通常可以依照以下顺序选择适用且开销最小的线程同步机制。</p>\n<ol>\n<li><p>使用staic关键字引用该对象的变量。</p>\n</li>\n<li><p>使用final关键字修饰引用该对象的变量。</p>\n</li>\n<li><p>使用volatile关键字修饰引用该对象的变量。</p>\n</li>\n<li><p>使用AtomicReference来引用该对象。</p>\n</li>\n<li><p>对访问该对象的代码进行加锁。</p>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"第四章-牛刀小试：玩转线程\"><a href=\"#第四章-牛刀小试：玩转线程\" class=\"headerlink\" title=\"第四章 牛刀小试：玩转线程\"></a>第四章 牛刀小试：玩转线程</h2><ol>\n<li><p>多线程编程中分而治之的使用主要有两种方式：<strong>基于数据的分割</strong>和<strong>基于任务的分割</strong>。</p>\n</li>\n<li><p>基于数据的分割的结果是产生多个<code>同质工作者线程</code>，即任务处理逻辑相同的线程。需要考虑如下因素：</p>\n<ol>\n<li><p>工作者线程数量的合理设置问题。</p>\n</li>\n<li><p>工作者线程的异常处理问题。</p>\n</li>\n<li><p>原始输入规模未知问题。</p>\n</li>\n<li><p>程序的复杂性增加的问题。</p>\n</li>\n</ol>\n</li>\n<li><p>为了提高任务的执行效率，我们可能使用多个线程去共同完成一个任务的执行。这就是基于任务的分割，其基本思想就是将任务按照一定的规则分解成若干子任务，并使用专门的工作者线程去执行这些子任务，从而实现任务的并发执行。</p>\n</li>\n<li><p>线程所执行的任务按照 其消耗的主要资源可划分为<code>CPU密集型</code>任务和<code>IO密集型</code>任务。</p>\n</li>\n<li><p>CPU密集型任务执行过程中消耗的主要资源是CPU时间，CPU密集型任务的一个典型例子是加密和解密；IO密集型任务执行过程中消耗的主要资源是IO资源，典型的IO密集型任务就包括文件读写、网络读写等。</p>\n</li>\n<li><p>基于任务的分割结果是产生多个相互协作的<code>异质工作者线程</code>。</p>\n</li>\n<li><p><code>Amdahl’s 定律</code>描述了线程数与多线程程序相对于单线程程序的提速之间的关系。<br>$$<br>S_{max} = \\frac{1}{P + \\frac{1 - P}{N}}<br>$$<br>其中，N为处理器数量，程序中必须串行化的部分耗时占程序全部耗时的比率为P。</p>\n</li>\n<li><p>为使多线程程序能够获得较大的提速，我们<strong>应该从算法入手，减少程序中必须串行的部分，而不是寄希望于增加线程数</strong>。</p>\n</li>\n<li><p>线程数设置得过少可能导致无法充分利用处理器资源；而线程数设置得过大则又可能导致过多的上下文切换，从而反倒降低了系统的性能。</p>\n</li>\n<li><p>线程数的合理值可以根据以下规则设置：</p>\n<ol>\n<li><p>对于CPU密集型线程，考虑到这类线程执行任务时消耗的主要是处理器资源，我们可以将这类线程的线程数设置为$N_{cpu} $个。因为CPU密集型线程也可能由于某些原因（比如缺页中断）而被切出，此时为了避免处理器资源的浪费，我们也可以为这类线程设置一个额外的线程，即将线程数设置为$N_{cpu}  + 1$</p>\n</li>\n<li><p>对于IO密集型线程，考虑到IO操作可能导致上下文切换，为这样的线程设置过多的线程会导致过多的额外系统开销。因此如果一个这样的工作者线程就可以满足我们的要求，那么就不要设置更多的线程数。如果一个工作者线程仍然不够用，那么我们可以考虑将这类线程的数量设置为$2 * N_{cpu} $</p>\n</li>\n</ol>\n</li>\n<li><p><strong>挖掘出程序中可并发点</strong>是实现多线程编程的目标——并发计算的前提。</p>\n</li>\n<li><p>实现并发化的策略包括基于数据的分割策略和基于任务的分割策略。</p>\n</li>\n</ol>\n<h2 id=\"第五章-线程间协作\"><a href=\"#第五章-线程间协作\" class=\"headerlink\" title=\"第五章 线程间协作\"></a>第五章 线程间协作</h2><ol>\n<li><p>一个线程因其执行目标动作所需的保护条件未满足而被暂停的过程被称为<code>等待</code>。</p>\n</li>\n<li><p>一个线程更新了系统的状态，使得其他线程所需的保护条件得以满足的时候唤醒那些被暂停的线程的过程就被称为<code>通知</code>。</p>\n</li>\n<li><p>由于一个线程只有在持有一个对象的内部所的情况下才能够调用该对象的wait方法，因此Object.wait()调用总是放在相应对象所引导的临界区之中。</p>\n</li>\n<li><p>等待线程对保护条件的判断、Object.wait()的执行以及目标动作的执行必须放在同一个对象所引导的临界区之中。</p>\n</li>\n<li><p><code>Object.wait()</code>暂停当前线程时释放的锁只是与该wait方法所属对象的内部锁。当前线程所持有的其他内部锁、显示锁并不会因此而被释放。</p>\n</li>\n<li><p><code>Object.notify()</code>的执行线程持有的相应对象的内部锁只有在Object.notify()调用所在的临界区代码执行结束后才会被释放，而Object.notify()本身并不会将这个内部锁释放。因此，为了 使等待线程在其被唤醒之后能够尽快再次获得相应的内部锁，我们要尽可能地将Object.notify()调用放在靠近临界区结束的地方。</p>\n</li>\n<li><p><code>等待线程</code>和<code>通知线程</code>是同步在同一对象之上的两种线程。</p>\n</li>\n<li><p>Java虚拟机会为每个对象维护一个<code>入口集</code>用于存储申请该对象内部锁的线程。Java虚拟机还会为每个对象维护一个被称为<code>等待集</code>的队列，该队列用于存储该对象上的等待线程。Object.wait()将当前线程暂停并释放相应的内部锁的同时会将当前线程存入该方法所属对象的等待集中。</p>\n</li>\n<li><p>wait/notify的开销及问题</p>\n<ol>\n<li><p>过早唤醒问题</p>\n</li>\n<li><p>信号丢失问题</p>\n</li>\n<li><p>欺骗性唤醒问题</p>\n</li>\n<li><p>上下文切换问题</p>\n</li>\n</ol>\n</li>\n<li><p>只有在有证据表明使用<code>Object.notify()</code>足够的情况下才使用<code>Object.notify()</code>，只有在下列条件全部满足的情况下才能够用于替代<code>notifyAll</code>方法：</p>\n<ol>\n<li><p>一次通知仅需要唤醒至多一个线程。</p>\n</li>\n<li><p>相应对象的等待集中仅包含同质等待线程。</p>\n</li>\n</ol>\n</li>\n<li><p><code>join(long)</code>允许我们指定一个超时时间。如果目标线程没有在指定的时间内终止，那么当前线程也会继续运行。<code>join(long)</code>实际上就是使用了<code>wait/notify</code>来实现的。</p>\n</li>\n<li><p>Java虚拟机会在目标线程的run方法运行结束后执行该线程的<code>notifyAll</code>方法来通知所有的等待线程。</p>\n</li>\n<li><p><code>Condition</code>接口可作为<code>wait/notify</code>的替代品来实现等待/通知，它为解决过早唤醒问题提供了支持，并解决了<code>Object.wait(long)</code>不能区分其返回是否是由等待超时而导致的问题。</p>\n</li>\n<li><p><code>Condition.await()/signal()</code>也要求其执行线程持有创建该Condition实例的显示锁。Condition实例也被称为条件变量或者条件队列。每个Condition实例内部都维护了一个用于存储等待线程的队列。</p>\n</li>\n<li><p><code>Condition</code>接口本身只是对解决过早唤醒问题提供了支持。要真正解决过早唤醒问题，我们需要通过应用代码维护保护条件与条件变量的await方法来实现其等待，并使通知线程在更新了相关共享变量之后，仅调用与这些共享变量有关的保护条件所对应的条件变量的<code>signal/signalAll</code>方法来实现通知。</p>\n</li>\n<li><p><code>Condition.awaitUntil(Date deadline)</code>可以用于实现带超时时间限制的等待，并且该方法的返回值能够区分该方法调用是由于等待超时而返回还是由于其他线程执行了相应条件变量的<code>signal/signalAll</code>方法而返回。</p>\n</li>\n<li><p>等待线程因执行<code>Condition.await()/awaitUntil(Date)</code>而被暂停的同时，其持有的相应显示锁也会被释放，等待线程被唤醒之后得以继续运行时需要再次申请相应的显示锁，然后等待线程对<code>Condition.await()/awaitUntil(Date)</code>的调用才能返回。</p>\n</li>\n<li><p><code>CountDownLatch</code>可以用来实现一个线程等待其他线程完成一组特定的操作之后才继续运行。这组操作被称为<code>先决操作</code>。</p>\n</li>\n<li><p><code>CountDownLatch</code>内部计数器值达到0后其值就恒定不变，后续执行该CountDownLatch实例的await方法的任何一个线程都不会被暂停。为了避免等待线程永远被暂停，<code>CountDownLatch.countDown()</code>调用必须放在代码中总是可以被执行到的地方，例如<code>finally</code>块中。</p>\n</li>\n<li><p>使用<code>CyclicBarrier</code>实现等待的线程被称为<code>参与方</code>，参与方只需要执行<code>CyclicBarrier.await()</code>就可以实现等待。</p>\n</li>\n<li><p>最后一个线程执行<code>CyclicBarrier.await()</code>会使得使用相应<code>CyclicBarrier</code>实例的其他所有参与方被唤醒，而最后一个线程自身并不会被暂停。</p>\n</li>\n<li><p>由于<code>CyclicBarrier</code>内部实现是基于条件变量的，因此<code>CyclicBarrier</code>的开销与条件变量的开销相似，其主要开销在可能产生的上下文切换。</p>\n</li>\n<li><p>CyclicBarrier内部使用了一个条件变量trip来实现等待/通知。CyclicBarrier内部实现使用了分代的概念用于表示CyclicBarrier实例是可以重复使用的。</p>\n</li>\n<li><p>最后一个线程相当于通知线程，它执行费CyclicBarrier.await()会使得相应实例的parties值变为0，此时该线程会先执行barrierAction.run()，然后再执行 trip.signalAll()来唤醒所有等待线程。接着，开始下一个分代，即使得CyclicBarrier的parties指又重新恢复为其初始值。</p>\n</li>\n<li><p>CyclicBarrier的典型应用场景包括以下几个:</p>\n<ol>\n<li><p>使得迭代算法并发化。</p>\n</li>\n<li><p>在测试代码中模拟高并发。</p>\n</li>\n</ol>\n</li>\n<li><p>将产品存入传输通道的线程就被称为生产者线程，从传输通道中取出产品进行消费的线程就被称为消费者线程。</p>\n</li>\n<li><p>一个方法或者操作如果能够导致其执行线程被暂停，那么我们就称相应的方法/操作为阻塞方法。阻塞方法能够导致上下文切换。</p>\n</li>\n<li><p>阻塞队列按照其存储空间的容量是否受限制来划分，可分为有界队列和无界队列。有界队列的存储容量限制是由应用程序制定的，无界队列的最大存储容量为Interger.MAX_VALUE($2^{31} - 1$)个元素。</p>\n</li>\n<li><p>ArrayBlockingQueue的缺点是其内部在实现put、take操作的时候使用的是同一个锁，从而可能导致锁的高争用，进而导致较多的上下文切换。</p>\n</li>\n<li><p>LinkedBlockingQueue既能实现无界队列，也能实现有界队列。</p>\n</li>\n<li><p>LinkedBlockingQueue的优点是其内部在实现\bput、take操作的时候分别使用了两个显示锁（putLock和takeLock），这\b降低了锁争用的可能性。LinkedBlockingQueue的内部存储空间是一个链表，而链表节点所需的存储空间是动态分配的，put操作、take操作都会导致链表节点的动态创建和移除，因此LinkedBlockingQueue的缺点是它可能增加垃圾回收的负担。</p>\n</li>\n<li><p>SynchronousQueue可以被看做一种特殊的有界队列。</p>\n</li>\n<li></li>\n</ol>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<blockquote>\n<p>书籍作者：黄文海</p>\n</blockquote>\n<h2 id=\"思维导图\"><a href=\"#思维导图\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h2><p><a href=\"https://mubu.com/doc/lW2C-KYYy0\" target=\"_blank\" rel=\"noopener\">全文思维导图</a></p>\n<h2 id=\"第一章-走进Java世界中的线程\"><a href=\"#第一章-走进Java世界中的线程\" class=\"headerlink\" title=\"第一章 走进Java世界中的线程\"></a>第一章 走进Java世界中的线程</h2><ol>\n<li><code>进程</code>是程序向操作系统申请资源的基本单位，<code>线程</code>是进程中可独立执行的最小单位。</li>\n<li>一个进程可以包含多个线程。</li>\n<li>线程所要完成的计算被称为<code>任务</code>。</li>\n<li>启动一个线程的实质是请求Java虚拟机运行相应的线程，而这个线程具体何时能够运行是由线程调度器决定的。</li>\n<li>Java虚拟机会为每个线程分配调用栈所需的内存空间。</li>\n<li>Java平台中的任意一段代码总是由确定的线程负责执行的，这个线程就相应的被称为这段代码的<code>执行线程</code>。可以通过调用Thread.currentThread()来获取这段代码的执行线程。</li>\n<li>线程的属性：</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>类型及用途</th>\n<th>注意事项</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>编号（ID）</td>\n<td>Long。用于标识不同的线程。</td>\n<td>不同线程虽然拥有的编号不同，但是某个编号的线程运行结束后，该编号可能被后续创建的线程使用，这种编号的唯一性只在Java虚拟机的一次运行中有效。</td>\n</tr>\n<tr>\n<td>名称（name）</td>\n<td>String。用于区分不同线程。（面向人）默认值与线程编号有关，默认值格式为：“Thread-线程编号”</td>\n<td>为每一个线程设置一个简短而含义明确的名称有助于多线程程序的调试和问题定位。</td>\n</tr>\n<tr>\n<td>线程类别（Daemon）</td>\n<td>boolean。true表示相应的线程为守护线程，否则表示相应的线程为用户线程。</td>\n<td>该属性必须在线程启动之前设置，否则setDaemon方法会抛出异常。负责一些关键任务的线程不适合设置为守护线程。</td>\n</tr>\n<tr>\n<td>优先级（Priority）</td>\n<td>int。该属性本质上是给线程调度器的提示，用于表示应用程序希望线程能够优先得以运行。Java定义了1~10的10个优先级，默认值为5。</td>\n<td>一般使用默认优先级即可。</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"8\">\n<li><code>用户线程</code>会阻止Java虚拟机的正常停止，即一个Java虚拟机只有在其所有用户线程都运行结束的情况下才能正常停止。而<code>守护线程</code>则不会影响Java虚拟机的正常停止，守护线程通常用于执行一些重要性不是很高的任务，例如用于监视其他线程的运行情况。</li>\n<li>Thread的<code>join</code>方法的作用相当于执行该方法的线程和线程调度器说：“我得先暂停一下，等到另外一个线程运行结束后我才能继续干活。”</li>\n<li><code>yield</code>静态方法的作用相当于执行该方法的线程对线程调度器说：“我现在不急，如果别人需要处理器资源极度话先给他用吧。当然，如果没有其他人要用，我也不介意继续占用。”</li>\n<li><code>sleep</code>静态方法的作用相当于执行该方法的线程对线程调度器说：“我想小憩一会儿，过段时间再叫醒我继续干活吧。”</li>\n<li>假设线程A所执行的代码创建了线程B，那么，习惯上我们称线程B为线程A的<code>子线程</code>，相应地线程A就被称为线程B的<code>父线程</code>。</li>\n<li>在Java平台中，一个线程是否是守护线程默认取决于其父线程。</li>\n<li>一个线程的优先级默认值为该线程的父线程的优先级。</li>\n<li><code>Thread.State</code>是一个枚举类型，用来表示线程的当前状态。<ol>\n<li><code>NEW</code>：一个已创建而未启动的线程处于该状态。 </li>\n<li><code>RUNNABLE</code>：该状态可以被看成一个复合状态。它包括两个子状态：READY和RUNNING。</li>\n<li><code>BLOCKED</code>：线程进行阻塞式操作或申请由其他线程正在独占的资源时，相应的线程会处于该状态。</li>\n<li><code>WAITING</code>：执行某些特定方法之后就会处于这种等待状态，包括：Object.wait(),Thread.join(),LockSupport.park(),Condition.await()。能够使相应线程从WAITING变更为RUNNABLE的相应方法包括：Objeck.notify()/notifyAll()、LockSupport.unpark()、Condition.signal()。</li>\n<li><code>TIMED WAITING</code>：限时等待状态。</li>\n<li><code>TERMINATED</code>：已执行结束的线程处于该状态。</li>\n</ol>\n</li>\n<li>Java程序的线程转储包含的线程具体信息包括线程的属性、生命周期状态、线程的调用栈以及锁相关的信息。</li>\n<li>多线程编程具有以下优势：<ol>\n<li>提高系统的<strong>吞吐率</strong>。</li>\n<li>提高<strong>响应性</strong>。</li>\n<li>充分利用多核优势。</li>\n<li>最小化对系统资源的使用。</li>\n<li>简化程序的结构</li>\n</ol>\n</li>\n<li>多线程编程的风险：<ol>\n<li>线程安全问题。</li>\n<li>线程活性问题。</li>\n<li>上下文切换。</li>\n<li>可靠性。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"第二章-多线程编程的目标与挑战\"><a href=\"#第二章-多线程编程的目标与挑战\" class=\"headerlink\" title=\"第二章 多线程编程的目标与挑战\"></a>第二章 多线程编程的目标与挑战</h2><ol>\n<li>多线程编程的实质就是将任务的处理方式由串行改为<code>并发</code>，即实现并发化，以发挥并发的优势。</li>\n<li><code>状态变量</code>：即类的实例变量、静态变量。</li>\n<li><code>共享变量</code>：即可以被多个线程共同访问的变量。</li>\n<li><code>竞态</code>是指计算的正确性依赖于相对时间顺序或者线程的交错。</li>\n<li>竞态往往伴随着读取<code>脏数据</code>问题。</li>\n<li>竞态的两种模式：<code>read-modify-write</code>（读-改-写）和<code>check-then-act</code>（检测后行动）。</li>\n<li>如果一个类在单线程环境下能够运行正常，并且在多线程环境下，在其使用方不必为其做任何改变的情况下也能运作正常，那么我们就称其是<code>线程安全</code>的，相应地，我们称这个类具有线程安全性。</li>\n<li>对于涉及共享变量访问的操作，若该操作从其执行线程以外的任意线程来看是不可分割的，那么该操作就是原子操作，相应地我们称该操作具有<code>原子性</code>。</li>\n<li>Java中有两种方式来实现原子性。一种是使用<code>锁</code>，另一种是利用处理器提供的专门<code>CAS</code>指令。</li>\n<li>在多线程环境下，一个线程对某个变量进行更新之后，后续访问该变量的线程可能无法立刻读取到这个更新的结果，甚至永远也无法读取到这个更新的结果，这就是线程安全的另一个表现形式：<code>可见性</code>。</li>\n<li>可见性问题可能来源于JIT编译器的优化，也可能来源于<code>寄存器</code>和<code>高速缓存</code>。</li>\n<li>虽然一个处理器的高速缓存中的内容不能被另一个处理器直接读取，但是一个处理器可以通过<code>缓存一致性协议</code>来读取其他处理器的高速缓存的数据，并将读到的数据更新到该处理器的高速缓存中。</li>\n<li><code>volatile</code>关键字所起到的一个作用就是，提示JIT编译器被修饰的变量可能被多个线程共享，以阻止JIT编译器做出可能导致程序运行不正常的优化。另外一个作用是读取一个volatile关键字修饰的变量会使相应的处理器执行刷新处理器缓存的动作，写一个volatile关键字修饰的变量会使相应的处理器执行冲刷处理器缓存的动作，从而保障可见性。</li>\n<li>对于同一个共享变量而言，一个线程更新了该变量的值之后，其他线程能够读取到这个更新后的值，那么这个值就被称为该变量的相对新值。</li>\n<li>父线程在启动子线程之前对共享变量的更新对于子线程来说是可见的。</li>\n<li>一个线程终止后该线程对共享变量的更新对于调用该线程的<code>join</code>方法的线程而言是可见的。</li>\n<li><code>有序性</code>指在什么情况下一个处理器上运行的一个线程所执行的内存访问操作在另一个处理器上运行的其他线程看起来是乱序的。</li>\n<li><code>重排序</code>是对内存访问有关的操作所做的一种优化，它可以在不影响单线程程序正确性的情况下提升程序的性能。重排序主要包括：<code>指令重排序</code>和<code>存储子系统重排序</code>。</li>\n<li>重排序可能导致线程安全问题。</li>\n<li>重排序不是必然出现的。</li>\n<li>处理器也可能执行指令重排序，这使得执行顺序和程序顺序不一致，处理器对指令进行重排序也被称为处理器的乱序执行。处理器乱序执行并不会对单线程程序的正确性产生影响。</li>\n<li>主内存相对于处理器是一个慢速设备。为了避免其拖后腿，处理器并不是直接访问主内存，而是通过高速缓存访问主内存的。</li>\n<li>内存重排序包括：LoadLoad重排序、StoreStore重排序、LoadStore重排序、StoreLoad重排序。</li>\n<li>存在数据依赖关系的语句不会被重排序，只有不存在数据依赖关系的语句才可能会被重排序。</li>\n<li>可见性是有序性的基础，有序性影响可见性。</li>\n<li>一个线程由于其时间片用完或者其自身原因被迫或者主动暂停其运行时，另外一个线程可以被操作系统选中占用处理器开始或者继续其运行。这种一个线程暂停，另一个线程被选中开始或者继续运行的过程就叫做<code>上下文切换</code>。</li>\n<li>进度信息就被称为上下文，它一般包括通用寄存器的内容和程序计数器的内容。</li>\n<li>自发性上下文切换指线程由于其自身因素导致的切出。如执行以下指令：Thread.sleep()、Object.wait()、Thread.join()、LockSupport.park()。</li>\n<li>非自发性上下文切换指线程由于线程调度器的原因被迫切出。</li>\n<li>上下文切换的开销包括<strong>直接开销</strong>和<strong>间接开销</strong>。<ol>\n<li>操作系统保存和恢复上下文所需的开销，这主要是处理器时间开销。</li>\n<li>线程调度器进行线程调度的开销。</li>\n<li>处理器高速缓存重新加载的开销。</li>\n<li>上下文切换也可能导致整个一级高速缓存中的内容被冲刷。</li>\n</ol>\n</li>\n<li>这些由于资源稀缺性或者程序自身的问题和缺陷导致线程一直处于非RUNNABLE状态，或者线程虽然处于RUNNABLE状态但是其要执行的任务却一直无法进展的现象就被称为<code>线程活性故障</code>。常见的活性故障包括：<ol>\n<li>死锁</li>\n<li>锁死</li>\n<li>活锁</li>\n<li>饥饿</li>\n</ol>\n</li>\n<li>一次只能够被一个线程占用的资源被称为<code>排他性</code>资源。在一个线程占用一个排他性资源进行访问时，其他线程视图访问该资源的现象就被称为<code>资源争用</code>。</li>\n<li>同一时间内，处于运行状态的线程数量越多，我们就称并发程度越高，简称<code>高并发</code>。</li>\n<li>在多个线程申请同一个排他性资源的情况下，决定哪个线程会被授予该资源的独占权，即选择哪个申请者占用该资源的过程就是<code>资源的调度</code>。</li>\n<li>如果资源的任何一个先申请者总是能够比任何一个后申请者先获得该资源的独占权，那么相应的资源调度策略就被称为是<code>公平</code>的，如果资源的后申请者可能比先申请者先获得资源的独占权，那么相应的资源调度策略就被称为<code>非公平</code>的。</li>\n<li>在极端的情况下，非公平调度策略可能导致等待队列中的线程永远无法获得其所需的资源，即出现<code>饥饿</code>。</li>\n<li>一般来说，非公平调度策略的<strong>吞吐率高</strong>，即单位时间内它可以为更多的申请者调配资源。其缺点是，从申请者个体的角度来看这些申请者获得相应资源的独占权所需要的<strong>时间偏差</strong>可能比较大。</li>\n<li>非公平调度策略可能带来一个好处——减少上下文切换的次数。</li>\n<li>多数线程占用资源的时间相当长的情况下不适合使用<strong>非公平调度策略</strong>。</li>\n<li>非公平调度策略是我们多数情况下的<strong>首选</strong>调度策略。其优点是吞吐率较大；缺点是资源申请者申请资源所需的时间偏差可能较大，并可能导致饥饿。公平调度策略适合在资源的时间相对长或资源的平均申请时间间隔相对长的情况下，或者对资源申请所需的时间偏差有所要求的情况下使用。其优点是线程申请资源所需的时间偏差较小，并且不会导致线程饥饿现象；其缺点是吞吐率较小。</li>\n</ol>\n<h2 id=\"第三章-Java线程同步机制\"><a href=\"#第三章-Java线程同步机制\" class=\"headerlink\" title=\"第三章 Java线程同步机制\"></a>第三章 Java线程同步机制</h2><ol>\n<li><p><code>线程同步机制</code>是一套用于协调线程间的数据访问及活动的机制，该机制用用户保障线程安全以及实现这些线程的共同目标。</p>\n</li>\n<li><p>线程安全问题的产生前提是多个线程并发访问共享变量、共享资源。</p>\n</li>\n<li><p>锁的持有线程在其获得锁之后和释放锁之前这段时间内所执行的代码被称为<code>临界区</code>。</p>\n</li>\n<li><p>Java平台中的锁包括<code>内部锁</code>和<code>显示锁</code>。</p>\n</li>\n<li><p>锁是通过<code>互斥</code>保障原子性的。</p>\n</li>\n<li><p>一个锁实例锁保护的共享数据的数量大小就被称为锁的<code>粒度</code>。</p>\n</li>\n<li><p>锁的开销包括锁的申请和释放锁产生的开销，以及锁可能导致的上下文切换的开销，这些开销主要是处理器时间。</p>\n</li>\n<li><p><code>锁泄漏</code>是指一个线程获得某个锁之后，由于程序的错误缺陷致使该锁一直无法被释放而导致其他线程一直无法获得该锁的现象。</p>\n</li>\n<li><p>Java平台中的任何一个对象都有唯一的一个与之关联的锁。这种锁被称为<code>监视器</code>或者<code>内部锁</code>。内部锁是一种<code>排他锁</code>，它能保障原子性、可见性和有序性。</p>\n</li>\n<li><p>Java虚拟机会为每个内部锁分配一个<code>入口集</code>，用于记录等待获得相应内部锁的线程。多个线程申请同一个锁的时候，只有一个申请者能够成为该锁的持有线程，而其他申请者的申请操作会失败。</p>\n</li>\n<li><p>公平锁保障锁调度的公平性往往是以增加了线程的暂停和唤醒的可能性，即增加了上下文切换为代价的。因此公平锁适合于锁被持有的时间相对长或者线程申请锁的平均间隔时间相对长的情形。总得来说使用公平锁的开销比使用非公平锁的开销要大，因此显式锁默认使用的是非公平调度策略。</p>\n</li>\n<li><p><code>读写锁</code>是一种改进型的排它锁，也被称为共享/排它锁。读锁是<code>共享</code>的，写锁是<code>排他</code>的。</p>\n</li>\n<li><p>读写锁适合于在以下条件同时得以满足的场景中使用：</p>\n<ol>\n<li>只读操作比写操作要频繁得多。</li>\n<li>读线程持有锁的时间比较长。</li>\n</ol>\n</li>\n<li><p><code>ReetrantReadWriteLock</code>所实现的读写锁是<code>个可重入锁</code>。ReetrantReadWriteLock支持写锁的<code>降级</code>，即一个线程持有读写锁的写锁的情况下可以继续获得相应的读锁。</p>\n</li>\n<li><p><code>ReetrantReadWriteLock</code>并不支持锁的升级。读线程如果要转而申请写锁，需要先释放读锁，然后申请相应的写锁。</p>\n</li>\n<li><p><code>内存屏障</code>是对一类仅针对内存读、写操作指令的跨处理器架构的比较底层的抽象。内存屏障是被插入到两个指令之间进行使用的，其作用是<strong>禁止编译器、处理器重排序从而保障有序性</strong>。</p>\n</li>\n<li><p>按照可见性保障来划分，<code>内存屏障</code>可分为<code>加载屏障</code>和<code>存储屏障</code>。加载屏障的作用是<strong>刷新处理器缓存</strong>，存储屏障的作用是<strong>冲刷处理器缓存</strong>。Java虚拟机会在MonitorExit对应的机器码指令之后插入一个<code>存储屏障</code>，这就保障了写线程在释放锁之前在临界区中对共享变量所做的更新对读线程是可同步的。相应的，Java虚拟机会在MonitorEnter对应的机器码指令之后临界区开始之前的地方插入一个<code>加载屏障</code>，这使得读线程的执行处理器能够将写线程对相应共享变量所做的更新从其他处理器同步到该处理器的高速缓存中。</p>\n</li>\n<li><p>按照有序性保障来划分，<code>内存屏障</code>可以分为<code>获取屏障</code>和<code>释放屏障</code>。获取屏障的使用方式是在一个读操作之后插入该内存屏障，其作用是<strong>禁止该读操作与其后的任何读写操作之间进行重排序</strong>，这相当于在进行后续操作之前先要获得相应共享数据的所有权。释放屏障的使用方式是在一个写操作之前插入该内存屏障，其作用是<strong>禁止该写操作与其前面的任何读写操作之间进行重排序</strong>。Java虚拟机会在MonitorEnter对应的机器码指令之后临界区开始之前的地方插入一个获取屏障，并在临界区结束之后MonitorExit对应的机器码指令之前的地方插入一个释放屏障。</p>\n</li>\n<li><p>临界区之外的语句可以被重排序到临界区之内，而临界区内的操作无法被重排序到临界区之外。</p>\n<ol>\n<li><p>临界区内的操作不允许被重排序到临界区之外。</p>\n</li>\n<li><p>临界区内的操作之间允许被重排序。</p>\n</li>\n<li><p>临界区外的操作之间可以被重排序。</p>\n</li>\n<li><p>锁申请与锁释放操作不能被重排序。</p>\n</li>\n<li><p>两个锁申请操作不能被重排序。</p>\n</li>\n<li><p>两个锁释放操作不能被重排序。</p>\n</li>\n<li><p>临界区外的操作可以被重排到临界区之内。</p>\n</li>\n</ol>\n</li>\n<li><p><code>volatile</code>变量不会被编译器分配到寄存器进行存储，对volatile变量的读写操作都是内存访问操作。</p>\n</li>\n<li><p><code>volatile</code>关键字常被称为<code>轻量级锁</code>，其作用与锁的作用有相同的地方：保证可见性和有序性。原子性方面它仅能保证写volatile变量操作的原子性，但没有锁的排他性。其次，volatile关键字的使用不会引起上下文切换。</p>\n</li>\n<li><p>一个赋值操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">volatile</span> Map aMap = <span class=\"keyword\">new</span> HashMap();</span><br></pre></td></tr></table></figure>\n<p>可以分解为如下伪代码所示的几个子操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objRef = allocate(HashMap.class); <span class=\"comment\">// 子操作1：分配对象所需的存储空间</span></span><br><span class=\"line\">invokeConstructor(objRef); <span class=\"comment\">// 子操作2：初始化objRef引用的对象</span></span><br><span class=\"line\">aMap = objRef; <span class=\"comment\">// 子操作3：将对象引用写入变量aMap</span></span><br></pre></td></tr></table></figure>\n<p>虽然volatile关键字仅保障其中的子操作3是一个原子操作，但是由于子操作1与子操作2仅涉及局部变量而未涉及共享变量，因此对变量aMap的赋值操作仍然是一个原子操作。</p>\n</li>\n<li><p>对于volatile变量的写操作，Java虚拟机会在操作之前插入一个<code>释放屏障</code>，并在该操作之后插入一个<code>存储屏障</code>。</p>\n</li>\n<li><p>对于volatile变量的读操作，Java虚拟机会在操作之前插入一个<code>加载屏障</code>，并在该操作之后插入一个<code>获取屏障</code>。</p>\n</li>\n<li><p>写volatile变量操作与该操作之前的任何读、写操作<strong>不会被重排序</strong>。</p>\n</li>\n<li><p>读volatile变量操作与该操作之后的任何读、写操作<strong>不会被重排序</strong>。</p>\n</li>\n<li><p>volatile关键字在可见性方面仅仅是保证读线程能够读取到共享变量的相对新值。对于引用型变量和数组变量，volatile关键字并不能保证读线程能够读取到对象相应的字段、元素的相对新值。</p>\n</li>\n<li><p>volatile变量的读、写操作都不会导致上下文切换，因此volatile的开销比锁要小。</p>\n</li>\n<li><p>volatile使用的典型场景：</p>\n<ol>\n<li><p>使用volatile变量作为<code>状态标志</code>。</p>\n</li>\n<li><p>使用volatile保障<code>可见性</code>。</p>\n</li>\n<li><p>使用volatile变量代替锁。</p>\n</li>\n<li><p>使用volatile实现简易版的读写锁。</p>\n</li>\n</ol>\n</li>\n<li><p>volatile关键字并非锁的代替品，volatile关键字和锁各有其适用条件。前者更适合于多个线程共享一个状态变量，而后者更适合于多个线程共享一组状态变量。某些情形下，我们可以将多个线程共享的一组状态变量合并成一个对象，用一个volatile变量来引用该对象，从而使我们不必要使用锁。</p>\n</li>\n<li><p><code>原子变量类</code>是基于CAS实现的能够保障对共享变量进行<code>read-modify-write</code>更新操作的原子性和可见性的一组工具类。</p>\n</li>\n<li><p><code>对象发布</code>是指使对象能够被其作用域之外的线程访问。</p>\n</li>\n<li><p>常见的对象发布形式包括：</p>\n<ol>\n<li><p>将对象引用存储到public变量中。</p>\n</li>\n<li><p>在非private方法中返回一个对象。</p>\n</li>\n<li><p>创建内部类，使得当前对象能够被这个内部类使用。</p>\n</li>\n<li><p>通过方法调用将对象传递给外部方法。</p>\n</li>\n</ol>\n</li>\n<li><p><code>static</code>关键字在多线程环境下有其特殊的含义，它能够保证一个线程即使在未使用其他同步机制的情况下也总是可以读取到一个类的静态变量的初始值。</p>\n</li>\n<li><p>对于引用型静态变量，<code>static</code>关键字还能够保障一个线程读取到该变量的初始值时，这个值所指向的对象已经初始化完毕。</p>\n</li>\n<li><p><code>static</code> 关键字仅仅保障读线程能够读取到相应字段的初始值，而不是相对新值。</p>\n</li>\n<li><p>当一个对象被发布到其他线程的时候，该对象的所有<code>final</code>字段都是初始化完毕的。</p>\n</li>\n<li><p>对于引用型<code>final</code>字段，<code>final</code>关键字还进一步确保该字段所引用的对象已经初始化完毕，即这些线程读取该字段所引用的对象的各个字段时所读取到的值都是相应字段的初始值。</p>\n</li>\n<li><p>当一个对象的引用对其他线程可见的时候，这些线程所看到的该对象的final字段必然是初始化完毕的。final关键字的作用仅是这种有序性的保障，它并不能保障包含final字段的对象的引用自身对其他线程的可见性。</p>\n</li>\n<li><p><code>安全发布</code>就是指对象以一种线程安全的方式被发布。</p>\n</li>\n<li><p>当一个对象的发布出现我们不期望的结果或者对象发布本身不是我们所期望的时候，我们就称该对象<code>逸出</code>。</p>\n</li>\n<li><p>对象逸出包括：</p>\n<ol>\n<li><p>在构造函器中将this赋值给一个共享变量。</p>\n</li>\n<li><p>在构造器中将this作为方法参数传递给其他方法。</p>\n</li>\n<li><p>在构造器中启动基于匿名类的线程。</p>\n</li>\n</ol>\n</li>\n<li><p>一个对象在其初始化过程中没有出现this逸出，我们就称该对象为正确创建的对象。</p>\n</li>\n<li><p>实现对象的安全发布，通常可以依照以下顺序选择适用且开销最小的线程同步机制。</p>\n<ol>\n<li><p>使用staic关键字引用该对象的变量。</p>\n</li>\n<li><p>使用final关键字修饰引用该对象的变量。</p>\n</li>\n<li><p>使用volatile关键字修饰引用该对象的变量。</p>\n</li>\n<li><p>使用AtomicReference来引用该对象。</p>\n</li>\n<li><p>对访问该对象的代码进行加锁。</p>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"第四章-牛刀小试：玩转线程\"><a href=\"#第四章-牛刀小试：玩转线程\" class=\"headerlink\" title=\"第四章 牛刀小试：玩转线程\"></a>第四章 牛刀小试：玩转线程</h2><ol>\n<li><p>多线程编程中分而治之的使用主要有两种方式：<strong>基于数据的分割</strong>和<strong>基于任务的分割</strong>。</p>\n</li>\n<li><p>基于数据的分割的结果是产生多个<code>同质工作者线程</code>，即任务处理逻辑相同的线程。需要考虑如下因素：</p>\n<ol>\n<li><p>工作者线程数量的合理设置问题。</p>\n</li>\n<li><p>工作者线程的异常处理问题。</p>\n</li>\n<li><p>原始输入规模未知问题。</p>\n</li>\n<li><p>程序的复杂性增加的问题。</p>\n</li>\n</ol>\n</li>\n<li><p>为了提高任务的执行效率，我们可能使用多个线程去共同完成一个任务的执行。这就是基于任务的分割，其基本思想就是将任务按照一定的规则分解成若干子任务，并使用专门的工作者线程去执行这些子任务，从而实现任务的并发执行。</p>\n</li>\n<li><p>线程所执行的任务按照 其消耗的主要资源可划分为<code>CPU密集型</code>任务和<code>IO密集型</code>任务。</p>\n</li>\n<li><p>CPU密集型任务执行过程中消耗的主要资源是CPU时间，CPU密集型任务的一个典型例子是加密和解密；IO密集型任务执行过程中消耗的主要资源是IO资源，典型的IO密集型任务就包括文件读写、网络读写等。</p>\n</li>\n<li><p>基于任务的分割结果是产生多个相互协作的<code>异质工作者线程</code>。</p>\n</li>\n<li><p><code>Amdahl’s 定律</code>描述了线程数与多线程程序相对于单线程程序的提速之间的关系。<br>$$<br>S_{max} = \\frac{1}{P + \\frac{1 - P}{N}}<br>$$<br>其中，N为处理器数量，程序中必须串行化的部分耗时占程序全部耗时的比率为P。</p>\n</li>\n<li><p>为使多线程程序能够获得较大的提速，我们<strong>应该从算法入手，减少程序中必须串行的部分，而不是寄希望于增加线程数</strong>。</p>\n</li>\n<li><p>线程数设置得过少可能导致无法充分利用处理器资源；而线程数设置得过大则又可能导致过多的上下文切换，从而反倒降低了系统的性能。</p>\n</li>\n<li><p>线程数的合理值可以根据以下规则设置：</p>\n<ol>\n<li><p>对于CPU密集型线程，考虑到这类线程执行任务时消耗的主要是处理器资源，我们可以将这类线程的线程数设置为$N_{cpu} $个。因为CPU密集型线程也可能由于某些原因（比如缺页中断）而被切出，此时为了避免处理器资源的浪费，我们也可以为这类线程设置一个额外的线程，即将线程数设置为$N_{cpu}  + 1$</p>\n</li>\n<li><p>对于IO密集型线程，考虑到IO操作可能导致上下文切换，为这样的线程设置过多的线程会导致过多的额外系统开销。因此如果一个这样的工作者线程就可以满足我们的要求，那么就不要设置更多的线程数。如果一个工作者线程仍然不够用，那么我们可以考虑将这类线程的数量设置为$2 * N_{cpu} $</p>\n</li>\n</ol>\n</li>\n<li><p><strong>挖掘出程序中可并发点</strong>是实现多线程编程的目标——并发计算的前提。</p>\n</li>\n<li><p>实现并发化的策略包括基于数据的分割策略和基于任务的分割策略。</p>\n</li>\n</ol>\n<h2 id=\"第五章-线程间协作\"><a href=\"#第五章-线程间协作\" class=\"headerlink\" title=\"第五章 线程间协作\"></a>第五章 线程间协作</h2><ol>\n<li><p>一个线程因其执行目标动作所需的保护条件未满足而被暂停的过程被称为<code>等待</code>。</p>\n</li>\n<li><p>一个线程更新了系统的状态，使得其他线程所需的保护条件得以满足的时候唤醒那些被暂停的线程的过程就被称为<code>通知</code>。</p>\n</li>\n<li><p>由于一个线程只有在持有一个对象的内部所的情况下才能够调用该对象的wait方法，因此Object.wait()调用总是放在相应对象所引导的临界区之中。</p>\n</li>\n<li><p>等待线程对保护条件的判断、Object.wait()的执行以及目标动作的执行必须放在同一个对象所引导的临界区之中。</p>\n</li>\n<li><p><code>Object.wait()</code>暂停当前线程时释放的锁只是与该wait方法所属对象的内部锁。当前线程所持有的其他内部锁、显示锁并不会因此而被释放。</p>\n</li>\n<li><p><code>Object.notify()</code>的执行线程持有的相应对象的内部锁只有在Object.notify()调用所在的临界区代码执行结束后才会被释放，而Object.notify()本身并不会将这个内部锁释放。因此，为了 使等待线程在其被唤醒之后能够尽快再次获得相应的内部锁，我们要尽可能地将Object.notify()调用放在靠近临界区结束的地方。</p>\n</li>\n<li><p><code>等待线程</code>和<code>通知线程</code>是同步在同一对象之上的两种线程。</p>\n</li>\n<li><p>Java虚拟机会为每个对象维护一个<code>入口集</code>用于存储申请该对象内部锁的线程。Java虚拟机还会为每个对象维护一个被称为<code>等待集</code>的队列，该队列用于存储该对象上的等待线程。Object.wait()将当前线程暂停并释放相应的内部锁的同时会将当前线程存入该方法所属对象的等待集中。</p>\n</li>\n<li><p>wait/notify的开销及问题</p>\n<ol>\n<li><p>过早唤醒问题</p>\n</li>\n<li><p>信号丢失问题</p>\n</li>\n<li><p>欺骗性唤醒问题</p>\n</li>\n<li><p>上下文切换问题</p>\n</li>\n</ol>\n</li>\n<li><p>只有在有证据表明使用<code>Object.notify()</code>足够的情况下才使用<code>Object.notify()</code>，只有在下列条件全部满足的情况下才能够用于替代<code>notifyAll</code>方法：</p>\n<ol>\n<li><p>一次通知仅需要唤醒至多一个线程。</p>\n</li>\n<li><p>相应对象的等待集中仅包含同质等待线程。</p>\n</li>\n</ol>\n</li>\n<li><p><code>join(long)</code>允许我们指定一个超时时间。如果目标线程没有在指定的时间内终止，那么当前线程也会继续运行。<code>join(long)</code>实际上就是使用了<code>wait/notify</code>来实现的。</p>\n</li>\n<li><p>Java虚拟机会在目标线程的run方法运行结束后执行该线程的<code>notifyAll</code>方法来通知所有的等待线程。</p>\n</li>\n<li><p><code>Condition</code>接口可作为<code>wait/notify</code>的替代品来实现等待/通知，它为解决过早唤醒问题提供了支持，并解决了<code>Object.wait(long)</code>不能区分其返回是否是由等待超时而导致的问题。</p>\n</li>\n<li><p><code>Condition.await()/signal()</code>也要求其执行线程持有创建该Condition实例的显示锁。Condition实例也被称为条件变量或者条件队列。每个Condition实例内部都维护了一个用于存储等待线程的队列。</p>\n</li>\n<li><p><code>Condition</code>接口本身只是对解决过早唤醒问题提供了支持。要真正解决过早唤醒问题，我们需要通过应用代码维护保护条件与条件变量的await方法来实现其等待，并使通知线程在更新了相关共享变量之后，仅调用与这些共享变量有关的保护条件所对应的条件变量的<code>signal/signalAll</code>方法来实现通知。</p>\n</li>\n<li><p><code>Condition.awaitUntil(Date deadline)</code>可以用于实现带超时时间限制的等待，并且该方法的返回值能够区分该方法调用是由于等待超时而返回还是由于其他线程执行了相应条件变量的<code>signal/signalAll</code>方法而返回。</p>\n</li>\n<li><p>等待线程因执行<code>Condition.await()/awaitUntil(Date)</code>而被暂停的同时，其持有的相应显示锁也会被释放，等待线程被唤醒之后得以继续运行时需要再次申请相应的显示锁，然后等待线程对<code>Condition.await()/awaitUntil(Date)</code>的调用才能返回。</p>\n</li>\n<li><p><code>CountDownLatch</code>可以用来实现一个线程等待其他线程完成一组特定的操作之后才继续运行。这组操作被称为<code>先决操作</code>。</p>\n</li>\n<li><p><code>CountDownLatch</code>内部计数器值达到0后其值就恒定不变，后续执行该CountDownLatch实例的await方法的任何一个线程都不会被暂停。为了避免等待线程永远被暂停，<code>CountDownLatch.countDown()</code>调用必须放在代码中总是可以被执行到的地方，例如<code>finally</code>块中。</p>\n</li>\n<li><p>使用<code>CyclicBarrier</code>实现等待的线程被称为<code>参与方</code>，参与方只需要执行<code>CyclicBarrier.await()</code>就可以实现等待。</p>\n</li>\n<li><p>最后一个线程执行<code>CyclicBarrier.await()</code>会使得使用相应<code>CyclicBarrier</code>实例的其他所有参与方被唤醒，而最后一个线程自身并不会被暂停。</p>\n</li>\n<li><p>由于<code>CyclicBarrier</code>内部实现是基于条件变量的，因此<code>CyclicBarrier</code>的开销与条件变量的开销相似，其主要开销在可能产生的上下文切换。</p>\n</li>\n<li><p>CyclicBarrier内部使用了一个条件变量trip来实现等待/通知。CyclicBarrier内部实现使用了分代的概念用于表示CyclicBarrier实例是可以重复使用的。</p>\n</li>\n<li><p>最后一个线程相当于通知线程，它执行费CyclicBarrier.await()会使得相应实例的parties值变为0，此时该线程会先执行barrierAction.run()，然后再执行 trip.signalAll()来唤醒所有等待线程。接着，开始下一个分代，即使得CyclicBarrier的parties指又重新恢复为其初始值。</p>\n</li>\n<li><p>CyclicBarrier的典型应用场景包括以下几个:</p>\n<ol>\n<li><p>使得迭代算法并发化。</p>\n</li>\n<li><p>在测试代码中模拟高并发。</p>\n</li>\n</ol>\n</li>\n<li><p>将产品存入传输通道的线程就被称为生产者线程，从传输通道中取出产品进行消费的线程就被称为消费者线程。</p>\n</li>\n<li><p>一个方法或者操作如果能够导致其执行线程被暂停，那么我们就称相应的方法/操作为阻塞方法。阻塞方法能够导致上下文切换。</p>\n</li>\n<li><p>阻塞队列按照其存储空间的容量是否受限制来划分，可分为有界队列和无界队列。有界队列的存储容量限制是由应用程序制定的，无界队列的最大存储容量为Interger.MAX_VALUE($2^{31} - 1$)个元素。</p>\n</li>\n<li><p>ArrayBlockingQueue的缺点是其内部在实现put、take操作的时候使用的是同一个锁，从而可能导致锁的高争用，进而导致较多的上下文切换。</p>\n</li>\n<li><p>LinkedBlockingQueue既能实现无界队列，也能实现有界队列。</p>\n</li>\n<li><p>LinkedBlockingQueue的优点是其内部在实现\bput、take操作的时候分别使用了两个显示锁（putLock和takeLock），这\b降低了锁争用的可能性。LinkedBlockingQueue的内部存储空间是一个链表，而链表节点所需的存储空间是动态分配的，put操作、take操作都会导致链表节点的动态创建和移除，因此LinkedBlockingQueue的缺点是它可能增加垃圾回收的负担。</p>\n</li>\n<li><p>SynchronousQueue可以被看做一种特殊的有界队列。</p>\n</li>\n<li></li>\n</ol>\n"},{"title":"《习惯的力量》- 摘要","date":"2018-12-26T11:16:09.000Z","_content":"## 摘要\n\n- 科学家说，习惯之所以出现，是因为大脑一直在寻找可以省力的方式。如果让大脑自由发挥，那么大脑就会让几乎所有的惯常行为活动编程习惯，因为习惯能让大脑得到更多的休息。\n- 大脑中的这个过程是一个由三步组成的回路。第一步，存在着一个暗示，能让大脑进入某种自动行为模式，并决定使用哪种习惯。第二步，存在一个惯常行为，这可以是身体、思维或者感情方面的。第三步则是奖赏，能让你的大脑辨别出是否应该记下这个回路，以备将来之用。\n- 问题是你的大脑无法分别好习惯和坏习惯，所以，如果你有一个好习惯，那么这个习惯会一直蛰伏在你的大脑内，等待正确的暗示和奖赏的出现。\n- 建立习惯的两条基本规律：\n  - 第一，找出一种简单又明显的暗示\n  - 第二，清楚地说明有哪些奖赏\n- 习惯就是这样产生的：把暗示、惯常行为和奖赏拼在一起，然后培养一种渴求来驱动这一回路。吸烟就是这样。烟民看到暗示，比如一包万宝路，那么烟民的大脑就会开始预期尼古丁的味道。\n- 暗示加上奖赏本身并不足以让新习惯长期持续。只有当你的大脑开始预期奖赏，渴求内啡肽的分泌或成就感时，你才会自觉地在每天早上系好跑鞋鞋带。而暗示除了能够触发惯常行为，还必须能够触发人对即将到来的奖赏的渴求。\n- 要改变习惯，你必须留住旧习惯回路中的暗示，提供旧习惯回路中的奖赏，但要插入一个新的惯常行为。\n- 这就是黄金法则。如果你用同样的暗示，提供同样的奖赏，你就可以换掉惯常行为，改变自己的习惯。如果暗示和奖赏不变，几乎所有的习惯都是可以被改变的。\n- 研究人员发现，起作用的并不是上帝，而是信仰本身。一旦人们学会信仰某种东西，这种信仰就会扩展到生活的其他方面，直到他们开始相信自己能改变。信仰是将改造过的习惯回路变成永久性行为的要素。\n- 信仰很重要。你不一定要信仰上帝，但你必须相信事情会好转。\n- 可惜，并没有一套对每个人都有效的方法。我们知道，习惯是不能被消除的，而只能被代替。当使用改变习惯的黄金法则时，习惯最具可塑性：如果我们保持一样的暗示和奖赏，就能植入一种新的惯常行为。但这还不够，为了保持这个习惯，人们还得相信改变是可能的。而大多数时候，只有在团体的助力下，才能形成信仰。\n- 一些习惯比起其他习惯在重塑商业和生活方式上更有影响力，它们就是“核心习惯”，影响着人们的工作、饮食、玩乐、消费和沟通方式。核心习惯能启动一个进程，久而久之将改变一切。\n- 核心习惯说明成功并不需要做对每一件事情，而是要辨别出一些重要的优先因素，并将其变成有力的杠杆。\n- 最重要的习惯是那些自身变化后，会驱动和重塑其他行为模式的习惯。\n- 意志力不是一种技能，而是一种力量，就如同你手臂和大腿中的肌肉的力量，用力过猛会感到疲累，肌肉剩余的力量就不足以供给其他活动。\n- 当你学会强迫自己参与体育锻炼，或者开始做家庭作业，只吃沙拉不吃汉堡的时候，你的思维正在改变。当学会控制自己的冲动时，人们就在进步。他们将学会如何在诱惑面前分散注意力。而且一旦你形成了意志力锻炼的习惯，你的大脑就会驾轻就熟地帮助你专注于你的目标。\n- 当你学会强迫自己练琴一小时或者长跑15圈的时候，你就已经开始培养自我约束的能力了，一个能跟着球跑10分钟的5岁幼童长大后，一定是一个会按时做功课的六年级学生。\n- 当消费者遭遇到人生的重大事件时，他们的消费习惯更容易发生改变。例如，当一个人结婚的时候，他可能会开始购买一种新的咖啡。当他们迁居到新的住所后，可能倾向于购买不同种类的麦片。当他们离婚的时候，很可能会开始购买一种不同牌子的啤酒。\n- 那么，对于大多数人来说，生活中最大的变化是什么呢？什么样的变化会带来最强的干扰，领消费者最容易被市场营销者左右呢？答案就是生孩子。对于大多数的客户来说，没有什么事情比新生儿的到来使生活产出更大的改变了。因此，与成年人生活的其他任何阶段相比，初为父母者的购物习惯都更为灵活易变。\n- 改变习惯的方法：\n  - 找出惯常行为\n  - 用各种奖赏进行实验\n  - 将暗示隔离出来\n  - 制定计划\n- 几乎所有的习惯性暗示都可以归为以下五大类中的一类：\n  - 地点\n  - 时间\n  - 情绪状态\n  - 其他人\n  - 之前紧挨着的动作\n","source":"_posts/reading/the-power-of-habit-digest.md","raw":"---\ntitle: 《习惯的力量》- 摘要\ntags: 摘要\ncategories: 阅读\ndate: 2018-12-26 19:16:09\n---\n## 摘要\n\n- 科学家说，习惯之所以出现，是因为大脑一直在寻找可以省力的方式。如果让大脑自由发挥，那么大脑就会让几乎所有的惯常行为活动编程习惯，因为习惯能让大脑得到更多的休息。\n- 大脑中的这个过程是一个由三步组成的回路。第一步，存在着一个暗示，能让大脑进入某种自动行为模式，并决定使用哪种习惯。第二步，存在一个惯常行为，这可以是身体、思维或者感情方面的。第三步则是奖赏，能让你的大脑辨别出是否应该记下这个回路，以备将来之用。\n- 问题是你的大脑无法分别好习惯和坏习惯，所以，如果你有一个好习惯，那么这个习惯会一直蛰伏在你的大脑内，等待正确的暗示和奖赏的出现。\n- 建立习惯的两条基本规律：\n  - 第一，找出一种简单又明显的暗示\n  - 第二，清楚地说明有哪些奖赏\n- 习惯就是这样产生的：把暗示、惯常行为和奖赏拼在一起，然后培养一种渴求来驱动这一回路。吸烟就是这样。烟民看到暗示，比如一包万宝路，那么烟民的大脑就会开始预期尼古丁的味道。\n- 暗示加上奖赏本身并不足以让新习惯长期持续。只有当你的大脑开始预期奖赏，渴求内啡肽的分泌或成就感时，你才会自觉地在每天早上系好跑鞋鞋带。而暗示除了能够触发惯常行为，还必须能够触发人对即将到来的奖赏的渴求。\n- 要改变习惯，你必须留住旧习惯回路中的暗示，提供旧习惯回路中的奖赏，但要插入一个新的惯常行为。\n- 这就是黄金法则。如果你用同样的暗示，提供同样的奖赏，你就可以换掉惯常行为，改变自己的习惯。如果暗示和奖赏不变，几乎所有的习惯都是可以被改变的。\n- 研究人员发现，起作用的并不是上帝，而是信仰本身。一旦人们学会信仰某种东西，这种信仰就会扩展到生活的其他方面，直到他们开始相信自己能改变。信仰是将改造过的习惯回路变成永久性行为的要素。\n- 信仰很重要。你不一定要信仰上帝，但你必须相信事情会好转。\n- 可惜，并没有一套对每个人都有效的方法。我们知道，习惯是不能被消除的，而只能被代替。当使用改变习惯的黄金法则时，习惯最具可塑性：如果我们保持一样的暗示和奖赏，就能植入一种新的惯常行为。但这还不够，为了保持这个习惯，人们还得相信改变是可能的。而大多数时候，只有在团体的助力下，才能形成信仰。\n- 一些习惯比起其他习惯在重塑商业和生活方式上更有影响力，它们就是“核心习惯”，影响着人们的工作、饮食、玩乐、消费和沟通方式。核心习惯能启动一个进程，久而久之将改变一切。\n- 核心习惯说明成功并不需要做对每一件事情，而是要辨别出一些重要的优先因素，并将其变成有力的杠杆。\n- 最重要的习惯是那些自身变化后，会驱动和重塑其他行为模式的习惯。\n- 意志力不是一种技能，而是一种力量，就如同你手臂和大腿中的肌肉的力量，用力过猛会感到疲累，肌肉剩余的力量就不足以供给其他活动。\n- 当你学会强迫自己参与体育锻炼，或者开始做家庭作业，只吃沙拉不吃汉堡的时候，你的思维正在改变。当学会控制自己的冲动时，人们就在进步。他们将学会如何在诱惑面前分散注意力。而且一旦你形成了意志力锻炼的习惯，你的大脑就会驾轻就熟地帮助你专注于你的目标。\n- 当你学会强迫自己练琴一小时或者长跑15圈的时候，你就已经开始培养自我约束的能力了，一个能跟着球跑10分钟的5岁幼童长大后，一定是一个会按时做功课的六年级学生。\n- 当消费者遭遇到人生的重大事件时，他们的消费习惯更容易发生改变。例如，当一个人结婚的时候，他可能会开始购买一种新的咖啡。当他们迁居到新的住所后，可能倾向于购买不同种类的麦片。当他们离婚的时候，很可能会开始购买一种不同牌子的啤酒。\n- 那么，对于大多数人来说，生活中最大的变化是什么呢？什么样的变化会带来最强的干扰，领消费者最容易被市场营销者左右呢？答案就是生孩子。对于大多数的客户来说，没有什么事情比新生儿的到来使生活产出更大的改变了。因此，与成年人生活的其他任何阶段相比，初为父母者的购物习惯都更为灵活易变。\n- 改变习惯的方法：\n  - 找出惯常行为\n  - 用各种奖赏进行实验\n  - 将暗示隔离出来\n  - 制定计划\n- 几乎所有的习惯性暗示都可以归为以下五大类中的一类：\n  - 地点\n  - 时间\n  - 情绪状态\n  - 其他人\n  - 之前紧挨着的动作\n","slug":"reading/the-power-of-habit-digest","published":1,"updated":"2018-12-26T12:39:51.023Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5ne000kwu9kl9gfe3dh","content":"<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><ul>\n<li>科学家说，习惯之所以出现，是因为大脑一直在寻找可以省力的方式。如果让大脑自由发挥，那么大脑就会让几乎所有的惯常行为活动编程习惯，因为习惯能让大脑得到更多的休息。</li>\n<li>大脑中的这个过程是一个由三步组成的回路。第一步，存在着一个暗示，能让大脑进入某种自动行为模式，并决定使用哪种习惯。第二步，存在一个惯常行为，这可以是身体、思维或者感情方面的。第三步则是奖赏，能让你的大脑辨别出是否应该记下这个回路，以备将来之用。</li>\n<li>问题是你的大脑无法分别好习惯和坏习惯，所以，如果你有一个好习惯，那么这个习惯会一直蛰伏在你的大脑内，等待正确的暗示和奖赏的出现。</li>\n<li>建立习惯的两条基本规律：<ul>\n<li>第一，找出一种简单又明显的暗示</li>\n<li>第二，清楚地说明有哪些奖赏</li>\n</ul>\n</li>\n<li>习惯就是这样产生的：把暗示、惯常行为和奖赏拼在一起，然后培养一种渴求来驱动这一回路。吸烟就是这样。烟民看到暗示，比如一包万宝路，那么烟民的大脑就会开始预期尼古丁的味道。</li>\n<li>暗示加上奖赏本身并不足以让新习惯长期持续。只有当你的大脑开始预期奖赏，渴求内啡肽的分泌或成就感时，你才会自觉地在每天早上系好跑鞋鞋带。而暗示除了能够触发惯常行为，还必须能够触发人对即将到来的奖赏的渴求。</li>\n<li>要改变习惯，你必须留住旧习惯回路中的暗示，提供旧习惯回路中的奖赏，但要插入一个新的惯常行为。</li>\n<li>这就是黄金法则。如果你用同样的暗示，提供同样的奖赏，你就可以换掉惯常行为，改变自己的习惯。如果暗示和奖赏不变，几乎所有的习惯都是可以被改变的。</li>\n<li>研究人员发现，起作用的并不是上帝，而是信仰本身。一旦人们学会信仰某种东西，这种信仰就会扩展到生活的其他方面，直到他们开始相信自己能改变。信仰是将改造过的习惯回路变成永久性行为的要素。</li>\n<li>信仰很重要。你不一定要信仰上帝，但你必须相信事情会好转。</li>\n<li>可惜，并没有一套对每个人都有效的方法。我们知道，习惯是不能被消除的，而只能被代替。当使用改变习惯的黄金法则时，习惯最具可塑性：如果我们保持一样的暗示和奖赏，就能植入一种新的惯常行为。但这还不够，为了保持这个习惯，人们还得相信改变是可能的。而大多数时候，只有在团体的助力下，才能形成信仰。</li>\n<li>一些习惯比起其他习惯在重塑商业和生活方式上更有影响力，它们就是“核心习惯”，影响着人们的工作、饮食、玩乐、消费和沟通方式。核心习惯能启动一个进程，久而久之将改变一切。</li>\n<li>核心习惯说明成功并不需要做对每一件事情，而是要辨别出一些重要的优先因素，并将其变成有力的杠杆。</li>\n<li>最重要的习惯是那些自身变化后，会驱动和重塑其他行为模式的习惯。</li>\n<li>意志力不是一种技能，而是一种力量，就如同你手臂和大腿中的肌肉的力量，用力过猛会感到疲累，肌肉剩余的力量就不足以供给其他活动。</li>\n<li>当你学会强迫自己参与体育锻炼，或者开始做家庭作业，只吃沙拉不吃汉堡的时候，你的思维正在改变。当学会控制自己的冲动时，人们就在进步。他们将学会如何在诱惑面前分散注意力。而且一旦你形成了意志力锻炼的习惯，你的大脑就会驾轻就熟地帮助你专注于你的目标。</li>\n<li>当你学会强迫自己练琴一小时或者长跑15圈的时候，你就已经开始培养自我约束的能力了，一个能跟着球跑10分钟的5岁幼童长大后，一定是一个会按时做功课的六年级学生。</li>\n<li>当消费者遭遇到人生的重大事件时，他们的消费习惯更容易发生改变。例如，当一个人结婚的时候，他可能会开始购买一种新的咖啡。当他们迁居到新的住所后，可能倾向于购买不同种类的麦片。当他们离婚的时候，很可能会开始购买一种不同牌子的啤酒。</li>\n<li>那么，对于大多数人来说，生活中最大的变化是什么呢？什么样的变化会带来最强的干扰，领消费者最容易被市场营销者左右呢？答案就是生孩子。对于大多数的客户来说，没有什么事情比新生儿的到来使生活产出更大的改变了。因此，与成年人生活的其他任何阶段相比，初为父母者的购物习惯都更为灵活易变。</li>\n<li>改变习惯的方法：<ul>\n<li>找出惯常行为</li>\n<li>用各种奖赏进行实验</li>\n<li>将暗示隔离出来</li>\n<li>制定计划</li>\n</ul>\n</li>\n<li>几乎所有的习惯性暗示都可以归为以下五大类中的一类：<ul>\n<li>地点</li>\n<li>时间</li>\n<li>情绪状态</li>\n<li>其他人</li>\n<li>之前紧挨着的动作</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><ul>\n<li>科学家说，习惯之所以出现，是因为大脑一直在寻找可以省力的方式。如果让大脑自由发挥，那么大脑就会让几乎所有的惯常行为活动编程习惯，因为习惯能让大脑得到更多的休息。</li>\n<li>大脑中的这个过程是一个由三步组成的回路。第一步，存在着一个暗示，能让大脑进入某种自动行为模式，并决定使用哪种习惯。第二步，存在一个惯常行为，这可以是身体、思维或者感情方面的。第三步则是奖赏，能让你的大脑辨别出是否应该记下这个回路，以备将来之用。</li>\n<li>问题是你的大脑无法分别好习惯和坏习惯，所以，如果你有一个好习惯，那么这个习惯会一直蛰伏在你的大脑内，等待正确的暗示和奖赏的出现。</li>\n<li>建立习惯的两条基本规律：<ul>\n<li>第一，找出一种简单又明显的暗示</li>\n<li>第二，清楚地说明有哪些奖赏</li>\n</ul>\n</li>\n<li>习惯就是这样产生的：把暗示、惯常行为和奖赏拼在一起，然后培养一种渴求来驱动这一回路。吸烟就是这样。烟民看到暗示，比如一包万宝路，那么烟民的大脑就会开始预期尼古丁的味道。</li>\n<li>暗示加上奖赏本身并不足以让新习惯长期持续。只有当你的大脑开始预期奖赏，渴求内啡肽的分泌或成就感时，你才会自觉地在每天早上系好跑鞋鞋带。而暗示除了能够触发惯常行为，还必须能够触发人对即将到来的奖赏的渴求。</li>\n<li>要改变习惯，你必须留住旧习惯回路中的暗示，提供旧习惯回路中的奖赏，但要插入一个新的惯常行为。</li>\n<li>这就是黄金法则。如果你用同样的暗示，提供同样的奖赏，你就可以换掉惯常行为，改变自己的习惯。如果暗示和奖赏不变，几乎所有的习惯都是可以被改变的。</li>\n<li>研究人员发现，起作用的并不是上帝，而是信仰本身。一旦人们学会信仰某种东西，这种信仰就会扩展到生活的其他方面，直到他们开始相信自己能改变。信仰是将改造过的习惯回路变成永久性行为的要素。</li>\n<li>信仰很重要。你不一定要信仰上帝，但你必须相信事情会好转。</li>\n<li>可惜，并没有一套对每个人都有效的方法。我们知道，习惯是不能被消除的，而只能被代替。当使用改变习惯的黄金法则时，习惯最具可塑性：如果我们保持一样的暗示和奖赏，就能植入一种新的惯常行为。但这还不够，为了保持这个习惯，人们还得相信改变是可能的。而大多数时候，只有在团体的助力下，才能形成信仰。</li>\n<li>一些习惯比起其他习惯在重塑商业和生活方式上更有影响力，它们就是“核心习惯”，影响着人们的工作、饮食、玩乐、消费和沟通方式。核心习惯能启动一个进程，久而久之将改变一切。</li>\n<li>核心习惯说明成功并不需要做对每一件事情，而是要辨别出一些重要的优先因素，并将其变成有力的杠杆。</li>\n<li>最重要的习惯是那些自身变化后，会驱动和重塑其他行为模式的习惯。</li>\n<li>意志力不是一种技能，而是一种力量，就如同你手臂和大腿中的肌肉的力量，用力过猛会感到疲累，肌肉剩余的力量就不足以供给其他活动。</li>\n<li>当你学会强迫自己参与体育锻炼，或者开始做家庭作业，只吃沙拉不吃汉堡的时候，你的思维正在改变。当学会控制自己的冲动时，人们就在进步。他们将学会如何在诱惑面前分散注意力。而且一旦你形成了意志力锻炼的习惯，你的大脑就会驾轻就熟地帮助你专注于你的目标。</li>\n<li>当你学会强迫自己练琴一小时或者长跑15圈的时候，你就已经开始培养自我约束的能力了，一个能跟着球跑10分钟的5岁幼童长大后，一定是一个会按时做功课的六年级学生。</li>\n<li>当消费者遭遇到人生的重大事件时，他们的消费习惯更容易发生改变。例如，当一个人结婚的时候，他可能会开始购买一种新的咖啡。当他们迁居到新的住所后，可能倾向于购买不同种类的麦片。当他们离婚的时候，很可能会开始购买一种不同牌子的啤酒。</li>\n<li>那么，对于大多数人来说，生活中最大的变化是什么呢？什么样的变化会带来最强的干扰，领消费者最容易被市场营销者左右呢？答案就是生孩子。对于大多数的客户来说，没有什么事情比新生儿的到来使生活产出更大的改变了。因此，与成年人生活的其他任何阶段相比，初为父母者的购物习惯都更为灵活易变。</li>\n<li>改变习惯的方法：<ul>\n<li>找出惯常行为</li>\n<li>用各种奖赏进行实验</li>\n<li>将暗示隔离出来</li>\n<li>制定计划</li>\n</ul>\n</li>\n<li>几乎所有的习惯性暗示都可以归为以下五大类中的一类：<ul>\n<li>地点</li>\n<li>时间</li>\n<li>情绪状态</li>\n<li>其他人</li>\n<li>之前紧挨着的动作</li>\n</ul>\n</li>\n</ul>\n"},{"title":"《习惯的力量》读后感","date":"2018-12-26T12:39:32.000Z","_content":"\n## 读后感\n\n翻过几页之后，我开始记起来这本书以前其实看过，但并没有留下什么印象，所以也没有太多收获，一来是当时的心境并没有对习惯产生足够的重视，二来也没有关注到里面真正重要的部分，没有对其进行总结和实践，把它遗忘在记忆的某个角落，想来真是遗憾至极。所谓亡羊补牢，为时不晚，现在把它补回来也未尝不可。\n\n作者在书中充分的说明了习惯的必要性和重要性，也说明了习惯存在的科学依据，让我开始用新的视角来审视自己的生活，为很多事情的发生找到了原因，比如为什么总是习惯在七点半左右去健身房，而一旦过了八点，去健身房的几率就会大大降低。又比如为什么不去健身房的晚上更容易选择玩游戏而不是看书。也为之后变成更好的自己找到了确实可行的方法论。\n\n习惯确实是一个有意思的东西，想想自己身上的习惯，大的习惯如健身、阅读、写博客，小习惯如转手腕等等，都是在不需要做过多决策的情况下自发进行的行为，日常生活中的种种选择大多数是由习惯决定的，而并非深思熟虑的结果，比如中午吃什么，晚上吃什么，周末怎么过，正是这些习惯在慢慢塑造着今天的我。\n\n以前看一些奇奇怪怪的鸡汤，说什么性格决定习惯，习惯决定成败之类的。现在看来，多少有些以偏概全，性格的养成大多取决于环境，跟小时候亲密接触的人关系最大，如父母或者老师。而习惯养成的目的是为了适应环境，更好的生活或者生存。两者虽然确实有较强联系，但并直接的因果关系，两者都是环境的产物。\n\n对于大脑而言，习惯本身没有好坏之分，都是一视同仁。一旦养成习惯，便会像刻入磁盘一样不可复原。习惯不会消失，但是却可以替代。习惯的三要素：暗示、惯常行为、奖赏。认识到这一点之后，对于习惯的敏感度便会提高，刻意发掘便能发现隐藏其中的暗示和奖赏，要想改变惯常行为，便需要找好替代品。比如玩游戏也许并不只是为了放松，也许更多的是为了社交，发觉这一点之后，多交朋友，与朋友定期的聚会也许可以帮助你戒除游戏。\n\n正如书中所言，我们并非要一次性调整好所有习惯，让生活直接进入自己的理想状态中，这样通常也是不现实的，所以只需要找到并养成关键习惯，便能牵一发而动全身，让其他习惯也跟着一起养成。比如说早起和健身，这两个习惯能让我更加自律，也能让我在白天有更多的精力去应付繁琐的工作，意志力也得到了锻炼，自律和意志力是养成习惯的两大重要要素，这能让其它习惯更轻松的养成。\n\n这本书让我受益匪浅，对自己有了更好的认知，对自己的生活又多了几分掌控感。未来的路上，会继续养成更多的好习惯，朝着自己的目标笃定前行。\n\n最后，推荐一款软件，habiticat，用游戏化的方式来进行习惯培养，还可以和朋友一起组队，比较有乐趣性，相信你一定会喜欢，有网页版，也有手机app，但不幸的是需要翻墙才能使用。（可以自建梯子，或者使用别人的机场）","source":"_posts/reading/the-power-of-habit.md","raw":"---\ntitle: 《习惯的力量》读后感\ntags: 读书笔记\ncategories: 阅读\ndate: 2018-12-26 20:39:32\n---\n\n## 读后感\n\n翻过几页之后，我开始记起来这本书以前其实看过，但并没有留下什么印象，所以也没有太多收获，一来是当时的心境并没有对习惯产生足够的重视，二来也没有关注到里面真正重要的部分，没有对其进行总结和实践，把它遗忘在记忆的某个角落，想来真是遗憾至极。所谓亡羊补牢，为时不晚，现在把它补回来也未尝不可。\n\n作者在书中充分的说明了习惯的必要性和重要性，也说明了习惯存在的科学依据，让我开始用新的视角来审视自己的生活，为很多事情的发生找到了原因，比如为什么总是习惯在七点半左右去健身房，而一旦过了八点，去健身房的几率就会大大降低。又比如为什么不去健身房的晚上更容易选择玩游戏而不是看书。也为之后变成更好的自己找到了确实可行的方法论。\n\n习惯确实是一个有意思的东西，想想自己身上的习惯，大的习惯如健身、阅读、写博客，小习惯如转手腕等等，都是在不需要做过多决策的情况下自发进行的行为，日常生活中的种种选择大多数是由习惯决定的，而并非深思熟虑的结果，比如中午吃什么，晚上吃什么，周末怎么过，正是这些习惯在慢慢塑造着今天的我。\n\n以前看一些奇奇怪怪的鸡汤，说什么性格决定习惯，习惯决定成败之类的。现在看来，多少有些以偏概全，性格的养成大多取决于环境，跟小时候亲密接触的人关系最大，如父母或者老师。而习惯养成的目的是为了适应环境，更好的生活或者生存。两者虽然确实有较强联系，但并直接的因果关系，两者都是环境的产物。\n\n对于大脑而言，习惯本身没有好坏之分，都是一视同仁。一旦养成习惯，便会像刻入磁盘一样不可复原。习惯不会消失，但是却可以替代。习惯的三要素：暗示、惯常行为、奖赏。认识到这一点之后，对于习惯的敏感度便会提高，刻意发掘便能发现隐藏其中的暗示和奖赏，要想改变惯常行为，便需要找好替代品。比如玩游戏也许并不只是为了放松，也许更多的是为了社交，发觉这一点之后，多交朋友，与朋友定期的聚会也许可以帮助你戒除游戏。\n\n正如书中所言，我们并非要一次性调整好所有习惯，让生活直接进入自己的理想状态中，这样通常也是不现实的，所以只需要找到并养成关键习惯，便能牵一发而动全身，让其他习惯也跟着一起养成。比如说早起和健身，这两个习惯能让我更加自律，也能让我在白天有更多的精力去应付繁琐的工作，意志力也得到了锻炼，自律和意志力是养成习惯的两大重要要素，这能让其它习惯更轻松的养成。\n\n这本书让我受益匪浅，对自己有了更好的认知，对自己的生活又多了几分掌控感。未来的路上，会继续养成更多的好习惯，朝着自己的目标笃定前行。\n\n最后，推荐一款软件，habiticat，用游戏化的方式来进行习惯培养，还可以和朋友一起组队，比较有乐趣性，相信你一定会喜欢，有网页版，也有手机app，但不幸的是需要翻墙才能使用。（可以自建梯子，或者使用别人的机场）","slug":"reading/the-power-of-habit","published":1,"updated":"2018-12-26T12:42:16.393Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5nf000lwu9ky8vczfeb","content":"<h2 id=\"读后感\"><a href=\"#读后感\" class=\"headerlink\" title=\"读后感\"></a>读后感</h2><p>翻过几页之后，我开始记起来这本书以前其实看过，但并没有留下什么印象，所以也没有太多收获，一来是当时的心境并没有对习惯产生足够的重视，二来也没有关注到里面真正重要的部分，没有对其进行总结和实践，把它遗忘在记忆的某个角落，想来真是遗憾至极。所谓亡羊补牢，为时不晚，现在把它补回来也未尝不可。</p>\n<p>作者在书中充分的说明了习惯的必要性和重要性，也说明了习惯存在的科学依据，让我开始用新的视角来审视自己的生活，为很多事情的发生找到了原因，比如为什么总是习惯在七点半左右去健身房，而一旦过了八点，去健身房的几率就会大大降低。又比如为什么不去健身房的晚上更容易选择玩游戏而不是看书。也为之后变成更好的自己找到了确实可行的方法论。</p>\n<p>习惯确实是一个有意思的东西，想想自己身上的习惯，大的习惯如健身、阅读、写博客，小习惯如转手腕等等，都是在不需要做过多决策的情况下自发进行的行为，日常生活中的种种选择大多数是由习惯决定的，而并非深思熟虑的结果，比如中午吃什么，晚上吃什么，周末怎么过，正是这些习惯在慢慢塑造着今天的我。</p>\n<p>以前看一些奇奇怪怪的鸡汤，说什么性格决定习惯，习惯决定成败之类的。现在看来，多少有些以偏概全，性格的养成大多取决于环境，跟小时候亲密接触的人关系最大，如父母或者老师。而习惯养成的目的是为了适应环境，更好的生活或者生存。两者虽然确实有较强联系，但并直接的因果关系，两者都是环境的产物。</p>\n<p>对于大脑而言，习惯本身没有好坏之分，都是一视同仁。一旦养成习惯，便会像刻入磁盘一样不可复原。习惯不会消失，但是却可以替代。习惯的三要素：暗示、惯常行为、奖赏。认识到这一点之后，对于习惯的敏感度便会提高，刻意发掘便能发现隐藏其中的暗示和奖赏，要想改变惯常行为，便需要找好替代品。比如玩游戏也许并不只是为了放松，也许更多的是为了社交，发觉这一点之后，多交朋友，与朋友定期的聚会也许可以帮助你戒除游戏。</p>\n<p>正如书中所言，我们并非要一次性调整好所有习惯，让生活直接进入自己的理想状态中，这样通常也是不现实的，所以只需要找到并养成关键习惯，便能牵一发而动全身，让其他习惯也跟着一起养成。比如说早起和健身，这两个习惯能让我更加自律，也能让我在白天有更多的精力去应付繁琐的工作，意志力也得到了锻炼，自律和意志力是养成习惯的两大重要要素，这能让其它习惯更轻松的养成。</p>\n<p>这本书让我受益匪浅，对自己有了更好的认知，对自己的生活又多了几分掌控感。未来的路上，会继续养成更多的好习惯，朝着自己的目标笃定前行。</p>\n<p>最后，推荐一款软件，habiticat，用游戏化的方式来进行习惯培养，还可以和朋友一起组队，比较有乐趣性，相信你一定会喜欢，有网页版，也有手机app，但不幸的是需要翻墙才能使用。（可以自建梯子，或者使用别人的机场）</p>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h2 id=\"读后感\"><a href=\"#读后感\" class=\"headerlink\" title=\"读后感\"></a>读后感</h2><p>翻过几页之后，我开始记起来这本书以前其实看过，但并没有留下什么印象，所以也没有太多收获，一来是当时的心境并没有对习惯产生足够的重视，二来也没有关注到里面真正重要的部分，没有对其进行总结和实践，把它遗忘在记忆的某个角落，想来真是遗憾至极。所谓亡羊补牢，为时不晚，现在把它补回来也未尝不可。</p>\n<p>作者在书中充分的说明了习惯的必要性和重要性，也说明了习惯存在的科学依据，让我开始用新的视角来审视自己的生活，为很多事情的发生找到了原因，比如为什么总是习惯在七点半左右去健身房，而一旦过了八点，去健身房的几率就会大大降低。又比如为什么不去健身房的晚上更容易选择玩游戏而不是看书。也为之后变成更好的自己找到了确实可行的方法论。</p>\n<p>习惯确实是一个有意思的东西，想想自己身上的习惯，大的习惯如健身、阅读、写博客，小习惯如转手腕等等，都是在不需要做过多决策的情况下自发进行的行为，日常生活中的种种选择大多数是由习惯决定的，而并非深思熟虑的结果，比如中午吃什么，晚上吃什么，周末怎么过，正是这些习惯在慢慢塑造着今天的我。</p>\n<p>以前看一些奇奇怪怪的鸡汤，说什么性格决定习惯，习惯决定成败之类的。现在看来，多少有些以偏概全，性格的养成大多取决于环境，跟小时候亲密接触的人关系最大，如父母或者老师。而习惯养成的目的是为了适应环境，更好的生活或者生存。两者虽然确实有较强联系，但并直接的因果关系，两者都是环境的产物。</p>\n<p>对于大脑而言，习惯本身没有好坏之分，都是一视同仁。一旦养成习惯，便会像刻入磁盘一样不可复原。习惯不会消失，但是却可以替代。习惯的三要素：暗示、惯常行为、奖赏。认识到这一点之后，对于习惯的敏感度便会提高，刻意发掘便能发现隐藏其中的暗示和奖赏，要想改变惯常行为，便需要找好替代品。比如玩游戏也许并不只是为了放松，也许更多的是为了社交，发觉这一点之后，多交朋友，与朋友定期的聚会也许可以帮助你戒除游戏。</p>\n<p>正如书中所言，我们并非要一次性调整好所有习惯，让生活直接进入自己的理想状态中，这样通常也是不现实的，所以只需要找到并养成关键习惯，便能牵一发而动全身，让其他习惯也跟着一起养成。比如说早起和健身，这两个习惯能让我更加自律，也能让我在白天有更多的精力去应付繁琐的工作，意志力也得到了锻炼，自律和意志力是养成习惯的两大重要要素，这能让其它习惯更轻松的养成。</p>\n<p>这本书让我受益匪浅，对自己有了更好的认知，对自己的生活又多了几分掌控感。未来的路上，会继续养成更多的好习惯，朝着自己的目标笃定前行。</p>\n<p>最后，推荐一款软件，habiticat，用游戏化的方式来进行习惯培养，还可以和朋友一起组队，比较有乐趣性，相信你一定会喜欢，有网页版，也有手机app，但不幸的是需要翻墙才能使用。（可以自建梯子，或者使用别人的机场）</p>\n"},{"_content":"","source":"_posts/java/basic/java-data-type.md","raw":"","slug":"java/basic/java-data-type","published":1,"date":"2018-12-27T07:50:09.426Z","updated":"2018-12-27T07:50:09.426Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5ng000mwu9kek4l6jwy","content":"","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":""},{"_content":"","source":"_posts/java/basic/java-operator.md","raw":"","slug":"java/basic/java-operator","published":1,"date":"2018-12-27T07:50:09.449Z","updated":"2018-12-27T07:50:09.449Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5nj000pwu9k90orbxbj","content":"","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":""},{"prev":false,"next":false,"_content":"\n# 领域驱动设计大纲\n\n领域驱动设计（Domain-Driven-Design）是一种十分优秀的系统设计思想，本系列将从理论和实战两个方面来对DDD进行介绍，以下是大纲。\n\n1. 什么是领域驱动设计\n2. 面向数据库编程与事务脚本\n3. 应用领域驱动设计有什么好处\n4. 领域驱动设计中的基本概念\n   1. 实体\n   2. 聚合根\n   3. 值对象\n   4. 仓储\n   5. 领域服务\n   6. 领域事件\n   7. 工厂\n5. 领域驱动设计如何落地\n6. MVC与DDD\n7. 六边形架构\n8. 领域驱动设计有什么缺点\n9. \n\n","source":"_posts/architecture/domain-driven-design/ddd-outline.md","raw":"---\nprev: false\nnext: false\n\n\n---\n\n# 领域驱动设计大纲\n\n领域驱动设计（Domain-Driven-Design）是一种十分优秀的系统设计思想，本系列将从理论和实战两个方面来对DDD进行介绍，以下是大纲。\n\n1. 什么是领域驱动设计\n2. 面向数据库编程与事务脚本\n3. 应用领域驱动设计有什么好处\n4. 领域驱动设计中的基本概念\n   1. 实体\n   2. 聚合根\n   3. 值对象\n   4. 仓储\n   5. 领域服务\n   6. 领域事件\n   7. 工厂\n5. 领域驱动设计如何落地\n6. MVC与DDD\n7. 六边形架构\n8. 领域驱动设计有什么缺点\n9. \n\n","slug":"architecture/domain-driven-design/ddd-outline","published":1,"date":"2018-11-21T02:32:50.647Z","updated":"2018-11-22T03:54:41.863Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5p60019wu9klv65i2jq","content":"<h1 id=\"领域驱动设计大纲\"><a href=\"#领域驱动设计大纲\" class=\"headerlink\" title=\"领域驱动设计大纲\"></a>领域驱动设计大纲</h1><p>领域驱动设计（Domain-Driven-Design）是一种十分优秀的系统设计思想，本系列将从理论和实战两个方面来对DDD进行介绍，以下是大纲。</p>\n<ol>\n<li>什么是领域驱动设计</li>\n<li>面向数据库编程与事务脚本</li>\n<li>应用领域驱动设计有什么好处</li>\n<li>领域驱动设计中的基本概念<ol>\n<li>实体</li>\n<li>聚合根</li>\n<li>值对象</li>\n<li>仓储</li>\n<li>领域服务</li>\n<li>领域事件</li>\n<li>工厂</li>\n</ol>\n</li>\n<li>领域驱动设计如何落地</li>\n<li>MVC与DDD</li>\n<li>六边形架构</li>\n<li>领域驱动设计有什么缺点</li>\n<li></li>\n</ol>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"领域驱动设计大纲\"><a href=\"#领域驱动设计大纲\" class=\"headerlink\" title=\"领域驱动设计大纲\"></a>领域驱动设计大纲</h1><p>领域驱动设计（Domain-Driven-Design）是一种十分优秀的系统设计思想，本系列将从理论和实战两个方面来对DDD进行介绍，以下是大纲。</p>\n<ol>\n<li>什么是领域驱动设计</li>\n<li>面向数据库编程与事务脚本</li>\n<li>应用领域驱动设计有什么好处</li>\n<li>领域驱动设计中的基本概念<ol>\n<li>实体</li>\n<li>聚合根</li>\n<li>值对象</li>\n<li>仓储</li>\n<li>领域服务</li>\n<li>领域事件</li>\n<li>工厂</li>\n</ol>\n</li>\n<li>领域驱动设计如何落地</li>\n<li>MVC与DDD</li>\n<li>六边形架构</li>\n<li>领域驱动设计有什么缺点</li>\n<li></li>\n</ol>\n"},{"prev":false,"next":false,"_content":"\n# 初识领域驱动\n\n## 背景说明\n\n之前一直有研究领域驱动设计，但都仅限于理论方面，对于如何应用没有很清晰的想法。\n\n本篇将记录在这个过程中查阅DDD相关资料后总结出的心得体会，并记录在实施过程中遇到的问题，最后还会配以一个Web应用的小栗子来加深大家对DDD的理解。\n\n## 关于领域驱动\n\n领域驱动设计（DDD）是一种优秀的系统设计思想，它引入了一种全新的视角来审视软件开发，为复杂多变的系统开发提供了一个可落地的解决方案。\n\n传统的设计方案往往是“面向数据库编程”，使用贫血模型，将对象抽空，实现逻辑全部放在service中，导致service中的逻辑会变得很重，面对需求变更或者调整时的灵活性大打折扣。\n\n领域驱动设计则强调从领域和模型出发，先为整体业务建模，抽象出核心的逻辑，然后再去如何存储和展示。就像作文一样，先写下要表达的中心主题，然后再去围绕主题展开铺垫和设计。\n\n如果你从未接触过相关内容，相信本篇内容能够给你启发，让你获得一个全新的视角，如果能在工作中掌握和应用这种设计方式，那么加班也许就会离你而去了。（手动滑稽）\n\n好了，话不多说，上车吧。\n\n## 参考列表\n\n1、《领域驱动设计》Eric Evans\n\n2、《实现领域驱动设计》 Vaughn Vernon\n\n3、[DDD理论学习系列——案例及目录](https://www.jianshu.com/p/6e2917551e63)\n\n","source":"_posts/architecture/domain-driven-design/ddd-recommendation.md","raw":"---\nprev: false\nnext: false\n\n\n\n\n---\n\n# 初识领域驱动\n\n## 背景说明\n\n之前一直有研究领域驱动设计，但都仅限于理论方面，对于如何应用没有很清晰的想法。\n\n本篇将记录在这个过程中查阅DDD相关资料后总结出的心得体会，并记录在实施过程中遇到的问题，最后还会配以一个Web应用的小栗子来加深大家对DDD的理解。\n\n## 关于领域驱动\n\n领域驱动设计（DDD）是一种优秀的系统设计思想，它引入了一种全新的视角来审视软件开发，为复杂多变的系统开发提供了一个可落地的解决方案。\n\n传统的设计方案往往是“面向数据库编程”，使用贫血模型，将对象抽空，实现逻辑全部放在service中，导致service中的逻辑会变得很重，面对需求变更或者调整时的灵活性大打折扣。\n\n领域驱动设计则强调从领域和模型出发，先为整体业务建模，抽象出核心的逻辑，然后再去如何存储和展示。就像作文一样，先写下要表达的中心主题，然后再去围绕主题展开铺垫和设计。\n\n如果你从未接触过相关内容，相信本篇内容能够给你启发，让你获得一个全新的视角，如果能在工作中掌握和应用这种设计方式，那么加班也许就会离你而去了。（手动滑稽）\n\n好了，话不多说，上车吧。\n\n## 参考列表\n\n1、《领域驱动设计》Eric Evans\n\n2、《实现领域驱动设计》 Vaughn Vernon\n\n3、[DDD理论学习系列——案例及目录](https://www.jianshu.com/p/6e2917551e63)\n\n","slug":"architecture/domain-driven-design/ddd-recommendation","published":1,"date":"2018-11-11T07:44:58.726Z","updated":"2018-11-21T02:33:49.027Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5p8001awu9kkqa2gf8c","content":"<h1 id=\"初识领域驱动\"><a href=\"#初识领域驱动\" class=\"headerlink\" title=\"初识领域驱动\"></a>初识领域驱动</h1><h2 id=\"背景说明\"><a href=\"#背景说明\" class=\"headerlink\" title=\"背景说明\"></a>背景说明</h2><p>之前一直有研究领域驱动设计，但都仅限于理论方面，对于如何应用没有很清晰的想法。</p>\n<p>本篇将记录在这个过程中查阅DDD相关资料后总结出的心得体会，并记录在实施过程中遇到的问题，最后还会配以一个Web应用的小栗子来加深大家对DDD的理解。</p>\n<h2 id=\"关于领域驱动\"><a href=\"#关于领域驱动\" class=\"headerlink\" title=\"关于领域驱动\"></a>关于领域驱动</h2><p>领域驱动设计（DDD）是一种优秀的系统设计思想，它引入了一种全新的视角来审视软件开发，为复杂多变的系统开发提供了一个可落地的解决方案。</p>\n<p>传统的设计方案往往是“面向数据库编程”，使用贫血模型，将对象抽空，实现逻辑全部放在service中，导致service中的逻辑会变得很重，面对需求变更或者调整时的灵活性大打折扣。</p>\n<p>领域驱动设计则强调从领域和模型出发，先为整体业务建模，抽象出核心的逻辑，然后再去如何存储和展示。就像作文一样，先写下要表达的中心主题，然后再去围绕主题展开铺垫和设计。</p>\n<p>如果你从未接触过相关内容，相信本篇内容能够给你启发，让你获得一个全新的视角，如果能在工作中掌握和应用这种设计方式，那么加班也许就会离你而去了。（手动滑稽）</p>\n<p>好了，话不多说，上车吧。</p>\n<h2 id=\"参考列表\"><a href=\"#参考列表\" class=\"headerlink\" title=\"参考列表\"></a>参考列表</h2><p>1、《领域驱动设计》Eric Evans</p>\n<p>2、《实现领域驱动设计》 Vaughn Vernon</p>\n<p>3、<a href=\"https://www.jianshu.com/p/6e2917551e63\" target=\"_blank\" rel=\"noopener\">DDD理论学习系列——案例及目录</a></p>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"初识领域驱动\"><a href=\"#初识领域驱动\" class=\"headerlink\" title=\"初识领域驱动\"></a>初识领域驱动</h1><h2 id=\"背景说明\"><a href=\"#背景说明\" class=\"headerlink\" title=\"背景说明\"></a>背景说明</h2><p>之前一直有研究领域驱动设计，但都仅限于理论方面，对于如何应用没有很清晰的想法。</p>\n<p>本篇将记录在这个过程中查阅DDD相关资料后总结出的心得体会，并记录在实施过程中遇到的问题，最后还会配以一个Web应用的小栗子来加深大家对DDD的理解。</p>\n<h2 id=\"关于领域驱动\"><a href=\"#关于领域驱动\" class=\"headerlink\" title=\"关于领域驱动\"></a>关于领域驱动</h2><p>领域驱动设计（DDD）是一种优秀的系统设计思想，它引入了一种全新的视角来审视软件开发，为复杂多变的系统开发提供了一个可落地的解决方案。</p>\n<p>传统的设计方案往往是“面向数据库编程”，使用贫血模型，将对象抽空，实现逻辑全部放在service中，导致service中的逻辑会变得很重，面对需求变更或者调整时的灵活性大打折扣。</p>\n<p>领域驱动设计则强调从领域和模型出发，先为整体业务建模，抽象出核心的逻辑，然后再去如何存储和展示。就像作文一样，先写下要表达的中心主题，然后再去围绕主题展开铺垫和设计。</p>\n<p>如果你从未接触过相关内容，相信本篇内容能够给你启发，让你获得一个全新的视角，如果能在工作中掌握和应用这种设计方式，那么加班也许就会离你而去了。（手动滑稽）</p>\n<p>好了，话不多说，上车吧。</p>\n<h2 id=\"参考列表\"><a href=\"#参考列表\" class=\"headerlink\" title=\"参考列表\"></a>参考列表</h2><p>1、《领域驱动设计》Eric Evans</p>\n<p>2、《实现领域驱动设计》 Vaughn Vernon</p>\n<p>3、<a href=\"https://www.jianshu.com/p/6e2917551e63\" target=\"_blank\" rel=\"noopener\">DDD理论学习系列——案例及目录</a></p>\n"},{"prev":false,"next":false,"_content":"\n# 领域驱动设计实施步骤\n\n## 一、画业务流程图\n\n## 二、从业务流程图中抽象出核心业务流程\n\n","source":"_posts/architecture/domain-driven-design/ddd-steps.md","raw":"---\nprev: false\nnext: false\n\n\n\n\n\n---\n\n# 领域驱动设计实施步骤\n\n## 一、画业务流程图\n\n## 二、从业务流程图中抽象出核心业务流程\n\n","slug":"architecture/domain-driven-design/ddd-steps","published":1,"date":"2018-11-13T06:18:28.204Z","updated":"2018-11-13T06:23:41.088Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5pc001bwu9kia3jz30j","content":"<h1 id=\"领域驱动设计实施步骤\"><a href=\"#领域驱动设计实施步骤\" class=\"headerlink\" title=\"领域驱动设计实施步骤\"></a>领域驱动设计实施步骤</h1><h2 id=\"一、画业务流程图\"><a href=\"#一、画业务流程图\" class=\"headerlink\" title=\"一、画业务流程图\"></a>一、画业务流程图</h2><h2 id=\"二、从业务流程图中抽象出核心业务流程\"><a href=\"#二、从业务流程图中抽象出核心业务流程\" class=\"headerlink\" title=\"二、从业务流程图中抽象出核心业务流程\"></a>二、从业务流程图中抽象出核心业务流程</h2>","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"领域驱动设计实施步骤\"><a href=\"#领域驱动设计实施步骤\" class=\"headerlink\" title=\"领域驱动设计实施步骤\"></a>领域驱动设计实施步骤</h1><h2 id=\"一、画业务流程图\"><a href=\"#一、画业务流程图\" class=\"headerlink\" title=\"一、画业务流程图\"></a>一、画业务流程图</h2><h2 id=\"二、从业务流程图中抽象出核心业务流程\"><a href=\"#二、从业务流程图中抽象出核心业务流程\" class=\"headerlink\" title=\"二、从业务流程图中抽象出核心业务流程\"></a>二、从业务流程图中抽象出核心业务流程</h2>"},{"title":"Java 开发基础篇 - 启航","date":"2018-12-28T16:01:00.000Z","_content":"\n> 无论最终的结果是什么，只要这是自己选择的道路。 -- 《龙与虎》\n\n## 前言\n\nJava 开发入门篇十分简单，相信聪明的你已经完成了新手村的任务，顺利打败了小Boss，开启这一新的篇章。​\n\n本篇主要内容是介绍Java开发中的基础概念和基本知识，包括Java程序的基本组成，Java中的类与对象，数据类型，变量与常量，运算符，控制流程，接口，封装、继承与多态等等。这些基本要素是组成Java程序必不可少的部分，要想对Java有一个全面的认识，那么就必须认真掌握好这些基本知识。\n\n就像学习高深莫测的武林秘籍之前必须要先学会一些基本的武功招式那样，本篇的重要性不言而喻。为了不让这个过程太过枯燥，本篇将继续完善上一篇中的计算器，以它为基础进行分析，并随着学习的深入，让它的功能变得越来越强大。当然，除了这个计算器之外，还会有很多小栗子伴随其中，以加深大家对这个部分的理解。\n\n之后的每一篇开头，都会引用一句励志的英文来作为鼓励，希望它能给你一些精神力量上的鼓舞。\n\n那么，年轻的勇士，继续你的征程吧！\n","source":"_posts/java/basic/java-basic.md","raw":"---\ntitle: Java 开发基础篇 - 启航\ntags: \n - Java基础\n - Java\ncategories: 编程\ndate: 2018-12-29 00:01:00\n---\n\n> 无论最终的结果是什么，只要这是自己选择的道路。 -- 《龙与虎》\n\n## 前言\n\nJava 开发入门篇十分简单，相信聪明的你已经完成了新手村的任务，顺利打败了小Boss，开启这一新的篇章。​\n\n本篇主要内容是介绍Java开发中的基础概念和基本知识，包括Java程序的基本组成，Java中的类与对象，数据类型，变量与常量，运算符，控制流程，接口，封装、继承与多态等等。这些基本要素是组成Java程序必不可少的部分，要想对Java有一个全面的认识，那么就必须认真掌握好这些基本知识。\n\n就像学习高深莫测的武林秘籍之前必须要先学会一些基本的武功招式那样，本篇的重要性不言而喻。为了不让这个过程太过枯燥，本篇将继续完善上一篇中的计算器，以它为基础进行分析，并随着学习的深入，让它的功能变得越来越强大。当然，除了这个计算器之外，还会有很多小栗子伴随其中，以加深大家对这个部分的理解。\n\n之后的每一篇开头，都会引用一句励志的英文来作为鼓励，希望它能给你一些精神力量上的鼓舞。\n\n那么，年轻的勇士，继续你的征程吧！\n","slug":"java/basic/java-basic","published":1,"updated":"2018-12-28T10:19:49.344Z","_id":"cjq7rm5pi001cwu9kql8olmid","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>&#x65E0;&#x8BBA;&#x6700;&#x7EC8;&#x7684;&#x7ED3;&#x679C;&#x662F;&#x4EC0;&#x4E48;&#xFF0C;&#x53EA;&#x8981;&#x8FD9;&#x662F;&#x81EA;&#x5DF1;&#x9009;&#x62E9;&#x7684;&#x9053;&#x8DEF;&#x3002; &#x2013; &#x300A;&#x9F99;&#x4E0E;&#x864E;&#x300B;</p>\n</blockquote>\n<h2 id=\"&#x524D;&#x8A00;\"><a href=\"#&#x524D;&#x8A00;\" class=\"headerlink\" title=\"&#x524D;&#x8A00;\"></a>&#x524D;&#x8A00;</h2><p>Java &#x5F00;&#x53D1;&#x5165;&#x95E8;&#x7BC7;&#x5341;&#x5206;&#x7B80;&#x5355;&#xFF0C;&#x76F8;&#x4FE1;&#x806A;&#x660E;&#x7684;&#x4F60;&#x5DF2;&#x7ECF;&#x5B8C;&#x6210;&#x4E86;&#x65B0;&#x624B;&#x6751;&#x7684;&#x4EFB;&#x52A1;&#xFF0C;&#x987A;&#x5229;&#x6253;&#x8D25;&#x4E86;&#x5C0F;Boss&#xFF0C;&#x5F00;&#x542F;&#x8FD9;&#x4E00;&#x65B0;&#x7684;&#x7BC7;&#x7AE0;&#x3002;&#x200B;</p>\n<p>&#x672C;&#x7BC7;&#x4E3B;&#x8981;&#x5185;&#x5BB9;&#x662F;&#x4ECB;&#x7ECD;Java&#x5F00;&#x53D1;&#x4E2D;&#x7684;&#x57FA;&#x7840;&#x6982;&#x5FF5;&#x548C;&#x57FA;&#x672C;&#x77E5;&#x8BC6;&#xFF0C;&#x5305;&#x62EC;Java&#x7A0B;&#x5E8F;&#x7684;&#x57FA;&#x672C;&#x7EC4;&#x6210;&#xFF0C;Java&#x4E2D;&#x7684;&#x7C7B;&#x4E0E;&#x5BF9;&#x8C61;&#xFF0C;&#x6570;&#x636E;&#x7C7B;&#x578B;&#xFF0C;&#x53D8;&#x91CF;&#x4E0E;&#x5E38;&#x91CF;&#xFF0C;&#x8FD0;&#x7B97;&#x7B26;&#xFF0C;&#x63A7;&#x5236;&#x6D41;&#x7A0B;&#xFF0C;&#x63A5;&#x53E3;&#xFF0C;&#x5C01;&#x88C5;&#x3001;&#x7EE7;&#x627F;&#x4E0E;&#x591A;&#x6001;&#x7B49;&#x7B49;&#x3002;&#x8FD9;&#x4E9B;&#x57FA;&#x672C;&#x8981;&#x7D20;&#x662F;&#x7EC4;&#x6210;Java&#x7A0B;&#x5E8F;&#x5FC5;&#x4E0D;&#x53EF;&#x5C11;&#x7684;&#x90E8;&#x5206;&#xFF0C;&#x8981;&#x60F3;&#x5BF9;Java&#x6709;&#x4E00;&#x4E2A;&#x5168;&#x9762;&#x7684;&#x8BA4;&#x8BC6;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x5FC5;&#x987B;&#x8BA4;&#x771F;&#x638C;&#x63E1;&#x597D;&#x8FD9;&#x4E9B;&#x57FA;&#x672C;&#x77E5;&#x8BC6;&#x3002;</p>\n<p>&#x5C31;&#x50CF;&#x5B66;&#x4E60;&#x9AD8;&#x6DF1;&#x83AB;&#x6D4B;&#x7684;&#x6B66;&#x6797;&#x79D8;&#x7C4D;&#x4E4B;&#x524D;&#x5FC5;&#x987B;&#x8981;&#x5148;&#x5B66;&#x4F1A;&#x4E00;&#x4E9B;&#x57FA;&#x672C;&#x7684;&#x6B66;&#x529F;&#x62DB;&#x5F0F;&#x90A3;&#x6837;&#xFF0C;&#x672C;&#x7BC7;&#x7684;&#x91CD;&#x8981;&#x6027;&#x4E0D;&#x8A00;&#x800C;&#x55BB;&#x3002;&#x4E3A;&#x4E86;&#x4E0D;&#x8BA9;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x592A;&#x8FC7;&#x67AF;&#x71E5;&#xFF0C;&#x672C;&#x7BC7;&#x5C06;&#x7EE7;&#x7EED;&#x5B8C;&#x5584;&#x4E0A;&#x4E00;&#x7BC7;&#x4E2D;&#x7684;&#x8BA1;&#x7B97;&#x5668;&#xFF0C;&#x4EE5;&#x5B83;&#x4E3A;&#x57FA;&#x7840;&#x8FDB;&#x884C;&#x5206;&#x6790;&#xFF0C;&#x5E76;&#x968F;&#x7740;&#x5B66;&#x4E60;&#x7684;&#x6DF1;&#x5165;&#xFF0C;&#x8BA9;&#x5B83;&#x7684;&#x529F;&#x80FD;&#x53D8;&#x5F97;&#x8D8A;&#x6765;&#x8D8A;&#x5F3A;&#x5927;&#x3002;&#x5F53;&#x7136;&#xFF0C;&#x9664;&#x4E86;&#x8FD9;&#x4E2A;&#x8BA1;&#x7B97;&#x5668;&#x4E4B;&#x5916;&#xFF0C;&#x8FD8;&#x4F1A;&#x6709;&#x5F88;&#x591A;&#x5C0F;&#x6817;&#x5B50;&#x4F34;&#x968F;&#x5176;&#x4E2D;&#xFF0C;&#x4EE5;&#x52A0;&#x6DF1;&#x5927;&#x5BB6;&#x5BF9;&#x8FD9;&#x4E2A;&#x90E8;&#x5206;&#x7684;&#x7406;&#x89E3;&#x3002;</p>\n<p>&#x4E4B;&#x540E;&#x7684;&#x6BCF;&#x4E00;&#x7BC7;&#x5F00;&#x5934;&#xFF0C;&#x90FD;&#x4F1A;&#x5F15;&#x7528;&#x4E00;&#x53E5;&#x52B1;&#x5FD7;&#x7684;&#x82F1;&#x6587;&#x6765;&#x4F5C;&#x4E3A;&#x9F13;&#x52B1;&#xFF0C;&#x5E0C;&#x671B;&#x5B83;&#x80FD;&#x7ED9;&#x4F60;&#x4E00;&#x4E9B;&#x7CBE;&#x795E;&#x529B;&#x91CF;&#x4E0A;&#x7684;&#x9F13;&#x821E;&#x3002;</p>\n<p>&#x90A3;&#x4E48;&#xFF0C;&#x5E74;&#x8F7B;&#x7684;&#x52C7;&#x58EB;&#xFF0C;&#x7EE7;&#x7EED;&#x4F60;&#x7684;&#x5F81;&#x7A0B;&#x5427;&#xFF01;</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<blockquote>\n<p>无论最终的结果是什么，只要这是自己选择的道路。 – 《龙与虎》</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Java 开发入门篇十分简单，相信聪明的你已经完成了新手村的任务，顺利打败了小Boss，开启这一新的篇章。​</p>\n<p>本篇主要内容是介绍Java开发中的基础概念和基本知识，包括Java程序的基本组成，Java中的类与对象，数据类型，变量与常量，运算符，控制流程，接口，封装、继承与多态等等。这些基本要素是组成Java程序必不可少的部分，要想对Java有一个全面的认识，那么就必须认真掌握好这些基本知识。</p>\n<p>就像学习高深莫测的武林秘籍之前必须要先学会一些基本的武功招式那样，本篇的重要性不言而喻。为了不让这个过程太过枯燥，本篇将继续完善上一篇中的计算器，以它为基础进行分析，并随着学习的深入，让它的功能变得越来越强大。当然，除了这个计算器之外，还会有很多小栗子伴随其中，以加深大家对这个部分的理解。</p>\n<p>之后的每一篇开头，都会引用一句励志的英文来作为鼓励，希望它能给你一些精神力量上的鼓舞。</p>\n<p>那么，年轻的勇士，继续你的征程吧！</p>\n"},{"title":"Java 类与对象","date":"2018-12-28T16:05:00.000Z","_content":"\n# Java 类与对象\n\n>**“Sometimes we stare so long at a door that is closing that we see too late the one that is open.”**\n>\n>— Alexander Graham Bell, Inventor\n>\n>**「我们有时候专注于消失中的机会太久，以致于太晚发现开启的机会。」**– 亚历山大‧贝尔 (发明家)\n\n## 关卡说明\n\n关卡描述：Java是一门面向对象的语言，类和对象是Java中最重要的概念，本关将介绍这两个重要的概念，并通过一个简单的栗子来进行说明，你能否通过本关的考验呢？\n\n过关条件：理解面向对象编程的特点，理解Java中类和对象的关系，以及如何使用它们\n\n关卡难度：⭐️⭐️\n\n## 面向对象程序设计\n\n面向对象编程（OOP）是当今主流的程序设计规范，Java是完全面向对象的，所以必须熟悉OOP才能编写出优秀的Java代码。\n\n面向对象编程，顾名思义，重点就在于这个对象，没有对象怎么编程（手动滑稽）。咳咳，言归正传，面向对象的程序是由许许多多的对象组成，每个对象具有一定的属性和行为，通过对象之间的交互来实现软件的功能。从根本上来说，只要这个对象能满足功能要求，就不必关心它的具体实现过程。换句话说，不管是黑猫白猫，能抓耗子的猫就是好猫。\n\n在传统的程序设计过程中，通常需要先设计一系列的算法来求解问题，然后再考虑存储数据的方式。这就是所谓的：\n\n> 算法 + 数据结构 = 程序\n\n在面向过程的设计中，算法是放在第一位的，数据结构是为了适应算法而存在的。\n\n而OOP中，这个顺序刚好相反，数据结构放在第一位，然后再考虑操作数据的算法。\n\n一些简单的问题，使用面向过程的开发方式是比较容易的。面向对象的编程适合于解决规模较大的问题。比如实现一个网站也许需要1000个过程，这些过程可能会对一组全局的数据进行操作。如果采用面向对象的方式来设计，可能只需要大约100个类，每个类10个方法，而且大多数情况下，面向过程开发的代码中有很多设计是可以使用面向对象的方式简化和复用的。所以后者显然更容易掌握和维护，如果万一某个数据出了问题，在10个方法中排查总比在1000个过程中排查要容易得多。\n\n## Java中的类和对象\n\n既然面向对象编程这么优秀，那么我们就来好好认识一下这其中的主人公——类和对象。\n\n“类”表示的是具有相同属性的一系列事物，比如说，“人类”，描述的就是有“人”这个共同属性和行为的群体，“汽车”描述的是有四个轮子，可以驾驶，可以载人的小型车辆，不管你是黑色的奔驰还是银色的宝马，都可以叫做汽车。\n\n那么什么是对象呢？对象就是类的某个具体实例，就好比你和我都是“人类”的一个具体是实例，所以我们都是“人类”的一个对象。你家的那辆汽车（不管是奔驰还是大众），也是“汽车”的一个对象。\n\n> 类是抽象的概念，而对象则是具体的概念。\n\n类可以看作是对象的模版，一个类可以生成无数个对象。\n\n## 类的定义\n\n先来看一个小栗子，我们来定义一个人类：\n\n```java\npublic class Person{\n    private String name;\n    private int age;\n    \n    public Person(String name, int age){\n        this.name = name;\n        this.age = age;\n    }\n    \n    public void eat(){\n        System.out.println(\"开始吃饭...\");\n    }\n    \n    public void say(){\n        System.out.println(\"我叫\" + name + \"，我今年\" + age + \"岁\");\n    }\n}\n```\n\n这里我们定义了一个类，类的名字叫做`Person`，它有两个属性，一个是`name`，一个是`age`。并且有三个方法，一个是构造函数，两个是Person的行为，吃饭和说话。\n\n可以看到，定义类的时候，我们是这样的：\n\n```java\npublic class Person{\n\t...\n}\n```\n\n定义类的格式为：\n\n> [访问权限修饰符] + class + [类名] \n\n其中访问权限修饰符用来表示类是否可以被外部类访问，`public`是最宽松的访问权限，表示这个类可以被外部的类访问和使用。\n\n`class`是用来声明一个类的关键字。\n\n关于类名，跟变量名一样，必须以字母开头，可以由字母、数字和下划线和$组成，但跟变量命名不同的是，Java中的类名规范通常使用大驼峰命名法，即每个单词的首字母都大写。比如：SmallCar、SecondhandBook。\n\n## 类的组成\n\n一个类主要由实例域和方法域组成，实例域由成员变量组成，上面的栗子中，Person类的实例域为：\n\n```java\nprivate String name;\nprivate int age;\n```\n\n这是Person类的两个成员变量，也叫Person类的属性，一个人有名字和年龄。\n\n接下来是方法域，顾名思义便是由各种方法组成的。方法的定义规则为：\n\n> [访问修饰符] + [方法返回值类型] + [方法名]\n\n```java\npublic void eat(){\n    System.out.println(\"开始吃饭...\");\n}\n\npublic void say(){\n    System.out.println(\"我叫\" + name + \"，我今年\" + age + \"岁\");\n}\n```\n\n这里，`void`代表方法无返回值。方法的命名跟变量的命名规则一样，也使用小驼峰命名法。需要注意的一点是，无论是类名、方法名还是变量名，都需要具有一定的意义，也就是要能够传达出它代表的含义，做到见名知义。像`a1`、`a2`这样的命名就尽量不要出现。\n\n也许你会好奇，上面不是还有一个方法吗？为什看起来有点奇怪呢？为什么它不使用小驼峰，为什么它跟类名是一样的？\n\n```java\npublic Person(String name, int age){\n    this.name = name;\n    this.age = age;\n}\n```\n\n这是一个好问题，它叫做**构造函数**，是创建变量时使用的一个特殊的方法，与类名同名。关于它的具体介绍会在之后的篇章里做说明，这里就不详细介绍了。\n\n## 对象\n\n\n\n","source":"_posts/java/basic/java-class.md","raw":"---\ntitle: Java 类与对象\ntags: \n - Java基础\n - Java\ncategories: 编程\ndate: 2018-12-29 00:05:00\n---\n\n# Java 类与对象\n\n>**“Sometimes we stare so long at a door that is closing that we see too late the one that is open.”**\n>\n>— Alexander Graham Bell, Inventor\n>\n>**「我们有时候专注于消失中的机会太久，以致于太晚发现开启的机会。」**– 亚历山大‧贝尔 (发明家)\n\n## 关卡说明\n\n关卡描述：Java是一门面向对象的语言，类和对象是Java中最重要的概念，本关将介绍这两个重要的概念，并通过一个简单的栗子来进行说明，你能否通过本关的考验呢？\n\n过关条件：理解面向对象编程的特点，理解Java中类和对象的关系，以及如何使用它们\n\n关卡难度：⭐️⭐️\n\n## 面向对象程序设计\n\n面向对象编程（OOP）是当今主流的程序设计规范，Java是完全面向对象的，所以必须熟悉OOP才能编写出优秀的Java代码。\n\n面向对象编程，顾名思义，重点就在于这个对象，没有对象怎么编程（手动滑稽）。咳咳，言归正传，面向对象的程序是由许许多多的对象组成，每个对象具有一定的属性和行为，通过对象之间的交互来实现软件的功能。从根本上来说，只要这个对象能满足功能要求，就不必关心它的具体实现过程。换句话说，不管是黑猫白猫，能抓耗子的猫就是好猫。\n\n在传统的程序设计过程中，通常需要先设计一系列的算法来求解问题，然后再考虑存储数据的方式。这就是所谓的：\n\n> 算法 + 数据结构 = 程序\n\n在面向过程的设计中，算法是放在第一位的，数据结构是为了适应算法而存在的。\n\n而OOP中，这个顺序刚好相反，数据结构放在第一位，然后再考虑操作数据的算法。\n\n一些简单的问题，使用面向过程的开发方式是比较容易的。面向对象的编程适合于解决规模较大的问题。比如实现一个网站也许需要1000个过程，这些过程可能会对一组全局的数据进行操作。如果采用面向对象的方式来设计，可能只需要大约100个类，每个类10个方法，而且大多数情况下，面向过程开发的代码中有很多设计是可以使用面向对象的方式简化和复用的。所以后者显然更容易掌握和维护，如果万一某个数据出了问题，在10个方法中排查总比在1000个过程中排查要容易得多。\n\n## Java中的类和对象\n\n既然面向对象编程这么优秀，那么我们就来好好认识一下这其中的主人公——类和对象。\n\n“类”表示的是具有相同属性的一系列事物，比如说，“人类”，描述的就是有“人”这个共同属性和行为的群体，“汽车”描述的是有四个轮子，可以驾驶，可以载人的小型车辆，不管你是黑色的奔驰还是银色的宝马，都可以叫做汽车。\n\n那么什么是对象呢？对象就是类的某个具体实例，就好比你和我都是“人类”的一个具体是实例，所以我们都是“人类”的一个对象。你家的那辆汽车（不管是奔驰还是大众），也是“汽车”的一个对象。\n\n> 类是抽象的概念，而对象则是具体的概念。\n\n类可以看作是对象的模版，一个类可以生成无数个对象。\n\n## 类的定义\n\n先来看一个小栗子，我们来定义一个人类：\n\n```java\npublic class Person{\n    private String name;\n    private int age;\n    \n    public Person(String name, int age){\n        this.name = name;\n        this.age = age;\n    }\n    \n    public void eat(){\n        System.out.println(\"开始吃饭...\");\n    }\n    \n    public void say(){\n        System.out.println(\"我叫\" + name + \"，我今年\" + age + \"岁\");\n    }\n}\n```\n\n这里我们定义了一个类，类的名字叫做`Person`，它有两个属性，一个是`name`，一个是`age`。并且有三个方法，一个是构造函数，两个是Person的行为，吃饭和说话。\n\n可以看到，定义类的时候，我们是这样的：\n\n```java\npublic class Person{\n\t...\n}\n```\n\n定义类的格式为：\n\n> [访问权限修饰符] + class + [类名] \n\n其中访问权限修饰符用来表示类是否可以被外部类访问，`public`是最宽松的访问权限，表示这个类可以被外部的类访问和使用。\n\n`class`是用来声明一个类的关键字。\n\n关于类名，跟变量名一样，必须以字母开头，可以由字母、数字和下划线和$组成，但跟变量命名不同的是，Java中的类名规范通常使用大驼峰命名法，即每个单词的首字母都大写。比如：SmallCar、SecondhandBook。\n\n## 类的组成\n\n一个类主要由实例域和方法域组成，实例域由成员变量组成，上面的栗子中，Person类的实例域为：\n\n```java\nprivate String name;\nprivate int age;\n```\n\n这是Person类的两个成员变量，也叫Person类的属性，一个人有名字和年龄。\n\n接下来是方法域，顾名思义便是由各种方法组成的。方法的定义规则为：\n\n> [访问修饰符] + [方法返回值类型] + [方法名]\n\n```java\npublic void eat(){\n    System.out.println(\"开始吃饭...\");\n}\n\npublic void say(){\n    System.out.println(\"我叫\" + name + \"，我今年\" + age + \"岁\");\n}\n```\n\n这里，`void`代表方法无返回值。方法的命名跟变量的命名规则一样，也使用小驼峰命名法。需要注意的一点是，无论是类名、方法名还是变量名，都需要具有一定的意义，也就是要能够传达出它代表的含义，做到见名知义。像`a1`、`a2`这样的命名就尽量不要出现。\n\n也许你会好奇，上面不是还有一个方法吗？为什看起来有点奇怪呢？为什么它不使用小驼峰，为什么它跟类名是一样的？\n\n```java\npublic Person(String name, int age){\n    this.name = name;\n    this.age = age;\n}\n```\n\n这是一个好问题，它叫做**构造函数**，是创建变量时使用的一个特殊的方法，与类名同名。关于它的具体介绍会在之后的篇章里做说明，这里就不详细介绍了。\n\n## 对象\n\n\n\n","slug":"java/basic/java-class","published":1,"updated":"2018-12-28T10:37:23.816Z","_id":"cjq7rm5pp001dwu9kiqywhhqh","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Java-&#x7C7B;&#x4E0E;&#x5BF9;&#x8C61;\"><a href=\"#Java-&#x7C7B;&#x4E0E;&#x5BF9;&#x8C61;\" class=\"headerlink\" title=\"Java &#x7C7B;&#x4E0E;&#x5BF9;&#x8C61;\"></a>Java &#x7C7B;&#x4E0E;&#x5BF9;&#x8C61;</h1><blockquote>\n<p><strong>&#x201C;Sometimes we stare so long at a door that is closing that we see too late the one that is open.&#x201D;</strong></p>\n<p>&#x2014; Alexander Graham Bell, Inventor</p>\n<p><strong>&#x300C;&#x6211;&#x4EEC;&#x6709;&#x65F6;&#x5019;&#x4E13;&#x6CE8;&#x4E8E;&#x6D88;&#x5931;&#x4E2D;&#x7684;&#x673A;&#x4F1A;&#x592A;&#x4E45;&#xFF0C;&#x4EE5;&#x81F4;&#x4E8E;&#x592A;&#x665A;&#x53D1;&#x73B0;&#x5F00;&#x542F;&#x7684;&#x673A;&#x4F1A;&#x3002;&#x300D;</strong>&#x2013; &#x4E9A;&#x5386;&#x5C71;&#x5927;&#x2027;&#x8D1D;&#x5C14; (&#x53D1;&#x660E;&#x5BB6;)</p>\n</blockquote>\n<h2 id=\"&#x5173;&#x5361;&#x8BF4;&#x660E;\"><a href=\"#&#x5173;&#x5361;&#x8BF4;&#x660E;\" class=\"headerlink\" title=\"&#x5173;&#x5361;&#x8BF4;&#x660E;\"></a>&#x5173;&#x5361;&#x8BF4;&#x660E;</h2><p>&#x5173;&#x5361;&#x63CF;&#x8FF0;&#xFF1A;Java&#x662F;&#x4E00;&#x95E8;&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x7684;&#x8BED;&#x8A00;&#xFF0C;&#x7C7B;&#x548C;&#x5BF9;&#x8C61;&#x662F;Java&#x4E2D;&#x6700;&#x91CD;&#x8981;&#x7684;&#x6982;&#x5FF5;&#xFF0C;&#x672C;&#x5173;&#x5C06;&#x4ECB;&#x7ECD;&#x8FD9;&#x4E24;&#x4E2A;&#x91CD;&#x8981;&#x7684;&#x6982;&#x5FF5;&#xFF0C;&#x5E76;&#x901A;&#x8FC7;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x6817;&#x5B50;&#x6765;&#x8FDB;&#x884C;&#x8BF4;&#x660E;&#xFF0C;&#x4F60;&#x80FD;&#x5426;&#x901A;&#x8FC7;&#x672C;&#x5173;&#x7684;&#x8003;&#x9A8C;&#x5462;&#xFF1F;</p>\n<p>&#x8FC7;&#x5173;&#x6761;&#x4EF6;&#xFF1A;&#x7406;&#x89E3;&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x7F16;&#x7A0B;&#x7684;&#x7279;&#x70B9;&#xFF0C;&#x7406;&#x89E3;Java&#x4E2D;&#x7C7B;&#x548C;&#x5BF9;&#x8C61;&#x7684;&#x5173;&#x7CFB;&#xFF0C;&#x4EE5;&#x53CA;&#x5982;&#x4F55;&#x4F7F;&#x7528;&#x5B83;&#x4EEC;</p>\n<p>&#x5173;&#x5361;&#x96BE;&#x5EA6;&#xFF1A;&#x2B50;&#xFE0F;&#x2B50;&#xFE0F;</p>\n<h2 id=\"&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x7A0B;&#x5E8F;&#x8BBE;&#x8BA1;\"><a href=\"#&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x7A0B;&#x5E8F;&#x8BBE;&#x8BA1;\" class=\"headerlink\" title=\"&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x7A0B;&#x5E8F;&#x8BBE;&#x8BA1;\"></a>&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x7A0B;&#x5E8F;&#x8BBE;&#x8BA1;</h2><p>&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x7F16;&#x7A0B;&#xFF08;OOP&#xFF09;&#x662F;&#x5F53;&#x4ECA;&#x4E3B;&#x6D41;&#x7684;&#x7A0B;&#x5E8F;&#x8BBE;&#x8BA1;&#x89C4;&#x8303;&#xFF0C;Java&#x662F;&#x5B8C;&#x5168;&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x5FC5;&#x987B;&#x719F;&#x6089;OOP&#x624D;&#x80FD;&#x7F16;&#x5199;&#x51FA;&#x4F18;&#x79C0;&#x7684;Java&#x4EE3;&#x7801;&#x3002;</p>\n<p>&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x7F16;&#x7A0B;&#xFF0C;&#x987E;&#x540D;&#x601D;&#x4E49;&#xFF0C;&#x91CD;&#x70B9;&#x5C31;&#x5728;&#x4E8E;&#x8FD9;&#x4E2A;&#x5BF9;&#x8C61;&#xFF0C;&#x6CA1;&#x6709;&#x5BF9;&#x8C61;&#x600E;&#x4E48;&#x7F16;&#x7A0B;&#xFF08;&#x624B;&#x52A8;&#x6ED1;&#x7A3D;&#xFF09;&#x3002;&#x54B3;&#x54B3;&#xFF0C;&#x8A00;&#x5F52;&#x6B63;&#x4F20;&#xFF0C;&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x7684;&#x7A0B;&#x5E8F;&#x662F;&#x7531;&#x8BB8;&#x8BB8;&#x591A;&#x591A;&#x7684;&#x5BF9;&#x8C61;&#x7EC4;&#x6210;&#xFF0C;&#x6BCF;&#x4E2A;&#x5BF9;&#x8C61;&#x5177;&#x6709;&#x4E00;&#x5B9A;&#x7684;&#x5C5E;&#x6027;&#x548C;&#x884C;&#x4E3A;&#xFF0C;&#x901A;&#x8FC7;&#x5BF9;&#x8C61;&#x4E4B;&#x95F4;&#x7684;&#x4EA4;&#x4E92;&#x6765;&#x5B9E;&#x73B0;&#x8F6F;&#x4EF6;&#x7684;&#x529F;&#x80FD;&#x3002;&#x4ECE;&#x6839;&#x672C;&#x4E0A;&#x6765;&#x8BF4;&#xFF0C;&#x53EA;&#x8981;&#x8FD9;&#x4E2A;&#x5BF9;&#x8C61;&#x80FD;&#x6EE1;&#x8DB3;&#x529F;&#x80FD;&#x8981;&#x6C42;&#xFF0C;&#x5C31;&#x4E0D;&#x5FC5;&#x5173;&#x5FC3;&#x5B83;&#x7684;&#x5177;&#x4F53;&#x5B9E;&#x73B0;&#x8FC7;&#x7A0B;&#x3002;&#x6362;&#x53E5;&#x8BDD;&#x8BF4;&#xFF0C;&#x4E0D;&#x7BA1;&#x662F;&#x9ED1;&#x732B;&#x767D;&#x732B;&#xFF0C;&#x80FD;&#x6293;&#x8017;&#x5B50;&#x7684;&#x732B;&#x5C31;&#x662F;&#x597D;&#x732B;&#x3002;</p>\n<p>&#x5728;&#x4F20;&#x7EDF;&#x7684;&#x7A0B;&#x5E8F;&#x8BBE;&#x8BA1;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x901A;&#x5E38;&#x9700;&#x8981;&#x5148;&#x8BBE;&#x8BA1;&#x4E00;&#x7CFB;&#x5217;&#x7684;&#x7B97;&#x6CD5;&#x6765;&#x6C42;&#x89E3;&#x95EE;&#x9898;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x8003;&#x8651;&#x5B58;&#x50A8;&#x6570;&#x636E;&#x7684;&#x65B9;&#x5F0F;&#x3002;&#x8FD9;&#x5C31;&#x662F;&#x6240;&#x8C13;&#x7684;&#xFF1A;</p>\n<blockquote>\n<p>&#x7B97;&#x6CD5; + &#x6570;&#x636E;&#x7ED3;&#x6784; = &#x7A0B;&#x5E8F;</p>\n</blockquote>\n<p>&#x5728;&#x9762;&#x5411;&#x8FC7;&#x7A0B;&#x7684;&#x8BBE;&#x8BA1;&#x4E2D;&#xFF0C;&#x7B97;&#x6CD5;&#x662F;&#x653E;&#x5728;&#x7B2C;&#x4E00;&#x4F4D;&#x7684;&#xFF0C;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x662F;&#x4E3A;&#x4E86;&#x9002;&#x5E94;&#x7B97;&#x6CD5;&#x800C;&#x5B58;&#x5728;&#x7684;&#x3002;</p>\n<p>&#x800C;OOP&#x4E2D;&#xFF0C;&#x8FD9;&#x4E2A;&#x987A;&#x5E8F;&#x521A;&#x597D;&#x76F8;&#x53CD;&#xFF0C;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x653E;&#x5728;&#x7B2C;&#x4E00;&#x4F4D;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x8003;&#x8651;&#x64CD;&#x4F5C;&#x6570;&#x636E;&#x7684;&#x7B97;&#x6CD5;&#x3002;</p>\n<p>&#x4E00;&#x4E9B;&#x7B80;&#x5355;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x4F7F;&#x7528;&#x9762;&#x5411;&#x8FC7;&#x7A0B;&#x7684;&#x5F00;&#x53D1;&#x65B9;&#x5F0F;&#x662F;&#x6BD4;&#x8F83;&#x5BB9;&#x6613;&#x7684;&#x3002;&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x7684;&#x7F16;&#x7A0B;&#x9002;&#x5408;&#x4E8E;&#x89E3;&#x51B3;&#x89C4;&#x6A21;&#x8F83;&#x5927;&#x7684;&#x95EE;&#x9898;&#x3002;&#x6BD4;&#x5982;&#x5B9E;&#x73B0;&#x4E00;&#x4E2A;&#x7F51;&#x7AD9;&#x4E5F;&#x8BB8;&#x9700;&#x8981;1000&#x4E2A;&#x8FC7;&#x7A0B;&#xFF0C;&#x8FD9;&#x4E9B;&#x8FC7;&#x7A0B;&#x53EF;&#x80FD;&#x4F1A;&#x5BF9;&#x4E00;&#x7EC4;&#x5168;&#x5C40;&#x7684;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x64CD;&#x4F5C;&#x3002;&#x5982;&#x679C;&#x91C7;&#x7528;&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x7684;&#x65B9;&#x5F0F;&#x6765;&#x8BBE;&#x8BA1;&#xFF0C;&#x53EF;&#x80FD;&#x53EA;&#x9700;&#x8981;&#x5927;&#x7EA6;100&#x4E2A;&#x7C7B;&#xFF0C;&#x6BCF;&#x4E2A;&#x7C7B;10&#x4E2A;&#x65B9;&#x6CD5;&#xFF0C;&#x800C;&#x4E14;&#x5927;&#x591A;&#x6570;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x9762;&#x5411;&#x8FC7;&#x7A0B;&#x5F00;&#x53D1;&#x7684;&#x4EE3;&#x7801;&#x4E2D;&#x6709;&#x5F88;&#x591A;&#x8BBE;&#x8BA1;&#x662F;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x7684;&#x65B9;&#x5F0F;&#x7B80;&#x5316;&#x548C;&#x590D;&#x7528;&#x7684;&#x3002;&#x6240;&#x4EE5;&#x540E;&#x8005;&#x663E;&#x7136;&#x66F4;&#x5BB9;&#x6613;&#x638C;&#x63E1;&#x548C;&#x7EF4;&#x62A4;&#xFF0C;&#x5982;&#x679C;&#x4E07;&#x4E00;&#x67D0;&#x4E2A;&#x6570;&#x636E;&#x51FA;&#x4E86;&#x95EE;&#x9898;&#xFF0C;&#x5728;10&#x4E2A;&#x65B9;&#x6CD5;&#x4E2D;&#x6392;&#x67E5;&#x603B;&#x6BD4;&#x5728;1000&#x4E2A;&#x8FC7;&#x7A0B;&#x4E2D;&#x6392;&#x67E5;&#x8981;&#x5BB9;&#x6613;&#x5F97;&#x591A;&#x3002;</p>\n<h2 id=\"Java&#x4E2D;&#x7684;&#x7C7B;&#x548C;&#x5BF9;&#x8C61;\"><a href=\"#Java&#x4E2D;&#x7684;&#x7C7B;&#x548C;&#x5BF9;&#x8C61;\" class=\"headerlink\" title=\"Java&#x4E2D;&#x7684;&#x7C7B;&#x548C;&#x5BF9;&#x8C61;\"></a>Java&#x4E2D;&#x7684;&#x7C7B;&#x548C;&#x5BF9;&#x8C61;</h2><p>&#x65E2;&#x7136;&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x7F16;&#x7A0B;&#x8FD9;&#x4E48;&#x4F18;&#x79C0;&#xFF0C;&#x90A3;&#x4E48;&#x6211;&#x4EEC;&#x5C31;&#x6765;&#x597D;&#x597D;&#x8BA4;&#x8BC6;&#x4E00;&#x4E0B;&#x8FD9;&#x5176;&#x4E2D;&#x7684;&#x4E3B;&#x4EBA;&#x516C;&#x2014;&#x2014;&#x7C7B;&#x548C;&#x5BF9;&#x8C61;&#x3002;</p>\n<p>&#x201C;&#x7C7B;&#x201D;&#x8868;&#x793A;&#x7684;&#x662F;&#x5177;&#x6709;&#x76F8;&#x540C;&#x5C5E;&#x6027;&#x7684;&#x4E00;&#x7CFB;&#x5217;&#x4E8B;&#x7269;&#xFF0C;&#x6BD4;&#x5982;&#x8BF4;&#xFF0C;&#x201C;&#x4EBA;&#x7C7B;&#x201D;&#xFF0C;&#x63CF;&#x8FF0;&#x7684;&#x5C31;&#x662F;&#x6709;&#x201C;&#x4EBA;&#x201D;&#x8FD9;&#x4E2A;&#x5171;&#x540C;&#x5C5E;&#x6027;&#x548C;&#x884C;&#x4E3A;&#x7684;&#x7FA4;&#x4F53;&#xFF0C;&#x201C;&#x6C7D;&#x8F66;&#x201D;&#x63CF;&#x8FF0;&#x7684;&#x662F;&#x6709;&#x56DB;&#x4E2A;&#x8F6E;&#x5B50;&#xFF0C;&#x53EF;&#x4EE5;&#x9A7E;&#x9A76;&#xFF0C;&#x53EF;&#x4EE5;&#x8F7D;&#x4EBA;&#x7684;&#x5C0F;&#x578B;&#x8F66;&#x8F86;&#xFF0C;&#x4E0D;&#x7BA1;&#x4F60;&#x662F;&#x9ED1;&#x8272;&#x7684;&#x5954;&#x9A70;&#x8FD8;&#x662F;&#x94F6;&#x8272;&#x7684;&#x5B9D;&#x9A6C;&#xFF0C;&#x90FD;&#x53EF;&#x4EE5;&#x53EB;&#x505A;&#x6C7D;&#x8F66;&#x3002;</p>\n<p>&#x90A3;&#x4E48;&#x4EC0;&#x4E48;&#x662F;&#x5BF9;&#x8C61;&#x5462;&#xFF1F;&#x5BF9;&#x8C61;&#x5C31;&#x662F;&#x7C7B;&#x7684;&#x67D0;&#x4E2A;&#x5177;&#x4F53;&#x5B9E;&#x4F8B;&#xFF0C;&#x5C31;&#x597D;&#x6BD4;&#x4F60;&#x548C;&#x6211;&#x90FD;&#x662F;&#x201C;&#x4EBA;&#x7C7B;&#x201D;&#x7684;&#x4E00;&#x4E2A;&#x5177;&#x4F53;&#x662F;&#x5B9E;&#x4F8B;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x90FD;&#x662F;&#x201C;&#x4EBA;&#x7C7B;&#x201D;&#x7684;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x3002;&#x4F60;&#x5BB6;&#x7684;&#x90A3;&#x8F86;&#x6C7D;&#x8F66;&#xFF08;&#x4E0D;&#x7BA1;&#x662F;&#x5954;&#x9A70;&#x8FD8;&#x662F;&#x5927;&#x4F17;&#xFF09;&#xFF0C;&#x4E5F;&#x662F;&#x201C;&#x6C7D;&#x8F66;&#x201D;&#x7684;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x3002;</p>\n<blockquote>\n<p>&#x7C7B;&#x662F;&#x62BD;&#x8C61;&#x7684;&#x6982;&#x5FF5;&#xFF0C;&#x800C;&#x5BF9;&#x8C61;&#x5219;&#x662F;&#x5177;&#x4F53;&#x7684;&#x6982;&#x5FF5;&#x3002;</p>\n</blockquote>\n<p>&#x7C7B;&#x53EF;&#x4EE5;&#x770B;&#x4F5C;&#x662F;&#x5BF9;&#x8C61;&#x7684;&#x6A21;&#x7248;&#xFF0C;&#x4E00;&#x4E2A;&#x7C7B;&#x53EF;&#x4EE5;&#x751F;&#x6210;&#x65E0;&#x6570;&#x4E2A;&#x5BF9;&#x8C61;&#x3002;</p>\n<h2 id=\"&#x7C7B;&#x7684;&#x5B9A;&#x4E49;\"><a href=\"#&#x7C7B;&#x7684;&#x5B9A;&#x4E49;\" class=\"headerlink\" title=\"&#x7C7B;&#x7684;&#x5B9A;&#x4E49;\"></a>&#x7C7B;&#x7684;&#x5B9A;&#x4E49;</h2><p>&#x5148;&#x6765;&#x770B;&#x4E00;&#x4E2A;&#x5C0F;&#x6817;&#x5B50;&#xFF0C;&#x6211;&#x4EEC;&#x6765;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x4EBA;&#x7C7B;&#xFF1A;</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>{</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span></span>{</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;&#x5F00;&#x59CB;&#x5403;&#x996D;...&quot;</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span></span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;&#x6211;&#x53EB;&quot;</span> + name + <span class=\"string\">&quot;&#xFF0C;&#x6211;&#x4ECA;&#x5E74;&quot;</span> + age + <span class=\"string\">&quot;&#x5C81;&quot;</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>&#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x5B9A;&#x4E49;&#x4E86;&#x4E00;&#x4E2A;&#x7C7B;&#xFF0C;&#x7C7B;&#x7684;&#x540D;&#x5B57;&#x53EB;&#x505A;<code>Person</code>&#xFF0C;&#x5B83;&#x6709;&#x4E24;&#x4E2A;&#x5C5E;&#x6027;&#xFF0C;&#x4E00;&#x4E2A;&#x662F;<code>name</code>&#xFF0C;&#x4E00;&#x4E2A;&#x662F;<code>age</code>&#x3002;&#x5E76;&#x4E14;&#x6709;&#x4E09;&#x4E2A;&#x65B9;&#x6CD5;&#xFF0C;&#x4E00;&#x4E2A;&#x662F;&#x6784;&#x9020;&#x51FD;&#x6570;&#xFF0C;&#x4E24;&#x4E2A;&#x662F;Person&#x7684;&#x884C;&#x4E3A;&#xFF0C;&#x5403;&#x996D;&#x548C;&#x8BF4;&#x8BDD;&#x3002;</p>\n<p>&#x53EF;&#x4EE5;&#x770B;&#x5230;&#xFF0C;&#x5B9A;&#x4E49;&#x7C7B;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6211;&#x4EEC;&#x662F;&#x8FD9;&#x6837;&#x7684;&#xFF1A;</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>{</span><br><span class=\"line\">\t...</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>&#x5B9A;&#x4E49;&#x7C7B;&#x7684;&#x683C;&#x5F0F;&#x4E3A;&#xFF1A;</p>\n<blockquote>\n<p>[&#x8BBF;&#x95EE;&#x6743;&#x9650;&#x4FEE;&#x9970;&#x7B26;] + class + [&#x7C7B;&#x540D;] </p>\n</blockquote>\n<p>&#x5176;&#x4E2D;&#x8BBF;&#x95EE;&#x6743;&#x9650;&#x4FEE;&#x9970;&#x7B26;&#x7528;&#x6765;&#x8868;&#x793A;&#x7C7B;&#x662F;&#x5426;&#x53EF;&#x4EE5;&#x88AB;&#x5916;&#x90E8;&#x7C7B;&#x8BBF;&#x95EE;&#xFF0C;<code>public</code>&#x662F;&#x6700;&#x5BBD;&#x677E;&#x7684;&#x8BBF;&#x95EE;&#x6743;&#x9650;&#xFF0C;&#x8868;&#x793A;&#x8FD9;&#x4E2A;&#x7C7B;&#x53EF;&#x4EE5;&#x88AB;&#x5916;&#x90E8;&#x7684;&#x7C7B;&#x8BBF;&#x95EE;&#x548C;&#x4F7F;&#x7528;&#x3002;</p>\n<p><code>class</code>&#x662F;&#x7528;&#x6765;&#x58F0;&#x660E;&#x4E00;&#x4E2A;&#x7C7B;&#x7684;&#x5173;&#x952E;&#x5B57;&#x3002;</p>\n<p>&#x5173;&#x4E8E;&#x7C7B;&#x540D;&#xFF0C;&#x8DDF;&#x53D8;&#x91CF;&#x540D;&#x4E00;&#x6837;&#xFF0C;&#x5FC5;&#x987B;&#x4EE5;&#x5B57;&#x6BCD;&#x5F00;&#x5934;&#xFF0C;&#x53EF;&#x4EE5;&#x7531;&#x5B57;&#x6BCD;&#x3001;&#x6570;&#x5B57;&#x548C;&#x4E0B;&#x5212;&#x7EBF;&#x548C;$&#x7EC4;&#x6210;&#xFF0C;&#x4F46;&#x8DDF;&#x53D8;&#x91CF;&#x547D;&#x540D;&#x4E0D;&#x540C;&#x7684;&#x662F;&#xFF0C;Java&#x4E2D;&#x7684;&#x7C7B;&#x540D;&#x89C4;&#x8303;&#x901A;&#x5E38;&#x4F7F;&#x7528;&#x5927;&#x9A7C;&#x5CF0;&#x547D;&#x540D;&#x6CD5;&#xFF0C;&#x5373;&#x6BCF;&#x4E2A;&#x5355;&#x8BCD;&#x7684;&#x9996;&#x5B57;&#x6BCD;&#x90FD;&#x5927;&#x5199;&#x3002;&#x6BD4;&#x5982;&#xFF1A;SmallCar&#x3001;SecondhandBook&#x3002;</p>\n<h2 id=\"&#x7C7B;&#x7684;&#x7EC4;&#x6210;\"><a href=\"#&#x7C7B;&#x7684;&#x7EC4;&#x6210;\" class=\"headerlink\" title=\"&#x7C7B;&#x7684;&#x7EC4;&#x6210;\"></a>&#x7C7B;&#x7684;&#x7EC4;&#x6210;</h2><p>&#x4E00;&#x4E2A;&#x7C7B;&#x4E3B;&#x8981;&#x7531;&#x5B9E;&#x4F8B;&#x57DF;&#x548C;&#x65B9;&#x6CD5;&#x57DF;&#x7EC4;&#x6210;&#xFF0C;&#x5B9E;&#x4F8B;&#x57DF;&#x7531;&#x6210;&#x5458;&#x53D8;&#x91CF;&#x7EC4;&#x6210;&#xFF0C;&#x4E0A;&#x9762;&#x7684;&#x6817;&#x5B50;&#x4E2D;&#xFF0C;Person&#x7C7B;&#x7684;&#x5B9E;&#x4F8B;&#x57DF;&#x4E3A;&#xFF1A;</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br></pre></td></tr></tbody></table></figure>\n<p>&#x8FD9;&#x662F;Person&#x7C7B;&#x7684;&#x4E24;&#x4E2A;&#x6210;&#x5458;&#x53D8;&#x91CF;&#xFF0C;&#x4E5F;&#x53EB;Person&#x7C7B;&#x7684;&#x5C5E;&#x6027;&#xFF0C;&#x4E00;&#x4E2A;&#x4EBA;&#x6709;&#x540D;&#x5B57;&#x548C;&#x5E74;&#x9F84;&#x3002;</p>\n<p>&#x63A5;&#x4E0B;&#x6765;&#x662F;&#x65B9;&#x6CD5;&#x57DF;&#xFF0C;&#x987E;&#x540D;&#x601D;&#x4E49;&#x4FBF;&#x662F;&#x7531;&#x5404;&#x79CD;&#x65B9;&#x6CD5;&#x7EC4;&#x6210;&#x7684;&#x3002;&#x65B9;&#x6CD5;&#x7684;&#x5B9A;&#x4E49;&#x89C4;&#x5219;&#x4E3A;&#xFF1A;</p>\n<blockquote>\n<p>[&#x8BBF;&#x95EE;&#x4FEE;&#x9970;&#x7B26;] + [&#x65B9;&#x6CD5;&#x8FD4;&#x56DE;&#x503C;&#x7C7B;&#x578B;] + [&#x65B9;&#x6CD5;&#x540D;]</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>{</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;&#x5F00;&#x59CB;&#x5403;&#x996D;...&quot;</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span></span>{</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;&#x6211;&#x53EB;&quot;</span> + name + <span class=\"string\">&quot;&#xFF0C;&#x6211;&#x4ECA;&#x5E74;&quot;</span> + age + <span class=\"string\">&quot;&#x5C81;&quot;</span>);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>&#x8FD9;&#x91CC;&#xFF0C;<code>void</code>&#x4EE3;&#x8868;&#x65B9;&#x6CD5;&#x65E0;&#x8FD4;&#x56DE;&#x503C;&#x3002;&#x65B9;&#x6CD5;&#x7684;&#x547D;&#x540D;&#x8DDF;&#x53D8;&#x91CF;&#x7684;&#x547D;&#x540D;&#x89C4;&#x5219;&#x4E00;&#x6837;&#xFF0C;&#x4E5F;&#x4F7F;&#x7528;&#x5C0F;&#x9A7C;&#x5CF0;&#x547D;&#x540D;&#x6CD5;&#x3002;&#x9700;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x4E00;&#x70B9;&#x662F;&#xFF0C;&#x65E0;&#x8BBA;&#x662F;&#x7C7B;&#x540D;&#x3001;&#x65B9;&#x6CD5;&#x540D;&#x8FD8;&#x662F;&#x53D8;&#x91CF;&#x540D;&#xFF0C;&#x90FD;&#x9700;&#x8981;&#x5177;&#x6709;&#x4E00;&#x5B9A;&#x7684;&#x610F;&#x4E49;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8981;&#x80FD;&#x591F;&#x4F20;&#x8FBE;&#x51FA;&#x5B83;&#x4EE3;&#x8868;&#x7684;&#x542B;&#x4E49;&#xFF0C;&#x505A;&#x5230;&#x89C1;&#x540D;&#x77E5;&#x4E49;&#x3002;&#x50CF;<code>a1</code>&#x3001;<code>a2</code>&#x8FD9;&#x6837;&#x7684;&#x547D;&#x540D;&#x5C31;&#x5C3D;&#x91CF;&#x4E0D;&#x8981;&#x51FA;&#x73B0;&#x3002;</p>\n<p>&#x4E5F;&#x8BB8;&#x4F60;&#x4F1A;&#x597D;&#x5947;&#xFF0C;&#x4E0A;&#x9762;&#x4E0D;&#x662F;&#x8FD8;&#x6709;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#x5417;&#xFF1F;&#x4E3A;&#x4EC0;&#x770B;&#x8D77;&#x6765;&#x6709;&#x70B9;&#x5947;&#x602A;&#x5462;&#xFF1F;&#x4E3A;&#x4EC0;&#x4E48;&#x5B83;&#x4E0D;&#x4F7F;&#x7528;&#x5C0F;&#x9A7C;&#x5CF0;&#xFF0C;&#x4E3A;&#x4EC0;&#x4E48;&#x5B83;&#x8DDF;&#x7C7B;&#x540D;&#x662F;&#x4E00;&#x6837;&#x7684;&#xFF1F;</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span></span>{</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x597D;&#x95EE;&#x9898;&#xFF0C;&#x5B83;&#x53EB;&#x505A;<strong>&#x6784;&#x9020;&#x51FD;&#x6570;</strong>&#xFF0C;&#x662F;&#x521B;&#x5EFA;&#x53D8;&#x91CF;&#x65F6;&#x4F7F;&#x7528;&#x7684;&#x4E00;&#x4E2A;&#x7279;&#x6B8A;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x4E0E;&#x7C7B;&#x540D;&#x540C;&#x540D;&#x3002;&#x5173;&#x4E8E;&#x5B83;&#x7684;&#x5177;&#x4F53;&#x4ECB;&#x7ECD;&#x4F1A;&#x5728;&#x4E4B;&#x540E;&#x7684;&#x7BC7;&#x7AE0;&#x91CC;&#x505A;&#x8BF4;&#x660E;&#xFF0C;&#x8FD9;&#x91CC;&#x5C31;&#x4E0D;&#x8BE6;&#x7EC6;&#x4ECB;&#x7ECD;&#x4E86;&#x3002;</p>\n<h2 id=\"&#x5BF9;&#x8C61;\"><a href=\"#&#x5BF9;&#x8C61;\" class=\"headerlink\" title=\"&#x5BF9;&#x8C61;\"></a>&#x5BF9;&#x8C61;</h2><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"Java-类与对象\"><a href=\"#Java-类与对象\" class=\"headerlink\" title=\"Java 类与对象\"></a>Java 类与对象</h1><blockquote>\n<p><strong>“Sometimes we stare so long at a door that is closing that we see too late the one that is open.”</strong></p>\n<p>— Alexander Graham Bell, Inventor</p>\n<p><strong>「我们有时候专注于消失中的机会太久，以致于太晚发现开启的机会。」</strong>– 亚历山大‧贝尔 (发明家)</p>\n</blockquote>\n<h2 id=\"关卡说明\"><a href=\"#关卡说明\" class=\"headerlink\" title=\"关卡说明\"></a>关卡说明</h2><p>关卡描述：Java是一门面向对象的语言，类和对象是Java中最重要的概念，本关将介绍这两个重要的概念，并通过一个简单的栗子来进行说明，你能否通过本关的考验呢？</p>\n<p>过关条件：理解面向对象编程的特点，理解Java中类和对象的关系，以及如何使用它们</p>\n<p>关卡难度：⭐️⭐️</p>\n<h2 id=\"面向对象程序设计\"><a href=\"#面向对象程序设计\" class=\"headerlink\" title=\"面向对象程序设计\"></a>面向对象程序设计</h2><p>面向对象编程（OOP）是当今主流的程序设计规范，Java是完全面向对象的，所以必须熟悉OOP才能编写出优秀的Java代码。</p>\n<p>面向对象编程，顾名思义，重点就在于这个对象，没有对象怎么编程（手动滑稽）。咳咳，言归正传，面向对象的程序是由许许多多的对象组成，每个对象具有一定的属性和行为，通过对象之间的交互来实现软件的功能。从根本上来说，只要这个对象能满足功能要求，就不必关心它的具体实现过程。换句话说，不管是黑猫白猫，能抓耗子的猫就是好猫。</p>\n<p>在传统的程序设计过程中，通常需要先设计一系列的算法来求解问题，然后再考虑存储数据的方式。这就是所谓的：</p>\n<blockquote>\n<p>算法 + 数据结构 = 程序</p>\n</blockquote>\n<p>在面向过程的设计中，算法是放在第一位的，数据结构是为了适应算法而存在的。</p>\n<p>而OOP中，这个顺序刚好相反，数据结构放在第一位，然后再考虑操作数据的算法。</p>\n<p>一些简单的问题，使用面向过程的开发方式是比较容易的。面向对象的编程适合于解决规模较大的问题。比如实现一个网站也许需要1000个过程，这些过程可能会对一组全局的数据进行操作。如果采用面向对象的方式来设计，可能只需要大约100个类，每个类10个方法，而且大多数情况下，面向过程开发的代码中有很多设计是可以使用面向对象的方式简化和复用的。所以后者显然更容易掌握和维护，如果万一某个数据出了问题，在10个方法中排查总比在1000个过程中排查要容易得多。</p>\n<h2 id=\"Java中的类和对象\"><a href=\"#Java中的类和对象\" class=\"headerlink\" title=\"Java中的类和对象\"></a>Java中的类和对象</h2><p>既然面向对象编程这么优秀，那么我们就来好好认识一下这其中的主人公——类和对象。</p>\n<p>“类”表示的是具有相同属性的一系列事物，比如说，“人类”，描述的就是有“人”这个共同属性和行为的群体，“汽车”描述的是有四个轮子，可以驾驶，可以载人的小型车辆，不管你是黑色的奔驰还是银色的宝马，都可以叫做汽车。</p>\n<p>那么什么是对象呢？对象就是类的某个具体实例，就好比你和我都是“人类”的一个具体是实例，所以我们都是“人类”的一个对象。你家的那辆汽车（不管是奔驰还是大众），也是“汽车”的一个对象。</p>\n<blockquote>\n<p>类是抽象的概念，而对象则是具体的概念。</p>\n</blockquote>\n<p>类可以看作是对象的模版，一个类可以生成无数个对象。</p>\n<h2 id=\"类的定义\"><a href=\"#类的定义\" class=\"headerlink\" title=\"类的定义\"></a>类的定义</h2><p>先来看一个小栗子，我们来定义一个人类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"开始吃饭...\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"我叫\"</span> + name + <span class=\"string\">\"，我今年\"</span> + age + <span class=\"string\">\"岁\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我们定义了一个类，类的名字叫做<code>Person</code>，它有两个属性，一个是<code>name</code>，一个是<code>age</code>。并且有三个方法，一个是构造函数，两个是Person的行为，吃饭和说话。</p>\n<p>可以看到，定义类的时候，我们是这样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定义类的格式为：</p>\n<blockquote>\n<p>[访问权限修饰符] + class + [类名] </p>\n</blockquote>\n<p>其中访问权限修饰符用来表示类是否可以被外部类访问，<code>public</code>是最宽松的访问权限，表示这个类可以被外部的类访问和使用。</p>\n<p><code>class</code>是用来声明一个类的关键字。</p>\n<p>关于类名，跟变量名一样，必须以字母开头，可以由字母、数字和下划线和$组成，但跟变量命名不同的是，Java中的类名规范通常使用大驼峰命名法，即每个单词的首字母都大写。比如：SmallCar、SecondhandBook。</p>\n<h2 id=\"类的组成\"><a href=\"#类的组成\" class=\"headerlink\" title=\"类的组成\"></a>类的组成</h2><p>一个类主要由实例域和方法域组成，实例域由成员变量组成，上面的栗子中，Person类的实例域为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br></pre></td></tr></table></figure>\n<p>这是Person类的两个成员变量，也叫Person类的属性，一个人有名字和年龄。</p>\n<p>接下来是方法域，顾名思义便是由各种方法组成的。方法的定义规则为：</p>\n<blockquote>\n<p>[访问修饰符] + [方法返回值类型] + [方法名]</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"开始吃饭...\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"我叫\"</span> + name + <span class=\"string\">\"，我今年\"</span> + age + <span class=\"string\">\"岁\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里，<code>void</code>代表方法无返回值。方法的命名跟变量的命名规则一样，也使用小驼峰命名法。需要注意的一点是，无论是类名、方法名还是变量名，都需要具有一定的意义，也就是要能够传达出它代表的含义，做到见名知义。像<code>a1</code>、<code>a2</code>这样的命名就尽量不要出现。</p>\n<p>也许你会好奇，上面不是还有一个方法吗？为什看起来有点奇怪呢？为什么它不使用小驼峰，为什么它跟类名是一样的？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是一个好问题，它叫做<strong>构造函数</strong>，是创建变量时使用的一个特殊的方法，与类名同名。关于它的具体介绍会在之后的篇章里做说明，这里就不详细介绍了。</p>\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2>"},{"title":"Java 变量","date":"2018-12-28T16:04:00.000Z","_content":"\n>**“The superior man makes the difficulty to be overcome his first interest; success comes only later.”**\n>\n>— William Jennings Bryan\n>\n>**「优秀的人将克服困难当做第一优先，成功只是之后的附带品。」**    – 威廉‧詹宁斯‧布莱恩 (政客)\n\n## 关卡说明\n\n关卡描述：变量是Java程序中最常见的内容，是设计Java程序必不可少的部分。\n\n过关条件：理解什么是变量，为什么需要使用变量，以及如何使用它们\n\n关卡难度：⭐️\n\n## 变量\n\n什么是变量？为什么要有变量？怎么使用它？\n\n如果你不能很好的回答这三个问题，那么就带着这些疑问来完成本次挑战吧，相信你必能有所收获。\n\n### 什么是变量\n\n在一个Java程序中，通常需要很多个步骤才能实现我们想要的功能，比如之前设计的计算器，就需要先提示用户输入，读取输入的值，然后再将它们相加后输出。我们日常生活中的事情也是类似的，拿吃饭而言，我们需要先把饭盛到碗里，然后再加点菜，再往嘴里塞。\n\n这里的碗就相当于变量，我们用它来盛饭，也就是存放中间过程的一些处理结果，饭是我们从锅里盛出来的，是经过我们处理过的。\n\n也许这样说还是有些抽象，我们继续看之前的栗子：\n\n```java\npublic static void main(String[] args){\n    System.out.print(\"请输入一个整数:\");\n    Scanner in = new Scanner(System.in);\n    int a = in.nextInt();\n    System.out.print(\"请再输入一个整数:\");\n    int b = in.nextInt();\n    int sum = a + b;\n    System.out.print(\"这两个数的和为:\" + sum);\n}\n```\n\n在第三行，我们定义了一个变量`in`，用来存放Scanner实例引用，在第四行，我们定义了一个变量`a`，用来存放用户输入的第一个整数，第六行里我们又定义了一个变量`b`，用来接收用户输入的第二个整数，然后在第七行定义了一个变量`sum`，用来存放变量`a`和变量`b`的和。\n\n虽然是一个简单的程序，但是我们已经使用了四个变量，可见其应用的广泛性和重要性。变量就如同程序的血液，是一个程序能顺利运转的不可或缺的部分。\n\n### 为什么需要变量\n\n那么有没有可能不使用任何变量呢？其实也是可以的，比如这样：\n\n```java\npublic static void main(String[] args){\n    System.out.print(\"我是一个最简单的程序，我不使用变量\");\n}\n```\n\nemmm，毕竟这样的需求只是极少的一部分，绝大部分的应用还是比较繁杂的，所以变量便不可避免的需要使用。\n\n另外，使用变量还可以使得程序逻辑变得更加清晰，通过使用变量，将整个流程的步骤变得更加清晰明确。就好比说吃饭，不再是模糊的一个动作，而是分为盛饭，夹菜，吃饭这几个具体的步骤了。\n\n### 如何使用变量\n\n要想使用变量，就必须先定义一个变量，或者说声明一个变量。声明变量的格式为：\n\n```java\n[类型名] + [变量名]\n```\n\n例如：`int a` 中 `int` 是变量的类型，`a` 是变量的名字。\n\n可以在声明变量的同时给它赋一个初始值，也可以在之后改变变量的值。声明变量之后，必须使用赋值语句对变量显式初始化，千万不要使用未初始化的变量，否则会被编译器视为错误的代码。\n\n想要对一个变量进行赋值，就需要将变量放在`=` 左边，然后将java表达式放在等号的右边。\n\n举个小栗子：\n\n```java\npublic static void main(String[] args){\n    int a = 1;\n    System.out.println(\"变量a的值为：\" + a);\n    a = 2;\n    System.out.println(\"变量a的值为：\" + a);\n    a = 3;\n    System.out.println(\"变量a的值为：\" + a);\n    int b;\n    System.out.println(\"变量b的值为：\" + b);\n    b = a;\n    System.out.println(\"变量b的值为：\" + b);\n}\n```\n\n那么程序将会输出：\n\n```java\n变量a的值为：1\n变量a的值为：2\n变量a的值为：3\n变量b的值为：0\n变量b的值为：3\n```\n\n补充说明一下，`System.out.println` 与 `System.out.print` 的区别是，前者会在内容输出完成之后添加一个换行。\n\n### 变量的命名规范\n\n变量名必须以字母开头，并且由字母、数字或者下划线和$构成，对于长度理论上来说是没有限制的，此外，java中的保留字是不能用作变量名的，保留字也就是java中的关键字，比如之前的 `public`、`static`、`int`、`void`等等，在后续的学习中，会不断接触到各种关键字。\n\n变量命名最好符合它使用的意义，能表现其作用，因为往往在一个程序中会出现非常多的变量，如果变量命名都像`a1`、`a2`、`a3`这样看了让人摸不着头脑的形式，那么将使得代码的阅读和维护变得十分困难。永远不要忘记，代码是用来阅读的。\n\n在Java中，变量的命名通常使用小驼峰命名法，也就是第一个单词的首字母小写，其余单词的首字母大写，比如：`totalDays`、`paperWidth`。\n\n## 小结\n\n至此，关于变量的介绍就结束了，变量是Java中最重要也是最基础的组成部分，希望你能很好的理解和掌握它。\n","source":"_posts/java/basic/java-variable.md","raw":"---\ntitle: Java 变量\ntags: \n - Java基础\n - Java\ncategories: 编程\ndate: 2018-12-29 00:04:00\n---\n\n>**“The superior man makes the difficulty to be overcome his first interest; success comes only later.”**\n>\n>— William Jennings Bryan\n>\n>**「优秀的人将克服困难当做第一优先，成功只是之后的附带品。」**    – 威廉‧詹宁斯‧布莱恩 (政客)\n\n## 关卡说明\n\n关卡描述：变量是Java程序中最常见的内容，是设计Java程序必不可少的部分。\n\n过关条件：理解什么是变量，为什么需要使用变量，以及如何使用它们\n\n关卡难度：⭐️\n\n## 变量\n\n什么是变量？为什么要有变量？怎么使用它？\n\n如果你不能很好的回答这三个问题，那么就带着这些疑问来完成本次挑战吧，相信你必能有所收获。\n\n### 什么是变量\n\n在一个Java程序中，通常需要很多个步骤才能实现我们想要的功能，比如之前设计的计算器，就需要先提示用户输入，读取输入的值，然后再将它们相加后输出。我们日常生活中的事情也是类似的，拿吃饭而言，我们需要先把饭盛到碗里，然后再加点菜，再往嘴里塞。\n\n这里的碗就相当于变量，我们用它来盛饭，也就是存放中间过程的一些处理结果，饭是我们从锅里盛出来的，是经过我们处理过的。\n\n也许这样说还是有些抽象，我们继续看之前的栗子：\n\n```java\npublic static void main(String[] args){\n    System.out.print(\"请输入一个整数:\");\n    Scanner in = new Scanner(System.in);\n    int a = in.nextInt();\n    System.out.print(\"请再输入一个整数:\");\n    int b = in.nextInt();\n    int sum = a + b;\n    System.out.print(\"这两个数的和为:\" + sum);\n}\n```\n\n在第三行，我们定义了一个变量`in`，用来存放Scanner实例引用，在第四行，我们定义了一个变量`a`，用来存放用户输入的第一个整数，第六行里我们又定义了一个变量`b`，用来接收用户输入的第二个整数，然后在第七行定义了一个变量`sum`，用来存放变量`a`和变量`b`的和。\n\n虽然是一个简单的程序，但是我们已经使用了四个变量，可见其应用的广泛性和重要性。变量就如同程序的血液，是一个程序能顺利运转的不可或缺的部分。\n\n### 为什么需要变量\n\n那么有没有可能不使用任何变量呢？其实也是可以的，比如这样：\n\n```java\npublic static void main(String[] args){\n    System.out.print(\"我是一个最简单的程序，我不使用变量\");\n}\n```\n\nemmm，毕竟这样的需求只是极少的一部分，绝大部分的应用还是比较繁杂的，所以变量便不可避免的需要使用。\n\n另外，使用变量还可以使得程序逻辑变得更加清晰，通过使用变量，将整个流程的步骤变得更加清晰明确。就好比说吃饭，不再是模糊的一个动作，而是分为盛饭，夹菜，吃饭这几个具体的步骤了。\n\n### 如何使用变量\n\n要想使用变量，就必须先定义一个变量，或者说声明一个变量。声明变量的格式为：\n\n```java\n[类型名] + [变量名]\n```\n\n例如：`int a` 中 `int` 是变量的类型，`a` 是变量的名字。\n\n可以在声明变量的同时给它赋一个初始值，也可以在之后改变变量的值。声明变量之后，必须使用赋值语句对变量显式初始化，千万不要使用未初始化的变量，否则会被编译器视为错误的代码。\n\n想要对一个变量进行赋值，就需要将变量放在`=` 左边，然后将java表达式放在等号的右边。\n\n举个小栗子：\n\n```java\npublic static void main(String[] args){\n    int a = 1;\n    System.out.println(\"变量a的值为：\" + a);\n    a = 2;\n    System.out.println(\"变量a的值为：\" + a);\n    a = 3;\n    System.out.println(\"变量a的值为：\" + a);\n    int b;\n    System.out.println(\"变量b的值为：\" + b);\n    b = a;\n    System.out.println(\"变量b的值为：\" + b);\n}\n```\n\n那么程序将会输出：\n\n```java\n变量a的值为：1\n变量a的值为：2\n变量a的值为：3\n变量b的值为：0\n变量b的值为：3\n```\n\n补充说明一下，`System.out.println` 与 `System.out.print` 的区别是，前者会在内容输出完成之后添加一个换行。\n\n### 变量的命名规范\n\n变量名必须以字母开头，并且由字母、数字或者下划线和$构成，对于长度理论上来说是没有限制的，此外，java中的保留字是不能用作变量名的，保留字也就是java中的关键字，比如之前的 `public`、`static`、`int`、`void`等等，在后续的学习中，会不断接触到各种关键字。\n\n变量命名最好符合它使用的意义，能表现其作用，因为往往在一个程序中会出现非常多的变量，如果变量命名都像`a1`、`a2`、`a3`这样看了让人摸不着头脑的形式，那么将使得代码的阅读和维护变得十分困难。永远不要忘记，代码是用来阅读的。\n\n在Java中，变量的命名通常使用小驼峰命名法，也就是第一个单词的首字母小写，其余单词的首字母大写，比如：`totalDays`、`paperWidth`。\n\n## 小结\n\n至此，关于变量的介绍就结束了，变量是Java中最重要也是最基础的组成部分，希望你能很好的理解和掌握它。\n","slug":"java/basic/java-variable","published":1,"updated":"2018-12-28T10:37:23.816Z","_id":"cjq7rm5pq001gwu9k5ehnulqr","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p><strong>&#x201C;The superior man makes the difficulty to be overcome his first interest; success comes only later.&#x201D;</strong></p>\n<p>&#x2014; William Jennings Bryan</p>\n<p><strong>&#x300C;&#x4F18;&#x79C0;&#x7684;&#x4EBA;&#x5C06;&#x514B;&#x670D;&#x56F0;&#x96BE;&#x5F53;&#x505A;&#x7B2C;&#x4E00;&#x4F18;&#x5148;&#xFF0C;&#x6210;&#x529F;&#x53EA;&#x662F;&#x4E4B;&#x540E;&#x7684;&#x9644;&#x5E26;&#x54C1;&#x3002;&#x300D;</strong>    &#x2013; &#x5A01;&#x5EC9;&#x2027;&#x8A79;&#x5B81;&#x65AF;&#x2027;&#x5E03;&#x83B1;&#x6069; (&#x653F;&#x5BA2;)</p>\n</blockquote>\n<h2 id=\"&#x5173;&#x5361;&#x8BF4;&#x660E;\"><a href=\"#&#x5173;&#x5361;&#x8BF4;&#x660E;\" class=\"headerlink\" title=\"&#x5173;&#x5361;&#x8BF4;&#x660E;\"></a>&#x5173;&#x5361;&#x8BF4;&#x660E;</h2><p>&#x5173;&#x5361;&#x63CF;&#x8FF0;&#xFF1A;&#x53D8;&#x91CF;&#x662F;Java&#x7A0B;&#x5E8F;&#x4E2D;&#x6700;&#x5E38;&#x89C1;&#x7684;&#x5185;&#x5BB9;&#xFF0C;&#x662F;&#x8BBE;&#x8BA1;Java&#x7A0B;&#x5E8F;&#x5FC5;&#x4E0D;&#x53EF;&#x5C11;&#x7684;&#x90E8;&#x5206;&#x3002;</p>\n<p>&#x8FC7;&#x5173;&#x6761;&#x4EF6;&#xFF1A;&#x7406;&#x89E3;&#x4EC0;&#x4E48;&#x662F;&#x53D8;&#x91CF;&#xFF0C;&#x4E3A;&#x4EC0;&#x4E48;&#x9700;&#x8981;&#x4F7F;&#x7528;&#x53D8;&#x91CF;&#xFF0C;&#x4EE5;&#x53CA;&#x5982;&#x4F55;&#x4F7F;&#x7528;&#x5B83;&#x4EEC;</p>\n<p>&#x5173;&#x5361;&#x96BE;&#x5EA6;&#xFF1A;&#x2B50;&#xFE0F;</p>\n<h2 id=\"&#x53D8;&#x91CF;\"><a href=\"#&#x53D8;&#x91CF;\" class=\"headerlink\" title=\"&#x53D8;&#x91CF;\"></a>&#x53D8;&#x91CF;</h2><p>&#x4EC0;&#x4E48;&#x662F;&#x53D8;&#x91CF;&#xFF1F;&#x4E3A;&#x4EC0;&#x4E48;&#x8981;&#x6709;&#x53D8;&#x91CF;&#xFF1F;&#x600E;&#x4E48;&#x4F7F;&#x7528;&#x5B83;&#xFF1F;</p>\n<p>&#x5982;&#x679C;&#x4F60;&#x4E0D;&#x80FD;&#x5F88;&#x597D;&#x7684;&#x56DE;&#x7B54;&#x8FD9;&#x4E09;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x5E26;&#x7740;&#x8FD9;&#x4E9B;&#x7591;&#x95EE;&#x6765;&#x5B8C;&#x6210;&#x672C;&#x6B21;&#x6311;&#x6218;&#x5427;&#xFF0C;&#x76F8;&#x4FE1;&#x4F60;&#x5FC5;&#x80FD;&#x6709;&#x6240;&#x6536;&#x83B7;&#x3002;</p>\n<h3 id=\"&#x4EC0;&#x4E48;&#x662F;&#x53D8;&#x91CF;\"><a href=\"#&#x4EC0;&#x4E48;&#x662F;&#x53D8;&#x91CF;\" class=\"headerlink\" title=\"&#x4EC0;&#x4E48;&#x662F;&#x53D8;&#x91CF;\"></a>&#x4EC0;&#x4E48;&#x662F;&#x53D8;&#x91CF;</h3><p>&#x5728;&#x4E00;&#x4E2A;Java&#x7A0B;&#x5E8F;&#x4E2D;&#xFF0C;&#x901A;&#x5E38;&#x9700;&#x8981;&#x5F88;&#x591A;&#x4E2A;&#x6B65;&#x9AA4;&#x624D;&#x80FD;&#x5B9E;&#x73B0;&#x6211;&#x4EEC;&#x60F3;&#x8981;&#x7684;&#x529F;&#x80FD;&#xFF0C;&#x6BD4;&#x5982;&#x4E4B;&#x524D;&#x8BBE;&#x8BA1;&#x7684;&#x8BA1;&#x7B97;&#x5668;&#xFF0C;&#x5C31;&#x9700;&#x8981;&#x5148;&#x63D0;&#x793A;&#x7528;&#x6237;&#x8F93;&#x5165;&#xFF0C;&#x8BFB;&#x53D6;&#x8F93;&#x5165;&#x7684;&#x503C;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x5C06;&#x5B83;&#x4EEC;&#x76F8;&#x52A0;&#x540E;&#x8F93;&#x51FA;&#x3002;&#x6211;&#x4EEC;&#x65E5;&#x5E38;&#x751F;&#x6D3B;&#x4E2D;&#x7684;&#x4E8B;&#x60C5;&#x4E5F;&#x662F;&#x7C7B;&#x4F3C;&#x7684;&#xFF0C;&#x62FF;&#x5403;&#x996D;&#x800C;&#x8A00;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x5148;&#x628A;&#x996D;&#x76DB;&#x5230;&#x7897;&#x91CC;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x52A0;&#x70B9;&#x83DC;&#xFF0C;&#x518D;&#x5F80;&#x5634;&#x91CC;&#x585E;&#x3002;</p>\n<p>&#x8FD9;&#x91CC;&#x7684;&#x7897;&#x5C31;&#x76F8;&#x5F53;&#x4E8E;&#x53D8;&#x91CF;&#xFF0C;&#x6211;&#x4EEC;&#x7528;&#x5B83;&#x6765;&#x76DB;&#x996D;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x5B58;&#x653E;&#x4E2D;&#x95F4;&#x8FC7;&#x7A0B;&#x7684;&#x4E00;&#x4E9B;&#x5904;&#x7406;&#x7ED3;&#x679C;&#xFF0C;&#x996D;&#x662F;&#x6211;&#x4EEC;&#x4ECE;&#x9505;&#x91CC;&#x76DB;&#x51FA;&#x6765;&#x7684;&#xFF0C;&#x662F;&#x7ECF;&#x8FC7;&#x6211;&#x4EEC;&#x5904;&#x7406;&#x8FC7;&#x7684;&#x3002;</p>\n<p>&#x4E5F;&#x8BB8;&#x8FD9;&#x6837;&#x8BF4;&#x8FD8;&#x662F;&#x6709;&#x4E9B;&#x62BD;&#x8C61;&#xFF0C;&#x6211;&#x4EEC;&#x7EE7;&#x7EED;&#x770B;&#x4E4B;&#x524D;&#x7684;&#x6817;&#x5B50;&#xFF1A;</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>{</span><br><span class=\"line\">    System.out.print(<span class=\"string\">&quot;&#x8BF7;&#x8F93;&#x5165;&#x4E00;&#x4E2A;&#x6574;&#x6570;:&quot;</span>);</span><br><span class=\"line\">    Scanner in = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = in.nextInt();</span><br><span class=\"line\">    System.out.print(<span class=\"string\">&quot;&#x8BF7;&#x518D;&#x8F93;&#x5165;&#x4E00;&#x4E2A;&#x6574;&#x6570;:&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = in.nextInt();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = a + b;</span><br><span class=\"line\">    System.out.print(<span class=\"string\">&quot;&#x8FD9;&#x4E24;&#x4E2A;&#x6570;&#x7684;&#x548C;&#x4E3A;:&quot;</span> + sum);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>&#x5728;&#x7B2C;&#x4E09;&#x884C;&#xFF0C;&#x6211;&#x4EEC;&#x5B9A;&#x4E49;&#x4E86;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;<code>in</code>&#xFF0C;&#x7528;&#x6765;&#x5B58;&#x653E;Scanner&#x5B9E;&#x4F8B;&#x5F15;&#x7528;&#xFF0C;&#x5728;&#x7B2C;&#x56DB;&#x884C;&#xFF0C;&#x6211;&#x4EEC;&#x5B9A;&#x4E49;&#x4E86;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;<code>a</code>&#xFF0C;&#x7528;&#x6765;&#x5B58;&#x653E;&#x7528;&#x6237;&#x8F93;&#x5165;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x6574;&#x6570;&#xFF0C;&#x7B2C;&#x516D;&#x884C;&#x91CC;&#x6211;&#x4EEC;&#x53C8;&#x5B9A;&#x4E49;&#x4E86;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;<code>b</code>&#xFF0C;&#x7528;&#x6765;&#x63A5;&#x6536;&#x7528;&#x6237;&#x8F93;&#x5165;&#x7684;&#x7B2C;&#x4E8C;&#x4E2A;&#x6574;&#x6570;&#xFF0C;&#x7136;&#x540E;&#x5728;&#x7B2C;&#x4E03;&#x884C;&#x5B9A;&#x4E49;&#x4E86;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;<code>sum</code>&#xFF0C;&#x7528;&#x6765;&#x5B58;&#x653E;&#x53D8;&#x91CF;<code>a</code>&#x548C;&#x53D8;&#x91CF;<code>b</code>&#x7684;&#x548C;&#x3002;</p>\n<p>&#x867D;&#x7136;&#x662F;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x7A0B;&#x5E8F;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x4EEC;&#x5DF2;&#x7ECF;&#x4F7F;&#x7528;&#x4E86;&#x56DB;&#x4E2A;&#x53D8;&#x91CF;&#xFF0C;&#x53EF;&#x89C1;&#x5176;&#x5E94;&#x7528;&#x7684;&#x5E7F;&#x6CDB;&#x6027;&#x548C;&#x91CD;&#x8981;&#x6027;&#x3002;&#x53D8;&#x91CF;&#x5C31;&#x5982;&#x540C;&#x7A0B;&#x5E8F;&#x7684;&#x8840;&#x6DB2;&#xFF0C;&#x662F;&#x4E00;&#x4E2A;&#x7A0B;&#x5E8F;&#x80FD;&#x987A;&#x5229;&#x8FD0;&#x8F6C;&#x7684;&#x4E0D;&#x53EF;&#x6216;&#x7F3A;&#x7684;&#x90E8;&#x5206;&#x3002;</p>\n<h3 id=\"&#x4E3A;&#x4EC0;&#x4E48;&#x9700;&#x8981;&#x53D8;&#x91CF;\"><a href=\"#&#x4E3A;&#x4EC0;&#x4E48;&#x9700;&#x8981;&#x53D8;&#x91CF;\" class=\"headerlink\" title=\"&#x4E3A;&#x4EC0;&#x4E48;&#x9700;&#x8981;&#x53D8;&#x91CF;\"></a>&#x4E3A;&#x4EC0;&#x4E48;&#x9700;&#x8981;&#x53D8;&#x91CF;</h3><p>&#x90A3;&#x4E48;&#x6709;&#x6CA1;&#x6709;&#x53EF;&#x80FD;&#x4E0D;&#x4F7F;&#x7528;&#x4EFB;&#x4F55;&#x53D8;&#x91CF;&#x5462;&#xFF1F;&#x5176;&#x5B9E;&#x4E5F;&#x662F;&#x53EF;&#x4EE5;&#x7684;&#xFF0C;&#x6BD4;&#x5982;&#x8FD9;&#x6837;&#xFF1A;</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>{</span><br><span class=\"line\">    System.out.print(<span class=\"string\">&quot;&#x6211;&#x662F;&#x4E00;&#x4E2A;&#x6700;&#x7B80;&#x5355;&#x7684;&#x7A0B;&#x5E8F;&#xFF0C;&#x6211;&#x4E0D;&#x4F7F;&#x7528;&#x53D8;&#x91CF;&quot;</span>);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>emmm&#xFF0C;&#x6BD5;&#x7ADF;&#x8FD9;&#x6837;&#x7684;&#x9700;&#x6C42;&#x53EA;&#x662F;&#x6781;&#x5C11;&#x7684;&#x4E00;&#x90E8;&#x5206;&#xFF0C;&#x7EDD;&#x5927;&#x90E8;&#x5206;&#x7684;&#x5E94;&#x7528;&#x8FD8;&#x662F;&#x6BD4;&#x8F83;&#x7E41;&#x6742;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x53D8;&#x91CF;&#x4FBF;&#x4E0D;&#x53EF;&#x907F;&#x514D;&#x7684;&#x9700;&#x8981;&#x4F7F;&#x7528;&#x3002;</p>\n<p>&#x53E6;&#x5916;&#xFF0C;&#x4F7F;&#x7528;&#x53D8;&#x91CF;&#x8FD8;&#x53EF;&#x4EE5;&#x4F7F;&#x5F97;&#x7A0B;&#x5E8F;&#x903B;&#x8F91;&#x53D8;&#x5F97;&#x66F4;&#x52A0;&#x6E05;&#x6670;&#xFF0C;&#x901A;&#x8FC7;&#x4F7F;&#x7528;&#x53D8;&#x91CF;&#xFF0C;&#x5C06;&#x6574;&#x4E2A;&#x6D41;&#x7A0B;&#x7684;&#x6B65;&#x9AA4;&#x53D8;&#x5F97;&#x66F4;&#x52A0;&#x6E05;&#x6670;&#x660E;&#x786E;&#x3002;&#x5C31;&#x597D;&#x6BD4;&#x8BF4;&#x5403;&#x996D;&#xFF0C;&#x4E0D;&#x518D;&#x662F;&#x6A21;&#x7CCA;&#x7684;&#x4E00;&#x4E2A;&#x52A8;&#x4F5C;&#xFF0C;&#x800C;&#x662F;&#x5206;&#x4E3A;&#x76DB;&#x996D;&#xFF0C;&#x5939;&#x83DC;&#xFF0C;&#x5403;&#x996D;&#x8FD9;&#x51E0;&#x4E2A;&#x5177;&#x4F53;&#x7684;&#x6B65;&#x9AA4;&#x4E86;&#x3002;</p>\n<h3 id=\"&#x5982;&#x4F55;&#x4F7F;&#x7528;&#x53D8;&#x91CF;\"><a href=\"#&#x5982;&#x4F55;&#x4F7F;&#x7528;&#x53D8;&#x91CF;\" class=\"headerlink\" title=\"&#x5982;&#x4F55;&#x4F7F;&#x7528;&#x53D8;&#x91CF;\"></a>&#x5982;&#x4F55;&#x4F7F;&#x7528;&#x53D8;&#x91CF;</h3><p>&#x8981;&#x60F3;&#x4F7F;&#x7528;&#x53D8;&#x91CF;&#xFF0C;&#x5C31;&#x5FC5;&#x987B;&#x5148;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;&#xFF0C;&#x6216;&#x8005;&#x8BF4;&#x58F0;&#x660E;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;&#x3002;&#x58F0;&#x660E;&#x53D8;&#x91CF;&#x7684;&#x683C;&#x5F0F;&#x4E3A;&#xFF1A;</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#x7C7B;&#x578B;&#x540D;] + [&#x53D8;&#x91CF;&#x540D;]</span><br></pre></td></tr></tbody></table></figure>\n<p>&#x4F8B;&#x5982;&#xFF1A;<code>int a</code> &#x4E2D; <code>int</code> &#x662F;&#x53D8;&#x91CF;&#x7684;&#x7C7B;&#x578B;&#xFF0C;<code>a</code> &#x662F;&#x53D8;&#x91CF;&#x7684;&#x540D;&#x5B57;&#x3002;</p>\n<p>&#x53EF;&#x4EE5;&#x5728;&#x58F0;&#x660E;&#x53D8;&#x91CF;&#x7684;&#x540C;&#x65F6;&#x7ED9;&#x5B83;&#x8D4B;&#x4E00;&#x4E2A;&#x521D;&#x59CB;&#x503C;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x5728;&#x4E4B;&#x540E;&#x6539;&#x53D8;&#x53D8;&#x91CF;&#x7684;&#x503C;&#x3002;&#x58F0;&#x660E;&#x53D8;&#x91CF;&#x4E4B;&#x540E;&#xFF0C;&#x5FC5;&#x987B;&#x4F7F;&#x7528;&#x8D4B;&#x503C;&#x8BED;&#x53E5;&#x5BF9;&#x53D8;&#x91CF;&#x663E;&#x5F0F;&#x521D;&#x59CB;&#x5316;&#xFF0C;&#x5343;&#x4E07;&#x4E0D;&#x8981;&#x4F7F;&#x7528;&#x672A;&#x521D;&#x59CB;&#x5316;&#x7684;&#x53D8;&#x91CF;&#xFF0C;&#x5426;&#x5219;&#x4F1A;&#x88AB;&#x7F16;&#x8BD1;&#x5668;&#x89C6;&#x4E3A;&#x9519;&#x8BEF;&#x7684;&#x4EE3;&#x7801;&#x3002;</p>\n<p>&#x60F3;&#x8981;&#x5BF9;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;&#x8FDB;&#x884C;&#x8D4B;&#x503C;&#xFF0C;&#x5C31;&#x9700;&#x8981;&#x5C06;&#x53D8;&#x91CF;&#x653E;&#x5728;<code>=</code> &#x5DE6;&#x8FB9;&#xFF0C;&#x7136;&#x540E;&#x5C06;java&#x8868;&#x8FBE;&#x5F0F;&#x653E;&#x5728;&#x7B49;&#x53F7;&#x7684;&#x53F3;&#x8FB9;&#x3002;</p>\n<p>&#x4E3E;&#x4E2A;&#x5C0F;&#x6817;&#x5B50;&#xFF1A;</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>{</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;&#x53D8;&#x91CF;a&#x7684;&#x503C;&#x4E3A;&#xFF1A;&quot;</span> + a);</span><br><span class=\"line\">    a = <span class=\"number\">2</span>;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;&#x53D8;&#x91CF;a&#x7684;&#x503C;&#x4E3A;&#xFF1A;&quot;</span> + a);</span><br><span class=\"line\">    a = <span class=\"number\">3</span>;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;&#x53D8;&#x91CF;a&#x7684;&#x503C;&#x4E3A;&#xFF1A;&quot;</span> + a);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;&#x53D8;&#x91CF;b&#x7684;&#x503C;&#x4E3A;&#xFF1A;&quot;</span> + b);</span><br><span class=\"line\">    b = a;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;&#x53D8;&#x91CF;b&#x7684;&#x503C;&#x4E3A;&#xFF1A;&quot;</span> + b);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>&#x90A3;&#x4E48;&#x7A0B;&#x5E8F;&#x5C06;&#x4F1A;&#x8F93;&#x51FA;&#xFF1A;</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x53D8;&#x91CF;a&#x7684;&#x503C;&#x4E3A;&#xFF1A;<span class=\"number\">1</span></span><br><span class=\"line\">&#x53D8;&#x91CF;a&#x7684;&#x503C;&#x4E3A;&#xFF1A;<span class=\"number\">2</span></span><br><span class=\"line\">&#x53D8;&#x91CF;a&#x7684;&#x503C;&#x4E3A;&#xFF1A;<span class=\"number\">3</span></span><br><span class=\"line\">&#x53D8;&#x91CF;b&#x7684;&#x503C;&#x4E3A;&#xFF1A;<span class=\"number\">0</span></span><br><span class=\"line\">&#x53D8;&#x91CF;b&#x7684;&#x503C;&#x4E3A;&#xFF1A;<span class=\"number\">3</span></span><br></pre></td></tr></tbody></table></figure>\n<p>&#x8865;&#x5145;&#x8BF4;&#x660E;&#x4E00;&#x4E0B;&#xFF0C;<code>System.out.println</code> &#x4E0E; <code>System.out.print</code> &#x7684;&#x533A;&#x522B;&#x662F;&#xFF0C;&#x524D;&#x8005;&#x4F1A;&#x5728;&#x5185;&#x5BB9;&#x8F93;&#x51FA;&#x5B8C;&#x6210;&#x4E4B;&#x540E;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;&#x6362;&#x884C;&#x3002;</p>\n<h3 id=\"&#x53D8;&#x91CF;&#x7684;&#x547D;&#x540D;&#x89C4;&#x8303;\"><a href=\"#&#x53D8;&#x91CF;&#x7684;&#x547D;&#x540D;&#x89C4;&#x8303;\" class=\"headerlink\" title=\"&#x53D8;&#x91CF;&#x7684;&#x547D;&#x540D;&#x89C4;&#x8303;\"></a>&#x53D8;&#x91CF;&#x7684;&#x547D;&#x540D;&#x89C4;&#x8303;</h3><p>&#x53D8;&#x91CF;&#x540D;&#x5FC5;&#x987B;&#x4EE5;&#x5B57;&#x6BCD;&#x5F00;&#x5934;&#xFF0C;&#x5E76;&#x4E14;&#x7531;&#x5B57;&#x6BCD;&#x3001;&#x6570;&#x5B57;&#x6216;&#x8005;&#x4E0B;&#x5212;&#x7EBF;&#x548C;$&#x6784;&#x6210;&#xFF0C;&#x5BF9;&#x4E8E;&#x957F;&#x5EA6;&#x7406;&#x8BBA;&#x4E0A;&#x6765;&#x8BF4;&#x662F;&#x6CA1;&#x6709;&#x9650;&#x5236;&#x7684;&#xFF0C;&#x6B64;&#x5916;&#xFF0C;java&#x4E2D;&#x7684;&#x4FDD;&#x7559;&#x5B57;&#x662F;&#x4E0D;&#x80FD;&#x7528;&#x4F5C;&#x53D8;&#x91CF;&#x540D;&#x7684;&#xFF0C;&#x4FDD;&#x7559;&#x5B57;&#x4E5F;&#x5C31;&#x662F;java&#x4E2D;&#x7684;&#x5173;&#x952E;&#x5B57;&#xFF0C;&#x6BD4;&#x5982;&#x4E4B;&#x524D;&#x7684; <code>public</code>&#x3001;<code>static</code>&#x3001;<code>int</code>&#x3001;<code>void</code>&#x7B49;&#x7B49;&#xFF0C;&#x5728;&#x540E;&#x7EED;&#x7684;&#x5B66;&#x4E60;&#x4E2D;&#xFF0C;&#x4F1A;&#x4E0D;&#x65AD;&#x63A5;&#x89E6;&#x5230;&#x5404;&#x79CD;&#x5173;&#x952E;&#x5B57;&#x3002;</p>\n<p>&#x53D8;&#x91CF;&#x547D;&#x540D;&#x6700;&#x597D;&#x7B26;&#x5408;&#x5B83;&#x4F7F;&#x7528;&#x7684;&#x610F;&#x4E49;&#xFF0C;&#x80FD;&#x8868;&#x73B0;&#x5176;&#x4F5C;&#x7528;&#xFF0C;&#x56E0;&#x4E3A;&#x5F80;&#x5F80;&#x5728;&#x4E00;&#x4E2A;&#x7A0B;&#x5E8F;&#x4E2D;&#x4F1A;&#x51FA;&#x73B0;&#x975E;&#x5E38;&#x591A;&#x7684;&#x53D8;&#x91CF;&#xFF0C;&#x5982;&#x679C;&#x53D8;&#x91CF;&#x547D;&#x540D;&#x90FD;&#x50CF;<code>a1</code>&#x3001;<code>a2</code>&#x3001;<code>a3</code>&#x8FD9;&#x6837;&#x770B;&#x4E86;&#x8BA9;&#x4EBA;&#x6478;&#x4E0D;&#x7740;&#x5934;&#x8111;&#x7684;&#x5F62;&#x5F0F;&#xFF0C;&#x90A3;&#x4E48;&#x5C06;&#x4F7F;&#x5F97;&#x4EE3;&#x7801;&#x7684;&#x9605;&#x8BFB;&#x548C;&#x7EF4;&#x62A4;&#x53D8;&#x5F97;&#x5341;&#x5206;&#x56F0;&#x96BE;&#x3002;&#x6C38;&#x8FDC;&#x4E0D;&#x8981;&#x5FD8;&#x8BB0;&#xFF0C;&#x4EE3;&#x7801;&#x662F;&#x7528;&#x6765;&#x9605;&#x8BFB;&#x7684;&#x3002;</p>\n<p>&#x5728;Java&#x4E2D;&#xFF0C;&#x53D8;&#x91CF;&#x7684;&#x547D;&#x540D;&#x901A;&#x5E38;&#x4F7F;&#x7528;&#x5C0F;&#x9A7C;&#x5CF0;&#x547D;&#x540D;&#x6CD5;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x7B2C;&#x4E00;&#x4E2A;&#x5355;&#x8BCD;&#x7684;&#x9996;&#x5B57;&#x6BCD;&#x5C0F;&#x5199;&#xFF0C;&#x5176;&#x4F59;&#x5355;&#x8BCD;&#x7684;&#x9996;&#x5B57;&#x6BCD;&#x5927;&#x5199;&#xFF0C;&#x6BD4;&#x5982;&#xFF1A;<code>totalDays</code>&#x3001;<code>paperWidth</code>&#x3002;</p>\n<h2 id=\"&#x5C0F;&#x7ED3;\"><a href=\"#&#x5C0F;&#x7ED3;\" class=\"headerlink\" title=\"&#x5C0F;&#x7ED3;\"></a>&#x5C0F;&#x7ED3;</h2><p>&#x81F3;&#x6B64;&#xFF0C;&#x5173;&#x4E8E;&#x53D8;&#x91CF;&#x7684;&#x4ECB;&#x7ECD;&#x5C31;&#x7ED3;&#x675F;&#x4E86;&#xFF0C;&#x53D8;&#x91CF;&#x662F;Java&#x4E2D;&#x6700;&#x91CD;&#x8981;&#x4E5F;&#x662F;&#x6700;&#x57FA;&#x7840;&#x7684;&#x7EC4;&#x6210;&#x90E8;&#x5206;&#xFF0C;&#x5E0C;&#x671B;&#x4F60;&#x80FD;&#x5F88;&#x597D;&#x7684;&#x7406;&#x89E3;&#x548C;&#x638C;&#x63E1;&#x5B83;&#x3002;</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<blockquote>\n<p><strong>“The superior man makes the difficulty to be overcome his first interest; success comes only later.”</strong></p>\n<p>— William Jennings Bryan</p>\n<p><strong>「优秀的人将克服困难当做第一优先，成功只是之后的附带品。」</strong>    – 威廉‧詹宁斯‧布莱恩 (政客)</p>\n</blockquote>\n<h2 id=\"关卡说明\"><a href=\"#关卡说明\" class=\"headerlink\" title=\"关卡说明\"></a>关卡说明</h2><p>关卡描述：变量是Java程序中最常见的内容，是设计Java程序必不可少的部分。</p>\n<p>过关条件：理解什么是变量，为什么需要使用变量，以及如何使用它们</p>\n<p>关卡难度：⭐️</p>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>什么是变量？为什么要有变量？怎么使用它？</p>\n<p>如果你不能很好的回答这三个问题，那么就带着这些疑问来完成本次挑战吧，相信你必能有所收获。</p>\n<h3 id=\"什么是变量\"><a href=\"#什么是变量\" class=\"headerlink\" title=\"什么是变量\"></a>什么是变量</h3><p>在一个Java程序中，通常需要很多个步骤才能实现我们想要的功能，比如之前设计的计算器，就需要先提示用户输入，读取输入的值，然后再将它们相加后输出。我们日常生活中的事情也是类似的，拿吃饭而言，我们需要先把饭盛到碗里，然后再加点菜，再往嘴里塞。</p>\n<p>这里的碗就相当于变量，我们用它来盛饭，也就是存放中间过程的一些处理结果，饭是我们从锅里盛出来的，是经过我们处理过的。</p>\n<p>也许这样说还是有些抽象，我们继续看之前的栗子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    System.out.print(<span class=\"string\">\"请输入一个整数:\"</span>);</span><br><span class=\"line\">    Scanner in = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = in.nextInt();</span><br><span class=\"line\">    System.out.print(<span class=\"string\">\"请再输入一个整数:\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = in.nextInt();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = a + b;</span><br><span class=\"line\">    System.out.print(<span class=\"string\">\"这两个数的和为:\"</span> + sum);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在第三行，我们定义了一个变量<code>in</code>，用来存放Scanner实例引用，在第四行，我们定义了一个变量<code>a</code>，用来存放用户输入的第一个整数，第六行里我们又定义了一个变量<code>b</code>，用来接收用户输入的第二个整数，然后在第七行定义了一个变量<code>sum</code>，用来存放变量<code>a</code>和变量<code>b</code>的和。</p>\n<p>虽然是一个简单的程序，但是我们已经使用了四个变量，可见其应用的广泛性和重要性。变量就如同程序的血液，是一个程序能顺利运转的不可或缺的部分。</p>\n<h3 id=\"为什么需要变量\"><a href=\"#为什么需要变量\" class=\"headerlink\" title=\"为什么需要变量\"></a>为什么需要变量</h3><p>那么有没有可能不使用任何变量呢？其实也是可以的，比如这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    System.out.print(<span class=\"string\">\"我是一个最简单的程序，我不使用变量\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>emmm，毕竟这样的需求只是极少的一部分，绝大部分的应用还是比较繁杂的，所以变量便不可避免的需要使用。</p>\n<p>另外，使用变量还可以使得程序逻辑变得更加清晰，通过使用变量，将整个流程的步骤变得更加清晰明确。就好比说吃饭，不再是模糊的一个动作，而是分为盛饭，夹菜，吃饭这几个具体的步骤了。</p>\n<h3 id=\"如何使用变量\"><a href=\"#如何使用变量\" class=\"headerlink\" title=\"如何使用变量\"></a>如何使用变量</h3><p>要想使用变量，就必须先定义一个变量，或者说声明一个变量。声明变量的格式为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[类型名] + [变量名]</span><br></pre></td></tr></table></figure>\n<p>例如：<code>int a</code> 中 <code>int</code> 是变量的类型，<code>a</code> 是变量的名字。</p>\n<p>可以在声明变量的同时给它赋一个初始值，也可以在之后改变变量的值。声明变量之后，必须使用赋值语句对变量显式初始化，千万不要使用未初始化的变量，否则会被编译器视为错误的代码。</p>\n<p>想要对一个变量进行赋值，就需要将变量放在<code>=</code> 左边，然后将java表达式放在等号的右边。</p>\n<p>举个小栗子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"变量a的值为：\"</span> + a);</span><br><span class=\"line\">    a = <span class=\"number\">2</span>;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"变量a的值为：\"</span> + a);</span><br><span class=\"line\">    a = <span class=\"number\">3</span>;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"变量a的值为：\"</span> + a);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"变量b的值为：\"</span> + b);</span><br><span class=\"line\">    b = a;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"变量b的值为：\"</span> + b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么程序将会输出：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">变量a的值为：<span class=\"number\">1</span></span><br><span class=\"line\">变量a的值为：<span class=\"number\">2</span></span><br><span class=\"line\">变量a的值为：<span class=\"number\">3</span></span><br><span class=\"line\">变量b的值为：<span class=\"number\">0</span></span><br><span class=\"line\">变量b的值为：<span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<p>补充说明一下，<code>System.out.println</code> 与 <code>System.out.print</code> 的区别是，前者会在内容输出完成之后添加一个换行。</p>\n<h3 id=\"变量的命名规范\"><a href=\"#变量的命名规范\" class=\"headerlink\" title=\"变量的命名规范\"></a>变量的命名规范</h3><p>变量名必须以字母开头，并且由字母、数字或者下划线和$构成，对于长度理论上来说是没有限制的，此外，java中的保留字是不能用作变量名的，保留字也就是java中的关键字，比如之前的 <code>public</code>、<code>static</code>、<code>int</code>、<code>void</code>等等，在后续的学习中，会不断接触到各种关键字。</p>\n<p>变量命名最好符合它使用的意义，能表现其作用，因为往往在一个程序中会出现非常多的变量，如果变量命名都像<code>a1</code>、<code>a2</code>、<code>a3</code>这样看了让人摸不着头脑的形式，那么将使得代码的阅读和维护变得十分困难。永远不要忘记，代码是用来阅读的。</p>\n<p>在Java中，变量的命名通常使用小驼峰命名法，也就是第一个单词的首字母小写，其余单词的首字母大写，比如：<code>totalDays</code>、<code>paperWidth</code>。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>至此，关于变量的介绍就结束了，变量是Java中最重要也是最基础的组成部分，希望你能很好的理解和掌握它。</p>\n"},{"title":"Java 程序基本结构","date":"2018-12-28T16:02:00.000Z","_content":"\n>“No matter how small and unimportant what we are doing may seem, if we do it well, it may soon become the step that will lead us to better things.”\t\t\t\t— Channing Pollock, Writer\n>\n>「不管我们现在所做的事看起来有么的微不足道或不重要，如果我们认真的做，它可能很快就会成为通往美好事物的踏石阶。」\t\t\t\t\t\t\t\t– 詹宁‧布鲁克 (作家)\n\n## 关卡说明\n\n关卡描述：Java程序具有一些固定的形式，本篇将来对此进行简单的说明介绍。\n\n过关条件：理解Java程序的基本组成结构\n\n关卡难度：⭐️\n\n## 一个简单的程序\n\n为了简单起见，本篇以及之后的很多篇里，都会设计很多“玩具”代码，与实际中Java的设计可能相去甚远，本系列中的代示例都是为了说明一些相关概念，让你能够更好的理解Java的相关特性。\n\n下面再来看看上一篇中的栗子：\n\n```java\npackage hello;\n\nimport java.util.Scanner;\n\npublic class SimpleCalculator {\n    public static void main(String[] args){\n        System.out.print(\"请输入一个整数:\");\n        Scanner in = new Scanner(System.in);\n        int a = in.nextInt();\n        System.out.print(\"请再输入一个整数:\");\n        int b = in.nextInt();\n        int sum = a + b;\n        System.out.print(\"这两个数的和为:\" + sum);\n    }\n}\n```\n\n这是一个非常简单的能够运行的Java程序，它有一些基本的结构，下面将对其一一介绍。\n\n前面两句的作用已经在[上一篇](../introduction/java-package.md)中进行说明了，这里就不赘述了。接下来是类的定义：\n\n```java\npublic class SimpleCalculator {\n    ...\n}\n```\n\n这里是定义了一个叫做`SimpleCalculator`的类，`public` 称为*访问修饰符*，用于控制代码的访问级别，关于这部分的内容，会在之后的章节中进行详细的介绍。在这里，`public` 表示这个类的访问权限为任何外部类均可以访问。`class` 是定义一个类的关键字，它的后面是类。关于类的命名规范在之后也会有详细说明。不要忘了后面还有一对大括号，表示类的内部内容。\n\n需要注意的是，**Java是区分大小写的**，如果出现了大小写拼写错误，程序是无法正确运行的。\n\n```java\npublic static void main(String[] args){\n    ...\n}\n```\n\n在类的内部定义了一个main方法，为什么说它是一个方法而不是类呢？因为它位于一个类的内部，并且没有用class关键字修饰，而且符合方法的定义规范。`public`同样可以修饰方法，表示这个方法对于外部类是公开的，可以访问的，`static`表示这是一个静态方法（先不要纠结什么是静态方法），`void`表示这个方法的返回值类型，`main`为方法名，后面跟上一对小括号，里面是参数列表，这里为`String[] args`，表示它接受一个String数组作为参数，`args`为参数名。\n\n也许上面还有许多概念你还不清楚是什么意思，不要着急，先不要纠结于这些细节，先从整体上把握，继续看下去，后面的文章中会有说明。\n\n需要注意的是，`main`方法是java程序中一个十分特殊的方法，它是整个程序的入口，也就是说，程序会从`main`方法开始执行，因此，如果想要代码能够执行，在类的源文件中必须包含一个`main`方法。\n\n方法中的方法体则是我们为了实现功能而设计的自定义代码，在Java中，每个句子必须用分号结束。\n\n```java\nSystem.out.print(\"请输入一个整数:\");\nScanner in = new Scanner(System.in);\nint a = in.nextInt();\nSystem.out.print(\"请再输入一个整数:\");\nint b = in.nextInt();\nint sum = a + b;\nSystem.out.print(\"这两个数的和为:\" + sum);\n```\n\nJava中，点号是用来调用方法或者使用对象的，如：`System.out.print(...)`表示使用`System.out`对象并调用它的`print`方法。\n\n至此，本篇的Java的基本结构就介绍完毕了，希望通过本篇，你能知道一个简单Java程序的结构是怎样的以及main方法有什么作用。\n","source":"_posts/java/basic/java-simple-structure.md","raw":"---\ntitle: Java 程序基本结构\ntags: \n - Java基础\n - Java\ncategories: 编程\ndate: 2018-12-29 00:02:00\n---\n\n>“No matter how small and unimportant what we are doing may seem, if we do it well, it may soon become the step that will lead us to better things.”\t\t\t\t— Channing Pollock, Writer\n>\n>「不管我们现在所做的事看起来有么的微不足道或不重要，如果我们认真的做，它可能很快就会成为通往美好事物的踏石阶。」\t\t\t\t\t\t\t\t– 詹宁‧布鲁克 (作家)\n\n## 关卡说明\n\n关卡描述：Java程序具有一些固定的形式，本篇将来对此进行简单的说明介绍。\n\n过关条件：理解Java程序的基本组成结构\n\n关卡难度：⭐️\n\n## 一个简单的程序\n\n为了简单起见，本篇以及之后的很多篇里，都会设计很多“玩具”代码，与实际中Java的设计可能相去甚远，本系列中的代示例都是为了说明一些相关概念，让你能够更好的理解Java的相关特性。\n\n下面再来看看上一篇中的栗子：\n\n```java\npackage hello;\n\nimport java.util.Scanner;\n\npublic class SimpleCalculator {\n    public static void main(String[] args){\n        System.out.print(\"请输入一个整数:\");\n        Scanner in = new Scanner(System.in);\n        int a = in.nextInt();\n        System.out.print(\"请再输入一个整数:\");\n        int b = in.nextInt();\n        int sum = a + b;\n        System.out.print(\"这两个数的和为:\" + sum);\n    }\n}\n```\n\n这是一个非常简单的能够运行的Java程序，它有一些基本的结构，下面将对其一一介绍。\n\n前面两句的作用已经在[上一篇](../introduction/java-package.md)中进行说明了，这里就不赘述了。接下来是类的定义：\n\n```java\npublic class SimpleCalculator {\n    ...\n}\n```\n\n这里是定义了一个叫做`SimpleCalculator`的类，`public` 称为*访问修饰符*，用于控制代码的访问级别，关于这部分的内容，会在之后的章节中进行详细的介绍。在这里，`public` 表示这个类的访问权限为任何外部类均可以访问。`class` 是定义一个类的关键字，它的后面是类。关于类的命名规范在之后也会有详细说明。不要忘了后面还有一对大括号，表示类的内部内容。\n\n需要注意的是，**Java是区分大小写的**，如果出现了大小写拼写错误，程序是无法正确运行的。\n\n```java\npublic static void main(String[] args){\n    ...\n}\n```\n\n在类的内部定义了一个main方法，为什么说它是一个方法而不是类呢？因为它位于一个类的内部，并且没有用class关键字修饰，而且符合方法的定义规范。`public`同样可以修饰方法，表示这个方法对于外部类是公开的，可以访问的，`static`表示这是一个静态方法（先不要纠结什么是静态方法），`void`表示这个方法的返回值类型，`main`为方法名，后面跟上一对小括号，里面是参数列表，这里为`String[] args`，表示它接受一个String数组作为参数，`args`为参数名。\n\n也许上面还有许多概念你还不清楚是什么意思，不要着急，先不要纠结于这些细节，先从整体上把握，继续看下去，后面的文章中会有说明。\n\n需要注意的是，`main`方法是java程序中一个十分特殊的方法，它是整个程序的入口，也就是说，程序会从`main`方法开始执行，因此，如果想要代码能够执行，在类的源文件中必须包含一个`main`方法。\n\n方法中的方法体则是我们为了实现功能而设计的自定义代码，在Java中，每个句子必须用分号结束。\n\n```java\nSystem.out.print(\"请输入一个整数:\");\nScanner in = new Scanner(System.in);\nint a = in.nextInt();\nSystem.out.print(\"请再输入一个整数:\");\nint b = in.nextInt();\nint sum = a + b;\nSystem.out.print(\"这两个数的和为:\" + sum);\n```\n\nJava中，点号是用来调用方法或者使用对象的，如：`System.out.print(...)`表示使用`System.out`对象并调用它的`print`方法。\n\n至此，本篇的Java的基本结构就介绍完毕了，希望通过本篇，你能知道一个简单Java程序的结构是怎样的以及main方法有什么作用。\n","slug":"java/basic/java-simple-structure","published":1,"updated":"2018-12-28T10:37:23.821Z","_id":"cjq7rm5ps001hwu9k02afcstq","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>&#x201C;No matter how small and unimportant what we are doing may seem, if we do it well, it may soon become the step that will lead us to better things.&#x201D;                &#x2014; Channing Pollock, Writer</p>\n<p>&#x300C;&#x4E0D;&#x7BA1;&#x6211;&#x4EEC;&#x73B0;&#x5728;&#x6240;&#x505A;&#x7684;&#x4E8B;&#x770B;&#x8D77;&#x6765;&#x6709;&#x4E48;&#x7684;&#x5FAE;&#x4E0D;&#x8DB3;&#x9053;&#x6216;&#x4E0D;&#x91CD;&#x8981;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x8BA4;&#x771F;&#x7684;&#x505A;&#xFF0C;&#x5B83;&#x53EF;&#x80FD;&#x5F88;&#x5FEB;&#x5C31;&#x4F1A;&#x6210;&#x4E3A;&#x901A;&#x5F80;&#x7F8E;&#x597D;&#x4E8B;&#x7269;&#x7684;&#x8E0F;&#x77F3;&#x9636;&#x3002;&#x300D;                                &#x2013; &#x8A79;&#x5B81;&#x2027;&#x5E03;&#x9C81;&#x514B; (&#x4F5C;&#x5BB6;)</p>\n</blockquote>\n<h2 id=\"&#x5173;&#x5361;&#x8BF4;&#x660E;\"><a href=\"#&#x5173;&#x5361;&#x8BF4;&#x660E;\" class=\"headerlink\" title=\"&#x5173;&#x5361;&#x8BF4;&#x660E;\"></a>&#x5173;&#x5361;&#x8BF4;&#x660E;</h2><p>&#x5173;&#x5361;&#x63CF;&#x8FF0;&#xFF1A;Java&#x7A0B;&#x5E8F;&#x5177;&#x6709;&#x4E00;&#x4E9B;&#x56FA;&#x5B9A;&#x7684;&#x5F62;&#x5F0F;&#xFF0C;&#x672C;&#x7BC7;&#x5C06;&#x6765;&#x5BF9;&#x6B64;&#x8FDB;&#x884C;&#x7B80;&#x5355;&#x7684;&#x8BF4;&#x660E;&#x4ECB;&#x7ECD;&#x3002;</p>\n<p>&#x8FC7;&#x5173;&#x6761;&#x4EF6;&#xFF1A;&#x7406;&#x89E3;Java&#x7A0B;&#x5E8F;&#x7684;&#x57FA;&#x672C;&#x7EC4;&#x6210;&#x7ED3;&#x6784;</p>\n<p>&#x5173;&#x5361;&#x96BE;&#x5EA6;&#xFF1A;&#x2B50;&#xFE0F;</p>\n<h2 id=\"&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x7A0B;&#x5E8F;\"><a href=\"#&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x7A0B;&#x5E8F;\" class=\"headerlink\" title=\"&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x7A0B;&#x5E8F;\"></a>&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x7A0B;&#x5E8F;</h2><p>&#x4E3A;&#x4E86;&#x7B80;&#x5355;&#x8D77;&#x89C1;&#xFF0C;&#x672C;&#x7BC7;&#x4EE5;&#x53CA;&#x4E4B;&#x540E;&#x7684;&#x5F88;&#x591A;&#x7BC7;&#x91CC;&#xFF0C;&#x90FD;&#x4F1A;&#x8BBE;&#x8BA1;&#x5F88;&#x591A;&#x201C;&#x73A9;&#x5177;&#x201D;&#x4EE3;&#x7801;&#xFF0C;&#x4E0E;&#x5B9E;&#x9645;&#x4E2D;Java&#x7684;&#x8BBE;&#x8BA1;&#x53EF;&#x80FD;&#x76F8;&#x53BB;&#x751A;&#x8FDC;&#xFF0C;&#x672C;&#x7CFB;&#x5217;&#x4E2D;&#x7684;&#x4EE3;&#x793A;&#x4F8B;&#x90FD;&#x662F;&#x4E3A;&#x4E86;&#x8BF4;&#x660E;&#x4E00;&#x4E9B;&#x76F8;&#x5173;&#x6982;&#x5FF5;&#xFF0C;&#x8BA9;&#x4F60;&#x80FD;&#x591F;&#x66F4;&#x597D;&#x7684;&#x7406;&#x89E3;Java&#x7684;&#x76F8;&#x5173;&#x7279;&#x6027;&#x3002;</p>\n<p>&#x4E0B;&#x9762;&#x518D;&#x6765;&#x770B;&#x770B;&#x4E0A;&#x4E00;&#x7BC7;&#x4E2D;&#x7684;&#x6817;&#x5B50;&#xFF1A;</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> hello;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleCalculator</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>{</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;&#x8BF7;&#x8F93;&#x5165;&#x4E00;&#x4E2A;&#x6574;&#x6570;:&quot;</span>);</span><br><span class=\"line\">        Scanner in = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = in.nextInt();</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;&#x8BF7;&#x518D;&#x8F93;&#x5165;&#x4E00;&#x4E2A;&#x6574;&#x6570;:&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> b = in.nextInt();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = a + b;</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;&#x8FD9;&#x4E24;&#x4E2A;&#x6570;&#x7684;&#x548C;&#x4E3A;:&quot;</span> + sum);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x975E;&#x5E38;&#x7B80;&#x5355;&#x7684;&#x80FD;&#x591F;&#x8FD0;&#x884C;&#x7684;Java&#x7A0B;&#x5E8F;&#xFF0C;&#x5B83;&#x6709;&#x4E00;&#x4E9B;&#x57FA;&#x672C;&#x7684;&#x7ED3;&#x6784;&#xFF0C;&#x4E0B;&#x9762;&#x5C06;&#x5BF9;&#x5176;&#x4E00;&#x4E00;&#x4ECB;&#x7ECD;&#x3002;</p>\n<p>&#x524D;&#x9762;&#x4E24;&#x53E5;&#x7684;&#x4F5C;&#x7528;&#x5DF2;&#x7ECF;&#x5728;<a href=\"../introduction/java-package.md\">&#x4E0A;&#x4E00;&#x7BC7;</a>&#x4E2D;&#x8FDB;&#x884C;&#x8BF4;&#x660E;&#x4E86;&#xFF0C;&#x8FD9;&#x91CC;&#x5C31;&#x4E0D;&#x8D58;&#x8FF0;&#x4E86;&#x3002;&#x63A5;&#x4E0B;&#x6765;&#x662F;&#x7C7B;&#x7684;&#x5B9A;&#x4E49;&#xFF1A;</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleCalculator</span> </span>{</span><br><span class=\"line\">    ...</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>&#x8FD9;&#x91CC;&#x662F;&#x5B9A;&#x4E49;&#x4E86;&#x4E00;&#x4E2A;&#x53EB;&#x505A;<code>SimpleCalculator</code>&#x7684;&#x7C7B;&#xFF0C;<code>public</code> &#x79F0;&#x4E3A;<em>&#x8BBF;&#x95EE;&#x4FEE;&#x9970;&#x7B26;</em>&#xFF0C;&#x7528;&#x4E8E;&#x63A7;&#x5236;&#x4EE3;&#x7801;&#x7684;&#x8BBF;&#x95EE;&#x7EA7;&#x522B;&#xFF0C;&#x5173;&#x4E8E;&#x8FD9;&#x90E8;&#x5206;&#x7684;&#x5185;&#x5BB9;&#xFF0C;&#x4F1A;&#x5728;&#x4E4B;&#x540E;&#x7684;&#x7AE0;&#x8282;&#x4E2D;&#x8FDB;&#x884C;&#x8BE6;&#x7EC6;&#x7684;&#x4ECB;&#x7ECD;&#x3002;&#x5728;&#x8FD9;&#x91CC;&#xFF0C;<code>public</code> &#x8868;&#x793A;&#x8FD9;&#x4E2A;&#x7C7B;&#x7684;&#x8BBF;&#x95EE;&#x6743;&#x9650;&#x4E3A;&#x4EFB;&#x4F55;&#x5916;&#x90E8;&#x7C7B;&#x5747;&#x53EF;&#x4EE5;&#x8BBF;&#x95EE;&#x3002;<code>class</code> &#x662F;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x7C7B;&#x7684;&#x5173;&#x952E;&#x5B57;&#xFF0C;&#x5B83;&#x7684;&#x540E;&#x9762;&#x662F;&#x7C7B;&#x3002;&#x5173;&#x4E8E;&#x7C7B;&#x7684;&#x547D;&#x540D;&#x89C4;&#x8303;&#x5728;&#x4E4B;&#x540E;&#x4E5F;&#x4F1A;&#x6709;&#x8BE6;&#x7EC6;&#x8BF4;&#x660E;&#x3002;&#x4E0D;&#x8981;&#x5FD8;&#x4E86;&#x540E;&#x9762;&#x8FD8;&#x6709;&#x4E00;&#x5BF9;&#x5927;&#x62EC;&#x53F7;&#xFF0C;&#x8868;&#x793A;&#x7C7B;&#x7684;&#x5185;&#x90E8;&#x5185;&#x5BB9;&#x3002;</p>\n<p>&#x9700;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;<strong>Java&#x662F;&#x533A;&#x5206;&#x5927;&#x5C0F;&#x5199;&#x7684;</strong>&#xFF0C;&#x5982;&#x679C;&#x51FA;&#x73B0;&#x4E86;&#x5927;&#x5C0F;&#x5199;&#x62FC;&#x5199;&#x9519;&#x8BEF;&#xFF0C;&#x7A0B;&#x5E8F;&#x662F;&#x65E0;&#x6CD5;&#x6B63;&#x786E;&#x8FD0;&#x884C;&#x7684;&#x3002;</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>{</span><br><span class=\"line\">    ...</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>&#x5728;&#x7C7B;&#x7684;&#x5185;&#x90E8;&#x5B9A;&#x4E49;&#x4E86;&#x4E00;&#x4E2A;main&#x65B9;&#x6CD5;&#xFF0C;&#x4E3A;&#x4EC0;&#x4E48;&#x8BF4;&#x5B83;&#x662F;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#x800C;&#x4E0D;&#x662F;&#x7C7B;&#x5462;&#xFF1F;&#x56E0;&#x4E3A;&#x5B83;&#x4F4D;&#x4E8E;&#x4E00;&#x4E2A;&#x7C7B;&#x7684;&#x5185;&#x90E8;&#xFF0C;&#x5E76;&#x4E14;&#x6CA1;&#x6709;&#x7528;class&#x5173;&#x952E;&#x5B57;&#x4FEE;&#x9970;&#xFF0C;&#x800C;&#x4E14;&#x7B26;&#x5408;&#x65B9;&#x6CD5;&#x7684;&#x5B9A;&#x4E49;&#x89C4;&#x8303;&#x3002;<code>public</code>&#x540C;&#x6837;&#x53EF;&#x4EE5;&#x4FEE;&#x9970;&#x65B9;&#x6CD5;&#xFF0C;&#x8868;&#x793A;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x5BF9;&#x4E8E;&#x5916;&#x90E8;&#x7C7B;&#x662F;&#x516C;&#x5F00;&#x7684;&#xFF0C;&#x53EF;&#x4EE5;&#x8BBF;&#x95EE;&#x7684;&#xFF0C;<code>static</code>&#x8868;&#x793A;&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x9759;&#x6001;&#x65B9;&#x6CD5;&#xFF08;&#x5148;&#x4E0D;&#x8981;&#x7EA0;&#x7ED3;&#x4EC0;&#x4E48;&#x662F;&#x9759;&#x6001;&#x65B9;&#x6CD5;&#xFF09;&#xFF0C;<code>void</code>&#x8868;&#x793A;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x7684;&#x8FD4;&#x56DE;&#x503C;&#x7C7B;&#x578B;&#xFF0C;<code>main</code>&#x4E3A;&#x65B9;&#x6CD5;&#x540D;&#xFF0C;&#x540E;&#x9762;&#x8DDF;&#x4E0A;&#x4E00;&#x5BF9;&#x5C0F;&#x62EC;&#x53F7;&#xFF0C;&#x91CC;&#x9762;&#x662F;&#x53C2;&#x6570;&#x5217;&#x8868;&#xFF0C;&#x8FD9;&#x91CC;&#x4E3A;<code>String[] args</code>&#xFF0C;&#x8868;&#x793A;&#x5B83;&#x63A5;&#x53D7;&#x4E00;&#x4E2A;String&#x6570;&#x7EC4;&#x4F5C;&#x4E3A;&#x53C2;&#x6570;&#xFF0C;<code>args</code>&#x4E3A;&#x53C2;&#x6570;&#x540D;&#x3002;</p>\n<p>&#x4E5F;&#x8BB8;&#x4E0A;&#x9762;&#x8FD8;&#x6709;&#x8BB8;&#x591A;&#x6982;&#x5FF5;&#x4F60;&#x8FD8;&#x4E0D;&#x6E05;&#x695A;&#x662F;&#x4EC0;&#x4E48;&#x610F;&#x601D;&#xFF0C;&#x4E0D;&#x8981;&#x7740;&#x6025;&#xFF0C;&#x5148;&#x4E0D;&#x8981;&#x7EA0;&#x7ED3;&#x4E8E;&#x8FD9;&#x4E9B;&#x7EC6;&#x8282;&#xFF0C;&#x5148;&#x4ECE;&#x6574;&#x4F53;&#x4E0A;&#x628A;&#x63E1;&#xFF0C;&#x7EE7;&#x7EED;&#x770B;&#x4E0B;&#x53BB;&#xFF0C;&#x540E;&#x9762;&#x7684;&#x6587;&#x7AE0;&#x4E2D;&#x4F1A;&#x6709;&#x8BF4;&#x660E;&#x3002;</p>\n<p>&#x9700;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;<code>main</code>&#x65B9;&#x6CD5;&#x662F;java&#x7A0B;&#x5E8F;&#x4E2D;&#x4E00;&#x4E2A;&#x5341;&#x5206;&#x7279;&#x6B8A;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x5B83;&#x662F;&#x6574;&#x4E2A;&#x7A0B;&#x5E8F;&#x7684;&#x5165;&#x53E3;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x7A0B;&#x5E8F;&#x4F1A;&#x4ECE;<code>main</code>&#x65B9;&#x6CD5;&#x5F00;&#x59CB;&#x6267;&#x884C;&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;&#x5982;&#x679C;&#x60F3;&#x8981;&#x4EE3;&#x7801;&#x80FD;&#x591F;&#x6267;&#x884C;&#xFF0C;&#x5728;&#x7C7B;&#x7684;&#x6E90;&#x6587;&#x4EF6;&#x4E2D;&#x5FC5;&#x987B;&#x5305;&#x542B;&#x4E00;&#x4E2A;<code>main</code>&#x65B9;&#x6CD5;&#x3002;</p>\n<p>&#x65B9;&#x6CD5;&#x4E2D;&#x7684;&#x65B9;&#x6CD5;&#x4F53;&#x5219;&#x662F;&#x6211;&#x4EEC;&#x4E3A;&#x4E86;&#x5B9E;&#x73B0;&#x529F;&#x80FD;&#x800C;&#x8BBE;&#x8BA1;&#x7684;&#x81EA;&#x5B9A;&#x4E49;&#x4EE3;&#x7801;&#xFF0C;&#x5728;Java&#x4E2D;&#xFF0C;&#x6BCF;&#x4E2A;&#x53E5;&#x5B50;&#x5FC5;&#x987B;&#x7528;&#x5206;&#x53F7;&#x7ED3;&#x675F;&#x3002;</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.print(<span class=\"string\">&quot;&#x8BF7;&#x8F93;&#x5165;&#x4E00;&#x4E2A;&#x6574;&#x6570;:&quot;</span>);</span><br><span class=\"line\">Scanner in = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\"><span class=\"keyword\">int</span> a = in.nextInt();</span><br><span class=\"line\">System.out.print(<span class=\"string\">&quot;&#x8BF7;&#x518D;&#x8F93;&#x5165;&#x4E00;&#x4E2A;&#x6574;&#x6570;:&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = in.nextInt();</span><br><span class=\"line\"><span class=\"keyword\">int</span> sum = a + b;</span><br><span class=\"line\">System.out.print(<span class=\"string\">&quot;&#x8FD9;&#x4E24;&#x4E2A;&#x6570;&#x7684;&#x548C;&#x4E3A;:&quot;</span> + sum);</span><br></pre></td></tr></tbody></table></figure>\n<p>Java&#x4E2D;&#xFF0C;&#x70B9;&#x53F7;&#x662F;&#x7528;&#x6765;&#x8C03;&#x7528;&#x65B9;&#x6CD5;&#x6216;&#x8005;&#x4F7F;&#x7528;&#x5BF9;&#x8C61;&#x7684;&#xFF0C;&#x5982;&#xFF1A;<code>System.out.print(...)</code>&#x8868;&#x793A;&#x4F7F;&#x7528;<code>System.out</code>&#x5BF9;&#x8C61;&#x5E76;&#x8C03;&#x7528;&#x5B83;&#x7684;<code>print</code>&#x65B9;&#x6CD5;&#x3002;</p>\n<p>&#x81F3;&#x6B64;&#xFF0C;&#x672C;&#x7BC7;&#x7684;Java&#x7684;&#x57FA;&#x672C;&#x7ED3;&#x6784;&#x5C31;&#x4ECB;&#x7ECD;&#x5B8C;&#x6BD5;&#x4E86;&#xFF0C;&#x5E0C;&#x671B;&#x901A;&#x8FC7;&#x672C;&#x7BC7;&#xFF0C;&#x4F60;&#x80FD;&#x77E5;&#x9053;&#x4E00;&#x4E2A;&#x7B80;&#x5355;Java&#x7A0B;&#x5E8F;&#x7684;&#x7ED3;&#x6784;&#x662F;&#x600E;&#x6837;&#x7684;&#x4EE5;&#x53CA;main&#x65B9;&#x6CD5;&#x6709;&#x4EC0;&#x4E48;&#x4F5C;&#x7528;&#x3002;</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<blockquote>\n<p>“No matter how small and unimportant what we are doing may seem, if we do it well, it may soon become the step that will lead us to better things.”                — Channing Pollock, Writer</p>\n<p>「不管我们现在所做的事看起来有么的微不足道或不重要，如果我们认真的做，它可能很快就会成为通往美好事物的踏石阶。」                                – 詹宁‧布鲁克 (作家)</p>\n</blockquote>\n<h2 id=\"关卡说明\"><a href=\"#关卡说明\" class=\"headerlink\" title=\"关卡说明\"></a>关卡说明</h2><p>关卡描述：Java程序具有一些固定的形式，本篇将来对此进行简单的说明介绍。</p>\n<p>过关条件：理解Java程序的基本组成结构</p>\n<p>关卡难度：⭐️</p>\n<h2 id=\"一个简单的程序\"><a href=\"#一个简单的程序\" class=\"headerlink\" title=\"一个简单的程序\"></a>一个简单的程序</h2><p>为了简单起见，本篇以及之后的很多篇里，都会设计很多“玩具”代码，与实际中Java的设计可能相去甚远，本系列中的代示例都是为了说明一些相关概念，让你能够更好的理解Java的相关特性。</p>\n<p>下面再来看看上一篇中的栗子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> hello;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleCalculator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        System.out.print(<span class=\"string\">\"请输入一个整数:\"</span>);</span><br><span class=\"line\">        Scanner in = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = in.nextInt();</span><br><span class=\"line\">        System.out.print(<span class=\"string\">\"请再输入一个整数:\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> b = in.nextInt();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = a + b;</span><br><span class=\"line\">        System.out.print(<span class=\"string\">\"这两个数的和为:\"</span> + sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是一个非常简单的能够运行的Java程序，它有一些基本的结构，下面将对其一一介绍。</p>\n<p>前面两句的作用已经在<a href=\"../introduction/java-package.md\">上一篇</a>中进行说明了，这里就不赘述了。接下来是类的定义：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleCalculator</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里是定义了一个叫做<code>SimpleCalculator</code>的类，<code>public</code> 称为<em>访问修饰符</em>，用于控制代码的访问级别，关于这部分的内容，会在之后的章节中进行详细的介绍。在这里，<code>public</code> 表示这个类的访问权限为任何外部类均可以访问。<code>class</code> 是定义一个类的关键字，它的后面是类。关于类的命名规范在之后也会有详细说明。不要忘了后面还有一对大括号，表示类的内部内容。</p>\n<p>需要注意的是，<strong>Java是区分大小写的</strong>，如果出现了大小写拼写错误，程序是无法正确运行的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在类的内部定义了一个main方法，为什么说它是一个方法而不是类呢？因为它位于一个类的内部，并且没有用class关键字修饰，而且符合方法的定义规范。<code>public</code>同样可以修饰方法，表示这个方法对于外部类是公开的，可以访问的，<code>static</code>表示这是一个静态方法（先不要纠结什么是静态方法），<code>void</code>表示这个方法的返回值类型，<code>main</code>为方法名，后面跟上一对小括号，里面是参数列表，这里为<code>String[] args</code>，表示它接受一个String数组作为参数，<code>args</code>为参数名。</p>\n<p>也许上面还有许多概念你还不清楚是什么意思，不要着急，先不要纠结于这些细节，先从整体上把握，继续看下去，后面的文章中会有说明。</p>\n<p>需要注意的是，<code>main</code>方法是java程序中一个十分特殊的方法，它是整个程序的入口，也就是说，程序会从<code>main</code>方法开始执行，因此，如果想要代码能够执行，在类的源文件中必须包含一个<code>main</code>方法。</p>\n<p>方法中的方法体则是我们为了实现功能而设计的自定义代码，在Java中，每个句子必须用分号结束。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.print(<span class=\"string\">\"请输入一个整数:\"</span>);</span><br><span class=\"line\">Scanner in = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\"><span class=\"keyword\">int</span> a = in.nextInt();</span><br><span class=\"line\">System.out.print(<span class=\"string\">\"请再输入一个整数:\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = in.nextInt();</span><br><span class=\"line\"><span class=\"keyword\">int</span> sum = a + b;</span><br><span class=\"line\">System.out.print(<span class=\"string\">\"这两个数的和为:\"</span> + sum);</span><br></pre></td></tr></table></figure>\n<p>Java中，点号是用来调用方法或者使用对象的，如：<code>System.out.print(...)</code>表示使用<code>System.out</code>对象并调用它的<code>print</code>方法。</p>\n<p>至此，本篇的Java的基本结构就介绍完毕了，希望通过本篇，你能知道一个简单Java程序的结构是怎样的以及main方法有什么作用。</p>\n"},{"_content":"# WeakHashMap源码详解\n\n::: tip\n源码详解系列均基于`JDK8`进行解析\n:::\n\n## 说明\n\n在Java容器详解系列文章的最后，介绍一个相对特殊的成员：*WeakHashMap*，从名字可以看出它是一个 *Map*。它的使用上跟HashMap并没有什么区别，所以很多地方这里就不做过多介绍了，可以翻看一下前面HashMap中的内容。本篇主要介绍它与HashMap的不同之处。\n\n*WeakHashMap* 特殊之处在于 *WeakHashMap* 里的`entry`可能会被垃圾回收器自动删除，也就是说即使你没有调用`remove()`或者`clear()`方法，它的entry也可能会慢慢变少。所以多次调用比如isEmpty，containsKey，size等方法时可能会返回不同的结果。\n\n接下来希望能带着这么几个问题来进行阅读：\n\n1、WeakHashMap中的Entry为什么会自动被回收。\n\n2、WeakHashMap与HashMap的区别是什么。\n\n3、WeakHashMap的引用场景有哪些。\n\n## WeakHashMap探秘\n\n从说明可以看出，WeakHashMap的特殊之处便在于它的Entry与众不同，里面的Entry会被垃圾回收器自动回收，那么问题来了，为什么会被自动回收呢？HashMap里的Entry并不会被自动回收，除非把它从Map中移除掉。\n\n其实这个秘密就在于[弱引用](../reference/weak-reference.md)，WeakHashMap中的key是间接保存在弱引用中的，所以当key没有被继续使用时，就可能会在GC的时候被回收掉。\n\n::: warning \n只有key对象是使用弱引用保存的，value对象实际上仍旧是通过普通的强引用来保持的，所以应该确保value不会直接或者间接的保持其对应key的强引用，因为这样会阻止key被回收。\n:::\n\n如果对于引用类型不熟悉的话，可以先阅读[这篇文章](../reference/four-kinds-of-reference.md)。\n\n下面来从源码角度看看具体是如何实现这个特性的。\n\n## 继承结构\n\n![weakhashmap-1](./weakhashmap-1.png)\n\nWeakHashMap并不是继承自HashMap，而是继承自AbstractMap，跟HashMap的继承结构差不多。\n\n## 存储结构\n\nWeakHashMap中的数据结构是数组+链表的形式，这一点跟HashMap也是一致的，但不同的是，在JDK8中，当发生较多key冲突的时候，HashMap中会由链表转为红黑树，而WeakHashMap则一直使用链表进行存储。\n\n![weakhashmap-1](./weakhashmap-4.png)\n\n## 成员变量\n\n```java\n// 默认初始容量，必须是2的幂\nprivate static final int DEFAULT_INITIAL_CAPACITY = 16;\n\n// 最大容量\nprivate static final int MAXIMUM_CAPACITY = 1 << 30;\n\n// 默认装载因子\nprivate static final float DEFAULT_LOAD_FACTOR = 0.75f;\n\n// Entry数组，长度必须为2的幂\nEntry<K,V>[] table;\n\n// 元素个数\nprivate int size;\n\n// 阈值 \nprivate int threshold;\n\n// 装载因子\nprivate final float loadFactor;\n\n// 引用队列\nprivate final ReferenceQueue<Object> queue = new ReferenceQueue<>();\n\n// 修改次数\nint modCount;\n```\n\n跟HashMap的成员变量几乎一致，这里多了一个ReferenceQueue，用来存放那些已经被回收了的弱引用对象。如果想知道ReferenceQueue是如何工作的，可以参考[这篇文章](../reference/reference-queue-code-detail.md)。\n\n## 构造函数\n\nWeakHashMap中也有四个构造函数：\n\n```java\npublic WeakHashMap(int initialCapacity, float loadFactor) {\n\t...\n}\n\npublic WeakHashMap(int initialCapacity) {\n    this(initialCapacity, DEFAULT_LOAD_FACTOR);\n}\n\npublic WeakHashMap() {\n    this(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR);\n}\n\npublic WeakHashMap(Map<? extends K, ? extends V> m) {\n    this(Math.max((int) (m.size() / DEFAULT_LOAD_FACTOR) + 1,\n                  DEFAULT_INITIAL_CAPACITY),\n         DEFAULT_LOAD_FACTOR);\n    putAll(m);\n}\n```\n\n可以看到后三个，都是调用的第一个构造函数，下面再来看一下第一个构造函数的内容：\n\n```java\n// 校验initialCapacity\nif (initialCapacity < 0)\n    throw new IllegalArgumentException(\"Illegal Initial Capacity: \"+\n                                       initialCapacity);\nif (initialCapacity > MAXIMUM_CAPACITY)\n    initialCapacity = MAXIMUM_CAPACITY;\n\n// 校验loadFactor\nif (loadFactor <= 0 || Float.isNaN(loadFactor))\n    throw new IllegalArgumentException(\"Illegal Load factor: \"+\n                                       loadFactor);\nint capacity = 1;\n// 将容量设置为大于initialCapacity的最小2的幂\nwhile (capacity < initialCapacity)\n    capacity <<= 1;\ntable = newTable(capacity);\nthis.loadFactor = loadFactor;\nthreshold = (int)(capacity * loadFactor);\n```\n\n再看看newTable函数。\n\n```java\nprivate Entry<K,V>[] newTable(int n) {\n    return (Entry<K,V>[]) new Entry<?,?>[n];\n}\n```\n\n这里其实只是简单的创建一个Entry数组。\n\n## Entry剖析\n\n接下来看看WeakHashMap中的核心角色——Entry。上面已经看到了，WeakHashMap中的table是一个Entry数组：\n\n```java\nEntry<K,V>[] table;\n```\n\n来看看Entry长什么样：\n\n```java\nprivate static class Entry<K,V> extends WeakReference<Object> implements Map.Entry<K,V> {\n\t...   \n}\n```\n\nEntry继承自WeakReference，继承关系图如下：\n\n![weakhashmap-1](./weakhashmap-2.png)\n\n再来看看Entry中的内容：\n\n```java\n// 成员变量\nV value;\nfinal int hash;\nEntry<K,V> next;\n\n// 构造函数\nEntry(Object key, V value,\n      ReferenceQueue<Object> queue,\n      int hash, Entry<K,V> next) {\n    super(key, queue);\n    this.value = value;\n    this.hash  = hash;\n    this.next  = next;\n}\n```\n\n细心的你可能会发现，哎？key哪里去了，成员变量里没有key。别着急，看看构造函数就可以发现，它调用了父类的构造函数。\n\n```java\nsuper(key, queue);\n```\n\n这里调用的WeakReference的构造函数，将key传入Reference中，保存在referent成员变量中。对Reference和WeakReference不熟悉的话可以参考[这篇文章](../reference/reference-code-detail.md)和[这篇文章](../reference/weak-reference-code-detail.md)。\n\n再看看其它几个方法：\n\n```java\n@SuppressWarnings(\"unchecked\")\npublic K getKey() {\n    // 这里调用了Reference的get方法，从中取出referent对象\n    // WeakHashMap中，key如果为null会使用NULL_KEY来替代\n    return (K) WeakHashMap.unmaskNull(get());\n}\n\npublic V getValue() {\n    return value;\n}\n\npublic V setValue(V newValue) {\n    V oldValue = value;\n    value = newValue;\n    return oldValue;\n}\n\npublic boolean equals(Object o) {\n    if (!(o instanceof Map.Entry))\n        return false;\n    Map.Entry<?,?> e = (Map.Entry<?,?>)o;\n    K k1 = getKey();\n    Object k2 = e.getKey();\n    if (k1 == k2 || (k1 != null && k1.equals(k2))) {\n        V v1 = getValue();\n        Object v2 = e.getValue();\n        if (v1 == v2 || (v1 != null && v1.equals(v2)))\n            return true;\n    }\n    return false;\n}\n\npublic int hashCode() {\n    K k = getKey();\n    V v = getValue();\n    // 这里只是简单的把key和value的hashcode做一个异或处理\n    return Objects.hashCode(k) ^ Objects.hashCode(v);\n}\n\npublic String toString() {\n    return getKey() + \"=\" + getValue();\n}\n```\n\n这里稍微说一下getKey方法，调用了WeakHashMap.unmaskNull，之所以要调用这个方法，其实是因为WeakHashMap中对key为null时的特殊处理，会将其指向一个特殊的内部变量：\n\n```java\nprivate static final Object NULL_KEY = new Object();\n```\n\n与其对应的两个方法便是：\n\n```java\nprivate static Object maskNull(Object key) {\n    return (key == null) ? NULL_KEY : key;\n}\n\nstatic Object unmaskNull(Object key) {\n    return (key == NULL_KEY) ? null : key;\n}\n```\n\n所以，其他WeakHashMap中的Entry最大的不同就是继承自WeakReference，并把key保存在了WeakReference中。可以说WeakHashMap的特性绝大部分都是WeakReference的功劳。\n\n## 常用方法\n\n主要的方法有这些：\n\n```java\nvoid                   clear()\nObject                 clone()\nboolean                containsKey(Object key)\nboolean                containsValue(Object value)\nSet<Entry<K, V>>       entrySet()\nV                      get(Object key)\nboolean                isEmpty()\nSet<K>                 keySet()\nV                      put(K key, V value)\nvoid                   putAll(Map<? extends K, ? extends V> map)\nV                      remove(Object key)\nint                    size()\nCollection<V>          values()\n```\n\n这里选其中的三个最常用的方法进行解析：\n\n### put方法\n\n```java\npublic V put(K key, V value) {\n    // 处理null值\n    Object k = maskNull(key);\n    // 计算hash\n    int h = hash(k);\n    // 获取table\n    Entry<K,V>[] tab = getTable();\n    // 计算下标\n    int i = indexFor(h, tab.length);\n\n    // 查找Entry\n    for (Entry<K,V> e = tab[i]; e != null; e = e.next) {\n        if (h == e.hash && eq(k, e.get())) {\n            V oldValue = e.value;\n            if (value != oldValue)\n                e.value = value;\n            return oldValue;\n        }\n    }\n\t\n    modCount++;\n    Entry<K,V> e = tab[i];\n    tab[i] = new Entry<>(k, value, queue, h, e);\n    // 如果元素个数超过阈值，则进行扩容\n    if (++size >= threshold)\n        resize(tab.length * 2);\n    return null;\n}\n```\n\n这里涉及到的方法比较多，不慌不慌，一个一个来。\n\n先来看看hash方法：\n\n```java\nfinal int hash(Object k) {\n    int h = k.hashCode();\n    // 这里做了二次散列，来扩大低位的影响\n    h ^= (h >>> 20) ^ (h >>> 12);\n    return h ^ (h >>> 7) ^ (h >>> 4);\n}\n```\n\nhash方法对key的hashcode进行了二次散列，主要是为了扩大低位的影响。因为Entry数组的大小是2的幂，在进行查找的时候，进行掩码处理，如果不进行二次散列，那么低位对index就完全没有影响了，如果不清楚也没有关系，之后在get方法里会有说明。\n\n至于为什么要选20,12,7,4。emmm，大概是效果奇佳吧（一本正经的胡说八道，有兴趣的话可以自行研究）。\n\n再看看indexFor函数，这里就是将数组长度减1后与hashcode做一个位与操作，因为length必定是2的幂，所以减1后就变成了掩码，再进行与操作就能直接得到hashcode mod length的结果了，但是这样操作效率会更高。\n\n```java\nprivate static int indexFor(int h, int length) {\n    return h & (length-1);\n}\n```\n\n再来看看getTable方法：\n\n```java\nprivate Entry<K,V>[] getTable() {\n    // 清除被回收的Entry对象\n    expungeStaleEntries();\n    return table;\n}\n\nprivate void expungeStaleEntries() {\n    for (Object x; (x = queue.poll()) != null; ) {\n        // 循环获取引用队列中的对象\n        synchronized (queue) {\n            @SuppressWarnings(\"unchecked\")\n            Entry<K,V> e = (Entry<K,V>) x;\n            // 查找对应的位置\n            int i = indexFor(e.hash, table.length);\n\n            // 找到之前的Entry\n            Entry<K,V> prev = table[i];\n            Entry<K,V> p = prev;\n            // 在链表中寻找\n            while (p != null) {\n                Entry<K,V> next = p.next;\n                if (p == e) {\n                    if (prev == e)\n                        table[i] = next;\n                    else\n                        prev.next = next;\n                    // 将对应的value置为null，帮助GC回收\n                    e.value = null;\n                    size--;\n                    break;\n                }\n                prev = p;\n                p = next;\n            }\n        }\n    }\n}\n```\n\n所以每次调用getTable的时候，都会将table中key已经被回收掉的Entry移除掉。\n\nresize方法：\n\n```java\nvoid resize(int newCapacity) {\n    // 获取当前table\n    Entry<K,V>[] oldTable = getTable();\n    int oldCapacity = oldTable.length;\n    if (oldCapacity == MAXIMUM_CAPACITY) {\n        threshold = Integer.MAX_VALUE;\n        return;\n    }\n\n    // 新建一个table\n    Entry<K,V>[] newTable = newTable(newCapacity);\n    // 将旧table中的内容复制到新table中\n    transfer(oldTable, newTable);\n    table = newTable;\n\n    if (size >= threshold / 2) {\n        threshold = (int)(newCapacity * loadFactor);\n    } else {\n        expungeStaleEntries();\n        transfer(newTable, oldTable);\n        table = oldTable;\n    }\n}\n// 新建Entry数组\nprivate Entry<K,V>[] newTable(int n) {\n    return (Entry<K,V>[]) new Entry<?,?>[n];\n}\n\nprivate void transfer(Entry<K,V>[] src, Entry<K,V>[] dest) {\n    for (int j = 0; j < src.length; ++j) {\n        Entry<K,V> e = src[j];\n        src[j] = null;\n        while (e != null) {\n            Entry<K,V> next = e.next;\n            Object key = e.get();\n            if (key == null) {\n                e.next = null; \n                e.value = null; \n                size--;\n            } else {\n                int i = indexFor(e.hash, dest.length);\n                e.next = dest[i];\n                dest[i] = e;\n            }\n            e = next;\n        }\n    }\n}\n```\n\n### get方法\n\n```java\npublic V get(Object key) {\n    // 对null值特殊处理\n    Object k = maskNull(key);\n    // 取key的hash值\n    int h = hash(k);\n    // 取当前table\n    Entry<K,V>[] tab = getTable();\n    // 获取下标\n    int index = indexFor(h, tab.length);\n    Entry<K,V> e = tab[index];\n    // 链表中查找元素\n    while (e != null) {\n        if (e.hash == h && eq(k, e.get()))\n            return e.value;\n        e = e.next;\n    }\n    return null;\n}\n```\n\n在查找元素的时候调用了一个eq方法：\n\n```java\nprivate static boolean eq(Object x, Object y) {\n    return x == y || x.equals(y);\n}\n```\n\n### remove方法\n\n```java\npublic V remove(Object key) {\n    // 对null值特殊处理\n    Object k = maskNull(key);\n    // 取key的hash\n    int h = hash(k);\n    // 取当前table\n    Entry<K,V>[] tab = getTable();\n    // 计算下标\n    int i = indexFor(h, tab.length);\n    Entry<K,V> prev = tab[i];\n    Entry<K,V> e = prev;\n\n    while (e != null) {\n        Entry<K,V> next = e.next;\n        // 查找对应Entry\n        if (h == e.hash && eq(k, e.get())) {\n            modCount++;\n            size--;\n            if (prev == e)\n                tab[i] = next;\n            else\n                prev.next = next;\n            // 如果找到，返回对应Entry的value\n            return e.value;\n        }\n        prev = e;\n        e = next;\n    }\n\n    return null;\n}\n```\n\n## 使用栗子\n\n```java\npublic class WeakHashMapTest {\n    public static void main(String[] args){\n        testWeakHashMap();\n    }\n\n    private static void testWeakHashMap() {\n        // 创建3个String对象用来做key\n        String w1 = new String(\"key1\");\n        String w2 = new String(\"key2\");\n        String w3 = new String(\"key3\");\n\n        // 新建WeakHashMap\n        Map weakHashMap = new WeakHashMap();\n\n        // 添加键值对\n        weakHashMap.put(w1, \"v1\");\n        weakHashMap.put(w2, \"v2\");\n        weakHashMap.put(w3, \"v3\");\n\n        // 打印出weakHashMap\n        System.out.printf(\"weakHashMap:%s\\n\", weakHashMap);\n\n        // containsKey(Object key) :是否包含键key\n        System.out.printf(\"contains key key1 : %s\\n\",weakHashMap.containsKey(\"key1\"));\n        System.out.printf(\"contains key key4 : %s\\n\",weakHashMap.containsKey(\"key4\"));\n\n        // containsValue(Object value) :是否包含值value\n        System.out.printf(\"contains value v1 : %s\\n\",weakHashMap.containsValue(\"v1\"));\n        System.out.printf(\"contains value 0 : %s\\n\",weakHashMap.containsValue(0));\n\n        // remove(Object key) ： 删除键key对应的键值对\n        weakHashMap.remove(\"three\");\n\n        System.out.printf(\"weakHashMap: %s\\n\", weakHashMap);\n\n\n        // ---- 测试 WeakHashMap 的自动回收特性 ----\n\n        // 将w1设置null。\n        // 这意味着“弱键”w1再没有被其它对象引用，调用gc时会回收WeakHashMap中与“w1”对应的键值对\n        w1 = null;\n\n        // 内存回收。这里，会回收WeakHashMap中与“w1”对应的键值对\n        System.gc();\n\n        // 遍历WeakHashMap\n        Iterator iter = weakHashMap.entrySet().iterator();\n        while (iter.hasNext()) {\n            Map.Entry en = (Map.Entry)iter.next();\n            System.out.printf(\"next : %s - %s\\n\",en.getKey(),en.getValue());\n        }\n        // 打印WeakHashMap的实际大小\n        System.out.printf(\"after gc WeakHashMap size:%s\\n\", weakHashMap.size());\n    }\n}\n```\n\n输出如下：\n\n```java\nweakHashMap:{key1=w1, key2=w2, key3=w3}\ncontains key key1 : true\ncontains key key4 : false\ncontains value w1 : true\ncontains value 0 : false\nweakHashMap: {key1=w1, key2=w2, key3=w3}\nnext : key2 - w2\nnext : key3 - w3\nafter gc WeakHashMap size:2\n```\n\n可以看到，w1对应的Entry被回收掉了，这就是WeakHashMap的最重要特性，当然，实际使用的时候一般不会这样使用，\n\n## 应用场景\n\n由于WeakHashMap可以自动清除Entry，所以比较适合用于存储非必需对象，用作缓存非常合适。\n\n```java\npublic final class ConcurrentCache<K,V> {\n\n    private final int size;\n\n    private final Map<K,V> eden;\n\n    private final Map<K,V> longterm;\n\n    public ConcurrentCache(int size) {\n        this.size = size;\n        this.eden = new ConcurrentHashMap<>(size);\n        this.longterm = new WeakHashMap<>(size);\n    }\n\n    public V get(K k) {\n        V v = this.eden.get(k);\n        if (v == null) {\n            synchronized (longterm) {\n                v = this.longterm.get(k);\n            }\n            if (v != null) {\n                this.eden.put(k, v);\n            }\n        }\n        return v;\n    }\n\n    public void put(K k, V v) {\n        if (this.eden.size() >= size) {\n            synchronized (longterm) {\n                this.longterm.putAll(this.eden);\n            }\n            this.eden.clear();\n        }\n        this.eden.put(k, v);\n    }\n}\n```\n\n在put方法里，在插入一个键值对时，先检查eden缓存的容量是不是超过了阈值，如果没有超就直接放入eden缓存，如果超了就将eden中所有的键值对都放入longterm（这里longterm类似于老年代，eden类似于年轻代），再将eden清空并插入相应键值对。\n\n在get方法中，也是优先从eden中找对应的value，如果没有则进入longterm缓存中查找，找到后就加入eden缓存并返回。\n\n这样设计的好处是，能将相对常用的对象都能在eden缓存中找到，不常用的则存入longterm缓存，并且由于WeakHashMap能自动清除Entry，所以不用担心longterm中键值对过多而导致OOM。\n\nWeakHashMap还有这样一个不错的应用场景，配合事务进行使用，存储事务过程中的各类信息。可以使用如下结构：\n\n```java\nWeakHashMap<String,Map<K,V>> transactionCache;\n```\n\n这里key为String类型，可以用来标志区分不同的事务，起到一个事务id的作用。value是一个map，可以是一个简单的HashMap或者LinkedHashMap，用来存放在事务中需要使用到的信息。\n\n在事务开始时创建一个事务id，并用它来作为key，事务结束后，将这个强引用消除掉，这样既能保证在事务中可以获取到所需要的信息，又能自动释放掉map中的所有信息。\n\n## 小结\n\n- WeakHashMap是一个会自动清除Entry的Map\n- WeakHashMap的操作与HashMap完全一致\n- WeakHashMap内部数据结构是数组+链表\n- WeakHashMap常被用作缓存","source":"_posts/java/collection/weakhashmap-code-detail.md","raw":"# WeakHashMap源码详解\n\n::: tip\n源码详解系列均基于`JDK8`进行解析\n:::\n\n## 说明\n\n在Java容器详解系列文章的最后，介绍一个相对特殊的成员：*WeakHashMap*，从名字可以看出它是一个 *Map*。它的使用上跟HashMap并没有什么区别，所以很多地方这里就不做过多介绍了，可以翻看一下前面HashMap中的内容。本篇主要介绍它与HashMap的不同之处。\n\n*WeakHashMap* 特殊之处在于 *WeakHashMap* 里的`entry`可能会被垃圾回收器自动删除，也就是说即使你没有调用`remove()`或者`clear()`方法，它的entry也可能会慢慢变少。所以多次调用比如isEmpty，containsKey，size等方法时可能会返回不同的结果。\n\n接下来希望能带着这么几个问题来进行阅读：\n\n1、WeakHashMap中的Entry为什么会自动被回收。\n\n2、WeakHashMap与HashMap的区别是什么。\n\n3、WeakHashMap的引用场景有哪些。\n\n## WeakHashMap探秘\n\n从说明可以看出，WeakHashMap的特殊之处便在于它的Entry与众不同，里面的Entry会被垃圾回收器自动回收，那么问题来了，为什么会被自动回收呢？HashMap里的Entry并不会被自动回收，除非把它从Map中移除掉。\n\n其实这个秘密就在于[弱引用](../reference/weak-reference.md)，WeakHashMap中的key是间接保存在弱引用中的，所以当key没有被继续使用时，就可能会在GC的时候被回收掉。\n\n::: warning \n只有key对象是使用弱引用保存的，value对象实际上仍旧是通过普通的强引用来保持的，所以应该确保value不会直接或者间接的保持其对应key的强引用，因为这样会阻止key被回收。\n:::\n\n如果对于引用类型不熟悉的话，可以先阅读[这篇文章](../reference/four-kinds-of-reference.md)。\n\n下面来从源码角度看看具体是如何实现这个特性的。\n\n## 继承结构\n\n![weakhashmap-1](./weakhashmap-1.png)\n\nWeakHashMap并不是继承自HashMap，而是继承自AbstractMap，跟HashMap的继承结构差不多。\n\n## 存储结构\n\nWeakHashMap中的数据结构是数组+链表的形式，这一点跟HashMap也是一致的，但不同的是，在JDK8中，当发生较多key冲突的时候，HashMap中会由链表转为红黑树，而WeakHashMap则一直使用链表进行存储。\n\n![weakhashmap-1](./weakhashmap-4.png)\n\n## 成员变量\n\n```java\n// 默认初始容量，必须是2的幂\nprivate static final int DEFAULT_INITIAL_CAPACITY = 16;\n\n// 最大容量\nprivate static final int MAXIMUM_CAPACITY = 1 << 30;\n\n// 默认装载因子\nprivate static final float DEFAULT_LOAD_FACTOR = 0.75f;\n\n// Entry数组，长度必须为2的幂\nEntry<K,V>[] table;\n\n// 元素个数\nprivate int size;\n\n// 阈值 \nprivate int threshold;\n\n// 装载因子\nprivate final float loadFactor;\n\n// 引用队列\nprivate final ReferenceQueue<Object> queue = new ReferenceQueue<>();\n\n// 修改次数\nint modCount;\n```\n\n跟HashMap的成员变量几乎一致，这里多了一个ReferenceQueue，用来存放那些已经被回收了的弱引用对象。如果想知道ReferenceQueue是如何工作的，可以参考[这篇文章](../reference/reference-queue-code-detail.md)。\n\n## 构造函数\n\nWeakHashMap中也有四个构造函数：\n\n```java\npublic WeakHashMap(int initialCapacity, float loadFactor) {\n\t...\n}\n\npublic WeakHashMap(int initialCapacity) {\n    this(initialCapacity, DEFAULT_LOAD_FACTOR);\n}\n\npublic WeakHashMap() {\n    this(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR);\n}\n\npublic WeakHashMap(Map<? extends K, ? extends V> m) {\n    this(Math.max((int) (m.size() / DEFAULT_LOAD_FACTOR) + 1,\n                  DEFAULT_INITIAL_CAPACITY),\n         DEFAULT_LOAD_FACTOR);\n    putAll(m);\n}\n```\n\n可以看到后三个，都是调用的第一个构造函数，下面再来看一下第一个构造函数的内容：\n\n```java\n// 校验initialCapacity\nif (initialCapacity < 0)\n    throw new IllegalArgumentException(\"Illegal Initial Capacity: \"+\n                                       initialCapacity);\nif (initialCapacity > MAXIMUM_CAPACITY)\n    initialCapacity = MAXIMUM_CAPACITY;\n\n// 校验loadFactor\nif (loadFactor <= 0 || Float.isNaN(loadFactor))\n    throw new IllegalArgumentException(\"Illegal Load factor: \"+\n                                       loadFactor);\nint capacity = 1;\n// 将容量设置为大于initialCapacity的最小2的幂\nwhile (capacity < initialCapacity)\n    capacity <<= 1;\ntable = newTable(capacity);\nthis.loadFactor = loadFactor;\nthreshold = (int)(capacity * loadFactor);\n```\n\n再看看newTable函数。\n\n```java\nprivate Entry<K,V>[] newTable(int n) {\n    return (Entry<K,V>[]) new Entry<?,?>[n];\n}\n```\n\n这里其实只是简单的创建一个Entry数组。\n\n## Entry剖析\n\n接下来看看WeakHashMap中的核心角色——Entry。上面已经看到了，WeakHashMap中的table是一个Entry数组：\n\n```java\nEntry<K,V>[] table;\n```\n\n来看看Entry长什么样：\n\n```java\nprivate static class Entry<K,V> extends WeakReference<Object> implements Map.Entry<K,V> {\n\t...   \n}\n```\n\nEntry继承自WeakReference，继承关系图如下：\n\n![weakhashmap-1](./weakhashmap-2.png)\n\n再来看看Entry中的内容：\n\n```java\n// 成员变量\nV value;\nfinal int hash;\nEntry<K,V> next;\n\n// 构造函数\nEntry(Object key, V value,\n      ReferenceQueue<Object> queue,\n      int hash, Entry<K,V> next) {\n    super(key, queue);\n    this.value = value;\n    this.hash  = hash;\n    this.next  = next;\n}\n```\n\n细心的你可能会发现，哎？key哪里去了，成员变量里没有key。别着急，看看构造函数就可以发现，它调用了父类的构造函数。\n\n```java\nsuper(key, queue);\n```\n\n这里调用的WeakReference的构造函数，将key传入Reference中，保存在referent成员变量中。对Reference和WeakReference不熟悉的话可以参考[这篇文章](../reference/reference-code-detail.md)和[这篇文章](../reference/weak-reference-code-detail.md)。\n\n再看看其它几个方法：\n\n```java\n@SuppressWarnings(\"unchecked\")\npublic K getKey() {\n    // 这里调用了Reference的get方法，从中取出referent对象\n    // WeakHashMap中，key如果为null会使用NULL_KEY来替代\n    return (K) WeakHashMap.unmaskNull(get());\n}\n\npublic V getValue() {\n    return value;\n}\n\npublic V setValue(V newValue) {\n    V oldValue = value;\n    value = newValue;\n    return oldValue;\n}\n\npublic boolean equals(Object o) {\n    if (!(o instanceof Map.Entry))\n        return false;\n    Map.Entry<?,?> e = (Map.Entry<?,?>)o;\n    K k1 = getKey();\n    Object k2 = e.getKey();\n    if (k1 == k2 || (k1 != null && k1.equals(k2))) {\n        V v1 = getValue();\n        Object v2 = e.getValue();\n        if (v1 == v2 || (v1 != null && v1.equals(v2)))\n            return true;\n    }\n    return false;\n}\n\npublic int hashCode() {\n    K k = getKey();\n    V v = getValue();\n    // 这里只是简单的把key和value的hashcode做一个异或处理\n    return Objects.hashCode(k) ^ Objects.hashCode(v);\n}\n\npublic String toString() {\n    return getKey() + \"=\" + getValue();\n}\n```\n\n这里稍微说一下getKey方法，调用了WeakHashMap.unmaskNull，之所以要调用这个方法，其实是因为WeakHashMap中对key为null时的特殊处理，会将其指向一个特殊的内部变量：\n\n```java\nprivate static final Object NULL_KEY = new Object();\n```\n\n与其对应的两个方法便是：\n\n```java\nprivate static Object maskNull(Object key) {\n    return (key == null) ? NULL_KEY : key;\n}\n\nstatic Object unmaskNull(Object key) {\n    return (key == NULL_KEY) ? null : key;\n}\n```\n\n所以，其他WeakHashMap中的Entry最大的不同就是继承自WeakReference，并把key保存在了WeakReference中。可以说WeakHashMap的特性绝大部分都是WeakReference的功劳。\n\n## 常用方法\n\n主要的方法有这些：\n\n```java\nvoid                   clear()\nObject                 clone()\nboolean                containsKey(Object key)\nboolean                containsValue(Object value)\nSet<Entry<K, V>>       entrySet()\nV                      get(Object key)\nboolean                isEmpty()\nSet<K>                 keySet()\nV                      put(K key, V value)\nvoid                   putAll(Map<? extends K, ? extends V> map)\nV                      remove(Object key)\nint                    size()\nCollection<V>          values()\n```\n\n这里选其中的三个最常用的方法进行解析：\n\n### put方法\n\n```java\npublic V put(K key, V value) {\n    // 处理null值\n    Object k = maskNull(key);\n    // 计算hash\n    int h = hash(k);\n    // 获取table\n    Entry<K,V>[] tab = getTable();\n    // 计算下标\n    int i = indexFor(h, tab.length);\n\n    // 查找Entry\n    for (Entry<K,V> e = tab[i]; e != null; e = e.next) {\n        if (h == e.hash && eq(k, e.get())) {\n            V oldValue = e.value;\n            if (value != oldValue)\n                e.value = value;\n            return oldValue;\n        }\n    }\n\t\n    modCount++;\n    Entry<K,V> e = tab[i];\n    tab[i] = new Entry<>(k, value, queue, h, e);\n    // 如果元素个数超过阈值，则进行扩容\n    if (++size >= threshold)\n        resize(tab.length * 2);\n    return null;\n}\n```\n\n这里涉及到的方法比较多，不慌不慌，一个一个来。\n\n先来看看hash方法：\n\n```java\nfinal int hash(Object k) {\n    int h = k.hashCode();\n    // 这里做了二次散列，来扩大低位的影响\n    h ^= (h >>> 20) ^ (h >>> 12);\n    return h ^ (h >>> 7) ^ (h >>> 4);\n}\n```\n\nhash方法对key的hashcode进行了二次散列，主要是为了扩大低位的影响。因为Entry数组的大小是2的幂，在进行查找的时候，进行掩码处理，如果不进行二次散列，那么低位对index就完全没有影响了，如果不清楚也没有关系，之后在get方法里会有说明。\n\n至于为什么要选20,12,7,4。emmm，大概是效果奇佳吧（一本正经的胡说八道，有兴趣的话可以自行研究）。\n\n再看看indexFor函数，这里就是将数组长度减1后与hashcode做一个位与操作，因为length必定是2的幂，所以减1后就变成了掩码，再进行与操作就能直接得到hashcode mod length的结果了，但是这样操作效率会更高。\n\n```java\nprivate static int indexFor(int h, int length) {\n    return h & (length-1);\n}\n```\n\n再来看看getTable方法：\n\n```java\nprivate Entry<K,V>[] getTable() {\n    // 清除被回收的Entry对象\n    expungeStaleEntries();\n    return table;\n}\n\nprivate void expungeStaleEntries() {\n    for (Object x; (x = queue.poll()) != null; ) {\n        // 循环获取引用队列中的对象\n        synchronized (queue) {\n            @SuppressWarnings(\"unchecked\")\n            Entry<K,V> e = (Entry<K,V>) x;\n            // 查找对应的位置\n            int i = indexFor(e.hash, table.length);\n\n            // 找到之前的Entry\n            Entry<K,V> prev = table[i];\n            Entry<K,V> p = prev;\n            // 在链表中寻找\n            while (p != null) {\n                Entry<K,V> next = p.next;\n                if (p == e) {\n                    if (prev == e)\n                        table[i] = next;\n                    else\n                        prev.next = next;\n                    // 将对应的value置为null，帮助GC回收\n                    e.value = null;\n                    size--;\n                    break;\n                }\n                prev = p;\n                p = next;\n            }\n        }\n    }\n}\n```\n\n所以每次调用getTable的时候，都会将table中key已经被回收掉的Entry移除掉。\n\nresize方法：\n\n```java\nvoid resize(int newCapacity) {\n    // 获取当前table\n    Entry<K,V>[] oldTable = getTable();\n    int oldCapacity = oldTable.length;\n    if (oldCapacity == MAXIMUM_CAPACITY) {\n        threshold = Integer.MAX_VALUE;\n        return;\n    }\n\n    // 新建一个table\n    Entry<K,V>[] newTable = newTable(newCapacity);\n    // 将旧table中的内容复制到新table中\n    transfer(oldTable, newTable);\n    table = newTable;\n\n    if (size >= threshold / 2) {\n        threshold = (int)(newCapacity * loadFactor);\n    } else {\n        expungeStaleEntries();\n        transfer(newTable, oldTable);\n        table = oldTable;\n    }\n}\n// 新建Entry数组\nprivate Entry<K,V>[] newTable(int n) {\n    return (Entry<K,V>[]) new Entry<?,?>[n];\n}\n\nprivate void transfer(Entry<K,V>[] src, Entry<K,V>[] dest) {\n    for (int j = 0; j < src.length; ++j) {\n        Entry<K,V> e = src[j];\n        src[j] = null;\n        while (e != null) {\n            Entry<K,V> next = e.next;\n            Object key = e.get();\n            if (key == null) {\n                e.next = null; \n                e.value = null; \n                size--;\n            } else {\n                int i = indexFor(e.hash, dest.length);\n                e.next = dest[i];\n                dest[i] = e;\n            }\n            e = next;\n        }\n    }\n}\n```\n\n### get方法\n\n```java\npublic V get(Object key) {\n    // 对null值特殊处理\n    Object k = maskNull(key);\n    // 取key的hash值\n    int h = hash(k);\n    // 取当前table\n    Entry<K,V>[] tab = getTable();\n    // 获取下标\n    int index = indexFor(h, tab.length);\n    Entry<K,V> e = tab[index];\n    // 链表中查找元素\n    while (e != null) {\n        if (e.hash == h && eq(k, e.get()))\n            return e.value;\n        e = e.next;\n    }\n    return null;\n}\n```\n\n在查找元素的时候调用了一个eq方法：\n\n```java\nprivate static boolean eq(Object x, Object y) {\n    return x == y || x.equals(y);\n}\n```\n\n### remove方法\n\n```java\npublic V remove(Object key) {\n    // 对null值特殊处理\n    Object k = maskNull(key);\n    // 取key的hash\n    int h = hash(k);\n    // 取当前table\n    Entry<K,V>[] tab = getTable();\n    // 计算下标\n    int i = indexFor(h, tab.length);\n    Entry<K,V> prev = tab[i];\n    Entry<K,V> e = prev;\n\n    while (e != null) {\n        Entry<K,V> next = e.next;\n        // 查找对应Entry\n        if (h == e.hash && eq(k, e.get())) {\n            modCount++;\n            size--;\n            if (prev == e)\n                tab[i] = next;\n            else\n                prev.next = next;\n            // 如果找到，返回对应Entry的value\n            return e.value;\n        }\n        prev = e;\n        e = next;\n    }\n\n    return null;\n}\n```\n\n## 使用栗子\n\n```java\npublic class WeakHashMapTest {\n    public static void main(String[] args){\n        testWeakHashMap();\n    }\n\n    private static void testWeakHashMap() {\n        // 创建3个String对象用来做key\n        String w1 = new String(\"key1\");\n        String w2 = new String(\"key2\");\n        String w3 = new String(\"key3\");\n\n        // 新建WeakHashMap\n        Map weakHashMap = new WeakHashMap();\n\n        // 添加键值对\n        weakHashMap.put(w1, \"v1\");\n        weakHashMap.put(w2, \"v2\");\n        weakHashMap.put(w3, \"v3\");\n\n        // 打印出weakHashMap\n        System.out.printf(\"weakHashMap:%s\\n\", weakHashMap);\n\n        // containsKey(Object key) :是否包含键key\n        System.out.printf(\"contains key key1 : %s\\n\",weakHashMap.containsKey(\"key1\"));\n        System.out.printf(\"contains key key4 : %s\\n\",weakHashMap.containsKey(\"key4\"));\n\n        // containsValue(Object value) :是否包含值value\n        System.out.printf(\"contains value v1 : %s\\n\",weakHashMap.containsValue(\"v1\"));\n        System.out.printf(\"contains value 0 : %s\\n\",weakHashMap.containsValue(0));\n\n        // remove(Object key) ： 删除键key对应的键值对\n        weakHashMap.remove(\"three\");\n\n        System.out.printf(\"weakHashMap: %s\\n\", weakHashMap);\n\n\n        // ---- 测试 WeakHashMap 的自动回收特性 ----\n\n        // 将w1设置null。\n        // 这意味着“弱键”w1再没有被其它对象引用，调用gc时会回收WeakHashMap中与“w1”对应的键值对\n        w1 = null;\n\n        // 内存回收。这里，会回收WeakHashMap中与“w1”对应的键值对\n        System.gc();\n\n        // 遍历WeakHashMap\n        Iterator iter = weakHashMap.entrySet().iterator();\n        while (iter.hasNext()) {\n            Map.Entry en = (Map.Entry)iter.next();\n            System.out.printf(\"next : %s - %s\\n\",en.getKey(),en.getValue());\n        }\n        // 打印WeakHashMap的实际大小\n        System.out.printf(\"after gc WeakHashMap size:%s\\n\", weakHashMap.size());\n    }\n}\n```\n\n输出如下：\n\n```java\nweakHashMap:{key1=w1, key2=w2, key3=w3}\ncontains key key1 : true\ncontains key key4 : false\ncontains value w1 : true\ncontains value 0 : false\nweakHashMap: {key1=w1, key2=w2, key3=w3}\nnext : key2 - w2\nnext : key3 - w3\nafter gc WeakHashMap size:2\n```\n\n可以看到，w1对应的Entry被回收掉了，这就是WeakHashMap的最重要特性，当然，实际使用的时候一般不会这样使用，\n\n## 应用场景\n\n由于WeakHashMap可以自动清除Entry，所以比较适合用于存储非必需对象，用作缓存非常合适。\n\n```java\npublic final class ConcurrentCache<K,V> {\n\n    private final int size;\n\n    private final Map<K,V> eden;\n\n    private final Map<K,V> longterm;\n\n    public ConcurrentCache(int size) {\n        this.size = size;\n        this.eden = new ConcurrentHashMap<>(size);\n        this.longterm = new WeakHashMap<>(size);\n    }\n\n    public V get(K k) {\n        V v = this.eden.get(k);\n        if (v == null) {\n            synchronized (longterm) {\n                v = this.longterm.get(k);\n            }\n            if (v != null) {\n                this.eden.put(k, v);\n            }\n        }\n        return v;\n    }\n\n    public void put(K k, V v) {\n        if (this.eden.size() >= size) {\n            synchronized (longterm) {\n                this.longterm.putAll(this.eden);\n            }\n            this.eden.clear();\n        }\n        this.eden.put(k, v);\n    }\n}\n```\n\n在put方法里，在插入一个键值对时，先检查eden缓存的容量是不是超过了阈值，如果没有超就直接放入eden缓存，如果超了就将eden中所有的键值对都放入longterm（这里longterm类似于老年代，eden类似于年轻代），再将eden清空并插入相应键值对。\n\n在get方法中，也是优先从eden中找对应的value，如果没有则进入longterm缓存中查找，找到后就加入eden缓存并返回。\n\n这样设计的好处是，能将相对常用的对象都能在eden缓存中找到，不常用的则存入longterm缓存，并且由于WeakHashMap能自动清除Entry，所以不用担心longterm中键值对过多而导致OOM。\n\nWeakHashMap还有这样一个不错的应用场景，配合事务进行使用，存储事务过程中的各类信息。可以使用如下结构：\n\n```java\nWeakHashMap<String,Map<K,V>> transactionCache;\n```\n\n这里key为String类型，可以用来标志区分不同的事务，起到一个事务id的作用。value是一个map，可以是一个简单的HashMap或者LinkedHashMap，用来存放在事务中需要使用到的信息。\n\n在事务开始时创建一个事务id，并用它来作为key，事务结束后，将这个强引用消除掉，这样既能保证在事务中可以获取到所需要的信息，又能自动释放掉map中的所有信息。\n\n## 小结\n\n- WeakHashMap是一个会自动清除Entry的Map\n- WeakHashMap的操作与HashMap完全一致\n- WeakHashMap内部数据结构是数组+链表\n- WeakHashMap常被用作缓存","slug":"java/collection/weakhashmap-code-detail","published":1,"date":"2018-12-27T08:02:52.236Z","updated":"2018-12-27T08:02:52.236Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5pt001iwu9kjvb2m7zv","content":"<h1 id=\"WeakHashMap源码详解\"><a href=\"#WeakHashMap源码详解\" class=\"headerlink\" title=\"WeakHashMap源码详解\"></a>WeakHashMap源码详解</h1><p>::: tip<br>源码详解系列均基于<code>JDK8</code>进行解析<br>:::</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>在Java容器详解系列文章的最后，介绍一个相对特殊的成员：<em>WeakHashMap</em>，从名字可以看出它是一个 <em>Map</em>。它的使用上跟HashMap并没有什么区别，所以很多地方这里就不做过多介绍了，可以翻看一下前面HashMap中的内容。本篇主要介绍它与HashMap的不同之处。</p>\n<p><em>WeakHashMap</em> 特殊之处在于 <em>WeakHashMap</em> 里的<code>entry</code>可能会被垃圾回收器自动删除，也就是说即使你没有调用<code>remove()</code>或者<code>clear()</code>方法，它的entry也可能会慢慢变少。所以多次调用比如isEmpty，containsKey，size等方法时可能会返回不同的结果。</p>\n<p>接下来希望能带着这么几个问题来进行阅读：</p>\n<p>1、WeakHashMap中的Entry为什么会自动被回收。</p>\n<p>2、WeakHashMap与HashMap的区别是什么。</p>\n<p>3、WeakHashMap的引用场景有哪些。</p>\n<h2 id=\"WeakHashMap探秘\"><a href=\"#WeakHashMap探秘\" class=\"headerlink\" title=\"WeakHashMap探秘\"></a>WeakHashMap探秘</h2><p>从说明可以看出，WeakHashMap的特殊之处便在于它的Entry与众不同，里面的Entry会被垃圾回收器自动回收，那么问题来了，为什么会被自动回收呢？HashMap里的Entry并不会被自动回收，除非把它从Map中移除掉。</p>\n<p>其实这个秘密就在于<a href=\"../reference/weak-reference.md\">弱引用</a>，WeakHashMap中的key是间接保存在弱引用中的，所以当key没有被继续使用时，就可能会在GC的时候被回收掉。</p>\n<p>::: warning<br>只有key对象是使用弱引用保存的，value对象实际上仍旧是通过普通的强引用来保持的，所以应该确保value不会直接或者间接的保持其对应key的强引用，因为这样会阻止key被回收。<br>:::</p>\n<p>如果对于引用类型不熟悉的话，可以先阅读<a href=\"../reference/four-kinds-of-reference.md\">这篇文章</a>。</p>\n<p>下面来从源码角度看看具体是如何实现这个特性的。</p>\n<h2 id=\"继承结构\"><a href=\"#继承结构\" class=\"headerlink\" title=\"继承结构\"></a>继承结构</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"./weakhashmap-1.png\" alt=\"weakhashmap-1\" title=\"\">\n                </div>\n                <div class=\"image-caption\">weakhashmap-1</div>\n            </figure>\n<p>WeakHashMap并不是继承自HashMap，而是继承自AbstractMap，跟HashMap的继承结构差不多。</p>\n<h2 id=\"存储结构\"><a href=\"#存储结构\" class=\"headerlink\" title=\"存储结构\"></a>存储结构</h2><p>WeakHashMap中的数据结构是数组+链表的形式，这一点跟HashMap也是一致的，但不同的是，在JDK8中，当发生较多key冲突的时候，HashMap中会由链表转为红黑树，而WeakHashMap则一直使用链表进行存储。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"./weakhashmap-4.png\" alt=\"weakhashmap-1\" title=\"\">\n                </div>\n                <div class=\"image-caption\">weakhashmap-1</div>\n            </figure>\n<h2 id=\"成员变量\"><a href=\"#成员变量\" class=\"headerlink\" title=\"成员变量\"></a>成员变量</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 默认初始容量，必须是2的幂</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_INITIAL_CAPACITY = <span class=\"number\">16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最大容量</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAXIMUM_CAPACITY = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 默认装载因子</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> DEFAULT_LOAD_FACTOR = <span class=\"number\">0.75f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Entry数组，长度必须为2的幂</span></span><br><span class=\"line\">Entry&lt;K,V&gt;[] table;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 元素个数</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 阈值 </span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> threshold;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 装载因子</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> loadFactor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引用队列</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ReferenceQueue&lt;Object&gt; queue = <span class=\"keyword\">new</span> ReferenceQueue&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改次数</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> modCount;</span><br></pre></td></tr></table></figure>\n<p>跟HashMap的成员变量几乎一致，这里多了一个ReferenceQueue，用来存放那些已经被回收了的弱引用对象。如果想知道ReferenceQueue是如何工作的，可以参考<a href=\"../reference/reference-queue-code-detail.md\">这篇文章</a>。</p>\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><p>WeakHashMap中也有四个构造函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WeakHashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity, <span class=\"keyword\">float</span> loadFactor)</span> </span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WeakHashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WeakHashMap</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WeakHashMap</span><span class=\"params\">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(Math.max((<span class=\"keyword\">int</span>) (m.size() / DEFAULT_LOAD_FACTOR) + <span class=\"number\">1</span>,</span><br><span class=\"line\">                  DEFAULT_INITIAL_CAPACITY),</span><br><span class=\"line\">         DEFAULT_LOAD_FACTOR);</span><br><span class=\"line\">    putAll(m);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到后三个，都是调用的第一个构造函数，下面再来看一下第一个构造函数的内容：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 校验initialCapacity</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (initialCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal Initial Capacity: \"</span>+</span><br><span class=\"line\">                                       initialCapacity);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class=\"line\">    initialCapacity = MAXIMUM_CAPACITY;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 校验loadFactor</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (loadFactor &lt;= <span class=\"number\">0</span> || Float.isNaN(loadFactor))</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal Load factor: \"</span>+</span><br><span class=\"line\">                                       loadFactor);</span><br><span class=\"line\"><span class=\"keyword\">int</span> capacity = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// 将容量设置为大于initialCapacity的最小2的幂</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (capacity &lt; initialCapacity)</span><br><span class=\"line\">    capacity &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">table = newTable(capacity);</span><br><span class=\"line\"><span class=\"keyword\">this</span>.loadFactor = loadFactor;</span><br><span class=\"line\">threshold = (<span class=\"keyword\">int</span>)(capacity * loadFactor);</span><br></pre></td></tr></table></figure>\n<p>再看看newTable函数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Entry&lt;K,V&gt;[] newTable(<span class=\"keyword\">int</span> n) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (Entry&lt;K,V&gt;[]) <span class=\"keyword\">new</span> Entry&lt;?,?&gt;[n];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里其实只是简单的创建一个Entry数组。</p>\n<h2 id=\"Entry剖析\"><a href=\"#Entry剖析\" class=\"headerlink\" title=\"Entry剖析\"></a>Entry剖析</h2><p>接下来看看WeakHashMap中的核心角色——Entry。上面已经看到了，WeakHashMap中的table是一个Entry数组：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Entry&lt;K,V&gt;[] table;</span><br></pre></td></tr></table></figure>\n<p>来看看Entry长什么样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">WeakReference</span>&lt;<span class=\"title\">Object</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">\t...   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Entry继承自WeakReference，继承关系图如下：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"./weakhashmap-2.png\" alt=\"weakhashmap-1\" title=\"\">\n                </div>\n                <div class=\"image-caption\">weakhashmap-1</div>\n            </figure>\n<p>再来看看Entry中的内容：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 成员变量</span></span><br><span class=\"line\">V value;</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> hash;</span><br><span class=\"line\">Entry&lt;K,V&gt; next;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">Entry(Object key, V value,</span><br><span class=\"line\">      ReferenceQueue&lt;Object&gt; queue,</span><br><span class=\"line\">      <span class=\"keyword\">int</span> hash, Entry&lt;K,V&gt; next) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(key, queue);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.hash  = hash;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.next  = next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>细心的你可能会发现，哎？key哪里去了，成员变量里没有key。别着急，看看构造函数就可以发现，它调用了父类的构造函数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">super</span>(key, queue);</span><br></pre></td></tr></table></figure>\n<p>这里调用的WeakReference的构造函数，将key传入Reference中，保存在referent成员变量中。对Reference和WeakReference不熟悉的话可以参考<a href=\"../reference/reference-code-detail.md\">这篇文章</a>和<a href=\"../reference/weak-reference-code-detail.md\">这篇文章</a>。</p>\n<p>再看看其它几个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> K <span class=\"title\">getKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里调用了Reference的get方法，从中取出referent对象</span></span><br><span class=\"line\">    <span class=\"comment\">// WeakHashMap中，key如果为null会使用NULL_KEY来替代</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (K) WeakHashMap.unmaskNull(get());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">setValue</span><span class=\"params\">(V newValue)</span> </span>&#123;</span><br><span class=\"line\">    V oldValue = value;</span><br><span class=\"line\">    value = newValue;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(o <span class=\"keyword\">instanceof</span> Map.Entry))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class=\"line\">    K k1 = getKey();</span><br><span class=\"line\">    Object k2 = e.getKey();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k1 == k2 || (k1 != <span class=\"keyword\">null</span> &amp;&amp; k1.equals(k2))) &#123;</span><br><span class=\"line\">        V v1 = getValue();</span><br><span class=\"line\">        Object v2 = e.getValue();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v1 == v2 || (v1 != <span class=\"keyword\">null</span> &amp;&amp; v1.equals(v2)))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    K k = getKey();</span><br><span class=\"line\">    V v = getValue();</span><br><span class=\"line\">    <span class=\"comment\">// 这里只是简单的把key和value的hashcode做一个异或处理</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Objects.hashCode(k) ^ Objects.hashCode(v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getKey() + <span class=\"string\">\"=\"</span> + getValue();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里稍微说一下getKey方法，调用了WeakHashMap.unmaskNull，之所以要调用这个方法，其实是因为WeakHashMap中对key为null时的特殊处理，会将其指向一个特殊的内部变量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object NULL_KEY = <span class=\"keyword\">new</span> Object();</span><br></pre></td></tr></table></figure>\n<p>与其对应的两个方法便是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Object <span class=\"title\">maskNull</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (key == <span class=\"keyword\">null</span>) ? NULL_KEY : key;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> Object <span class=\"title\">unmaskNull</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (key == NULL_KEY) ? <span class=\"keyword\">null</span> : key;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以，其他WeakHashMap中的Entry最大的不同就是继承自WeakReference，并把key保存在了WeakReference中。可以说WeakHashMap的特性绝大部分都是WeakReference的功劳。</p>\n<h2 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h2><p>主要的方法有这些：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>                   <span class=\"title\">clear</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">Object                 <span class=\"title\">clone</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>                <span class=\"title\">containsKey</span><span class=\"params\">(Object key)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>                <span class=\"title\">containsValue</span><span class=\"params\">(Object value)</span></span></span><br><span class=\"line\"><span class=\"function\">Set&lt;Entry&lt;K, V&gt;&gt;       <span class=\"title\">entrySet</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">V                      <span class=\"title\">get</span><span class=\"params\">(Object key)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>                <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">Set&lt;K&gt;                 <span class=\"title\">keySet</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">V                      <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>                   <span class=\"title\">putAll</span><span class=\"params\">(Map&lt;? extends K, ? extends V&gt; map)</span></span></span><br><span class=\"line\"><span class=\"function\">V                      <span class=\"title\">remove</span><span class=\"params\">(Object key)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>                    <span class=\"title\">size</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">Collection&lt;V&gt;          <span class=\"title\">values</span><span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>\n<p>这里选其中的三个最常用的方法进行解析：</p>\n<h3 id=\"put方法\"><a href=\"#put方法\" class=\"headerlink\" title=\"put方法\"></a>put方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理null值</span></span><br><span class=\"line\">    Object k = maskNull(key);</span><br><span class=\"line\">    <span class=\"comment\">// 计算hash</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> h = hash(k);</span><br><span class=\"line\">    <span class=\"comment\">// 获取table</span></span><br><span class=\"line\">    Entry&lt;K,V&gt;[] tab = getTable();</span><br><span class=\"line\">    <span class=\"comment\">// 计算下标</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = indexFor(h, tab.length);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查找Entry</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Entry&lt;K,V&gt; e = tab[i]; e != <span class=\"keyword\">null</span>; e = e.next) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (h == e.hash &amp;&amp; eq(k, e.get())) &#123;</span><br><span class=\"line\">            V oldValue = e.value;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value != oldValue)</span><br><span class=\"line\">                e.value = value;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    Entry&lt;K,V&gt; e = tab[i];</span><br><span class=\"line\">    tab[i] = <span class=\"keyword\">new</span> Entry&lt;&gt;(k, value, queue, h, e);</span><br><span class=\"line\">    <span class=\"comment\">// 如果元素个数超过阈值，则进行扩容</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (++size &gt;= threshold)</span><br><span class=\"line\">        resize(tab.length * <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里涉及到的方法比较多，不慌不慌，一个一个来。</p>\n<p>先来看看hash方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Object k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h = k.hashCode();</span><br><span class=\"line\">    <span class=\"comment\">// 这里做了二次散列，来扩大低位的影响</span></span><br><span class=\"line\">    h ^= (h &gt;&gt;&gt; <span class=\"number\">20</span>) ^ (h &gt;&gt;&gt; <span class=\"number\">12</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h ^ (h &gt;&gt;&gt; <span class=\"number\">7</span>) ^ (h &gt;&gt;&gt; <span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>hash方法对key的hashcode进行了二次散列，主要是为了扩大低位的影响。因为Entry数组的大小是2的幂，在进行查找的时候，进行掩码处理，如果不进行二次散列，那么低位对index就完全没有影响了，如果不清楚也没有关系，之后在get方法里会有说明。</p>\n<p>至于为什么要选20,12,7,4。emmm，大概是效果奇佳吧（一本正经的胡说八道，有兴趣的话可以自行研究）。</p>\n<p>再看看indexFor函数，这里就是将数组长度减1后与hashcode做一个位与操作，因为length必定是2的幂，所以减1后就变成了掩码，再进行与操作就能直接得到hashcode mod length的结果了，但是这样操作效率会更高。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">indexFor</span><span class=\"params\">(<span class=\"keyword\">int</span> h, <span class=\"keyword\">int</span> length)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h &amp; (length-<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再来看看getTable方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Entry&lt;K,V&gt;[] getTable() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 清除被回收的Entry对象</span></span><br><span class=\"line\">    expungeStaleEntries();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">expungeStaleEntries</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Object x; (x = queue.poll()) != <span class=\"keyword\">null</span>; ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 循环获取引用队列中的对象</span></span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (queue) &#123;</span><br><span class=\"line\">            <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">            Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;) x;</span><br><span class=\"line\">            <span class=\"comment\">// 查找对应的位置</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = indexFor(e.hash, table.length);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 找到之前的Entry</span></span><br><span class=\"line\">            Entry&lt;K,V&gt; prev = table[i];</span><br><span class=\"line\">            Entry&lt;K,V&gt; p = prev;</span><br><span class=\"line\">            <span class=\"comment\">// 在链表中寻找</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                Entry&lt;K,V&gt; next = p.next;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p == e) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (prev == e)</span><br><span class=\"line\">                        table[i] = next;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                        prev.next = next;</span><br><span class=\"line\">                    <span class=\"comment\">// 将对应的value置为null，帮助GC回收</span></span><br><span class=\"line\">                    e.value = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    size--;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                prev = p;</span><br><span class=\"line\">                p = next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以每次调用getTable的时候，都会将table中key已经被回收掉的Entry移除掉。</p>\n<p>resize方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">resize</span><span class=\"params\">(<span class=\"keyword\">int</span> newCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取当前table</span></span><br><span class=\"line\">    Entry&lt;K,V&gt;[] oldTable = getTable();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldCapacity = oldTable.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">        threshold = Integer.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 新建一个table</span></span><br><span class=\"line\">    Entry&lt;K,V&gt;[] newTable = newTable(newCapacity);</span><br><span class=\"line\">    <span class=\"comment\">// 将旧table中的内容复制到新table中</span></span><br><span class=\"line\">    transfer(oldTable, newTable);</span><br><span class=\"line\">    table = newTable;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size &gt;= threshold / <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        threshold = (<span class=\"keyword\">int</span>)(newCapacity * loadFactor);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        expungeStaleEntries();</span><br><span class=\"line\">        transfer(newTable, oldTable);</span><br><span class=\"line\">        table = oldTable;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 新建Entry数组</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Entry&lt;K,V&gt;[] newTable(<span class=\"keyword\">int</span> n) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (Entry&lt;K,V&gt;[]) <span class=\"keyword\">new</span> Entry&lt;?,?&gt;[n];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">transfer</span><span class=\"params\">(Entry&lt;K,V&gt;[] src, Entry&lt;K,V&gt;[] dest)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; src.length; ++j) &#123;</span><br><span class=\"line\">        Entry&lt;K,V&gt; e = src[j];</span><br><span class=\"line\">        src[j] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (e != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            Entry&lt;K,V&gt; next = e.next;</span><br><span class=\"line\">            Object key = e.get();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                e.next = <span class=\"keyword\">null</span>; </span><br><span class=\"line\">                e.value = <span class=\"keyword\">null</span>; </span><br><span class=\"line\">                size--;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> i = indexFor(e.hash, dest.length);</span><br><span class=\"line\">                e.next = dest[i];</span><br><span class=\"line\">                dest[i] = e;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            e = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"get方法\"><a href=\"#get方法\" class=\"headerlink\" title=\"get方法\"></a>get方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对null值特殊处理</span></span><br><span class=\"line\">    Object k = maskNull(key);</span><br><span class=\"line\">    <span class=\"comment\">// 取key的hash值</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> h = hash(k);</span><br><span class=\"line\">    <span class=\"comment\">// 取当前table</span></span><br><span class=\"line\">    Entry&lt;K,V&gt;[] tab = getTable();</span><br><span class=\"line\">    <span class=\"comment\">// 获取下标</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = indexFor(h, tab.length);</span><br><span class=\"line\">    Entry&lt;K,V&gt; e = tab[index];</span><br><span class=\"line\">    <span class=\"comment\">// 链表中查找元素</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (e != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.hash == h &amp;&amp; eq(k, e.get()))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e.value;</span><br><span class=\"line\">        e = e.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在查找元素的时候调用了一个eq方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">eq</span><span class=\"params\">(Object x, Object y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x == y || x.equals(y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"remove方法\"><a href=\"#remove方法\" class=\"headerlink\" title=\"remove方法\"></a>remove方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">remove</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对null值特殊处理</span></span><br><span class=\"line\">    Object k = maskNull(key);</span><br><span class=\"line\">    <span class=\"comment\">// 取key的hash</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> h = hash(k);</span><br><span class=\"line\">    <span class=\"comment\">// 取当前table</span></span><br><span class=\"line\">    Entry&lt;K,V&gt;[] tab = getTable();</span><br><span class=\"line\">    <span class=\"comment\">// 计算下标</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = indexFor(h, tab.length);</span><br><span class=\"line\">    Entry&lt;K,V&gt; prev = tab[i];</span><br><span class=\"line\">    Entry&lt;K,V&gt; e = prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (e != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        Entry&lt;K,V&gt; next = e.next;</span><br><span class=\"line\">        <span class=\"comment\">// 查找对应Entry</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (h == e.hash &amp;&amp; eq(k, e.get())) &#123;</span><br><span class=\"line\">            modCount++;</span><br><span class=\"line\">            size--;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (prev == e)</span><br><span class=\"line\">                tab[i] = next;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                prev.next = next;</span><br><span class=\"line\">            <span class=\"comment\">// 如果找到，返回对应Entry的value</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> e.value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        prev = e;</span><br><span class=\"line\">        e = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用栗子\"><a href=\"#使用栗子\" class=\"headerlink\" title=\"使用栗子\"></a>使用栗子</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WeakHashMapTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        testWeakHashMap();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testWeakHashMap</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建3个String对象用来做key</span></span><br><span class=\"line\">        String w1 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"key1\"</span>);</span><br><span class=\"line\">        String w2 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"key2\"</span>);</span><br><span class=\"line\">        String w3 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"key3\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 新建WeakHashMap</span></span><br><span class=\"line\">        Map weakHashMap = <span class=\"keyword\">new</span> WeakHashMap();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 添加键值对</span></span><br><span class=\"line\">        weakHashMap.put(w1, <span class=\"string\">\"v1\"</span>);</span><br><span class=\"line\">        weakHashMap.put(w2, <span class=\"string\">\"v2\"</span>);</span><br><span class=\"line\">        weakHashMap.put(w3, <span class=\"string\">\"v3\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 打印出weakHashMap</span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"weakHashMap:%s\\n\"</span>, weakHashMap);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// containsKey(Object key) :是否包含键key</span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"contains key key1 : %s\\n\"</span>,weakHashMap.containsKey(<span class=\"string\">\"key1\"</span>));</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"contains key key4 : %s\\n\"</span>,weakHashMap.containsKey(<span class=\"string\">\"key4\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// containsValue(Object value) :是否包含值value</span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"contains value v1 : %s\\n\"</span>,weakHashMap.containsValue(<span class=\"string\">\"v1\"</span>));</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"contains value 0 : %s\\n\"</span>,weakHashMap.containsValue(<span class=\"number\">0</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// remove(Object key) ： 删除键key对应的键值对</span></span><br><span class=\"line\">        weakHashMap.remove(<span class=\"string\">\"three\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"weakHashMap: %s\\n\"</span>, weakHashMap);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// ---- 测试 WeakHashMap 的自动回收特性 ----</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将w1设置null。</span></span><br><span class=\"line\">        <span class=\"comment\">// 这意味着“弱键”w1再没有被其它对象引用，调用gc时会回收WeakHashMap中与“w1”对应的键值对</span></span><br><span class=\"line\">        w1 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 内存回收。这里，会回收WeakHashMap中与“w1”对应的键值对</span></span><br><span class=\"line\">        System.gc();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 遍历WeakHashMap</span></span><br><span class=\"line\">        Iterator iter = weakHashMap.entrySet().iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (iter.hasNext()) &#123;</span><br><span class=\"line\">            Map.Entry en = (Map.Entry)iter.next();</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">\"next : %s - %s\\n\"</span>,en.getKey(),en.getValue());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 打印WeakHashMap的实际大小</span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"after gc WeakHashMap size:%s\\n\"</span>, weakHashMap.size());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">weakHashMap:&#123;key1=w1, key2=w2, key3=w3&#125;</span><br><span class=\"line\">contains key key1 : <span class=\"keyword\">true</span></span><br><span class=\"line\">contains key key4 : <span class=\"keyword\">false</span></span><br><span class=\"line\">contains value w1 : <span class=\"keyword\">true</span></span><br><span class=\"line\">contains value <span class=\"number\">0</span> : <span class=\"keyword\">false</span></span><br><span class=\"line\">weakHashMap: &#123;key1=w1, key2=w2, key3=w3&#125;</span><br><span class=\"line\">next : key2 - w2</span><br><span class=\"line\">next : key3 - w3</span><br><span class=\"line\">after gc WeakHashMap size:<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，w1对应的Entry被回收掉了，这就是WeakHashMap的最重要特性，当然，实际使用的时候一般不会这样使用，</p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>由于WeakHashMap可以自动清除Entry，所以比较适合用于存储非必需对象，用作缓存非常合适。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcurrentCache</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;K,V&gt; eden;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;K,V&gt; longterm;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConcurrentCache</span><span class=\"params\">(<span class=\"keyword\">int</span> size)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.size = size;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.eden = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;(size);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.longterm = <span class=\"keyword\">new</span> WeakHashMap&lt;&gt;(size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(K k)</span> </span>&#123;</span><br><span class=\"line\">        V v = <span class=\"keyword\">this</span>.eden.get(k);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (longterm) &#123;</span><br><span class=\"line\">                v = <span class=\"keyword\">this</span>.longterm.get(k);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (v != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.eden.put(k, v);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(K k, V v)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.eden.size() &gt;= size) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (longterm) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.longterm.putAll(<span class=\"keyword\">this</span>.eden);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.eden.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.eden.put(k, v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在put方法里，在插入一个键值对时，先检查eden缓存的容量是不是超过了阈值，如果没有超就直接放入eden缓存，如果超了就将eden中所有的键值对都放入longterm（这里longterm类似于老年代，eden类似于年轻代），再将eden清空并插入相应键值对。</p>\n<p>在get方法中，也是优先从eden中找对应的value，如果没有则进入longterm缓存中查找，找到后就加入eden缓存并返回。</p>\n<p>这样设计的好处是，能将相对常用的对象都能在eden缓存中找到，不常用的则存入longterm缓存，并且由于WeakHashMap能自动清除Entry，所以不用担心longterm中键值对过多而导致OOM。</p>\n<p>WeakHashMap还有这样一个不错的应用场景，配合事务进行使用，存储事务过程中的各类信息。可以使用如下结构：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WeakHashMap&lt;String,Map&lt;K,V&gt;&gt; transactionCache;</span><br></pre></td></tr></table></figure>\n<p>这里key为String类型，可以用来标志区分不同的事务，起到一个事务id的作用。value是一个map，可以是一个简单的HashMap或者LinkedHashMap，用来存放在事务中需要使用到的信息。</p>\n<p>在事务开始时创建一个事务id，并用它来作为key，事务结束后，将这个强引用消除掉，这样既能保证在事务中可以获取到所需要的信息，又能自动释放掉map中的所有信息。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li>WeakHashMap是一个会自动清除Entry的Map</li>\n<li>WeakHashMap的操作与HashMap完全一致</li>\n<li>WeakHashMap内部数据结构是数组+链表</li>\n<li>WeakHashMap常被用作缓存</li>\n</ul>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"WeakHashMap源码详解\"><a href=\"#WeakHashMap源码详解\" class=\"headerlink\" title=\"WeakHashMap源码详解\"></a>WeakHashMap源码详解</h1><p>::: tip<br>源码详解系列均基于<code>JDK8</code>进行解析<br>:::</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>在Java容器详解系列文章的最后，介绍一个相对特殊的成员：<em>WeakHashMap</em>，从名字可以看出它是一个 <em>Map</em>。它的使用上跟HashMap并没有什么区别，所以很多地方这里就不做过多介绍了，可以翻看一下前面HashMap中的内容。本篇主要介绍它与HashMap的不同之处。</p>\n<p><em>WeakHashMap</em> 特殊之处在于 <em>WeakHashMap</em> 里的<code>entry</code>可能会被垃圾回收器自动删除，也就是说即使你没有调用<code>remove()</code>或者<code>clear()</code>方法，它的entry也可能会慢慢变少。所以多次调用比如isEmpty，containsKey，size等方法时可能会返回不同的结果。</p>\n<p>接下来希望能带着这么几个问题来进行阅读：</p>\n<p>1、WeakHashMap中的Entry为什么会自动被回收。</p>\n<p>2、WeakHashMap与HashMap的区别是什么。</p>\n<p>3、WeakHashMap的引用场景有哪些。</p>\n<h2 id=\"WeakHashMap探秘\"><a href=\"#WeakHashMap探秘\" class=\"headerlink\" title=\"WeakHashMap探秘\"></a>WeakHashMap探秘</h2><p>从说明可以看出，WeakHashMap的特殊之处便在于它的Entry与众不同，里面的Entry会被垃圾回收器自动回收，那么问题来了，为什么会被自动回收呢？HashMap里的Entry并不会被自动回收，除非把它从Map中移除掉。</p>\n<p>其实这个秘密就在于<a href=\"../reference/weak-reference.md\">弱引用</a>，WeakHashMap中的key是间接保存在弱引用中的，所以当key没有被继续使用时，就可能会在GC的时候被回收掉。</p>\n<p>::: warning<br>只有key对象是使用弱引用保存的，value对象实际上仍旧是通过普通的强引用来保持的，所以应该确保value不会直接或者间接的保持其对应key的强引用，因为这样会阻止key被回收。<br>:::</p>\n<p>如果对于引用类型不熟悉的话，可以先阅读<a href=\"../reference/four-kinds-of-reference.md\">这篇文章</a>。</p>\n<p>下面来从源码角度看看具体是如何实现这个特性的。</p>\n<h2 id=\"继承结构\"><a href=\"#继承结构\" class=\"headerlink\" title=\"继承结构\"></a>继承结构</h2><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"./weakhashmap-1.png\" alt=\"weakhashmap-1\" title=\"\">\n                </div>\n                <div class=\"image-caption\">weakhashmap-1</div>\n            </figure>\n<p>WeakHashMap并不是继承自HashMap，而是继承自AbstractMap，跟HashMap的继承结构差不多。</p>\n<h2 id=\"存储结构\"><a href=\"#存储结构\" class=\"headerlink\" title=\"存储结构\"></a>存储结构</h2><p>WeakHashMap中的数据结构是数组+链表的形式，这一点跟HashMap也是一致的，但不同的是，在JDK8中，当发生较多key冲突的时候，HashMap中会由链表转为红黑树，而WeakHashMap则一直使用链表进行存储。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"./weakhashmap-4.png\" alt=\"weakhashmap-1\" title=\"\">\n                </div>\n                <div class=\"image-caption\">weakhashmap-1</div>\n            </figure>\n<h2 id=\"成员变量\"><a href=\"#成员变量\" class=\"headerlink\" title=\"成员变量\"></a>成员变量</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 默认初始容量，必须是2的幂</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_INITIAL_CAPACITY = <span class=\"number\">16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最大容量</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAXIMUM_CAPACITY = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 默认装载因子</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> DEFAULT_LOAD_FACTOR = <span class=\"number\">0.75f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Entry数组，长度必须为2的幂</span></span><br><span class=\"line\">Entry&lt;K,V&gt;[] table;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 元素个数</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 阈值 </span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> threshold;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 装载因子</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> loadFactor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引用队列</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ReferenceQueue&lt;Object&gt; queue = <span class=\"keyword\">new</span> ReferenceQueue&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改次数</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> modCount;</span><br></pre></td></tr></table></figure>\n<p>跟HashMap的成员变量几乎一致，这里多了一个ReferenceQueue，用来存放那些已经被回收了的弱引用对象。如果想知道ReferenceQueue是如何工作的，可以参考<a href=\"../reference/reference-queue-code-detail.md\">这篇文章</a>。</p>\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><p>WeakHashMap中也有四个构造函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WeakHashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity, <span class=\"keyword\">float</span> loadFactor)</span> </span>&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WeakHashMap</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WeakHashMap</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WeakHashMap</span><span class=\"params\">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(Math.max((<span class=\"keyword\">int</span>) (m.size() / DEFAULT_LOAD_FACTOR) + <span class=\"number\">1</span>,</span><br><span class=\"line\">                  DEFAULT_INITIAL_CAPACITY),</span><br><span class=\"line\">         DEFAULT_LOAD_FACTOR);</span><br><span class=\"line\">    putAll(m);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到后三个，都是调用的第一个构造函数，下面再来看一下第一个构造函数的内容：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 校验initialCapacity</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (initialCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal Initial Capacity: \"</span>+</span><br><span class=\"line\">                                       initialCapacity);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class=\"line\">    initialCapacity = MAXIMUM_CAPACITY;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 校验loadFactor</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (loadFactor &lt;= <span class=\"number\">0</span> || Float.isNaN(loadFactor))</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal Load factor: \"</span>+</span><br><span class=\"line\">                                       loadFactor);</span><br><span class=\"line\"><span class=\"keyword\">int</span> capacity = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// 将容量设置为大于initialCapacity的最小2的幂</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (capacity &lt; initialCapacity)</span><br><span class=\"line\">    capacity &lt;&lt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">table = newTable(capacity);</span><br><span class=\"line\"><span class=\"keyword\">this</span>.loadFactor = loadFactor;</span><br><span class=\"line\">threshold = (<span class=\"keyword\">int</span>)(capacity * loadFactor);</span><br></pre></td></tr></table></figure>\n<p>再看看newTable函数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Entry&lt;K,V&gt;[] newTable(<span class=\"keyword\">int</span> n) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (Entry&lt;K,V&gt;[]) <span class=\"keyword\">new</span> Entry&lt;?,?&gt;[n];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里其实只是简单的创建一个Entry数组。</p>\n<h2 id=\"Entry剖析\"><a href=\"#Entry剖析\" class=\"headerlink\" title=\"Entry剖析\"></a>Entry剖析</h2><p>接下来看看WeakHashMap中的核心角色——Entry。上面已经看到了，WeakHashMap中的table是一个Entry数组：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Entry&lt;K,V&gt;[] table;</span><br></pre></td></tr></table></figure>\n<p>来看看Entry长什么样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">WeakReference</span>&lt;<span class=\"title\">Object</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Map</span>.<span class=\"title\">Entry</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">\t...   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Entry继承自WeakReference，继承关系图如下：</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"./weakhashmap-2.png\" alt=\"weakhashmap-1\" title=\"\">\n                </div>\n                <div class=\"image-caption\">weakhashmap-1</div>\n            </figure>\n<p>再来看看Entry中的内容：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 成员变量</span></span><br><span class=\"line\">V value;</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> hash;</span><br><span class=\"line\">Entry&lt;K,V&gt; next;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">Entry(Object key, V value,</span><br><span class=\"line\">      ReferenceQueue&lt;Object&gt; queue,</span><br><span class=\"line\">      <span class=\"keyword\">int</span> hash, Entry&lt;K,V&gt; next) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(key, queue);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.hash  = hash;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.next  = next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>细心的你可能会发现，哎？key哪里去了，成员变量里没有key。别着急，看看构造函数就可以发现，它调用了父类的构造函数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">super</span>(key, queue);</span><br></pre></td></tr></table></figure>\n<p>这里调用的WeakReference的构造函数，将key传入Reference中，保存在referent成员变量中。对Reference和WeakReference不熟悉的话可以参考<a href=\"../reference/reference-code-detail.md\">这篇文章</a>和<a href=\"../reference/weak-reference-code-detail.md\">这篇文章</a>。</p>\n<p>再看看其它几个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> K <span class=\"title\">getKey</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里调用了Reference的get方法，从中取出referent对象</span></span><br><span class=\"line\">    <span class=\"comment\">// WeakHashMap中，key如果为null会使用NULL_KEY来替代</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (K) WeakHashMap.unmaskNull(get());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">setValue</span><span class=\"params\">(V newValue)</span> </span>&#123;</span><br><span class=\"line\">    V oldValue = value;</span><br><span class=\"line\">    value = newValue;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object o)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(o <span class=\"keyword\">instanceof</span> Map.Entry))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class=\"line\">    K k1 = getKey();</span><br><span class=\"line\">    Object k2 = e.getKey();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k1 == k2 || (k1 != <span class=\"keyword\">null</span> &amp;&amp; k1.equals(k2))) &#123;</span><br><span class=\"line\">        V v1 = getValue();</span><br><span class=\"line\">        Object v2 = e.getValue();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v1 == v2 || (v1 != <span class=\"keyword\">null</span> &amp;&amp; v1.equals(v2)))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    K k = getKey();</span><br><span class=\"line\">    V v = getValue();</span><br><span class=\"line\">    <span class=\"comment\">// 这里只是简单的把key和value的hashcode做一个异或处理</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Objects.hashCode(k) ^ Objects.hashCode(v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getKey() + <span class=\"string\">\"=\"</span> + getValue();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里稍微说一下getKey方法，调用了WeakHashMap.unmaskNull，之所以要调用这个方法，其实是因为WeakHashMap中对key为null时的特殊处理，会将其指向一个特殊的内部变量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object NULL_KEY = <span class=\"keyword\">new</span> Object();</span><br></pre></td></tr></table></figure>\n<p>与其对应的两个方法便是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Object <span class=\"title\">maskNull</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (key == <span class=\"keyword\">null</span>) ? NULL_KEY : key;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> Object <span class=\"title\">unmaskNull</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (key == NULL_KEY) ? <span class=\"keyword\">null</span> : key;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以，其他WeakHashMap中的Entry最大的不同就是继承自WeakReference，并把key保存在了WeakReference中。可以说WeakHashMap的特性绝大部分都是WeakReference的功劳。</p>\n<h2 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h2><p>主要的方法有这些：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>                   <span class=\"title\">clear</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">Object                 <span class=\"title\">clone</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>                <span class=\"title\">containsKey</span><span class=\"params\">(Object key)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>                <span class=\"title\">containsValue</span><span class=\"params\">(Object value)</span></span></span><br><span class=\"line\"><span class=\"function\">Set&lt;Entry&lt;K, V&gt;&gt;       <span class=\"title\">entrySet</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">V                      <span class=\"title\">get</span><span class=\"params\">(Object key)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span>                <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">Set&lt;K&gt;                 <span class=\"title\">keySet</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">V                      <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>                   <span class=\"title\">putAll</span><span class=\"params\">(Map&lt;? extends K, ? extends V&gt; map)</span></span></span><br><span class=\"line\"><span class=\"function\">V                      <span class=\"title\">remove</span><span class=\"params\">(Object key)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>                    <span class=\"title\">size</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">Collection&lt;V&gt;          <span class=\"title\">values</span><span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>\n<p>这里选其中的三个最常用的方法进行解析：</p>\n<h3 id=\"put方法\"><a href=\"#put方法\" class=\"headerlink\" title=\"put方法\"></a>put方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">put</span><span class=\"params\">(K key, V value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理null值</span></span><br><span class=\"line\">    Object k = maskNull(key);</span><br><span class=\"line\">    <span class=\"comment\">// 计算hash</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> h = hash(k);</span><br><span class=\"line\">    <span class=\"comment\">// 获取table</span></span><br><span class=\"line\">    Entry&lt;K,V&gt;[] tab = getTable();</span><br><span class=\"line\">    <span class=\"comment\">// 计算下标</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = indexFor(h, tab.length);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查找Entry</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Entry&lt;K,V&gt; e = tab[i]; e != <span class=\"keyword\">null</span>; e = e.next) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (h == e.hash &amp;&amp; eq(k, e.get())) &#123;</span><br><span class=\"line\">            V oldValue = e.value;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value != oldValue)</span><br><span class=\"line\">                e.value = value;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    Entry&lt;K,V&gt; e = tab[i];</span><br><span class=\"line\">    tab[i] = <span class=\"keyword\">new</span> Entry&lt;&gt;(k, value, queue, h, e);</span><br><span class=\"line\">    <span class=\"comment\">// 如果元素个数超过阈值，则进行扩容</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (++size &gt;= threshold)</span><br><span class=\"line\">        resize(tab.length * <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里涉及到的方法比较多，不慌不慌，一个一个来。</p>\n<p>先来看看hash方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">hash</span><span class=\"params\">(Object k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h = k.hashCode();</span><br><span class=\"line\">    <span class=\"comment\">// 这里做了二次散列，来扩大低位的影响</span></span><br><span class=\"line\">    h ^= (h &gt;&gt;&gt; <span class=\"number\">20</span>) ^ (h &gt;&gt;&gt; <span class=\"number\">12</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h ^ (h &gt;&gt;&gt; <span class=\"number\">7</span>) ^ (h &gt;&gt;&gt; <span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>hash方法对key的hashcode进行了二次散列，主要是为了扩大低位的影响。因为Entry数组的大小是2的幂，在进行查找的时候，进行掩码处理，如果不进行二次散列，那么低位对index就完全没有影响了，如果不清楚也没有关系，之后在get方法里会有说明。</p>\n<p>至于为什么要选20,12,7,4。emmm，大概是效果奇佳吧（一本正经的胡说八道，有兴趣的话可以自行研究）。</p>\n<p>再看看indexFor函数，这里就是将数组长度减1后与hashcode做一个位与操作，因为length必定是2的幂，所以减1后就变成了掩码，再进行与操作就能直接得到hashcode mod length的结果了，但是这样操作效率会更高。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">indexFor</span><span class=\"params\">(<span class=\"keyword\">int</span> h, <span class=\"keyword\">int</span> length)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h &amp; (length-<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再来看看getTable方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Entry&lt;K,V&gt;[] getTable() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 清除被回收的Entry对象</span></span><br><span class=\"line\">    expungeStaleEntries();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">expungeStaleEntries</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Object x; (x = queue.poll()) != <span class=\"keyword\">null</span>; ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 循环获取引用队列中的对象</span></span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (queue) &#123;</span><br><span class=\"line\">            <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">            Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;) x;</span><br><span class=\"line\">            <span class=\"comment\">// 查找对应的位置</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = indexFor(e.hash, table.length);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 找到之前的Entry</span></span><br><span class=\"line\">            Entry&lt;K,V&gt; prev = table[i];</span><br><span class=\"line\">            Entry&lt;K,V&gt; p = prev;</span><br><span class=\"line\">            <span class=\"comment\">// 在链表中寻找</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (p != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                Entry&lt;K,V&gt; next = p.next;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p == e) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (prev == e)</span><br><span class=\"line\">                        table[i] = next;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                        prev.next = next;</span><br><span class=\"line\">                    <span class=\"comment\">// 将对应的value置为null，帮助GC回收</span></span><br><span class=\"line\">                    e.value = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    size--;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                prev = p;</span><br><span class=\"line\">                p = next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以每次调用getTable的时候，都会将table中key已经被回收掉的Entry移除掉。</p>\n<p>resize方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">resize</span><span class=\"params\">(<span class=\"keyword\">int</span> newCapacity)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取当前table</span></span><br><span class=\"line\">    Entry&lt;K,V&gt;[] oldTable = getTable();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldCapacity = oldTable.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;</span><br><span class=\"line\">        threshold = Integer.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 新建一个table</span></span><br><span class=\"line\">    Entry&lt;K,V&gt;[] newTable = newTable(newCapacity);</span><br><span class=\"line\">    <span class=\"comment\">// 将旧table中的内容复制到新table中</span></span><br><span class=\"line\">    transfer(oldTable, newTable);</span><br><span class=\"line\">    table = newTable;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size &gt;= threshold / <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        threshold = (<span class=\"keyword\">int</span>)(newCapacity * loadFactor);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        expungeStaleEntries();</span><br><span class=\"line\">        transfer(newTable, oldTable);</span><br><span class=\"line\">        table = oldTable;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 新建Entry数组</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Entry&lt;K,V&gt;[] newTable(<span class=\"keyword\">int</span> n) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (Entry&lt;K,V&gt;[]) <span class=\"keyword\">new</span> Entry&lt;?,?&gt;[n];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">transfer</span><span class=\"params\">(Entry&lt;K,V&gt;[] src, Entry&lt;K,V&gt;[] dest)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; src.length; ++j) &#123;</span><br><span class=\"line\">        Entry&lt;K,V&gt; e = src[j];</span><br><span class=\"line\">        src[j] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (e != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            Entry&lt;K,V&gt; next = e.next;</span><br><span class=\"line\">            Object key = e.get();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                e.next = <span class=\"keyword\">null</span>; </span><br><span class=\"line\">                e.value = <span class=\"keyword\">null</span>; </span><br><span class=\"line\">                size--;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> i = indexFor(e.hash, dest.length);</span><br><span class=\"line\">                e.next = dest[i];</span><br><span class=\"line\">                dest[i] = e;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            e = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"get方法\"><a href=\"#get方法\" class=\"headerlink\" title=\"get方法\"></a>get方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对null值特殊处理</span></span><br><span class=\"line\">    Object k = maskNull(key);</span><br><span class=\"line\">    <span class=\"comment\">// 取key的hash值</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> h = hash(k);</span><br><span class=\"line\">    <span class=\"comment\">// 取当前table</span></span><br><span class=\"line\">    Entry&lt;K,V&gt;[] tab = getTable();</span><br><span class=\"line\">    <span class=\"comment\">// 获取下标</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = indexFor(h, tab.length);</span><br><span class=\"line\">    Entry&lt;K,V&gt; e = tab[index];</span><br><span class=\"line\">    <span class=\"comment\">// 链表中查找元素</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (e != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.hash == h &amp;&amp; eq(k, e.get()))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> e.value;</span><br><span class=\"line\">        e = e.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在查找元素的时候调用了一个eq方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">eq</span><span class=\"params\">(Object x, Object y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x == y || x.equals(y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"remove方法\"><a href=\"#remove方法\" class=\"headerlink\" title=\"remove方法\"></a>remove方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">remove</span><span class=\"params\">(Object key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对null值特殊处理</span></span><br><span class=\"line\">    Object k = maskNull(key);</span><br><span class=\"line\">    <span class=\"comment\">// 取key的hash</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> h = hash(k);</span><br><span class=\"line\">    <span class=\"comment\">// 取当前table</span></span><br><span class=\"line\">    Entry&lt;K,V&gt;[] tab = getTable();</span><br><span class=\"line\">    <span class=\"comment\">// 计算下标</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = indexFor(h, tab.length);</span><br><span class=\"line\">    Entry&lt;K,V&gt; prev = tab[i];</span><br><span class=\"line\">    Entry&lt;K,V&gt; e = prev;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (e != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        Entry&lt;K,V&gt; next = e.next;</span><br><span class=\"line\">        <span class=\"comment\">// 查找对应Entry</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (h == e.hash &amp;&amp; eq(k, e.get())) &#123;</span><br><span class=\"line\">            modCount++;</span><br><span class=\"line\">            size--;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (prev == e)</span><br><span class=\"line\">                tab[i] = next;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                prev.next = next;</span><br><span class=\"line\">            <span class=\"comment\">// 如果找到，返回对应Entry的value</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> e.value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        prev = e;</span><br><span class=\"line\">        e = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用栗子\"><a href=\"#使用栗子\" class=\"headerlink\" title=\"使用栗子\"></a>使用栗子</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WeakHashMapTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        testWeakHashMap();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testWeakHashMap</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建3个String对象用来做key</span></span><br><span class=\"line\">        String w1 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"key1\"</span>);</span><br><span class=\"line\">        String w2 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"key2\"</span>);</span><br><span class=\"line\">        String w3 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"key3\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 新建WeakHashMap</span></span><br><span class=\"line\">        Map weakHashMap = <span class=\"keyword\">new</span> WeakHashMap();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 添加键值对</span></span><br><span class=\"line\">        weakHashMap.put(w1, <span class=\"string\">\"v1\"</span>);</span><br><span class=\"line\">        weakHashMap.put(w2, <span class=\"string\">\"v2\"</span>);</span><br><span class=\"line\">        weakHashMap.put(w3, <span class=\"string\">\"v3\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 打印出weakHashMap</span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"weakHashMap:%s\\n\"</span>, weakHashMap);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// containsKey(Object key) :是否包含键key</span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"contains key key1 : %s\\n\"</span>,weakHashMap.containsKey(<span class=\"string\">\"key1\"</span>));</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"contains key key4 : %s\\n\"</span>,weakHashMap.containsKey(<span class=\"string\">\"key4\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// containsValue(Object value) :是否包含值value</span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"contains value v1 : %s\\n\"</span>,weakHashMap.containsValue(<span class=\"string\">\"v1\"</span>));</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"contains value 0 : %s\\n\"</span>,weakHashMap.containsValue(<span class=\"number\">0</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// remove(Object key) ： 删除键key对应的键值对</span></span><br><span class=\"line\">        weakHashMap.remove(<span class=\"string\">\"three\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"weakHashMap: %s\\n\"</span>, weakHashMap);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// ---- 测试 WeakHashMap 的自动回收特性 ----</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将w1设置null。</span></span><br><span class=\"line\">        <span class=\"comment\">// 这意味着“弱键”w1再没有被其它对象引用，调用gc时会回收WeakHashMap中与“w1”对应的键值对</span></span><br><span class=\"line\">        w1 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 内存回收。这里，会回收WeakHashMap中与“w1”对应的键值对</span></span><br><span class=\"line\">        System.gc();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 遍历WeakHashMap</span></span><br><span class=\"line\">        Iterator iter = weakHashMap.entrySet().iterator();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (iter.hasNext()) &#123;</span><br><span class=\"line\">            Map.Entry en = (Map.Entry)iter.next();</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">\"next : %s - %s\\n\"</span>,en.getKey(),en.getValue());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 打印WeakHashMap的实际大小</span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"after gc WeakHashMap size:%s\\n\"</span>, weakHashMap.size());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">weakHashMap:&#123;key1=w1, key2=w2, key3=w3&#125;</span><br><span class=\"line\">contains key key1 : <span class=\"keyword\">true</span></span><br><span class=\"line\">contains key key4 : <span class=\"keyword\">false</span></span><br><span class=\"line\">contains value w1 : <span class=\"keyword\">true</span></span><br><span class=\"line\">contains value <span class=\"number\">0</span> : <span class=\"keyword\">false</span></span><br><span class=\"line\">weakHashMap: &#123;key1=w1, key2=w2, key3=w3&#125;</span><br><span class=\"line\">next : key2 - w2</span><br><span class=\"line\">next : key3 - w3</span><br><span class=\"line\">after gc WeakHashMap size:<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，w1对应的Entry被回收掉了，这就是WeakHashMap的最重要特性，当然，实际使用的时候一般不会这样使用，</p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>由于WeakHashMap可以自动清除Entry，所以比较适合用于存储非必需对象，用作缓存非常合适。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcurrentCache</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;K,V&gt; eden;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;K,V&gt; longterm;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConcurrentCache</span><span class=\"params\">(<span class=\"keyword\">int</span> size)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.size = size;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.eden = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;(size);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.longterm = <span class=\"keyword\">new</span> WeakHashMap&lt;&gt;(size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(K k)</span> </span>&#123;</span><br><span class=\"line\">        V v = <span class=\"keyword\">this</span>.eden.get(k);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (longterm) &#123;</span><br><span class=\"line\">                v = <span class=\"keyword\">this</span>.longterm.get(k);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (v != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.eden.put(k, v);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(K k, V v)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.eden.size() &gt;= size) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (longterm) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.longterm.putAll(<span class=\"keyword\">this</span>.eden);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.eden.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.eden.put(k, v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在put方法里，在插入一个键值对时，先检查eden缓存的容量是不是超过了阈值，如果没有超就直接放入eden缓存，如果超了就将eden中所有的键值对都放入longterm（这里longterm类似于老年代，eden类似于年轻代），再将eden清空并插入相应键值对。</p>\n<p>在get方法中，也是优先从eden中找对应的value，如果没有则进入longterm缓存中查找，找到后就加入eden缓存并返回。</p>\n<p>这样设计的好处是，能将相对常用的对象都能在eden缓存中找到，不常用的则存入longterm缓存，并且由于WeakHashMap能自动清除Entry，所以不用担心longterm中键值对过多而导致OOM。</p>\n<p>WeakHashMap还有这样一个不错的应用场景，配合事务进行使用，存储事务过程中的各类信息。可以使用如下结构：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WeakHashMap&lt;String,Map&lt;K,V&gt;&gt; transactionCache;</span><br></pre></td></tr></table></figure>\n<p>这里key为String类型，可以用来标志区分不同的事务，起到一个事务id的作用。value是一个map，可以是一个简单的HashMap或者LinkedHashMap，用来存放在事务中需要使用到的信息。</p>\n<p>在事务开始时创建一个事务id，并用它来作为key，事务结束后，将这个强引用消除掉，这样既能保证在事务中可以获取到所需要的信息，又能自动释放掉map中的所有信息。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li>WeakHashMap是一个会自动清除Entry的Map</li>\n<li>WeakHashMap的操作与HashMap完全一致</li>\n<li>WeakHashMap内部数据结构是数组+链表</li>\n<li>WeakHashMap常被用作缓存</li>\n</ul>\n"},{"title":"Java开发环境搭建——Windows篇","date":"2018-12-28T11:00:02.000Z","_content":"\n> 你为了你的正义，我为了我的正义。 -- 《火影忍者》\n\n## 一、安装JDK\n\n官网下载链接：https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\n\n{% asset_img 1-jdk-windows.png jdk-windows %}\n\n## 二、配置环境变量\n\n需要配置以下几个环境变量：\n\nJAVA_HOME     配置JDK安装路径\n\nPATH                  配置JDK命令文件的位置\n\nCLASSPATH      配置类库文件的位置\n\n### 1、我的电脑（右键）-->属性-->高级系统设置\n\n{% asset_img 2-jdk-windows.png jdk-windows %}\n\n### 2、环境变量-->新建\n\n{% asset_img 3-jdk-windows.png jdk-windows %}\n\n{% asset_img 4-jdk-windows.png jdk-windows %}\n\n{% asset_img 5-jdk-windows.png jdk-windows %})\n\n(1)新建->变量名\"JAVA_HOME\"，变量值\"C:/Java/jdk1.8.0_144\"（即JDK的安装路径） \n\n(2)编辑->变量名\"Path\"，在原变量值的最后面加上“;%JAVA_HOME%/bin;%JAVA_HOME%/jre/bin” \n\n(3)新建->变量名“CLASSPATH”,变量值“.;%JAVA_HOME%/lib;%JAVA_HOME%/lib/dt.jar;%JAVA_HOME%/lib/tools.jar”\n\n### 3、确认环境配置是否正确\n\n在控制台分别输入java，javac，java -version 命令，出现如下所示的JDK的编译器信息，包括修改命令的语法和参数选项等信息。\n\njava命令：\n\n{% asset_img 6-jdk-windows.png jdk-windows %}\n\njavac命令：\n\n{% asset_img 7-jdk-windows.png jdk-windows %}\n\njava -version命令：\n\n{% asset_img 8-jdk-windows.png jdk-windows %}\n\n### 4、在控制台下验证第一个java程序：\n\n右键--》新建--》文本文档\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n    System.out.println(\"Hello World!\");\n    }\n}\n```\n\n用记事本编写好，点击“保存”，并保存在桌面后，先在控制台中进入桌面的目录。\n\n```bash\nC:\ncd /Users/[用户名]/Desktop\n```\n\n上面的[用户名]改成你的计算机用户名即可，不清楚的话打开我的电脑，进C盘目录：C:/Users 找一下。\n\n输入javac Test.java和java Test命令，即可运行程序（打印出结果“Hello Java”）。\n\n{% asset_img 9-jdk-windows.png jdk-windows %}\n\n至此，Java开发环境搭建成功。","source":"_posts/java/introduction/java-environment-windows.md","raw":"---\ntitle: Java开发环境搭建——Windows篇\ntags: \n - Java入门\n - Java\n - 环境搭建\ncategories: 编程\ndate: 2018-12-28 19:00:02\n---\n\n> 你为了你的正义，我为了我的正义。 -- 《火影忍者》\n\n## 一、安装JDK\n\n官网下载链接：https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\n\n{% asset_img 1-jdk-windows.png jdk-windows %}\n\n## 二、配置环境变量\n\n需要配置以下几个环境变量：\n\nJAVA_HOME     配置JDK安装路径\n\nPATH                  配置JDK命令文件的位置\n\nCLASSPATH      配置类库文件的位置\n\n### 1、我的电脑（右键）-->属性-->高级系统设置\n\n{% asset_img 2-jdk-windows.png jdk-windows %}\n\n### 2、环境变量-->新建\n\n{% asset_img 3-jdk-windows.png jdk-windows %}\n\n{% asset_img 4-jdk-windows.png jdk-windows %}\n\n{% asset_img 5-jdk-windows.png jdk-windows %})\n\n(1)新建->变量名\"JAVA_HOME\"，变量值\"C:/Java/jdk1.8.0_144\"（即JDK的安装路径） \n\n(2)编辑->变量名\"Path\"，在原变量值的最后面加上“;%JAVA_HOME%/bin;%JAVA_HOME%/jre/bin” \n\n(3)新建->变量名“CLASSPATH”,变量值“.;%JAVA_HOME%/lib;%JAVA_HOME%/lib/dt.jar;%JAVA_HOME%/lib/tools.jar”\n\n### 3、确认环境配置是否正确\n\n在控制台分别输入java，javac，java -version 命令，出现如下所示的JDK的编译器信息，包括修改命令的语法和参数选项等信息。\n\njava命令：\n\n{% asset_img 6-jdk-windows.png jdk-windows %}\n\njavac命令：\n\n{% asset_img 7-jdk-windows.png jdk-windows %}\n\njava -version命令：\n\n{% asset_img 8-jdk-windows.png jdk-windows %}\n\n### 4、在控制台下验证第一个java程序：\n\n右键--》新建--》文本文档\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n    System.out.println(\"Hello World!\");\n    }\n}\n```\n\n用记事本编写好，点击“保存”，并保存在桌面后，先在控制台中进入桌面的目录。\n\n```bash\nC:\ncd /Users/[用户名]/Desktop\n```\n\n上面的[用户名]改成你的计算机用户名即可，不清楚的话打开我的电脑，进C盘目录：C:/Users 找一下。\n\n输入javac Test.java和java Test命令，即可运行程序（打印出结果“Hello Java”）。\n\n{% asset_img 9-jdk-windows.png jdk-windows %}\n\n至此，Java开发环境搭建成功。","slug":"java/introduction/java-environment-windows","published":1,"updated":"2018-12-28T09:11:32.207Z","_id":"cjq7rm5q7001lwu9k4tkaf5qu","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>&#x4F60;&#x4E3A;&#x4E86;&#x4F60;&#x7684;&#x6B63;&#x4E49;&#xFF0C;&#x6211;&#x4E3A;&#x4E86;&#x6211;&#x7684;&#x6B63;&#x4E49;&#x3002; &#x2013; &#x300A;&#x706B;&#x5F71;&#x5FCD;&#x8005;&#x300B;</p>\n</blockquote>\n<h2 id=\"&#x4E00;&#x3001;&#x5B89;&#x88C5;JDK\"><a href=\"#&#x4E00;&#x3001;&#x5B89;&#x88C5;JDK\" class=\"headerlink\" title=\"&#x4E00;&#x3001;&#x5B89;&#x88C5;JDK\"></a>&#x4E00;&#x3001;&#x5B89;&#x88C5;JDK</h2><p>&#x5B98;&#x7F51;&#x4E0B;&#x8F7D;&#x94FE;&#x63A5;&#xFF1A;<a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p>\n<img src=\"/programming/java/introduction/java-environment-windows/1-jdk-windows.png\" title=\"jdk-windows\">\n<h2 id=\"&#x4E8C;&#x3001;&#x914D;&#x7F6E;&#x73AF;&#x5883;&#x53D8;&#x91CF;\"><a href=\"#&#x4E8C;&#x3001;&#x914D;&#x7F6E;&#x73AF;&#x5883;&#x53D8;&#x91CF;\" class=\"headerlink\" title=\"&#x4E8C;&#x3001;&#x914D;&#x7F6E;&#x73AF;&#x5883;&#x53D8;&#x91CF;\"></a>&#x4E8C;&#x3001;&#x914D;&#x7F6E;&#x73AF;&#x5883;&#x53D8;&#x91CF;</h2><p>&#x9700;&#x8981;&#x914D;&#x7F6E;&#x4EE5;&#x4E0B;&#x51E0;&#x4E2A;&#x73AF;&#x5883;&#x53D8;&#x91CF;&#xFF1A;</p>\n<p>JAVA_HOME     &#x914D;&#x7F6E;JDK&#x5B89;&#x88C5;&#x8DEF;&#x5F84;</p>\n<p>PATH                  &#x914D;&#x7F6E;JDK&#x547D;&#x4EE4;&#x6587;&#x4EF6;&#x7684;&#x4F4D;&#x7F6E;</p>\n<p>CLASSPATH      &#x914D;&#x7F6E;&#x7C7B;&#x5E93;&#x6587;&#x4EF6;&#x7684;&#x4F4D;&#x7F6E;</p>\n<h3 id=\"1&#x3001;&#x6211;&#x7684;&#x7535;&#x8111;&#xFF08;&#x53F3;&#x952E;&#xFF09;&#x2013;-gt-&#x5C5E;&#x6027;&#x2013;-gt-&#x9AD8;&#x7EA7;&#x7CFB;&#x7EDF;&#x8BBE;&#x7F6E;\"><a href=\"#1&#x3001;&#x6211;&#x7684;&#x7535;&#x8111;&#xFF08;&#x53F3;&#x952E;&#xFF09;&#x2013;-gt-&#x5C5E;&#x6027;&#x2013;-gt-&#x9AD8;&#x7EA7;&#x7CFB;&#x7EDF;&#x8BBE;&#x7F6E;\" class=\"headerlink\" title=\"1&#x3001;&#x6211;&#x7684;&#x7535;&#x8111;&#xFF08;&#x53F3;&#x952E;&#xFF09;&#x2013;&gt;&#x5C5E;&#x6027;&#x2013;&gt;&#x9AD8;&#x7EA7;&#x7CFB;&#x7EDF;&#x8BBE;&#x7F6E;\"></a>1&#x3001;&#x6211;&#x7684;&#x7535;&#x8111;&#xFF08;&#x53F3;&#x952E;&#xFF09;&#x2013;&gt;&#x5C5E;&#x6027;&#x2013;&gt;&#x9AD8;&#x7EA7;&#x7CFB;&#x7EDF;&#x8BBE;&#x7F6E;</h3><img src=\"/programming/java/introduction/java-environment-windows/2-jdk-windows.png\" title=\"jdk-windows\">\n<h3 id=\"2&#x3001;&#x73AF;&#x5883;&#x53D8;&#x91CF;&#x2013;-gt-&#x65B0;&#x5EFA;\"><a href=\"#2&#x3001;&#x73AF;&#x5883;&#x53D8;&#x91CF;&#x2013;-gt-&#x65B0;&#x5EFA;\" class=\"headerlink\" title=\"2&#x3001;&#x73AF;&#x5883;&#x53D8;&#x91CF;&#x2013;&gt;&#x65B0;&#x5EFA;\"></a>2&#x3001;&#x73AF;&#x5883;&#x53D8;&#x91CF;&#x2013;&gt;&#x65B0;&#x5EFA;</h3><img src=\"/programming/java/introduction/java-environment-windows/3-jdk-windows.png\" title=\"jdk-windows\">\n<img src=\"/programming/java/introduction/java-environment-windows/4-jdk-windows.png\" title=\"jdk-windows\">\n<img src=\"/programming/java/introduction/java-environment-windows/5-jdk-windows.png\" title=\"jdk-windows\">)<br><br>(1)&#x65B0;&#x5EFA;-&gt;&#x53D8;&#x91CF;&#x540D;&#x201D;JAVA_HOME&#x201D;&#xFF0C;&#x53D8;&#x91CF;&#x503C;&#x201D;C:/Java/jdk1.8.0_144&#x201D;&#xFF08;&#x5373;JDK&#x7684;&#x5B89;&#x88C5;&#x8DEF;&#x5F84;&#xFF09;<br><br>(2)&#x7F16;&#x8F91;-&gt;&#x53D8;&#x91CF;&#x540D;&#x201D;Path&#x201D;&#xFF0C;&#x5728;&#x539F;&#x53D8;&#x91CF;&#x503C;&#x7684;&#x6700;&#x540E;&#x9762;&#x52A0;&#x4E0A;&#x201C;;%JAVA_HOME%/bin;%JAVA_HOME%/jre/bin&#x201D;<br><br>(3)&#x65B0;&#x5EFA;-&gt;&#x53D8;&#x91CF;&#x540D;&#x201C;CLASSPATH&#x201D;,&#x53D8;&#x91CF;&#x503C;&#x201C;.;%JAVA_HOME%/lib;%JAVA_HOME%/lib/dt.jar;%JAVA_HOME%/lib/tools.jar&#x201D;<br><br>### 3&#x3001;&#x786E;&#x8BA4;&#x73AF;&#x5883;&#x914D;&#x7F6E;&#x662F;&#x5426;&#x6B63;&#x786E;<br><br>&#x5728;&#x63A7;&#x5236;&#x53F0;&#x5206;&#x522B;&#x8F93;&#x5165;java&#xFF0C;javac&#xFF0C;java -version &#x547D;&#x4EE4;&#xFF0C;&#x51FA;&#x73B0;&#x5982;&#x4E0B;&#x6240;&#x793A;&#x7684;JDK&#x7684;&#x7F16;&#x8BD1;&#x5668;&#x4FE1;&#x606F;&#xFF0C;&#x5305;&#x62EC;&#x4FEE;&#x6539;&#x547D;&#x4EE4;&#x7684;&#x8BED;&#x6CD5;&#x548C;&#x53C2;&#x6570;&#x9009;&#x9879;&#x7B49;&#x4FE1;&#x606F;&#x3002;<br><br>java&#x547D;&#x4EE4;&#xFF1A;<br><br><img src=\"/programming/java/introduction/java-environment-windows/6-jdk-windows.png\" title=\"jdk-windows\">\n<p>javac&#x547D;&#x4EE4;&#xFF1A;</p>\n<img src=\"/programming/java/introduction/java-environment-windows/7-jdk-windows.png\" title=\"jdk-windows\">\n<p>java -version&#x547D;&#x4EE4;&#xFF1A;</p>\n<img src=\"/programming/java/introduction/java-environment-windows/8-jdk-windows.png\" title=\"jdk-windows\">\n<h3 id=\"4&#x3001;&#x5728;&#x63A7;&#x5236;&#x53F0;&#x4E0B;&#x9A8C;&#x8BC1;&#x7B2C;&#x4E00;&#x4E2A;java&#x7A0B;&#x5E8F;&#xFF1A;\"><a href=\"#4&#x3001;&#x5728;&#x63A7;&#x5236;&#x53F0;&#x4E0B;&#x9A8C;&#x8BC1;&#x7B2C;&#x4E00;&#x4E2A;java&#x7A0B;&#x5E8F;&#xFF1A;\" class=\"headerlink\" title=\"4&#x3001;&#x5728;&#x63A7;&#x5236;&#x53F0;&#x4E0B;&#x9A8C;&#x8BC1;&#x7B2C;&#x4E00;&#x4E2A;java&#x7A0B;&#x5E8F;&#xFF1A;\"></a>4&#x3001;&#x5728;&#x63A7;&#x5236;&#x53F0;&#x4E0B;&#x9A8C;&#x8BC1;&#x7B2C;&#x4E00;&#x4E2A;java&#x7A0B;&#x5E8F;&#xFF1A;</h3><p>&#x53F3;&#x952E;&#x2013;&#x300B;&#x65B0;&#x5EFA;&#x2013;&#x300B;&#x6587;&#x672C;&#x6587;&#x6863;</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>{</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>&#x7528;&#x8BB0;&#x4E8B;&#x672C;&#x7F16;&#x5199;&#x597D;&#xFF0C;&#x70B9;&#x51FB;&#x201C;&#x4FDD;&#x5B58;&#x201D;&#xFF0C;&#x5E76;&#x4FDD;&#x5B58;&#x5728;&#x684C;&#x9762;&#x540E;&#xFF0C;&#x5148;&#x5728;&#x63A7;&#x5236;&#x53F0;&#x4E2D;&#x8FDB;&#x5165;&#x684C;&#x9762;&#x7684;&#x76EE;&#x5F55;&#x3002;</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /Users/[&#x7528;&#x6237;&#x540D;]/Desktop</span><br></pre></td></tr></tbody></table></figure>\n<p>&#x4E0A;&#x9762;&#x7684;[&#x7528;&#x6237;&#x540D;]&#x6539;&#x6210;&#x4F60;&#x7684;&#x8BA1;&#x7B97;&#x673A;&#x7528;&#x6237;&#x540D;&#x5373;&#x53EF;&#xFF0C;&#x4E0D;&#x6E05;&#x695A;&#x7684;&#x8BDD;&#x6253;&#x5F00;&#x6211;&#x7684;&#x7535;&#x8111;&#xFF0C;&#x8FDB;C&#x76D8;&#x76EE;&#x5F55;&#xFF1A;C:/Users &#x627E;&#x4E00;&#x4E0B;&#x3002;</p>\n<p>&#x8F93;&#x5165;javac Test.java&#x548C;java Test&#x547D;&#x4EE4;&#xFF0C;&#x5373;&#x53EF;&#x8FD0;&#x884C;&#x7A0B;&#x5E8F;&#xFF08;&#x6253;&#x5370;&#x51FA;&#x7ED3;&#x679C;&#x201C;Hello Java&#x201D;&#xFF09;&#x3002;</p>\n<img src=\"/programming/java/introduction/java-environment-windows/9-jdk-windows.png\" title=\"jdk-windows\">\n<p>&#x81F3;&#x6B64;&#xFF0C;Java&#x5F00;&#x53D1;&#x73AF;&#x5883;&#x642D;&#x5EFA;&#x6210;&#x529F;&#x3002;</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<blockquote>\n<p>你为了你的正义，我为了我的正义。 – 《火影忍者》</p>\n</blockquote>\n<h2 id=\"一、安装JDK\"><a href=\"#一、安装JDK\" class=\"headerlink\" title=\"一、安装JDK\"></a>一、安装JDK</h2><p>官网下载链接：<a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p>\n<img src=\"/programming/java/introduction/java-environment-windows/1-jdk-windows.png\" title=\"jdk-windows\">\n<h2 id=\"二、配置环境变量\"><a href=\"#二、配置环境变量\" class=\"headerlink\" title=\"二、配置环境变量\"></a>二、配置环境变量</h2><p>需要配置以下几个环境变量：</p>\n<p>JAVA_HOME     配置JDK安装路径</p>\n<p>PATH                  配置JDK命令文件的位置</p>\n<p>CLASSPATH      配置类库文件的位置</p>\n<h3 id=\"1、我的电脑（右键）–-gt-属性–-gt-高级系统设置\"><a href=\"#1、我的电脑（右键）–-gt-属性–-gt-高级系统设置\" class=\"headerlink\" title=\"1、我的电脑（右键）–&gt;属性–&gt;高级系统设置\"></a>1、我的电脑（右键）–&gt;属性–&gt;高级系统设置</h3><img src=\"/programming/java/introduction/java-environment-windows/2-jdk-windows.png\" title=\"jdk-windows\">\n<h3 id=\"2、环境变量–-gt-新建\"><a href=\"#2、环境变量–-gt-新建\" class=\"headerlink\" title=\"2、环境变量–&gt;新建\"></a>2、环境变量–&gt;新建</h3><img src=\"/programming/java/introduction/java-environment-windows/3-jdk-windows.png\" title=\"jdk-windows\">\n<img src=\"/programming/java/introduction/java-environment-windows/4-jdk-windows.png\" title=\"jdk-windows\">\n<img src=\"/programming/java/introduction/java-environment-windows/5-jdk-windows.png\" title=\"jdk-windows\">)<br><br>(1)新建-&gt;变量名”JAVA_HOME”，变量值”C:/Java/jdk1.8.0_144”（即JDK的安装路径）<br><br>(2)编辑-&gt;变量名”Path”，在原变量值的最后面加上“;%JAVA_HOME%/bin;%JAVA_HOME%/jre/bin”<br><br>(3)新建-&gt;变量名“CLASSPATH”,变量值“.;%JAVA_HOME%/lib;%JAVA_HOME%/lib/dt.jar;%JAVA_HOME%/lib/tools.jar”<br><br>### 3、确认环境配置是否正确<br><br>在控制台分别输入java，javac，java -version 命令，出现如下所示的JDK的编译器信息，包括修改命令的语法和参数选项等信息。<br><br>java命令：<br><br><img src=\"/programming/java/introduction/java-environment-windows/6-jdk-windows.png\" title=\"jdk-windows\">\n<p>javac命令：</p>\n<img src=\"/programming/java/introduction/java-environment-windows/7-jdk-windows.png\" title=\"jdk-windows\">\n<p>java -version命令：</p>\n<img src=\"/programming/java/introduction/java-environment-windows/8-jdk-windows.png\" title=\"jdk-windows\">\n<h3 id=\"4、在控制台下验证第一个java程序：\"><a href=\"#4、在控制台下验证第一个java程序：\" class=\"headerlink\" title=\"4、在控制台下验证第一个java程序：\"></a>4、在控制台下验证第一个java程序：</h3><p>右键–》新建–》文本文档</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"Hello World!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用记事本编写好，点击“保存”，并保存在桌面后，先在控制台中进入桌面的目录。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /Users/[用户名]/Desktop</span><br></pre></td></tr></table></figure>\n<p>上面的[用户名]改成你的计算机用户名即可，不清楚的话打开我的电脑，进C盘目录：C:/Users 找一下。</p>\n<p>输入javac Test.java和java Test命令，即可运行程序（打印出结果“Hello Java”）。</p>\n<img src=\"/programming/java/introduction/java-environment-windows/9-jdk-windows.png\" title=\"jdk-windows\">\n<p>至此，Java开发环境搭建成功。</p>\n"},{"title":"Java开发环境搭建——Mac篇","date":"2018-12-28T11:00:03.000Z","_content":"\n> 人非圣贤，孰能无过？过而能改，善莫大焉。 --《左传》\n\n## 步骤说明\n\n主要分为以下几个步骤：\n\n1.到Oracle官网下载JDK1.8安装包。\n\n2.打开获取到的安装包按步骤安装到系统上。\n\n3.配置系统的环境变量。\n\n4.验证JDK1.8是否安装成功。\n\n【由于电脑上已经安装过了jdk8，所以偷懒把别人的文章搬过来了，[原文链接](https://blog.csdn.net/deliciousion/article/details/78046007)】\n\n## 一、下载JDK8\n\n通过下面Oracle官网找到对应的JDK1.8安装包\n\nhttps://www.oracle.com/index.html\n\n打开后如下所示，Oracle主页内容经常变动，读者打开后很有可能不一样。\n\n{% asset_img 1-jdk-mac.png jdk-mac %}\n\n拉到页面底部，找到“Download Java for Developers”，如下红框所示。\n\n{% asset_img 2-jdk-mac.png jdk-mac %}\n\n点开链接后，如下图所示，再点击红框位置，只下载JDK1.8，红框右边的链接是JDK1.8加上NetBeans，一个挺好用的JAVA IDE（集成化开发环境），有需要的可以下载。\n\n{% asset_img 3-jdk-mac.png jdk-mac %}\n\n进入页面后第一步，点击“Accept License Agreement”同意许可证协议。第二步选择JDK对应的操作系统。本次选择“MAC OS X”，最后把相应的安装包下载到本地。\n\n{% asset_img 4-jdk-mac.png jdk-mac %}\n\n## 二、安装JDK\n\n下载完成后，我们得到一个dmg的安装包，如下图所示，名称为 jdk-8u144-macosx-x64.dmg ，表示这是Java 8版本号为144的JDK安装包。\n\n{% asset_img 5-jdk-mac.png jdk-mac %}\n\n双击dmg安装包，打开如下图所示窗口。按照红框的提示，便可轻松完成安装。\n\n{% asset_img 6-jdk-mac.png jdk-mac %}\n\n再双击中间的pkg文件，开始安装，如下图所示。\n\n{% asset_img 7-jdk-mac.png jdk-mac %}\n\n{% asset_img 9-jdk-mac.png jdk-mac %}\n\n{% asset_img 10-jdk-mac.png jdk-mac %}\n\n## 三、配置系统的环境变量\n\n上一步骤，实标上，我们只是把JDK1.8的文件复制到操作系统上。但是我们如果要在terminal终端上使JAVA命令，还有让其实应用知道JDK1.8环境的存在，那我们还需要配置系统的环境变量。\n\n首先我们得知道JDK目录安装在哪里，按照下面的路径我们可以找到JDK的主目录，如下图所示。这里有两个目录是因为本机较早前安装过早期版本的JDK1.8。\n\n/Library/Java/JavaVirtualMachines\n\n{% asset_img 11-jdk-mac.png jdk-mac %}\n\n\n由于MAC文件系统结构，与WINDOWS有所不一样，所以jdk的真实主目录如下\n\n/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home\n\n打开terminal终端，默认打开在自身home家目录下，也可通过cd命令直接跳到家目录。\n\n{% asset_img 12-jdk-mac.png jdk-mac %}\n\n通过 vim .bash_profile 命令打开启动文件，修改内容\n\n{% asset_img 13-jdk-mac.png jdk-mac %}\n\n进入vim，按I进入编辑状态。添加如下内容，如下图所示。再按ESC，输入“:wq”保存退出。配置系统环境变量结束。\n\n{% asset_img 14-jdk-mac.png jdk-mac %}\n\n添加如下内容：\n\n```bash\nexport JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home\n```\n\n注意将jdk1.8.0_45这里改为你下载的JDK版本，不清楚的话，到/Library/Java/JavaVirtualMachines/这个目录下找找。\n\n## 四、验证JDK1.8是否安装成功。\n\n在终端输入java,有如下画面，证明配置成功\n\n{% asset_img 15-jdk-mac.png jdk-mac %}\n\n或输入java -version，有如下版本信息。\n\n{% asset_img 16-jdk-mac.png jdk-mac %}\n\n至此，整个安装JDK1.8过程结束\n","source":"_posts/java/introduction/java-environment-mac.md","raw":"---\ntitle: Java开发环境搭建——Mac篇\ntags: \n - Java入门\n - Java\n - 环境搭建\ncategories: 编程\ndate: 2018-12-28 19:00:03\n---\n\n> 人非圣贤，孰能无过？过而能改，善莫大焉。 --《左传》\n\n## 步骤说明\n\n主要分为以下几个步骤：\n\n1.到Oracle官网下载JDK1.8安装包。\n\n2.打开获取到的安装包按步骤安装到系统上。\n\n3.配置系统的环境变量。\n\n4.验证JDK1.8是否安装成功。\n\n【由于电脑上已经安装过了jdk8，所以偷懒把别人的文章搬过来了，[原文链接](https://blog.csdn.net/deliciousion/article/details/78046007)】\n\n## 一、下载JDK8\n\n通过下面Oracle官网找到对应的JDK1.8安装包\n\nhttps://www.oracle.com/index.html\n\n打开后如下所示，Oracle主页内容经常变动，读者打开后很有可能不一样。\n\n{% asset_img 1-jdk-mac.png jdk-mac %}\n\n拉到页面底部，找到“Download Java for Developers”，如下红框所示。\n\n{% asset_img 2-jdk-mac.png jdk-mac %}\n\n点开链接后，如下图所示，再点击红框位置，只下载JDK1.8，红框右边的链接是JDK1.8加上NetBeans，一个挺好用的JAVA IDE（集成化开发环境），有需要的可以下载。\n\n{% asset_img 3-jdk-mac.png jdk-mac %}\n\n进入页面后第一步，点击“Accept License Agreement”同意许可证协议。第二步选择JDK对应的操作系统。本次选择“MAC OS X”，最后把相应的安装包下载到本地。\n\n{% asset_img 4-jdk-mac.png jdk-mac %}\n\n## 二、安装JDK\n\n下载完成后，我们得到一个dmg的安装包，如下图所示，名称为 jdk-8u144-macosx-x64.dmg ，表示这是Java 8版本号为144的JDK安装包。\n\n{% asset_img 5-jdk-mac.png jdk-mac %}\n\n双击dmg安装包，打开如下图所示窗口。按照红框的提示，便可轻松完成安装。\n\n{% asset_img 6-jdk-mac.png jdk-mac %}\n\n再双击中间的pkg文件，开始安装，如下图所示。\n\n{% asset_img 7-jdk-mac.png jdk-mac %}\n\n{% asset_img 9-jdk-mac.png jdk-mac %}\n\n{% asset_img 10-jdk-mac.png jdk-mac %}\n\n## 三、配置系统的环境变量\n\n上一步骤，实标上，我们只是把JDK1.8的文件复制到操作系统上。但是我们如果要在terminal终端上使JAVA命令，还有让其实应用知道JDK1.8环境的存在，那我们还需要配置系统的环境变量。\n\n首先我们得知道JDK目录安装在哪里，按照下面的路径我们可以找到JDK的主目录，如下图所示。这里有两个目录是因为本机较早前安装过早期版本的JDK1.8。\n\n/Library/Java/JavaVirtualMachines\n\n{% asset_img 11-jdk-mac.png jdk-mac %}\n\n\n由于MAC文件系统结构，与WINDOWS有所不一样，所以jdk的真实主目录如下\n\n/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home\n\n打开terminal终端，默认打开在自身home家目录下，也可通过cd命令直接跳到家目录。\n\n{% asset_img 12-jdk-mac.png jdk-mac %}\n\n通过 vim .bash_profile 命令打开启动文件，修改内容\n\n{% asset_img 13-jdk-mac.png jdk-mac %}\n\n进入vim，按I进入编辑状态。添加如下内容，如下图所示。再按ESC，输入“:wq”保存退出。配置系统环境变量结束。\n\n{% asset_img 14-jdk-mac.png jdk-mac %}\n\n添加如下内容：\n\n```bash\nexport JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home\n```\n\n注意将jdk1.8.0_45这里改为你下载的JDK版本，不清楚的话，到/Library/Java/JavaVirtualMachines/这个目录下找找。\n\n## 四、验证JDK1.8是否安装成功。\n\n在终端输入java,有如下画面，证明配置成功\n\n{% asset_img 15-jdk-mac.png jdk-mac %}\n\n或输入java -version，有如下版本信息。\n\n{% asset_img 16-jdk-mac.png jdk-mac %}\n\n至此，整个安装JDK1.8过程结束\n","slug":"java/introduction/java-environment-mac","published":1,"updated":"2018-12-28T09:11:21.527Z","_id":"cjq7rm5q9001mwu9k0gis50on","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>&#x4EBA;&#x975E;&#x5723;&#x8D24;&#xFF0C;&#x5B70;&#x80FD;&#x65E0;&#x8FC7;&#xFF1F;&#x8FC7;&#x800C;&#x80FD;&#x6539;&#xFF0C;&#x5584;&#x83AB;&#x5927;&#x7109;&#x3002; &#x2013;&#x300A;&#x5DE6;&#x4F20;&#x300B;</p>\n</blockquote>\n<h2 id=\"&#x6B65;&#x9AA4;&#x8BF4;&#x660E;\"><a href=\"#&#x6B65;&#x9AA4;&#x8BF4;&#x660E;\" class=\"headerlink\" title=\"&#x6B65;&#x9AA4;&#x8BF4;&#x660E;\"></a>&#x6B65;&#x9AA4;&#x8BF4;&#x660E;</h2><p>&#x4E3B;&#x8981;&#x5206;&#x4E3A;&#x4EE5;&#x4E0B;&#x51E0;&#x4E2A;&#x6B65;&#x9AA4;&#xFF1A;</p>\n<p>1.&#x5230;Oracle&#x5B98;&#x7F51;&#x4E0B;&#x8F7D;JDK1.8&#x5B89;&#x88C5;&#x5305;&#x3002;</p>\n<p>2.&#x6253;&#x5F00;&#x83B7;&#x53D6;&#x5230;&#x7684;&#x5B89;&#x88C5;&#x5305;&#x6309;&#x6B65;&#x9AA4;&#x5B89;&#x88C5;&#x5230;&#x7CFB;&#x7EDF;&#x4E0A;&#x3002;</p>\n<p>3.&#x914D;&#x7F6E;&#x7CFB;&#x7EDF;&#x7684;&#x73AF;&#x5883;&#x53D8;&#x91CF;&#x3002;</p>\n<p>4.&#x9A8C;&#x8BC1;JDK1.8&#x662F;&#x5426;&#x5B89;&#x88C5;&#x6210;&#x529F;&#x3002;</p>\n<p>&#x3010;&#x7531;&#x4E8E;&#x7535;&#x8111;&#x4E0A;&#x5DF2;&#x7ECF;&#x5B89;&#x88C5;&#x8FC7;&#x4E86;jdk8&#xFF0C;&#x6240;&#x4EE5;&#x5077;&#x61D2;&#x628A;&#x522B;&#x4EBA;&#x7684;&#x6587;&#x7AE0;&#x642C;&#x8FC7;&#x6765;&#x4E86;&#xFF0C;<a href=\"https://blog.csdn.net/deliciousion/article/details/78046007\" target=\"_blank\" rel=\"noopener\">&#x539F;&#x6587;&#x94FE;&#x63A5;</a>&#x3011;</p>\n<h2 id=\"&#x4E00;&#x3001;&#x4E0B;&#x8F7D;JDK8\"><a href=\"#&#x4E00;&#x3001;&#x4E0B;&#x8F7D;JDK8\" class=\"headerlink\" title=\"&#x4E00;&#x3001;&#x4E0B;&#x8F7D;JDK8\"></a>&#x4E00;&#x3001;&#x4E0B;&#x8F7D;JDK8</h2><p>&#x901A;&#x8FC7;&#x4E0B;&#x9762;Oracle&#x5B98;&#x7F51;&#x627E;&#x5230;&#x5BF9;&#x5E94;&#x7684;JDK1.8&#x5B89;&#x88C5;&#x5305;</p>\n<p><a href=\"https://www.oracle.com/index.html\" target=\"_blank\" rel=\"noopener\">https://www.oracle.com/index.html</a></p>\n<p>&#x6253;&#x5F00;&#x540E;&#x5982;&#x4E0B;&#x6240;&#x793A;&#xFF0C;Oracle&#x4E3B;&#x9875;&#x5185;&#x5BB9;&#x7ECF;&#x5E38;&#x53D8;&#x52A8;&#xFF0C;&#x8BFB;&#x8005;&#x6253;&#x5F00;&#x540E;&#x5F88;&#x6709;&#x53EF;&#x80FD;&#x4E0D;&#x4E00;&#x6837;&#x3002;</p>\n<img src=\"/programming/java/introduction/java-environment-mac/1-jdk-mac.png\" title=\"jdk-mac\">\n<p>&#x62C9;&#x5230;&#x9875;&#x9762;&#x5E95;&#x90E8;&#xFF0C;&#x627E;&#x5230;&#x201C;Download Java for Developers&#x201D;&#xFF0C;&#x5982;&#x4E0B;&#x7EA2;&#x6846;&#x6240;&#x793A;&#x3002;</p>\n<img src=\"/programming/java/introduction/java-environment-mac/2-jdk-mac.png\" title=\"jdk-mac\">\n<p>&#x70B9;&#x5F00;&#x94FE;&#x63A5;&#x540E;&#xFF0C;&#x5982;&#x4E0B;&#x56FE;&#x6240;&#x793A;&#xFF0C;&#x518D;&#x70B9;&#x51FB;&#x7EA2;&#x6846;&#x4F4D;&#x7F6E;&#xFF0C;&#x53EA;&#x4E0B;&#x8F7D;JDK1.8&#xFF0C;&#x7EA2;&#x6846;&#x53F3;&#x8FB9;&#x7684;&#x94FE;&#x63A5;&#x662F;JDK1.8&#x52A0;&#x4E0A;NetBeans&#xFF0C;&#x4E00;&#x4E2A;&#x633A;&#x597D;&#x7528;&#x7684;JAVA IDE&#xFF08;&#x96C6;&#x6210;&#x5316;&#x5F00;&#x53D1;&#x73AF;&#x5883;&#xFF09;&#xFF0C;&#x6709;&#x9700;&#x8981;&#x7684;&#x53EF;&#x4EE5;&#x4E0B;&#x8F7D;&#x3002;</p>\n<img src=\"/programming/java/introduction/java-environment-mac/3-jdk-mac.png\" title=\"jdk-mac\">\n<p>&#x8FDB;&#x5165;&#x9875;&#x9762;&#x540E;&#x7B2C;&#x4E00;&#x6B65;&#xFF0C;&#x70B9;&#x51FB;&#x201C;Accept License Agreement&#x201D;&#x540C;&#x610F;&#x8BB8;&#x53EF;&#x8BC1;&#x534F;&#x8BAE;&#x3002;&#x7B2C;&#x4E8C;&#x6B65;&#x9009;&#x62E9;JDK&#x5BF9;&#x5E94;&#x7684;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x3002;&#x672C;&#x6B21;&#x9009;&#x62E9;&#x201C;MAC OS X&#x201D;&#xFF0C;&#x6700;&#x540E;&#x628A;&#x76F8;&#x5E94;&#x7684;&#x5B89;&#x88C5;&#x5305;&#x4E0B;&#x8F7D;&#x5230;&#x672C;&#x5730;&#x3002;</p>\n<img src=\"/programming/java/introduction/java-environment-mac/4-jdk-mac.png\" title=\"jdk-mac\">\n<h2 id=\"&#x4E8C;&#x3001;&#x5B89;&#x88C5;JDK\"><a href=\"#&#x4E8C;&#x3001;&#x5B89;&#x88C5;JDK\" class=\"headerlink\" title=\"&#x4E8C;&#x3001;&#x5B89;&#x88C5;JDK\"></a>&#x4E8C;&#x3001;&#x5B89;&#x88C5;JDK</h2><p>&#x4E0B;&#x8F7D;&#x5B8C;&#x6210;&#x540E;&#xFF0C;&#x6211;&#x4EEC;&#x5F97;&#x5230;&#x4E00;&#x4E2A;dmg&#x7684;&#x5B89;&#x88C5;&#x5305;&#xFF0C;&#x5982;&#x4E0B;&#x56FE;&#x6240;&#x793A;&#xFF0C;&#x540D;&#x79F0;&#x4E3A; jdk-8u144-macosx-x64.dmg &#xFF0C;&#x8868;&#x793A;&#x8FD9;&#x662F;Java 8&#x7248;&#x672C;&#x53F7;&#x4E3A;144&#x7684;JDK&#x5B89;&#x88C5;&#x5305;&#x3002;</p>\n<img src=\"/programming/java/introduction/java-environment-mac/5-jdk-mac.png\" title=\"jdk-mac\">\n<p>&#x53CC;&#x51FB;dmg&#x5B89;&#x88C5;&#x5305;&#xFF0C;&#x6253;&#x5F00;&#x5982;&#x4E0B;&#x56FE;&#x6240;&#x793A;&#x7A97;&#x53E3;&#x3002;&#x6309;&#x7167;&#x7EA2;&#x6846;&#x7684;&#x63D0;&#x793A;&#xFF0C;&#x4FBF;&#x53EF;&#x8F7B;&#x677E;&#x5B8C;&#x6210;&#x5B89;&#x88C5;&#x3002;</p>\n<img src=\"/programming/java/introduction/java-environment-mac/6-jdk-mac.png\" title=\"jdk-mac\">\n<p>&#x518D;&#x53CC;&#x51FB;&#x4E2D;&#x95F4;&#x7684;pkg&#x6587;&#x4EF6;&#xFF0C;&#x5F00;&#x59CB;&#x5B89;&#x88C5;&#xFF0C;&#x5982;&#x4E0B;&#x56FE;&#x6240;&#x793A;&#x3002;</p>\n<img src=\"/programming/java/introduction/java-environment-mac/7-jdk-mac.png\" title=\"jdk-mac\">\n<img src=\"/programming/java/introduction/java-environment-mac/9-jdk-mac.png\" title=\"jdk-mac\">\n<img src=\"/programming/java/introduction/java-environment-mac/10-jdk-mac.png\" title=\"jdk-mac\">\n<h2 id=\"&#x4E09;&#x3001;&#x914D;&#x7F6E;&#x7CFB;&#x7EDF;&#x7684;&#x73AF;&#x5883;&#x53D8;&#x91CF;\"><a href=\"#&#x4E09;&#x3001;&#x914D;&#x7F6E;&#x7CFB;&#x7EDF;&#x7684;&#x73AF;&#x5883;&#x53D8;&#x91CF;\" class=\"headerlink\" title=\"&#x4E09;&#x3001;&#x914D;&#x7F6E;&#x7CFB;&#x7EDF;&#x7684;&#x73AF;&#x5883;&#x53D8;&#x91CF;\"></a>&#x4E09;&#x3001;&#x914D;&#x7F6E;&#x7CFB;&#x7EDF;&#x7684;&#x73AF;&#x5883;&#x53D8;&#x91CF;</h2><p>&#x4E0A;&#x4E00;&#x6B65;&#x9AA4;&#xFF0C;&#x5B9E;&#x6807;&#x4E0A;&#xFF0C;&#x6211;&#x4EEC;&#x53EA;&#x662F;&#x628A;JDK1.8&#x7684;&#x6587;&#x4EF6;&#x590D;&#x5236;&#x5230;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x4E0A;&#x3002;&#x4F46;&#x662F;&#x6211;&#x4EEC;&#x5982;&#x679C;&#x8981;&#x5728;terminal&#x7EC8;&#x7AEF;&#x4E0A;&#x4F7F;JAVA&#x547D;&#x4EE4;&#xFF0C;&#x8FD8;&#x6709;&#x8BA9;&#x5176;&#x5B9E;&#x5E94;&#x7528;&#x77E5;&#x9053;JDK1.8&#x73AF;&#x5883;&#x7684;&#x5B58;&#x5728;&#xFF0C;&#x90A3;&#x6211;&#x4EEC;&#x8FD8;&#x9700;&#x8981;&#x914D;&#x7F6E;&#x7CFB;&#x7EDF;&#x7684;&#x73AF;&#x5883;&#x53D8;&#x91CF;&#x3002;</p>\n<p>&#x9996;&#x5148;&#x6211;&#x4EEC;&#x5F97;&#x77E5;&#x9053;JDK&#x76EE;&#x5F55;&#x5B89;&#x88C5;&#x5728;&#x54EA;&#x91CC;&#xFF0C;&#x6309;&#x7167;&#x4E0B;&#x9762;&#x7684;&#x8DEF;&#x5F84;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x627E;&#x5230;JDK&#x7684;&#x4E3B;&#x76EE;&#x5F55;&#xFF0C;&#x5982;&#x4E0B;&#x56FE;&#x6240;&#x793A;&#x3002;&#x8FD9;&#x91CC;&#x6709;&#x4E24;&#x4E2A;&#x76EE;&#x5F55;&#x662F;&#x56E0;&#x4E3A;&#x672C;&#x673A;&#x8F83;&#x65E9;&#x524D;&#x5B89;&#x88C5;&#x8FC7;&#x65E9;&#x671F;&#x7248;&#x672C;&#x7684;JDK1.8&#x3002;</p>\n<p>/Library/Java/JavaVirtualMachines</p>\n<img src=\"/programming/java/introduction/java-environment-mac/11-jdk-mac.png\" title=\"jdk-mac\">\n<p>&#x7531;&#x4E8E;MAC&#x6587;&#x4EF6;&#x7CFB;&#x7EDF;&#x7ED3;&#x6784;&#xFF0C;&#x4E0E;WINDOWS&#x6709;&#x6240;&#x4E0D;&#x4E00;&#x6837;&#xFF0C;&#x6240;&#x4EE5;jdk&#x7684;&#x771F;&#x5B9E;&#x4E3B;&#x76EE;&#x5F55;&#x5982;&#x4E0B;</p>\n<p>/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home</p>\n<p>&#x6253;&#x5F00;terminal&#x7EC8;&#x7AEF;&#xFF0C;&#x9ED8;&#x8BA4;&#x6253;&#x5F00;&#x5728;&#x81EA;&#x8EAB;home&#x5BB6;&#x76EE;&#x5F55;&#x4E0B;&#xFF0C;&#x4E5F;&#x53EF;&#x901A;&#x8FC7;cd&#x547D;&#x4EE4;&#x76F4;&#x63A5;&#x8DF3;&#x5230;&#x5BB6;&#x76EE;&#x5F55;&#x3002;</p>\n<img src=\"/programming/java/introduction/java-environment-mac/12-jdk-mac.png\" title=\"jdk-mac\">\n<p>&#x901A;&#x8FC7; vim .bash_profile &#x547D;&#x4EE4;&#x6253;&#x5F00;&#x542F;&#x52A8;&#x6587;&#x4EF6;&#xFF0C;&#x4FEE;&#x6539;&#x5185;&#x5BB9;</p>\n<img src=\"/programming/java/introduction/java-environment-mac/13-jdk-mac.png\" title=\"jdk-mac\">\n<p>&#x8FDB;&#x5165;vim&#xFF0C;&#x6309;I&#x8FDB;&#x5165;&#x7F16;&#x8F91;&#x72B6;&#x6001;&#x3002;&#x6DFB;&#x52A0;&#x5982;&#x4E0B;&#x5185;&#x5BB9;&#xFF0C;&#x5982;&#x4E0B;&#x56FE;&#x6240;&#x793A;&#x3002;&#x518D;&#x6309;ESC&#xFF0C;&#x8F93;&#x5165;&#x201C;:wq&#x201D;&#x4FDD;&#x5B58;&#x9000;&#x51FA;&#x3002;&#x914D;&#x7F6E;&#x7CFB;&#x7EDF;&#x73AF;&#x5883;&#x53D8;&#x91CF;&#x7ED3;&#x675F;&#x3002;</p>\n<img src=\"/programming/java/introduction/java-environment-mac/14-jdk-mac.png\" title=\"jdk-mac\">\n<p>&#x6DFB;&#x52A0;&#x5982;&#x4E0B;&#x5185;&#x5BB9;&#xFF1A;</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home</span><br></pre></td></tr></tbody></table></figure>\n<p>&#x6CE8;&#x610F;&#x5C06;jdk1.8.0_45&#x8FD9;&#x91CC;&#x6539;&#x4E3A;&#x4F60;&#x4E0B;&#x8F7D;&#x7684;JDK&#x7248;&#x672C;&#xFF0C;&#x4E0D;&#x6E05;&#x695A;&#x7684;&#x8BDD;&#xFF0C;&#x5230;/Library/Java/JavaVirtualMachines/&#x8FD9;&#x4E2A;&#x76EE;&#x5F55;&#x4E0B;&#x627E;&#x627E;&#x3002;</p>\n<h2 id=\"&#x56DB;&#x3001;&#x9A8C;&#x8BC1;JDK1-8&#x662F;&#x5426;&#x5B89;&#x88C5;&#x6210;&#x529F;&#x3002;\"><a href=\"#&#x56DB;&#x3001;&#x9A8C;&#x8BC1;JDK1-8&#x662F;&#x5426;&#x5B89;&#x88C5;&#x6210;&#x529F;&#x3002;\" class=\"headerlink\" title=\"&#x56DB;&#x3001;&#x9A8C;&#x8BC1;JDK1.8&#x662F;&#x5426;&#x5B89;&#x88C5;&#x6210;&#x529F;&#x3002;\"></a>&#x56DB;&#x3001;&#x9A8C;&#x8BC1;JDK1.8&#x662F;&#x5426;&#x5B89;&#x88C5;&#x6210;&#x529F;&#x3002;</h2><p>&#x5728;&#x7EC8;&#x7AEF;&#x8F93;&#x5165;java,&#x6709;&#x5982;&#x4E0B;&#x753B;&#x9762;&#xFF0C;&#x8BC1;&#x660E;&#x914D;&#x7F6E;&#x6210;&#x529F;</p>\n<img src=\"/programming/java/introduction/java-environment-mac/15-jdk-mac.png\" title=\"jdk-mac\">\n<p>&#x6216;&#x8F93;&#x5165;java -version&#xFF0C;&#x6709;&#x5982;&#x4E0B;&#x7248;&#x672C;&#x4FE1;&#x606F;&#x3002;</p>\n<img src=\"/programming/java/introduction/java-environment-mac/16-jdk-mac.png\" title=\"jdk-mac\">\n<p>&#x81F3;&#x6B64;&#xFF0C;&#x6574;&#x4E2A;&#x5B89;&#x88C5;JDK1.8&#x8FC7;&#x7A0B;&#x7ED3;&#x675F;</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<blockquote>\n<p>人非圣贤，孰能无过？过而能改，善莫大焉。 –《左传》</p>\n</blockquote>\n<h2 id=\"步骤说明\"><a href=\"#步骤说明\" class=\"headerlink\" title=\"步骤说明\"></a>步骤说明</h2><p>主要分为以下几个步骤：</p>\n<p>1.到Oracle官网下载JDK1.8安装包。</p>\n<p>2.打开获取到的安装包按步骤安装到系统上。</p>\n<p>3.配置系统的环境变量。</p>\n<p>4.验证JDK1.8是否安装成功。</p>\n<p>【由于电脑上已经安装过了jdk8，所以偷懒把别人的文章搬过来了，<a href=\"https://blog.csdn.net/deliciousion/article/details/78046007\" target=\"_blank\" rel=\"noopener\">原文链接</a>】</p>\n<h2 id=\"一、下载JDK8\"><a href=\"#一、下载JDK8\" class=\"headerlink\" title=\"一、下载JDK8\"></a>一、下载JDK8</h2><p>通过下面Oracle官网找到对应的JDK1.8安装包</p>\n<p><a href=\"https://www.oracle.com/index.html\" target=\"_blank\" rel=\"noopener\">https://www.oracle.com/index.html</a></p>\n<p>打开后如下所示，Oracle主页内容经常变动，读者打开后很有可能不一样。</p>\n<img src=\"/programming/java/introduction/java-environment-mac/1-jdk-mac.png\" title=\"jdk-mac\">\n<p>拉到页面底部，找到“Download Java for Developers”，如下红框所示。</p>\n<img src=\"/programming/java/introduction/java-environment-mac/2-jdk-mac.png\" title=\"jdk-mac\">\n<p>点开链接后，如下图所示，再点击红框位置，只下载JDK1.8，红框右边的链接是JDK1.8加上NetBeans，一个挺好用的JAVA IDE（集成化开发环境），有需要的可以下载。</p>\n<img src=\"/programming/java/introduction/java-environment-mac/3-jdk-mac.png\" title=\"jdk-mac\">\n<p>进入页面后第一步，点击“Accept License Agreement”同意许可证协议。第二步选择JDK对应的操作系统。本次选择“MAC OS X”，最后把相应的安装包下载到本地。</p>\n<img src=\"/programming/java/introduction/java-environment-mac/4-jdk-mac.png\" title=\"jdk-mac\">\n<h2 id=\"二、安装JDK\"><a href=\"#二、安装JDK\" class=\"headerlink\" title=\"二、安装JDK\"></a>二、安装JDK</h2><p>下载完成后，我们得到一个dmg的安装包，如下图所示，名称为 jdk-8u144-macosx-x64.dmg ，表示这是Java 8版本号为144的JDK安装包。</p>\n<img src=\"/programming/java/introduction/java-environment-mac/5-jdk-mac.png\" title=\"jdk-mac\">\n<p>双击dmg安装包，打开如下图所示窗口。按照红框的提示，便可轻松完成安装。</p>\n<img src=\"/programming/java/introduction/java-environment-mac/6-jdk-mac.png\" title=\"jdk-mac\">\n<p>再双击中间的pkg文件，开始安装，如下图所示。</p>\n<img src=\"/programming/java/introduction/java-environment-mac/7-jdk-mac.png\" title=\"jdk-mac\">\n<img src=\"/programming/java/introduction/java-environment-mac/9-jdk-mac.png\" title=\"jdk-mac\">\n<img src=\"/programming/java/introduction/java-environment-mac/10-jdk-mac.png\" title=\"jdk-mac\">\n<h2 id=\"三、配置系统的环境变量\"><a href=\"#三、配置系统的环境变量\" class=\"headerlink\" title=\"三、配置系统的环境变量\"></a>三、配置系统的环境变量</h2><p>上一步骤，实标上，我们只是把JDK1.8的文件复制到操作系统上。但是我们如果要在terminal终端上使JAVA命令，还有让其实应用知道JDK1.8环境的存在，那我们还需要配置系统的环境变量。</p>\n<p>首先我们得知道JDK目录安装在哪里，按照下面的路径我们可以找到JDK的主目录，如下图所示。这里有两个目录是因为本机较早前安装过早期版本的JDK1.8。</p>\n<p>/Library/Java/JavaVirtualMachines</p>\n<img src=\"/programming/java/introduction/java-environment-mac/11-jdk-mac.png\" title=\"jdk-mac\">\n<p>由于MAC文件系统结构，与WINDOWS有所不一样，所以jdk的真实主目录如下</p>\n<p>/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home</p>\n<p>打开terminal终端，默认打开在自身home家目录下，也可通过cd命令直接跳到家目录。</p>\n<img src=\"/programming/java/introduction/java-environment-mac/12-jdk-mac.png\" title=\"jdk-mac\">\n<p>通过 vim .bash_profile 命令打开启动文件，修改内容</p>\n<img src=\"/programming/java/introduction/java-environment-mac/13-jdk-mac.png\" title=\"jdk-mac\">\n<p>进入vim，按I进入编辑状态。添加如下内容，如下图所示。再按ESC，输入“:wq”保存退出。配置系统环境变量结束。</p>\n<img src=\"/programming/java/introduction/java-environment-mac/14-jdk-mac.png\" title=\"jdk-mac\">\n<p>添加如下内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home</span><br></pre></td></tr></table></figure>\n<p>注意将jdk1.8.0_45这里改为你下载的JDK版本，不清楚的话，到/Library/Java/JavaVirtualMachines/这个目录下找找。</p>\n<h2 id=\"四、验证JDK1-8是否安装成功。\"><a href=\"#四、验证JDK1-8是否安装成功。\" class=\"headerlink\" title=\"四、验证JDK1.8是否安装成功。\"></a>四、验证JDK1.8是否安装成功。</h2><p>在终端输入java,有如下画面，证明配置成功</p>\n<img src=\"/programming/java/introduction/java-environment-mac/15-jdk-mac.png\" title=\"jdk-mac\">\n<p>或输入java -version，有如下版本信息。</p>\n<img src=\"/programming/java/introduction/java-environment-mac/16-jdk-mac.png\" title=\"jdk-mac\">\n<p>至此，整个安装JDK1.8过程结束</p>\n"},{"title":"Java开发环境搭建——概念说明","date":"2018-12-28T11:00:01.000Z","_content":"\n> 如果不能忠于自己的心，胜负又有什么价值呢？\n\n## 说明\n\n前面说到Java也有一个大工厂，可以让你随心所欲的创建想要创建的事物，但是想要使用这个工厂，还得先部署这个工厂，它就是JDK。\n\n在此之前，先介绍几个概念：JVM、JRE、JDK。\n\n## JVM（Java Virtual Machine）\n\nJVM 即 Java虚拟机，是Java这个大工厂中的熔炉，也是驱动这个工厂运行的核心组件。\n\nJava是能够跨平台运行的，也就是说，同样的代码可以不经修改的在windows系统、linux系统、mac系统上运行并得到相同的结果。JVM在这个过程中扮演着十分重要的角色，它就像一位翻译官，由它间接的与具体的系统打交道。不同系统有着不同的指令集，可以理解为有不同的语言，但JVM这位翻译官精通各个系统的语言，可以将我们的代码翻译给系统去执行。Java代码被编译为.class文件后，由虚拟机将字节码文件解释成具体平台上的机器指令。\n\nJVM其实是一种规范，只要按这种规范设计的产品都可以叫做虚拟机，目前来说比较主流的虚拟机有，HotSpot、J9 VM、Zing VM。\n\n## JRE（Java Runtime Environment）\n\nJRE 即 Java运行时环境，是运行 Java 程序必不可少的，既然是运行，自然要包含JVM，同时还包含了JVM标准实现及Java核心类库，提供了Java运行时必要的基础信息。光有JVM无法完成class的执行，因为在解释class的时候JVM需要调用解释所需要的类库lib。 可以这样理解，JVM只是一名翻译官，还需要各个助理才能完成各项具体任务，JRE 并不是一个开发环境，所以没有包含任何开发工具（如编译器和调试器）。\n\n## JDK（Java Development Kit）\n\nJDK 是 Java 语言的软件开发工具包，是 Java 开发者所必须的内容，也就是我们之后要部署的东西，主要包含了各种类库和工具，当然也包含了一个JRE。\n\n综上所述，JDK中包含有JRE，JRE中包含有JVM，所以JDK在手，天下我有【手动滑稽】。想要进行Java开发，就必须要部署JDK环境，但如果只是想要运行Java开发的软件，那么安装一个JRE就足够了。\n","source":"_posts/java/introduction/java-environment.md","raw":"---\ntitle: Java开发环境搭建——概念说明\ntags: \n - Java入门\n - Java\n - 环境搭建\ncategories: 编程\ndate: 2018-12-28 19:00:01\n---\n\n> 如果不能忠于自己的心，胜负又有什么价值呢？\n\n## 说明\n\n前面说到Java也有一个大工厂，可以让你随心所欲的创建想要创建的事物，但是想要使用这个工厂，还得先部署这个工厂，它就是JDK。\n\n在此之前，先介绍几个概念：JVM、JRE、JDK。\n\n## JVM（Java Virtual Machine）\n\nJVM 即 Java虚拟机，是Java这个大工厂中的熔炉，也是驱动这个工厂运行的核心组件。\n\nJava是能够跨平台运行的，也就是说，同样的代码可以不经修改的在windows系统、linux系统、mac系统上运行并得到相同的结果。JVM在这个过程中扮演着十分重要的角色，它就像一位翻译官，由它间接的与具体的系统打交道。不同系统有着不同的指令集，可以理解为有不同的语言，但JVM这位翻译官精通各个系统的语言，可以将我们的代码翻译给系统去执行。Java代码被编译为.class文件后，由虚拟机将字节码文件解释成具体平台上的机器指令。\n\nJVM其实是一种规范，只要按这种规范设计的产品都可以叫做虚拟机，目前来说比较主流的虚拟机有，HotSpot、J9 VM、Zing VM。\n\n## JRE（Java Runtime Environment）\n\nJRE 即 Java运行时环境，是运行 Java 程序必不可少的，既然是运行，自然要包含JVM，同时还包含了JVM标准实现及Java核心类库，提供了Java运行时必要的基础信息。光有JVM无法完成class的执行，因为在解释class的时候JVM需要调用解释所需要的类库lib。 可以这样理解，JVM只是一名翻译官，还需要各个助理才能完成各项具体任务，JRE 并不是一个开发环境，所以没有包含任何开发工具（如编译器和调试器）。\n\n## JDK（Java Development Kit）\n\nJDK 是 Java 语言的软件开发工具包，是 Java 开发者所必须的内容，也就是我们之后要部署的东西，主要包含了各种类库和工具，当然也包含了一个JRE。\n\n综上所述，JDK中包含有JRE，JRE中包含有JVM，所以JDK在手，天下我有【手动滑稽】。想要进行Java开发，就必须要部署JDK环境，但如果只是想要运行Java开发的软件，那么安装一个JRE就足够了。\n","slug":"java/introduction/java-environment","published":1,"updated":"2018-12-28T09:08:49.168Z","_id":"cjq7rm5q9001nwu9k7t34u2tz","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>&#x5982;&#x679C;&#x4E0D;&#x80FD;&#x5FE0;&#x4E8E;&#x81EA;&#x5DF1;&#x7684;&#x5FC3;&#xFF0C;&#x80DC;&#x8D1F;&#x53C8;&#x6709;&#x4EC0;&#x4E48;&#x4EF7;&#x503C;&#x5462;&#xFF1F;</p>\n</blockquote>\n<h2 id=\"&#x8BF4;&#x660E;\"><a href=\"#&#x8BF4;&#x660E;\" class=\"headerlink\" title=\"&#x8BF4;&#x660E;\"></a>&#x8BF4;&#x660E;</h2><p>&#x524D;&#x9762;&#x8BF4;&#x5230;Java&#x4E5F;&#x6709;&#x4E00;&#x4E2A;&#x5927;&#x5DE5;&#x5382;&#xFF0C;&#x53EF;&#x4EE5;&#x8BA9;&#x4F60;&#x968F;&#x5FC3;&#x6240;&#x6B32;&#x7684;&#x521B;&#x5EFA;&#x60F3;&#x8981;&#x521B;&#x5EFA;&#x7684;&#x4E8B;&#x7269;&#xFF0C;&#x4F46;&#x662F;&#x60F3;&#x8981;&#x4F7F;&#x7528;&#x8FD9;&#x4E2A;&#x5DE5;&#x5382;&#xFF0C;&#x8FD8;&#x5F97;&#x5148;&#x90E8;&#x7F72;&#x8FD9;&#x4E2A;&#x5DE5;&#x5382;&#xFF0C;&#x5B83;&#x5C31;&#x662F;JDK&#x3002;</p>\n<p>&#x5728;&#x6B64;&#x4E4B;&#x524D;&#xFF0C;&#x5148;&#x4ECB;&#x7ECD;&#x51E0;&#x4E2A;&#x6982;&#x5FF5;&#xFF1A;JVM&#x3001;JRE&#x3001;JDK&#x3002;</p>\n<h2 id=\"JVM&#xFF08;Java-Virtual-Machine&#xFF09;\"><a href=\"#JVM&#xFF08;Java-Virtual-Machine&#xFF09;\" class=\"headerlink\" title=\"JVM&#xFF08;Java Virtual Machine&#xFF09;\"></a>JVM&#xFF08;Java Virtual Machine&#xFF09;</h2><p>JVM &#x5373; Java&#x865A;&#x62DF;&#x673A;&#xFF0C;&#x662F;Java&#x8FD9;&#x4E2A;&#x5927;&#x5DE5;&#x5382;&#x4E2D;&#x7684;&#x7194;&#x7089;&#xFF0C;&#x4E5F;&#x662F;&#x9A71;&#x52A8;&#x8FD9;&#x4E2A;&#x5DE5;&#x5382;&#x8FD0;&#x884C;&#x7684;&#x6838;&#x5FC3;&#x7EC4;&#x4EF6;&#x3002;</p>\n<p>Java&#x662F;&#x80FD;&#x591F;&#x8DE8;&#x5E73;&#x53F0;&#x8FD0;&#x884C;&#x7684;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x540C;&#x6837;&#x7684;&#x4EE3;&#x7801;&#x53EF;&#x4EE5;&#x4E0D;&#x7ECF;&#x4FEE;&#x6539;&#x7684;&#x5728;windows&#x7CFB;&#x7EDF;&#x3001;linux&#x7CFB;&#x7EDF;&#x3001;mac&#x7CFB;&#x7EDF;&#x4E0A;&#x8FD0;&#x884C;&#x5E76;&#x5F97;&#x5230;&#x76F8;&#x540C;&#x7684;&#x7ED3;&#x679C;&#x3002;JVM&#x5728;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x4E2D;&#x626E;&#x6F14;&#x7740;&#x5341;&#x5206;&#x91CD;&#x8981;&#x7684;&#x89D2;&#x8272;&#xFF0C;&#x5B83;&#x5C31;&#x50CF;&#x4E00;&#x4F4D;&#x7FFB;&#x8BD1;&#x5B98;&#xFF0C;&#x7531;&#x5B83;&#x95F4;&#x63A5;&#x7684;&#x4E0E;&#x5177;&#x4F53;&#x7684;&#x7CFB;&#x7EDF;&#x6253;&#x4EA4;&#x9053;&#x3002;&#x4E0D;&#x540C;&#x7CFB;&#x7EDF;&#x6709;&#x7740;&#x4E0D;&#x540C;&#x7684;&#x6307;&#x4EE4;&#x96C6;&#xFF0C;&#x53EF;&#x4EE5;&#x7406;&#x89E3;&#x4E3A;&#x6709;&#x4E0D;&#x540C;&#x7684;&#x8BED;&#x8A00;&#xFF0C;&#x4F46;JVM&#x8FD9;&#x4F4D;&#x7FFB;&#x8BD1;&#x5B98;&#x7CBE;&#x901A;&#x5404;&#x4E2A;&#x7CFB;&#x7EDF;&#x7684;&#x8BED;&#x8A00;&#xFF0C;&#x53EF;&#x4EE5;&#x5C06;&#x6211;&#x4EEC;&#x7684;&#x4EE3;&#x7801;&#x7FFB;&#x8BD1;&#x7ED9;&#x7CFB;&#x7EDF;&#x53BB;&#x6267;&#x884C;&#x3002;Java&#x4EE3;&#x7801;&#x88AB;&#x7F16;&#x8BD1;&#x4E3A;.class&#x6587;&#x4EF6;&#x540E;&#xFF0C;&#x7531;&#x865A;&#x62DF;&#x673A;&#x5C06;&#x5B57;&#x8282;&#x7801;&#x6587;&#x4EF6;&#x89E3;&#x91CA;&#x6210;&#x5177;&#x4F53;&#x5E73;&#x53F0;&#x4E0A;&#x7684;&#x673A;&#x5668;&#x6307;&#x4EE4;&#x3002;</p>\n<p>JVM&#x5176;&#x5B9E;&#x662F;&#x4E00;&#x79CD;&#x89C4;&#x8303;&#xFF0C;&#x53EA;&#x8981;&#x6309;&#x8FD9;&#x79CD;&#x89C4;&#x8303;&#x8BBE;&#x8BA1;&#x7684;&#x4EA7;&#x54C1;&#x90FD;&#x53EF;&#x4EE5;&#x53EB;&#x505A;&#x865A;&#x62DF;&#x673A;&#xFF0C;&#x76EE;&#x524D;&#x6765;&#x8BF4;&#x6BD4;&#x8F83;&#x4E3B;&#x6D41;&#x7684;&#x865A;&#x62DF;&#x673A;&#x6709;&#xFF0C;HotSpot&#x3001;J9 VM&#x3001;Zing VM&#x3002;</p>\n<h2 id=\"JRE&#xFF08;Java-Runtime-Environment&#xFF09;\"><a href=\"#JRE&#xFF08;Java-Runtime-Environment&#xFF09;\" class=\"headerlink\" title=\"JRE&#xFF08;Java Runtime Environment&#xFF09;\"></a>JRE&#xFF08;Java Runtime Environment&#xFF09;</h2><p>JRE &#x5373; Java&#x8FD0;&#x884C;&#x65F6;&#x73AF;&#x5883;&#xFF0C;&#x662F;&#x8FD0;&#x884C; Java &#x7A0B;&#x5E8F;&#x5FC5;&#x4E0D;&#x53EF;&#x5C11;&#x7684;&#xFF0C;&#x65E2;&#x7136;&#x662F;&#x8FD0;&#x884C;&#xFF0C;&#x81EA;&#x7136;&#x8981;&#x5305;&#x542B;JVM&#xFF0C;&#x540C;&#x65F6;&#x8FD8;&#x5305;&#x542B;&#x4E86;JVM&#x6807;&#x51C6;&#x5B9E;&#x73B0;&#x53CA;Java&#x6838;&#x5FC3;&#x7C7B;&#x5E93;&#xFF0C;&#x63D0;&#x4F9B;&#x4E86;Java&#x8FD0;&#x884C;&#x65F6;&#x5FC5;&#x8981;&#x7684;&#x57FA;&#x7840;&#x4FE1;&#x606F;&#x3002;&#x5149;&#x6709;JVM&#x65E0;&#x6CD5;&#x5B8C;&#x6210;class&#x7684;&#x6267;&#x884C;&#xFF0C;&#x56E0;&#x4E3A;&#x5728;&#x89E3;&#x91CA;class&#x7684;&#x65F6;&#x5019;JVM&#x9700;&#x8981;&#x8C03;&#x7528;&#x89E3;&#x91CA;&#x6240;&#x9700;&#x8981;&#x7684;&#x7C7B;&#x5E93;lib&#x3002; &#x53EF;&#x4EE5;&#x8FD9;&#x6837;&#x7406;&#x89E3;&#xFF0C;JVM&#x53EA;&#x662F;&#x4E00;&#x540D;&#x7FFB;&#x8BD1;&#x5B98;&#xFF0C;&#x8FD8;&#x9700;&#x8981;&#x5404;&#x4E2A;&#x52A9;&#x7406;&#x624D;&#x80FD;&#x5B8C;&#x6210;&#x5404;&#x9879;&#x5177;&#x4F53;&#x4EFB;&#x52A1;&#xFF0C;JRE &#x5E76;&#x4E0D;&#x662F;&#x4E00;&#x4E2A;&#x5F00;&#x53D1;&#x73AF;&#x5883;&#xFF0C;&#x6240;&#x4EE5;&#x6CA1;&#x6709;&#x5305;&#x542B;&#x4EFB;&#x4F55;&#x5F00;&#x53D1;&#x5DE5;&#x5177;&#xFF08;&#x5982;&#x7F16;&#x8BD1;&#x5668;&#x548C;&#x8C03;&#x8BD5;&#x5668;&#xFF09;&#x3002;</p>\n<h2 id=\"JDK&#xFF08;Java-Development-Kit&#xFF09;\"><a href=\"#JDK&#xFF08;Java-Development-Kit&#xFF09;\" class=\"headerlink\" title=\"JDK&#xFF08;Java Development Kit&#xFF09;\"></a>JDK&#xFF08;Java Development Kit&#xFF09;</h2><p>JDK &#x662F; Java &#x8BED;&#x8A00;&#x7684;&#x8F6F;&#x4EF6;&#x5F00;&#x53D1;&#x5DE5;&#x5177;&#x5305;&#xFF0C;&#x662F; Java &#x5F00;&#x53D1;&#x8005;&#x6240;&#x5FC5;&#x987B;&#x7684;&#x5185;&#x5BB9;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x6211;&#x4EEC;&#x4E4B;&#x540E;&#x8981;&#x90E8;&#x7F72;&#x7684;&#x4E1C;&#x897F;&#xFF0C;&#x4E3B;&#x8981;&#x5305;&#x542B;&#x4E86;&#x5404;&#x79CD;&#x7C7B;&#x5E93;&#x548C;&#x5DE5;&#x5177;&#xFF0C;&#x5F53;&#x7136;&#x4E5F;&#x5305;&#x542B;&#x4E86;&#x4E00;&#x4E2A;JRE&#x3002;</p>\n<p>&#x7EFC;&#x4E0A;&#x6240;&#x8FF0;&#xFF0C;JDK&#x4E2D;&#x5305;&#x542B;&#x6709;JRE&#xFF0C;JRE&#x4E2D;&#x5305;&#x542B;&#x6709;JVM&#xFF0C;&#x6240;&#x4EE5;JDK&#x5728;&#x624B;&#xFF0C;&#x5929;&#x4E0B;&#x6211;&#x6709;&#x3010;&#x624B;&#x52A8;&#x6ED1;&#x7A3D;&#x3011;&#x3002;&#x60F3;&#x8981;&#x8FDB;&#x884C;Java&#x5F00;&#x53D1;&#xFF0C;&#x5C31;&#x5FC5;&#x987B;&#x8981;&#x90E8;&#x7F72;JDK&#x73AF;&#x5883;&#xFF0C;&#x4F46;&#x5982;&#x679C;&#x53EA;&#x662F;&#x60F3;&#x8981;&#x8FD0;&#x884C;Java&#x5F00;&#x53D1;&#x7684;&#x8F6F;&#x4EF6;&#xFF0C;&#x90A3;&#x4E48;&#x5B89;&#x88C5;&#x4E00;&#x4E2A;JRE&#x5C31;&#x8DB3;&#x591F;&#x4E86;&#x3002;</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<blockquote>\n<p>如果不能忠于自己的心，胜负又有什么价值呢？</p>\n</blockquote>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>前面说到Java也有一个大工厂，可以让你随心所欲的创建想要创建的事物，但是想要使用这个工厂，还得先部署这个工厂，它就是JDK。</p>\n<p>在此之前，先介绍几个概念：JVM、JRE、JDK。</p>\n<h2 id=\"JVM（Java-Virtual-Machine）\"><a href=\"#JVM（Java-Virtual-Machine）\" class=\"headerlink\" title=\"JVM（Java Virtual Machine）\"></a>JVM（Java Virtual Machine）</h2><p>JVM 即 Java虚拟机，是Java这个大工厂中的熔炉，也是驱动这个工厂运行的核心组件。</p>\n<p>Java是能够跨平台运行的，也就是说，同样的代码可以不经修改的在windows系统、linux系统、mac系统上运行并得到相同的结果。JVM在这个过程中扮演着十分重要的角色，它就像一位翻译官，由它间接的与具体的系统打交道。不同系统有着不同的指令集，可以理解为有不同的语言，但JVM这位翻译官精通各个系统的语言，可以将我们的代码翻译给系统去执行。Java代码被编译为.class文件后，由虚拟机将字节码文件解释成具体平台上的机器指令。</p>\n<p>JVM其实是一种规范，只要按这种规范设计的产品都可以叫做虚拟机，目前来说比较主流的虚拟机有，HotSpot、J9 VM、Zing VM。</p>\n<h2 id=\"JRE（Java-Runtime-Environment）\"><a href=\"#JRE（Java-Runtime-Environment）\" class=\"headerlink\" title=\"JRE（Java Runtime Environment）\"></a>JRE（Java Runtime Environment）</h2><p>JRE 即 Java运行时环境，是运行 Java 程序必不可少的，既然是运行，自然要包含JVM，同时还包含了JVM标准实现及Java核心类库，提供了Java运行时必要的基础信息。光有JVM无法完成class的执行，因为在解释class的时候JVM需要调用解释所需要的类库lib。 可以这样理解，JVM只是一名翻译官，还需要各个助理才能完成各项具体任务，JRE 并不是一个开发环境，所以没有包含任何开发工具（如编译器和调试器）。</p>\n<h2 id=\"JDK（Java-Development-Kit）\"><a href=\"#JDK（Java-Development-Kit）\" class=\"headerlink\" title=\"JDK（Java Development Kit）\"></a>JDK（Java Development Kit）</h2><p>JDK 是 Java 语言的软件开发工具包，是 Java 开发者所必须的内容，也就是我们之后要部署的东西，主要包含了各种类库和工具，当然也包含了一个JRE。</p>\n<p>综上所述，JDK中包含有JRE，JRE中包含有JVM，所以JDK在手，天下我有【手动滑稽】。想要进行Java开发，就必须要部署JDK环境，但如果只是想要运行Java开发的软件，那么安装一个JRE就足够了。</p>\n"},{"title":"Java开发环境搭建——IDE","date":"2018-12-28T11:00:04.000Z","_content":"\n> 不相信自己的人 连努力的价值都没有。 --《火影忍者》\n\n## 前言\n\n前面我们已经安装好了JDK，现在Java这个大型游戏已经安装在我们的电脑里了，接下来我们就要准备学习如何玩这个游戏了。\n\n在入门阶段，我建议选择简单模式来进行，那么一个好的IDE是必不可少的。\n\n## 什么是IDE\n\nIDE（integrated development enviroment）就是集成开发环境，是用于提供程序开发环境的应用程序，一般包括代码编辑器、编译器、调试器和图形用户界面等工具。集成了代码编写功能、分析功能、编译功能、调试功能等一体化的开发软件服务套。所有具备这一特性的软件或者软件套（组）都可以叫集成开发环境。\n\n简单来说，IDE就是将一系列工具集成到了一个应用里，让你的开发之旅变得更加容易。\n\n## 为什么需要IDE\n\n很多老玩家在指导刚入坑的新手时，都喜欢循循善诱，教导新手使用文本编辑器而非IDE，这样可以提高对整个编译流程的理解。讲道理，确实是这样的，但是却将开发的复杂度增加了许多，对于新手而言，每增加一个步骤，就是增加了无数种失败的姿势，很多人的学习热情就消耗在了这种无关痛痒的小问题上，觉得这个游戏怎么这么难。\n\n所以我个人认为，开局一条狗，砍到99的打法并不适合每一个人，对于新手而言，先给一个新手套装，再来做任务会更加轻松。\n\n## 安装IDE\n\n接下来，我们去官网下载IDEA：http://www.jetbrains.com/idea/\n\n{% asset_img java-ide-1.png jdk-ide %}\n\n{% asset_img java-ide-2.png jdk-ide %}\n\n根据自己的系统进行选择安装即可，这里就不分系统进行介绍了，下载的时候，可以选ultimate版，也可以选community版，建议选择ultimate版。\n\n下载好以后安装，要激活码的时候可以看一看这个地址：http://idea.lanyus.com/ 使用前请将“0.0.0.0 account.jetbrains.com”添加到hosts文件中，然后输入激活码就能成功激活了。当然，此方法仅供学习研究使用，有经济能力的盆友还是自觉购买正版产品吧，反正我是没有经济能力的。\n\n安装的时候，所有的都按默认选项进行安装即可。\n\n## 新建项目\n\n然后开始我们的第一个新手任务——HelloWorld。\n\n{% asset_img java-ide-3.png jdk-ide %}\n\n{% asset_img java-ide-4.png jdk-ide %}\n\n{% asset_img java-ide-5.png jdk-ide %}\n\n创建好以后，右键src文件夹，添加package，名字叫hello，然后在package里添加HelloWorld类\n\n{% asset_img java-ide-6.png jdk-ide %}\n\n{% asset_img java-ide-7.png jdk-ide %}\n\n{% asset_img java-ide-8.png jdk-ide %}\n\n然后在文件里放上代码：\n\n```java\npackage hello;\nimport java.lang.System;\n\npublic class HelloWorld {\n    public static void main(String[] args){\n        System.out.println(\"Hello World!\");\n    }\n}\n```\n\n点击Run，运行程序，选择HelloWorld，代码就跑起来了。\n\n{% asset_img java-ide-9.png jdk-ide %}\n\n至此，IDE设置完成，我们的第一个项目也完工。\n\n如果在这个过程中遇到了任何问题，可以将关键词在百度中进行搜索，如果实在解决不了，可以加群【529253292】在群里提问，热心的群主自然会为你提供解决方案。","source":"_posts/java/introduction/java-ide.md","raw":"---\ntitle: Java开发环境搭建——IDE\ntags: \n - Java入门\n - Java\n - 环境搭建\ncategories: 编程\ndate: 2018-12-28 19:00:04\n---\n\n> 不相信自己的人 连努力的价值都没有。 --《火影忍者》\n\n## 前言\n\n前面我们已经安装好了JDK，现在Java这个大型游戏已经安装在我们的电脑里了，接下来我们就要准备学习如何玩这个游戏了。\n\n在入门阶段，我建议选择简单模式来进行，那么一个好的IDE是必不可少的。\n\n## 什么是IDE\n\nIDE（integrated development enviroment）就是集成开发环境，是用于提供程序开发环境的应用程序，一般包括代码编辑器、编译器、调试器和图形用户界面等工具。集成了代码编写功能、分析功能、编译功能、调试功能等一体化的开发软件服务套。所有具备这一特性的软件或者软件套（组）都可以叫集成开发环境。\n\n简单来说，IDE就是将一系列工具集成到了一个应用里，让你的开发之旅变得更加容易。\n\n## 为什么需要IDE\n\n很多老玩家在指导刚入坑的新手时，都喜欢循循善诱，教导新手使用文本编辑器而非IDE，这样可以提高对整个编译流程的理解。讲道理，确实是这样的，但是却将开发的复杂度增加了许多，对于新手而言，每增加一个步骤，就是增加了无数种失败的姿势，很多人的学习热情就消耗在了这种无关痛痒的小问题上，觉得这个游戏怎么这么难。\n\n所以我个人认为，开局一条狗，砍到99的打法并不适合每一个人，对于新手而言，先给一个新手套装，再来做任务会更加轻松。\n\n## 安装IDE\n\n接下来，我们去官网下载IDEA：http://www.jetbrains.com/idea/\n\n{% asset_img java-ide-1.png jdk-ide %}\n\n{% asset_img java-ide-2.png jdk-ide %}\n\n根据自己的系统进行选择安装即可，这里就不分系统进行介绍了，下载的时候，可以选ultimate版，也可以选community版，建议选择ultimate版。\n\n下载好以后安装，要激活码的时候可以看一看这个地址：http://idea.lanyus.com/ 使用前请将“0.0.0.0 account.jetbrains.com”添加到hosts文件中，然后输入激活码就能成功激活了。当然，此方法仅供学习研究使用，有经济能力的盆友还是自觉购买正版产品吧，反正我是没有经济能力的。\n\n安装的时候，所有的都按默认选项进行安装即可。\n\n## 新建项目\n\n然后开始我们的第一个新手任务——HelloWorld。\n\n{% asset_img java-ide-3.png jdk-ide %}\n\n{% asset_img java-ide-4.png jdk-ide %}\n\n{% asset_img java-ide-5.png jdk-ide %}\n\n创建好以后，右键src文件夹，添加package，名字叫hello，然后在package里添加HelloWorld类\n\n{% asset_img java-ide-6.png jdk-ide %}\n\n{% asset_img java-ide-7.png jdk-ide %}\n\n{% asset_img java-ide-8.png jdk-ide %}\n\n然后在文件里放上代码：\n\n```java\npackage hello;\nimport java.lang.System;\n\npublic class HelloWorld {\n    public static void main(String[] args){\n        System.out.println(\"Hello World!\");\n    }\n}\n```\n\n点击Run，运行程序，选择HelloWorld，代码就跑起来了。\n\n{% asset_img java-ide-9.png jdk-ide %}\n\n至此，IDE设置完成，我们的第一个项目也完工。\n\n如果在这个过程中遇到了任何问题，可以将关键词在百度中进行搜索，如果实在解决不了，可以加群【529253292】在群里提问，热心的群主自然会为你提供解决方案。","slug":"java/introduction/java-ide","published":1,"updated":"2018-12-28T09:37:22.524Z","_id":"cjq7rm5qj001owu9kfjshu6n6","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>&#x4E0D;&#x76F8;&#x4FE1;&#x81EA;&#x5DF1;&#x7684;&#x4EBA; &#x8FDE;&#x52AA;&#x529B;&#x7684;&#x4EF7;&#x503C;&#x90FD;&#x6CA1;&#x6709;&#x3002; &#x2013;&#x300A;&#x706B;&#x5F71;&#x5FCD;&#x8005;&#x300B;</p>\n</blockquote>\n<h2 id=\"&#x524D;&#x8A00;\"><a href=\"#&#x524D;&#x8A00;\" class=\"headerlink\" title=\"&#x524D;&#x8A00;\"></a>&#x524D;&#x8A00;</h2><p>&#x524D;&#x9762;&#x6211;&#x4EEC;&#x5DF2;&#x7ECF;&#x5B89;&#x88C5;&#x597D;&#x4E86;JDK&#xFF0C;&#x73B0;&#x5728;Java&#x8FD9;&#x4E2A;&#x5927;&#x578B;&#x6E38;&#x620F;&#x5DF2;&#x7ECF;&#x5B89;&#x88C5;&#x5728;&#x6211;&#x4EEC;&#x7684;&#x7535;&#x8111;&#x91CC;&#x4E86;&#xFF0C;&#x63A5;&#x4E0B;&#x6765;&#x6211;&#x4EEC;&#x5C31;&#x8981;&#x51C6;&#x5907;&#x5B66;&#x4E60;&#x5982;&#x4F55;&#x73A9;&#x8FD9;&#x4E2A;&#x6E38;&#x620F;&#x4E86;&#x3002;</p>\n<p>&#x5728;&#x5165;&#x95E8;&#x9636;&#x6BB5;&#xFF0C;&#x6211;&#x5EFA;&#x8BAE;&#x9009;&#x62E9;&#x7B80;&#x5355;&#x6A21;&#x5F0F;&#x6765;&#x8FDB;&#x884C;&#xFF0C;&#x90A3;&#x4E48;&#x4E00;&#x4E2A;&#x597D;&#x7684;IDE&#x662F;&#x5FC5;&#x4E0D;&#x53EF;&#x5C11;&#x7684;&#x3002;</p>\n<h2 id=\"&#x4EC0;&#x4E48;&#x662F;IDE\"><a href=\"#&#x4EC0;&#x4E48;&#x662F;IDE\" class=\"headerlink\" title=\"&#x4EC0;&#x4E48;&#x662F;IDE\"></a>&#x4EC0;&#x4E48;&#x662F;IDE</h2><p>IDE&#xFF08;integrated development enviroment&#xFF09;&#x5C31;&#x662F;&#x96C6;&#x6210;&#x5F00;&#x53D1;&#x73AF;&#x5883;&#xFF0C;&#x662F;&#x7528;&#x4E8E;&#x63D0;&#x4F9B;&#x7A0B;&#x5E8F;&#x5F00;&#x53D1;&#x73AF;&#x5883;&#x7684;&#x5E94;&#x7528;&#x7A0B;&#x5E8F;&#xFF0C;&#x4E00;&#x822C;&#x5305;&#x62EC;&#x4EE3;&#x7801;&#x7F16;&#x8F91;&#x5668;&#x3001;&#x7F16;&#x8BD1;&#x5668;&#x3001;&#x8C03;&#x8BD5;&#x5668;&#x548C;&#x56FE;&#x5F62;&#x7528;&#x6237;&#x754C;&#x9762;&#x7B49;&#x5DE5;&#x5177;&#x3002;&#x96C6;&#x6210;&#x4E86;&#x4EE3;&#x7801;&#x7F16;&#x5199;&#x529F;&#x80FD;&#x3001;&#x5206;&#x6790;&#x529F;&#x80FD;&#x3001;&#x7F16;&#x8BD1;&#x529F;&#x80FD;&#x3001;&#x8C03;&#x8BD5;&#x529F;&#x80FD;&#x7B49;&#x4E00;&#x4F53;&#x5316;&#x7684;&#x5F00;&#x53D1;&#x8F6F;&#x4EF6;&#x670D;&#x52A1;&#x5957;&#x3002;&#x6240;&#x6709;&#x5177;&#x5907;&#x8FD9;&#x4E00;&#x7279;&#x6027;&#x7684;&#x8F6F;&#x4EF6;&#x6216;&#x8005;&#x8F6F;&#x4EF6;&#x5957;&#xFF08;&#x7EC4;&#xFF09;&#x90FD;&#x53EF;&#x4EE5;&#x53EB;&#x96C6;&#x6210;&#x5F00;&#x53D1;&#x73AF;&#x5883;&#x3002;</p>\n<p>&#x7B80;&#x5355;&#x6765;&#x8BF4;&#xFF0C;IDE&#x5C31;&#x662F;&#x5C06;&#x4E00;&#x7CFB;&#x5217;&#x5DE5;&#x5177;&#x96C6;&#x6210;&#x5230;&#x4E86;&#x4E00;&#x4E2A;&#x5E94;&#x7528;&#x91CC;&#xFF0C;&#x8BA9;&#x4F60;&#x7684;&#x5F00;&#x53D1;&#x4E4B;&#x65C5;&#x53D8;&#x5F97;&#x66F4;&#x52A0;&#x5BB9;&#x6613;&#x3002;</p>\n<h2 id=\"&#x4E3A;&#x4EC0;&#x4E48;&#x9700;&#x8981;IDE\"><a href=\"#&#x4E3A;&#x4EC0;&#x4E48;&#x9700;&#x8981;IDE\" class=\"headerlink\" title=\"&#x4E3A;&#x4EC0;&#x4E48;&#x9700;&#x8981;IDE\"></a>&#x4E3A;&#x4EC0;&#x4E48;&#x9700;&#x8981;IDE</h2><p>&#x5F88;&#x591A;&#x8001;&#x73A9;&#x5BB6;&#x5728;&#x6307;&#x5BFC;&#x521A;&#x5165;&#x5751;&#x7684;&#x65B0;&#x624B;&#x65F6;&#xFF0C;&#x90FD;&#x559C;&#x6B22;&#x5FAA;&#x5FAA;&#x5584;&#x8BF1;&#xFF0C;&#x6559;&#x5BFC;&#x65B0;&#x624B;&#x4F7F;&#x7528;&#x6587;&#x672C;&#x7F16;&#x8F91;&#x5668;&#x800C;&#x975E;IDE&#xFF0C;&#x8FD9;&#x6837;&#x53EF;&#x4EE5;&#x63D0;&#x9AD8;&#x5BF9;&#x6574;&#x4E2A;&#x7F16;&#x8BD1;&#x6D41;&#x7A0B;&#x7684;&#x7406;&#x89E3;&#x3002;&#x8BB2;&#x9053;&#x7406;&#xFF0C;&#x786E;&#x5B9E;&#x662F;&#x8FD9;&#x6837;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x5374;&#x5C06;&#x5F00;&#x53D1;&#x7684;&#x590D;&#x6742;&#x5EA6;&#x589E;&#x52A0;&#x4E86;&#x8BB8;&#x591A;&#xFF0C;&#x5BF9;&#x4E8E;&#x65B0;&#x624B;&#x800C;&#x8A00;&#xFF0C;&#x6BCF;&#x589E;&#x52A0;&#x4E00;&#x4E2A;&#x6B65;&#x9AA4;&#xFF0C;&#x5C31;&#x662F;&#x589E;&#x52A0;&#x4E86;&#x65E0;&#x6570;&#x79CD;&#x5931;&#x8D25;&#x7684;&#x59FF;&#x52BF;&#xFF0C;&#x5F88;&#x591A;&#x4EBA;&#x7684;&#x5B66;&#x4E60;&#x70ED;&#x60C5;&#x5C31;&#x6D88;&#x8017;&#x5728;&#x4E86;&#x8FD9;&#x79CD;&#x65E0;&#x5173;&#x75DB;&#x75D2;&#x7684;&#x5C0F;&#x95EE;&#x9898;&#x4E0A;&#xFF0C;&#x89C9;&#x5F97;&#x8FD9;&#x4E2A;&#x6E38;&#x620F;&#x600E;&#x4E48;&#x8FD9;&#x4E48;&#x96BE;&#x3002;</p>\n<p>&#x6240;&#x4EE5;&#x6211;&#x4E2A;&#x4EBA;&#x8BA4;&#x4E3A;&#xFF0C;&#x5F00;&#x5C40;&#x4E00;&#x6761;&#x72D7;&#xFF0C;&#x780D;&#x5230;99&#x7684;&#x6253;&#x6CD5;&#x5E76;&#x4E0D;&#x9002;&#x5408;&#x6BCF;&#x4E00;&#x4E2A;&#x4EBA;&#xFF0C;&#x5BF9;&#x4E8E;&#x65B0;&#x624B;&#x800C;&#x8A00;&#xFF0C;&#x5148;&#x7ED9;&#x4E00;&#x4E2A;&#x65B0;&#x624B;&#x5957;&#x88C5;&#xFF0C;&#x518D;&#x6765;&#x505A;&#x4EFB;&#x52A1;&#x4F1A;&#x66F4;&#x52A0;&#x8F7B;&#x677E;&#x3002;</p>\n<h2 id=\"&#x5B89;&#x88C5;IDE\"><a href=\"#&#x5B89;&#x88C5;IDE\" class=\"headerlink\" title=\"&#x5B89;&#x88C5;IDE\"></a>&#x5B89;&#x88C5;IDE</h2><p>&#x63A5;&#x4E0B;&#x6765;&#xFF0C;&#x6211;&#x4EEC;&#x53BB;&#x5B98;&#x7F51;&#x4E0B;&#x8F7D;IDEA&#xFF1A;<a href=\"http://www.jetbrains.com/idea/\" target=\"_blank\" rel=\"noopener\">http://www.jetbrains.com/idea/</a></p>\n<img src=\"/programming/java/introduction/java-ide/java-ide-1.png\" title=\"jdk-ide\">\n<img src=\"/programming/java/introduction/java-ide/java-ide-2.png\" title=\"jdk-ide\">\n<p>&#x6839;&#x636E;&#x81EA;&#x5DF1;&#x7684;&#x7CFB;&#x7EDF;&#x8FDB;&#x884C;&#x9009;&#x62E9;&#x5B89;&#x88C5;&#x5373;&#x53EF;&#xFF0C;&#x8FD9;&#x91CC;&#x5C31;&#x4E0D;&#x5206;&#x7CFB;&#x7EDF;&#x8FDB;&#x884C;&#x4ECB;&#x7ECD;&#x4E86;&#xFF0C;&#x4E0B;&#x8F7D;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x53EF;&#x4EE5;&#x9009;ultimate&#x7248;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x9009;community&#x7248;&#xFF0C;&#x5EFA;&#x8BAE;&#x9009;&#x62E9;ultimate&#x7248;&#x3002;</p>\n<p>&#x4E0B;&#x8F7D;&#x597D;&#x4EE5;&#x540E;&#x5B89;&#x88C5;&#xFF0C;&#x8981;&#x6FC0;&#x6D3B;&#x7801;&#x7684;&#x65F6;&#x5019;&#x53EF;&#x4EE5;&#x770B;&#x4E00;&#x770B;&#x8FD9;&#x4E2A;&#x5730;&#x5740;&#xFF1A;<a href=\"http://idea.lanyus.com/\" target=\"_blank\" rel=\"noopener\">http://idea.lanyus.com/</a> &#x4F7F;&#x7528;&#x524D;&#x8BF7;&#x5C06;&#x201C;0.0.0.0 account.jetbrains.com&#x201D;&#x6DFB;&#x52A0;&#x5230;hosts&#x6587;&#x4EF6;&#x4E2D;&#xFF0C;&#x7136;&#x540E;&#x8F93;&#x5165;&#x6FC0;&#x6D3B;&#x7801;&#x5C31;&#x80FD;&#x6210;&#x529F;&#x6FC0;&#x6D3B;&#x4E86;&#x3002;&#x5F53;&#x7136;&#xFF0C;&#x6B64;&#x65B9;&#x6CD5;&#x4EC5;&#x4F9B;&#x5B66;&#x4E60;&#x7814;&#x7A76;&#x4F7F;&#x7528;&#xFF0C;&#x6709;&#x7ECF;&#x6D4E;&#x80FD;&#x529B;&#x7684;&#x76C6;&#x53CB;&#x8FD8;&#x662F;&#x81EA;&#x89C9;&#x8D2D;&#x4E70;&#x6B63;&#x7248;&#x4EA7;&#x54C1;&#x5427;&#xFF0C;&#x53CD;&#x6B63;&#x6211;&#x662F;&#x6CA1;&#x6709;&#x7ECF;&#x6D4E;&#x80FD;&#x529B;&#x7684;&#x3002;</p>\n<p>&#x5B89;&#x88C5;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6240;&#x6709;&#x7684;&#x90FD;&#x6309;&#x9ED8;&#x8BA4;&#x9009;&#x9879;&#x8FDB;&#x884C;&#x5B89;&#x88C5;&#x5373;&#x53EF;&#x3002;</p>\n<h2 id=\"&#x65B0;&#x5EFA;&#x9879;&#x76EE;\"><a href=\"#&#x65B0;&#x5EFA;&#x9879;&#x76EE;\" class=\"headerlink\" title=\"&#x65B0;&#x5EFA;&#x9879;&#x76EE;\"></a>&#x65B0;&#x5EFA;&#x9879;&#x76EE;</h2><p>&#x7136;&#x540E;&#x5F00;&#x59CB;&#x6211;&#x4EEC;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x65B0;&#x624B;&#x4EFB;&#x52A1;&#x2014;&#x2014;HelloWorld&#x3002;</p>\n<img src=\"/programming/java/introduction/java-ide/java-ide-3.png\" title=\"jdk-ide\">\n<img src=\"/programming/java/introduction/java-ide/java-ide-4.png\" title=\"jdk-ide\">\n<img src=\"/programming/java/introduction/java-ide/java-ide-5.png\" title=\"jdk-ide\">\n<p>&#x521B;&#x5EFA;&#x597D;&#x4EE5;&#x540E;&#xFF0C;&#x53F3;&#x952E;src&#x6587;&#x4EF6;&#x5939;&#xFF0C;&#x6DFB;&#x52A0;package&#xFF0C;&#x540D;&#x5B57;&#x53EB;hello&#xFF0C;&#x7136;&#x540E;&#x5728;package&#x91CC;&#x6DFB;&#x52A0;HelloWorld&#x7C7B;</p>\n<img src=\"/programming/java/introduction/java-ide/java-ide-6.png\" title=\"jdk-ide\">\n<img src=\"/programming/java/introduction/java-ide/java-ide-7.png\" title=\"jdk-ide\">\n<img src=\"/programming/java/introduction/java-ide/java-ide-8.png\" title=\"jdk-ide\">\n<p>&#x7136;&#x540E;&#x5728;&#x6587;&#x4EF6;&#x91CC;&#x653E;&#x4E0A;&#x4EE3;&#x7801;&#xFF1A;</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> hello;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>&#x70B9;&#x51FB;Run&#xFF0C;&#x8FD0;&#x884C;&#x7A0B;&#x5E8F;&#xFF0C;&#x9009;&#x62E9;HelloWorld&#xFF0C;&#x4EE3;&#x7801;&#x5C31;&#x8DD1;&#x8D77;&#x6765;&#x4E86;&#x3002;</p>\n<img src=\"/programming/java/introduction/java-ide/java-ide-9.png\" title=\"jdk-ide\">\n<p>&#x81F3;&#x6B64;&#xFF0C;IDE&#x8BBE;&#x7F6E;&#x5B8C;&#x6210;&#xFF0C;&#x6211;&#x4EEC;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x9879;&#x76EE;&#x4E5F;&#x5B8C;&#x5DE5;&#x3002;</p>\n<p>&#x5982;&#x679C;&#x5728;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x4E2D;&#x9047;&#x5230;&#x4E86;&#x4EFB;&#x4F55;&#x95EE;&#x9898;&#xFF0C;&#x53EF;&#x4EE5;&#x5C06;&#x5173;&#x952E;&#x8BCD;&#x5728;&#x767E;&#x5EA6;&#x4E2D;&#x8FDB;&#x884C;&#x641C;&#x7D22;&#xFF0C;&#x5982;&#x679C;&#x5B9E;&#x5728;&#x89E3;&#x51B3;&#x4E0D;&#x4E86;&#xFF0C;&#x53EF;&#x4EE5;&#x52A0;&#x7FA4;&#x3010;529253292&#x3011;&#x5728;&#x7FA4;&#x91CC;&#x63D0;&#x95EE;&#xFF0C;&#x70ED;&#x5FC3;&#x7684;&#x7FA4;&#x4E3B;&#x81EA;&#x7136;&#x4F1A;&#x4E3A;&#x4F60;&#x63D0;&#x4F9B;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x3002;</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<blockquote>\n<p>不相信自己的人 连努力的价值都没有。 –《火影忍者》</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>前面我们已经安装好了JDK，现在Java这个大型游戏已经安装在我们的电脑里了，接下来我们就要准备学习如何玩这个游戏了。</p>\n<p>在入门阶段，我建议选择简单模式来进行，那么一个好的IDE是必不可少的。</p>\n<h2 id=\"什么是IDE\"><a href=\"#什么是IDE\" class=\"headerlink\" title=\"什么是IDE\"></a>什么是IDE</h2><p>IDE（integrated development enviroment）就是集成开发环境，是用于提供程序开发环境的应用程序，一般包括代码编辑器、编译器、调试器和图形用户界面等工具。集成了代码编写功能、分析功能、编译功能、调试功能等一体化的开发软件服务套。所有具备这一特性的软件或者软件套（组）都可以叫集成开发环境。</p>\n<p>简单来说，IDE就是将一系列工具集成到了一个应用里，让你的开发之旅变得更加容易。</p>\n<h2 id=\"为什么需要IDE\"><a href=\"#为什么需要IDE\" class=\"headerlink\" title=\"为什么需要IDE\"></a>为什么需要IDE</h2><p>很多老玩家在指导刚入坑的新手时，都喜欢循循善诱，教导新手使用文本编辑器而非IDE，这样可以提高对整个编译流程的理解。讲道理，确实是这样的，但是却将开发的复杂度增加了许多，对于新手而言，每增加一个步骤，就是增加了无数种失败的姿势，很多人的学习热情就消耗在了这种无关痛痒的小问题上，觉得这个游戏怎么这么难。</p>\n<p>所以我个人认为，开局一条狗，砍到99的打法并不适合每一个人，对于新手而言，先给一个新手套装，再来做任务会更加轻松。</p>\n<h2 id=\"安装IDE\"><a href=\"#安装IDE\" class=\"headerlink\" title=\"安装IDE\"></a>安装IDE</h2><p>接下来，我们去官网下载IDEA：<a href=\"http://www.jetbrains.com/idea/\" target=\"_blank\" rel=\"noopener\">http://www.jetbrains.com/idea/</a></p>\n<img src=\"/programming/java/introduction/java-ide/java-ide-1.png\" title=\"jdk-ide\">\n<img src=\"/programming/java/introduction/java-ide/java-ide-2.png\" title=\"jdk-ide\">\n<p>根据自己的系统进行选择安装即可，这里就不分系统进行介绍了，下载的时候，可以选ultimate版，也可以选community版，建议选择ultimate版。</p>\n<p>下载好以后安装，要激活码的时候可以看一看这个地址：<a href=\"http://idea.lanyus.com/\" target=\"_blank\" rel=\"noopener\">http://idea.lanyus.com/</a> 使用前请将“0.0.0.0 account.jetbrains.com”添加到hosts文件中，然后输入激活码就能成功激活了。当然，此方法仅供学习研究使用，有经济能力的盆友还是自觉购买正版产品吧，反正我是没有经济能力的。</p>\n<p>安装的时候，所有的都按默认选项进行安装即可。</p>\n<h2 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h2><p>然后开始我们的第一个新手任务——HelloWorld。</p>\n<img src=\"/programming/java/introduction/java-ide/java-ide-3.png\" title=\"jdk-ide\">\n<img src=\"/programming/java/introduction/java-ide/java-ide-4.png\" title=\"jdk-ide\">\n<img src=\"/programming/java/introduction/java-ide/java-ide-5.png\" title=\"jdk-ide\">\n<p>创建好以后，右键src文件夹，添加package，名字叫hello，然后在package里添加HelloWorld类</p>\n<img src=\"/programming/java/introduction/java-ide/java-ide-6.png\" title=\"jdk-ide\">\n<img src=\"/programming/java/introduction/java-ide/java-ide-7.png\" title=\"jdk-ide\">\n<img src=\"/programming/java/introduction/java-ide/java-ide-8.png\" title=\"jdk-ide\">\n<p>然后在文件里放上代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> hello;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello World!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>点击Run，运行程序，选择HelloWorld，代码就跑起来了。</p>\n<img src=\"/programming/java/introduction/java-ide/java-ide-9.png\" title=\"jdk-ide\">\n<p>至此，IDE设置完成，我们的第一个项目也完工。</p>\n<p>如果在这个过程中遇到了任何问题，可以将关键词在百度中进行搜索，如果实在解决不了，可以加群【529253292】在群里提问，热心的群主自然会为你提供解决方案。</p>\n"},{"title":"Java 开发简介","date":"2018-12-28T11:00:05.000Z","_content":"\n> 每个人都衣冠楚楚，从来没有人会关心光芒万丈的外表下那藏在角落的，发了霉的落寞。  -- 《西风》\n\n## 前言\n\n万事开头难，如果你已经顺利通过了前面安装环境的考验，那么恭喜你已经拿到了Java世界的钥匙，在打开这扇大门之前，我想再说说我玩这个游戏的一些经验，希望能帮助你在这个游戏里有更好的表现。\n\n前面两篇已经介绍了Java开发环境搭建和IDE的下载安装，如果进行顺利的话，那么现在世界上最好的语言之一和世界上最好用的Java IDE（没有之一，不接受反驳）已经握在了你的手中。所以现在你所需要学习的，就是如何使用这些工具。\n\n但在此之前，还想先说一说其他的内容。\n\n## 关于方向\n\n当你下定决心走上Java的探索之旅时，你需要确定一个大概的方向，有方向才会有学习下去的动力。\n\n如果只是单纯的想体验一下Java开发是怎样的，那么可以跟着本系列文章进行尝试，选择学习使用Java来开发一个你想要的功能，比如学习如何用Java来开发一个定时提醒功能，在固定时间或者某些特定事件发生后给你发送闹铃提示或者邮件提示。又比如使用Java来开发QQ、微信机器人，自动接收群友消息并自动回复。兴趣是最好的老师，选择一个你感兴趣的方向，你才能走的更远。\n\n如果你打算使用Java来找工作，并有较充沛的学习时间预算，那么我建议你多花一点时间在基础的内容上，把Java基础的部分啃透会让你在之后的学习里轻松很多。\n\n如果你对Java有着强烈的兴趣，对Java有过一段时间的自学，但却因为无法坚持而中途放弃，那么我建议你找一批共同学习的伙伴，在相互交流探讨中，也许可以激发你学习的动力。\n\n很多人会问，我不是学计算机相关的专业，我以前从未接触过编程，但是我想学Java，以后会不会不好找工作？跟别人比是不是没有竞争力？\n\n对此，我只能负责任的说，是的，但也不全是。\n\n有时候，选择比努力更重要，别人选了计算机专业，软件工程专业，在IT行业找工作，相对而言确实比非相关专业的人要容易一点。别人学了计算机四年，比你有优势不是应该的吗。\n\n但也不要因此就觉得跨专业，跨行业是不可能的事情，事实上，很多Java从业者都不是计算机相关专业，他们带着各种各样的目的，通过各自的方法也同样走上了这条道路。\n\n我分享的初衷，是希望能让那些对编程充满热情，但是却对未来充满迷茫和困惑的人提供一点方向。\n\n## 关于努力\n\n确定了方向，剩下的事情就只有努力了，就像在学生时代那样，想要考出更好的成绩，只需要不断的刷题学习和总结。\n\n其实Java学习过程也一样，在Java这个游戏里，必须不断打怪升级才能提升自己，才能接到奖励更丰富的任务，也能获得更高的声望，声望高的人才能在这个游戏里获得别人的认可。\n\n那如何在这个游戏里获得更好的游戏体验，如何更快更好的提升自我呢？那就是借助前人的经验，在这个游戏里有大批的老玩家，他们在这个游戏世界里已经徜徉了多年，有的满足于每天接循环任务来获取金币，有的喜欢去野外探险，寻找boss挑战，有的喜欢刷副本，企图刷出绝世装备。他们大都有一个自己的经验法则来帮助他们在这个游戏里更好的生存和发展。如果能在这个游戏里交到一个亦师亦友的朋友，那么无疑能给你极大的帮助。\n\n但需要说明的一点是，努力的方式并不一定是通用的，因为每个人擅长的领域不一样，有的人反应很快，擅长单挑，所以通常是竞技场的常客，有的人擅长指挥，副本里队长名单里总有他们的身影。 就像之前所说，选择有时候比努力更重要，选择自己擅长的领域和方向去发展，也许会让你在这个游戏里有更重要的价值。\n\n至于如何努力，我个人觉得，看书应该是首选，经典的书籍往往经过了反复斟酌的优质内容，才有了现在的口碑，所以书籍内容不会有太多漏洞，不会像有些不负责任的博主，写博客只是为了博得关注，遇到不确定的地方，要么仅凭自己猜测，要么一笔带过，误导了很多读者。\n\n如果看书实在看不下去的话，可以看看经典的视频教程，慕课网的教程个人觉得还算不错，讲解比较形象，有兴趣的话可以去看看。\n\n如果还是不行，那就找两个有意思的项目来研究一下。想想看如何用Java来提高生活质量，或者来帮助你完成一些重复性的体力劳动。比如用Java来批量爬取图片，批量将txt文件导入Excel等等。\n\n## 正式起航\n\n这几篇大概把我平生的废话都说完了，一本正经的胡说八道了这么久，有点不习惯。如果让你感到无聊了，十分抱歉。【面壁中】\n\n如果你看完这些废话，觉得自己还是很有兴趣继续看下去，那么就让我们红尘作伴，活得潇潇洒洒。啊，说错了，说错了，让我们一起开始Java游戏世界的试炼吧！:stuck_out_tongue_closed_eyes:\n","source":"_posts/java/introduction/java-introduction.md","raw":"---\ntitle: Java 开发简介\ntags: \n - Java入门\n - Java\ncategories: 编程\ndate: 2018-12-28 19:00:05\n---\n\n> 每个人都衣冠楚楚，从来没有人会关心光芒万丈的外表下那藏在角落的，发了霉的落寞。  -- 《西风》\n\n## 前言\n\n万事开头难，如果你已经顺利通过了前面安装环境的考验，那么恭喜你已经拿到了Java世界的钥匙，在打开这扇大门之前，我想再说说我玩这个游戏的一些经验，希望能帮助你在这个游戏里有更好的表现。\n\n前面两篇已经介绍了Java开发环境搭建和IDE的下载安装，如果进行顺利的话，那么现在世界上最好的语言之一和世界上最好用的Java IDE（没有之一，不接受反驳）已经握在了你的手中。所以现在你所需要学习的，就是如何使用这些工具。\n\n但在此之前，还想先说一说其他的内容。\n\n## 关于方向\n\n当你下定决心走上Java的探索之旅时，你需要确定一个大概的方向，有方向才会有学习下去的动力。\n\n如果只是单纯的想体验一下Java开发是怎样的，那么可以跟着本系列文章进行尝试，选择学习使用Java来开发一个你想要的功能，比如学习如何用Java来开发一个定时提醒功能，在固定时间或者某些特定事件发生后给你发送闹铃提示或者邮件提示。又比如使用Java来开发QQ、微信机器人，自动接收群友消息并自动回复。兴趣是最好的老师，选择一个你感兴趣的方向，你才能走的更远。\n\n如果你打算使用Java来找工作，并有较充沛的学习时间预算，那么我建议你多花一点时间在基础的内容上，把Java基础的部分啃透会让你在之后的学习里轻松很多。\n\n如果你对Java有着强烈的兴趣，对Java有过一段时间的自学，但却因为无法坚持而中途放弃，那么我建议你找一批共同学习的伙伴，在相互交流探讨中，也许可以激发你学习的动力。\n\n很多人会问，我不是学计算机相关的专业，我以前从未接触过编程，但是我想学Java，以后会不会不好找工作？跟别人比是不是没有竞争力？\n\n对此，我只能负责任的说，是的，但也不全是。\n\n有时候，选择比努力更重要，别人选了计算机专业，软件工程专业，在IT行业找工作，相对而言确实比非相关专业的人要容易一点。别人学了计算机四年，比你有优势不是应该的吗。\n\n但也不要因此就觉得跨专业，跨行业是不可能的事情，事实上，很多Java从业者都不是计算机相关专业，他们带着各种各样的目的，通过各自的方法也同样走上了这条道路。\n\n我分享的初衷，是希望能让那些对编程充满热情，但是却对未来充满迷茫和困惑的人提供一点方向。\n\n## 关于努力\n\n确定了方向，剩下的事情就只有努力了，就像在学生时代那样，想要考出更好的成绩，只需要不断的刷题学习和总结。\n\n其实Java学习过程也一样，在Java这个游戏里，必须不断打怪升级才能提升自己，才能接到奖励更丰富的任务，也能获得更高的声望，声望高的人才能在这个游戏里获得别人的认可。\n\n那如何在这个游戏里获得更好的游戏体验，如何更快更好的提升自我呢？那就是借助前人的经验，在这个游戏里有大批的老玩家，他们在这个游戏世界里已经徜徉了多年，有的满足于每天接循环任务来获取金币，有的喜欢去野外探险，寻找boss挑战，有的喜欢刷副本，企图刷出绝世装备。他们大都有一个自己的经验法则来帮助他们在这个游戏里更好的生存和发展。如果能在这个游戏里交到一个亦师亦友的朋友，那么无疑能给你极大的帮助。\n\n但需要说明的一点是，努力的方式并不一定是通用的，因为每个人擅长的领域不一样，有的人反应很快，擅长单挑，所以通常是竞技场的常客，有的人擅长指挥，副本里队长名单里总有他们的身影。 就像之前所说，选择有时候比努力更重要，选择自己擅长的领域和方向去发展，也许会让你在这个游戏里有更重要的价值。\n\n至于如何努力，我个人觉得，看书应该是首选，经典的书籍往往经过了反复斟酌的优质内容，才有了现在的口碑，所以书籍内容不会有太多漏洞，不会像有些不负责任的博主，写博客只是为了博得关注，遇到不确定的地方，要么仅凭自己猜测，要么一笔带过，误导了很多读者。\n\n如果看书实在看不下去的话，可以看看经典的视频教程，慕课网的教程个人觉得还算不错，讲解比较形象，有兴趣的话可以去看看。\n\n如果还是不行，那就找两个有意思的项目来研究一下。想想看如何用Java来提高生活质量，或者来帮助你完成一些重复性的体力劳动。比如用Java来批量爬取图片，批量将txt文件导入Excel等等。\n\n## 正式起航\n\n这几篇大概把我平生的废话都说完了，一本正经的胡说八道了这么久，有点不习惯。如果让你感到无聊了，十分抱歉。【面壁中】\n\n如果你看完这些废话，觉得自己还是很有兴趣继续看下去，那么就让我们红尘作伴，活得潇潇洒洒。啊，说错了，说错了，让我们一起开始Java游戏世界的试炼吧！:stuck_out_tongue_closed_eyes:\n","slug":"java/introduction/java-introduction","published":1,"updated":"2018-12-28T10:15:03.706Z","_id":"cjq7rm5qq001pwu9koyeuujma","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>&#x6BCF;&#x4E2A;&#x4EBA;&#x90FD;&#x8863;&#x51A0;&#x695A;&#x695A;&#xFF0C;&#x4ECE;&#x6765;&#x6CA1;&#x6709;&#x4EBA;&#x4F1A;&#x5173;&#x5FC3;&#x5149;&#x8292;&#x4E07;&#x4E08;&#x7684;&#x5916;&#x8868;&#x4E0B;&#x90A3;&#x85CF;&#x5728;&#x89D2;&#x843D;&#x7684;&#xFF0C;&#x53D1;&#x4E86;&#x9709;&#x7684;&#x843D;&#x5BDE;&#x3002;  &#x2013; &#x300A;&#x897F;&#x98CE;&#x300B;</p>\n</blockquote>\n<h2 id=\"&#x524D;&#x8A00;\"><a href=\"#&#x524D;&#x8A00;\" class=\"headerlink\" title=\"&#x524D;&#x8A00;\"></a>&#x524D;&#x8A00;</h2><p>&#x4E07;&#x4E8B;&#x5F00;&#x5934;&#x96BE;&#xFF0C;&#x5982;&#x679C;&#x4F60;&#x5DF2;&#x7ECF;&#x987A;&#x5229;&#x901A;&#x8FC7;&#x4E86;&#x524D;&#x9762;&#x5B89;&#x88C5;&#x73AF;&#x5883;&#x7684;&#x8003;&#x9A8C;&#xFF0C;&#x90A3;&#x4E48;&#x606D;&#x559C;&#x4F60;&#x5DF2;&#x7ECF;&#x62FF;&#x5230;&#x4E86;Java&#x4E16;&#x754C;&#x7684;&#x94A5;&#x5319;&#xFF0C;&#x5728;&#x6253;&#x5F00;&#x8FD9;&#x6247;&#x5927;&#x95E8;&#x4E4B;&#x524D;&#xFF0C;&#x6211;&#x60F3;&#x518D;&#x8BF4;&#x8BF4;&#x6211;&#x73A9;&#x8FD9;&#x4E2A;&#x6E38;&#x620F;&#x7684;&#x4E00;&#x4E9B;&#x7ECF;&#x9A8C;&#xFF0C;&#x5E0C;&#x671B;&#x80FD;&#x5E2E;&#x52A9;&#x4F60;&#x5728;&#x8FD9;&#x4E2A;&#x6E38;&#x620F;&#x91CC;&#x6709;&#x66F4;&#x597D;&#x7684;&#x8868;&#x73B0;&#x3002;</p>\n<p>&#x524D;&#x9762;&#x4E24;&#x7BC7;&#x5DF2;&#x7ECF;&#x4ECB;&#x7ECD;&#x4E86;Java&#x5F00;&#x53D1;&#x73AF;&#x5883;&#x642D;&#x5EFA;&#x548C;IDE&#x7684;&#x4E0B;&#x8F7D;&#x5B89;&#x88C5;&#xFF0C;&#x5982;&#x679C;&#x8FDB;&#x884C;&#x987A;&#x5229;&#x7684;&#x8BDD;&#xFF0C;&#x90A3;&#x4E48;&#x73B0;&#x5728;&#x4E16;&#x754C;&#x4E0A;&#x6700;&#x597D;&#x7684;&#x8BED;&#x8A00;&#x4E4B;&#x4E00;&#x548C;&#x4E16;&#x754C;&#x4E0A;&#x6700;&#x597D;&#x7528;&#x7684;Java IDE&#xFF08;&#x6CA1;&#x6709;&#x4E4B;&#x4E00;&#xFF0C;&#x4E0D;&#x63A5;&#x53D7;&#x53CD;&#x9A73;&#xFF09;&#x5DF2;&#x7ECF;&#x63E1;&#x5728;&#x4E86;&#x4F60;&#x7684;&#x624B;&#x4E2D;&#x3002;&#x6240;&#x4EE5;&#x73B0;&#x5728;&#x4F60;&#x6240;&#x9700;&#x8981;&#x5B66;&#x4E60;&#x7684;&#xFF0C;&#x5C31;&#x662F;&#x5982;&#x4F55;&#x4F7F;&#x7528;&#x8FD9;&#x4E9B;&#x5DE5;&#x5177;&#x3002;</p>\n<p>&#x4F46;&#x5728;&#x6B64;&#x4E4B;&#x524D;&#xFF0C;&#x8FD8;&#x60F3;&#x5148;&#x8BF4;&#x4E00;&#x8BF4;&#x5176;&#x4ED6;&#x7684;&#x5185;&#x5BB9;&#x3002;</p>\n<h2 id=\"&#x5173;&#x4E8E;&#x65B9;&#x5411;\"><a href=\"#&#x5173;&#x4E8E;&#x65B9;&#x5411;\" class=\"headerlink\" title=\"&#x5173;&#x4E8E;&#x65B9;&#x5411;\"></a>&#x5173;&#x4E8E;&#x65B9;&#x5411;</h2><p>&#x5F53;&#x4F60;&#x4E0B;&#x5B9A;&#x51B3;&#x5FC3;&#x8D70;&#x4E0A;Java&#x7684;&#x63A2;&#x7D22;&#x4E4B;&#x65C5;&#x65F6;&#xFF0C;&#x4F60;&#x9700;&#x8981;&#x786E;&#x5B9A;&#x4E00;&#x4E2A;&#x5927;&#x6982;&#x7684;&#x65B9;&#x5411;&#xFF0C;&#x6709;&#x65B9;&#x5411;&#x624D;&#x4F1A;&#x6709;&#x5B66;&#x4E60;&#x4E0B;&#x53BB;&#x7684;&#x52A8;&#x529B;&#x3002;</p>\n<p>&#x5982;&#x679C;&#x53EA;&#x662F;&#x5355;&#x7EAF;&#x7684;&#x60F3;&#x4F53;&#x9A8C;&#x4E00;&#x4E0B;Java&#x5F00;&#x53D1;&#x662F;&#x600E;&#x6837;&#x7684;&#xFF0C;&#x90A3;&#x4E48;&#x53EF;&#x4EE5;&#x8DDF;&#x7740;&#x672C;&#x7CFB;&#x5217;&#x6587;&#x7AE0;&#x8FDB;&#x884C;&#x5C1D;&#x8BD5;&#xFF0C;&#x9009;&#x62E9;&#x5B66;&#x4E60;&#x4F7F;&#x7528;Java&#x6765;&#x5F00;&#x53D1;&#x4E00;&#x4E2A;&#x4F60;&#x60F3;&#x8981;&#x7684;&#x529F;&#x80FD;&#xFF0C;&#x6BD4;&#x5982;&#x5B66;&#x4E60;&#x5982;&#x4F55;&#x7528;Java&#x6765;&#x5F00;&#x53D1;&#x4E00;&#x4E2A;&#x5B9A;&#x65F6;&#x63D0;&#x9192;&#x529F;&#x80FD;&#xFF0C;&#x5728;&#x56FA;&#x5B9A;&#x65F6;&#x95F4;&#x6216;&#x8005;&#x67D0;&#x4E9B;&#x7279;&#x5B9A;&#x4E8B;&#x4EF6;&#x53D1;&#x751F;&#x540E;&#x7ED9;&#x4F60;&#x53D1;&#x9001;&#x95F9;&#x94C3;&#x63D0;&#x793A;&#x6216;&#x8005;&#x90AE;&#x4EF6;&#x63D0;&#x793A;&#x3002;&#x53C8;&#x6BD4;&#x5982;&#x4F7F;&#x7528;Java&#x6765;&#x5F00;&#x53D1;QQ&#x3001;&#x5FAE;&#x4FE1;&#x673A;&#x5668;&#x4EBA;&#xFF0C;&#x81EA;&#x52A8;&#x63A5;&#x6536;&#x7FA4;&#x53CB;&#x6D88;&#x606F;&#x5E76;&#x81EA;&#x52A8;&#x56DE;&#x590D;&#x3002;&#x5174;&#x8DA3;&#x662F;&#x6700;&#x597D;&#x7684;&#x8001;&#x5E08;&#xFF0C;&#x9009;&#x62E9;&#x4E00;&#x4E2A;&#x4F60;&#x611F;&#x5174;&#x8DA3;&#x7684;&#x65B9;&#x5411;&#xFF0C;&#x4F60;&#x624D;&#x80FD;&#x8D70;&#x7684;&#x66F4;&#x8FDC;&#x3002;</p>\n<p>&#x5982;&#x679C;&#x4F60;&#x6253;&#x7B97;&#x4F7F;&#x7528;Java&#x6765;&#x627E;&#x5DE5;&#x4F5C;&#xFF0C;&#x5E76;&#x6709;&#x8F83;&#x5145;&#x6C9B;&#x7684;&#x5B66;&#x4E60;&#x65F6;&#x95F4;&#x9884;&#x7B97;&#xFF0C;&#x90A3;&#x4E48;&#x6211;&#x5EFA;&#x8BAE;&#x4F60;&#x591A;&#x82B1;&#x4E00;&#x70B9;&#x65F6;&#x95F4;&#x5728;&#x57FA;&#x7840;&#x7684;&#x5185;&#x5BB9;&#x4E0A;&#xFF0C;&#x628A;Java&#x57FA;&#x7840;&#x7684;&#x90E8;&#x5206;&#x5543;&#x900F;&#x4F1A;&#x8BA9;&#x4F60;&#x5728;&#x4E4B;&#x540E;&#x7684;&#x5B66;&#x4E60;&#x91CC;&#x8F7B;&#x677E;&#x5F88;&#x591A;&#x3002;</p>\n<p>&#x5982;&#x679C;&#x4F60;&#x5BF9;Java&#x6709;&#x7740;&#x5F3A;&#x70C8;&#x7684;&#x5174;&#x8DA3;&#xFF0C;&#x5BF9;Java&#x6709;&#x8FC7;&#x4E00;&#x6BB5;&#x65F6;&#x95F4;&#x7684;&#x81EA;&#x5B66;&#xFF0C;&#x4F46;&#x5374;&#x56E0;&#x4E3A;&#x65E0;&#x6CD5;&#x575A;&#x6301;&#x800C;&#x4E2D;&#x9014;&#x653E;&#x5F03;&#xFF0C;&#x90A3;&#x4E48;&#x6211;&#x5EFA;&#x8BAE;&#x4F60;&#x627E;&#x4E00;&#x6279;&#x5171;&#x540C;&#x5B66;&#x4E60;&#x7684;&#x4F19;&#x4F34;&#xFF0C;&#x5728;&#x76F8;&#x4E92;&#x4EA4;&#x6D41;&#x63A2;&#x8BA8;&#x4E2D;&#xFF0C;&#x4E5F;&#x8BB8;&#x53EF;&#x4EE5;&#x6FC0;&#x53D1;&#x4F60;&#x5B66;&#x4E60;&#x7684;&#x52A8;&#x529B;&#x3002;</p>\n<p>&#x5F88;&#x591A;&#x4EBA;&#x4F1A;&#x95EE;&#xFF0C;&#x6211;&#x4E0D;&#x662F;&#x5B66;&#x8BA1;&#x7B97;&#x673A;&#x76F8;&#x5173;&#x7684;&#x4E13;&#x4E1A;&#xFF0C;&#x6211;&#x4EE5;&#x524D;&#x4ECE;&#x672A;&#x63A5;&#x89E6;&#x8FC7;&#x7F16;&#x7A0B;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x60F3;&#x5B66;Java&#xFF0C;&#x4EE5;&#x540E;&#x4F1A;&#x4E0D;&#x4F1A;&#x4E0D;&#x597D;&#x627E;&#x5DE5;&#x4F5C;&#xFF1F;&#x8DDF;&#x522B;&#x4EBA;&#x6BD4;&#x662F;&#x4E0D;&#x662F;&#x6CA1;&#x6709;&#x7ADE;&#x4E89;&#x529B;&#xFF1F;</p>\n<p>&#x5BF9;&#x6B64;&#xFF0C;&#x6211;&#x53EA;&#x80FD;&#x8D1F;&#x8D23;&#x4EFB;&#x7684;&#x8BF4;&#xFF0C;&#x662F;&#x7684;&#xFF0C;&#x4F46;&#x4E5F;&#x4E0D;&#x5168;&#x662F;&#x3002;</p>\n<p>&#x6709;&#x65F6;&#x5019;&#xFF0C;&#x9009;&#x62E9;&#x6BD4;&#x52AA;&#x529B;&#x66F4;&#x91CD;&#x8981;&#xFF0C;&#x522B;&#x4EBA;&#x9009;&#x4E86;&#x8BA1;&#x7B97;&#x673A;&#x4E13;&#x4E1A;&#xFF0C;&#x8F6F;&#x4EF6;&#x5DE5;&#x7A0B;&#x4E13;&#x4E1A;&#xFF0C;&#x5728;IT&#x884C;&#x4E1A;&#x627E;&#x5DE5;&#x4F5C;&#xFF0C;&#x76F8;&#x5BF9;&#x800C;&#x8A00;&#x786E;&#x5B9E;&#x6BD4;&#x975E;&#x76F8;&#x5173;&#x4E13;&#x4E1A;&#x7684;&#x4EBA;&#x8981;&#x5BB9;&#x6613;&#x4E00;&#x70B9;&#x3002;&#x522B;&#x4EBA;&#x5B66;&#x4E86;&#x8BA1;&#x7B97;&#x673A;&#x56DB;&#x5E74;&#xFF0C;&#x6BD4;&#x4F60;&#x6709;&#x4F18;&#x52BF;&#x4E0D;&#x662F;&#x5E94;&#x8BE5;&#x7684;&#x5417;&#x3002;</p>\n<p>&#x4F46;&#x4E5F;&#x4E0D;&#x8981;&#x56E0;&#x6B64;&#x5C31;&#x89C9;&#x5F97;&#x8DE8;&#x4E13;&#x4E1A;&#xFF0C;&#x8DE8;&#x884C;&#x4E1A;&#x662F;&#x4E0D;&#x53EF;&#x80FD;&#x7684;&#x4E8B;&#x60C5;&#xFF0C;&#x4E8B;&#x5B9E;&#x4E0A;&#xFF0C;&#x5F88;&#x591A;Java&#x4ECE;&#x4E1A;&#x8005;&#x90FD;&#x4E0D;&#x662F;&#x8BA1;&#x7B97;&#x673A;&#x76F8;&#x5173;&#x4E13;&#x4E1A;&#xFF0C;&#x4ED6;&#x4EEC;&#x5E26;&#x7740;&#x5404;&#x79CD;&#x5404;&#x6837;&#x7684;&#x76EE;&#x7684;&#xFF0C;&#x901A;&#x8FC7;&#x5404;&#x81EA;&#x7684;&#x65B9;&#x6CD5;&#x4E5F;&#x540C;&#x6837;&#x8D70;&#x4E0A;&#x4E86;&#x8FD9;&#x6761;&#x9053;&#x8DEF;&#x3002;</p>\n<p>&#x6211;&#x5206;&#x4EAB;&#x7684;&#x521D;&#x8877;&#xFF0C;&#x662F;&#x5E0C;&#x671B;&#x80FD;&#x8BA9;&#x90A3;&#x4E9B;&#x5BF9;&#x7F16;&#x7A0B;&#x5145;&#x6EE1;&#x70ED;&#x60C5;&#xFF0C;&#x4F46;&#x662F;&#x5374;&#x5BF9;&#x672A;&#x6765;&#x5145;&#x6EE1;&#x8FF7;&#x832B;&#x548C;&#x56F0;&#x60D1;&#x7684;&#x4EBA;&#x63D0;&#x4F9B;&#x4E00;&#x70B9;&#x65B9;&#x5411;&#x3002;</p>\n<h2 id=\"&#x5173;&#x4E8E;&#x52AA;&#x529B;\"><a href=\"#&#x5173;&#x4E8E;&#x52AA;&#x529B;\" class=\"headerlink\" title=\"&#x5173;&#x4E8E;&#x52AA;&#x529B;\"></a>&#x5173;&#x4E8E;&#x52AA;&#x529B;</h2><p>&#x786E;&#x5B9A;&#x4E86;&#x65B9;&#x5411;&#xFF0C;&#x5269;&#x4E0B;&#x7684;&#x4E8B;&#x60C5;&#x5C31;&#x53EA;&#x6709;&#x52AA;&#x529B;&#x4E86;&#xFF0C;&#x5C31;&#x50CF;&#x5728;&#x5B66;&#x751F;&#x65F6;&#x4EE3;&#x90A3;&#x6837;&#xFF0C;&#x60F3;&#x8981;&#x8003;&#x51FA;&#x66F4;&#x597D;&#x7684;&#x6210;&#x7EE9;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x4E0D;&#x65AD;&#x7684;&#x5237;&#x9898;&#x5B66;&#x4E60;&#x548C;&#x603B;&#x7ED3;&#x3002;</p>\n<p>&#x5176;&#x5B9E;Java&#x5B66;&#x4E60;&#x8FC7;&#x7A0B;&#x4E5F;&#x4E00;&#x6837;&#xFF0C;&#x5728;Java&#x8FD9;&#x4E2A;&#x6E38;&#x620F;&#x91CC;&#xFF0C;&#x5FC5;&#x987B;&#x4E0D;&#x65AD;&#x6253;&#x602A;&#x5347;&#x7EA7;&#x624D;&#x80FD;&#x63D0;&#x5347;&#x81EA;&#x5DF1;&#xFF0C;&#x624D;&#x80FD;&#x63A5;&#x5230;&#x5956;&#x52B1;&#x66F4;&#x4E30;&#x5BCC;&#x7684;&#x4EFB;&#x52A1;&#xFF0C;&#x4E5F;&#x80FD;&#x83B7;&#x5F97;&#x66F4;&#x9AD8;&#x7684;&#x58F0;&#x671B;&#xFF0C;&#x58F0;&#x671B;&#x9AD8;&#x7684;&#x4EBA;&#x624D;&#x80FD;&#x5728;&#x8FD9;&#x4E2A;&#x6E38;&#x620F;&#x91CC;&#x83B7;&#x5F97;&#x522B;&#x4EBA;&#x7684;&#x8BA4;&#x53EF;&#x3002;</p>\n<p>&#x90A3;&#x5982;&#x4F55;&#x5728;&#x8FD9;&#x4E2A;&#x6E38;&#x620F;&#x91CC;&#x83B7;&#x5F97;&#x66F4;&#x597D;&#x7684;&#x6E38;&#x620F;&#x4F53;&#x9A8C;&#xFF0C;&#x5982;&#x4F55;&#x66F4;&#x5FEB;&#x66F4;&#x597D;&#x7684;&#x63D0;&#x5347;&#x81EA;&#x6211;&#x5462;&#xFF1F;&#x90A3;&#x5C31;&#x662F;&#x501F;&#x52A9;&#x524D;&#x4EBA;&#x7684;&#x7ECF;&#x9A8C;&#xFF0C;&#x5728;&#x8FD9;&#x4E2A;&#x6E38;&#x620F;&#x91CC;&#x6709;&#x5927;&#x6279;&#x7684;&#x8001;&#x73A9;&#x5BB6;&#xFF0C;&#x4ED6;&#x4EEC;&#x5728;&#x8FD9;&#x4E2A;&#x6E38;&#x620F;&#x4E16;&#x754C;&#x91CC;&#x5DF2;&#x7ECF;&#x5F9C;&#x5F89;&#x4E86;&#x591A;&#x5E74;&#xFF0C;&#x6709;&#x7684;&#x6EE1;&#x8DB3;&#x4E8E;&#x6BCF;&#x5929;&#x63A5;&#x5FAA;&#x73AF;&#x4EFB;&#x52A1;&#x6765;&#x83B7;&#x53D6;&#x91D1;&#x5E01;&#xFF0C;&#x6709;&#x7684;&#x559C;&#x6B22;&#x53BB;&#x91CE;&#x5916;&#x63A2;&#x9669;&#xFF0C;&#x5BFB;&#x627E;boss&#x6311;&#x6218;&#xFF0C;&#x6709;&#x7684;&#x559C;&#x6B22;&#x5237;&#x526F;&#x672C;&#xFF0C;&#x4F01;&#x56FE;&#x5237;&#x51FA;&#x7EDD;&#x4E16;&#x88C5;&#x5907;&#x3002;&#x4ED6;&#x4EEC;&#x5927;&#x90FD;&#x6709;&#x4E00;&#x4E2A;&#x81EA;&#x5DF1;&#x7684;&#x7ECF;&#x9A8C;&#x6CD5;&#x5219;&#x6765;&#x5E2E;&#x52A9;&#x4ED6;&#x4EEC;&#x5728;&#x8FD9;&#x4E2A;&#x6E38;&#x620F;&#x91CC;&#x66F4;&#x597D;&#x7684;&#x751F;&#x5B58;&#x548C;&#x53D1;&#x5C55;&#x3002;&#x5982;&#x679C;&#x80FD;&#x5728;&#x8FD9;&#x4E2A;&#x6E38;&#x620F;&#x91CC;&#x4EA4;&#x5230;&#x4E00;&#x4E2A;&#x4EA6;&#x5E08;&#x4EA6;&#x53CB;&#x7684;&#x670B;&#x53CB;&#xFF0C;&#x90A3;&#x4E48;&#x65E0;&#x7591;&#x80FD;&#x7ED9;&#x4F60;&#x6781;&#x5927;&#x7684;&#x5E2E;&#x52A9;&#x3002;</p>\n<p>&#x4F46;&#x9700;&#x8981;&#x8BF4;&#x660E;&#x7684;&#x4E00;&#x70B9;&#x662F;&#xFF0C;&#x52AA;&#x529B;&#x7684;&#x65B9;&#x5F0F;&#x5E76;&#x4E0D;&#x4E00;&#x5B9A;&#x662F;&#x901A;&#x7528;&#x7684;&#xFF0C;&#x56E0;&#x4E3A;&#x6BCF;&#x4E2A;&#x4EBA;&#x64C5;&#x957F;&#x7684;&#x9886;&#x57DF;&#x4E0D;&#x4E00;&#x6837;&#xFF0C;&#x6709;&#x7684;&#x4EBA;&#x53CD;&#x5E94;&#x5F88;&#x5FEB;&#xFF0C;&#x64C5;&#x957F;&#x5355;&#x6311;&#xFF0C;&#x6240;&#x4EE5;&#x901A;&#x5E38;&#x662F;&#x7ADE;&#x6280;&#x573A;&#x7684;&#x5E38;&#x5BA2;&#xFF0C;&#x6709;&#x7684;&#x4EBA;&#x64C5;&#x957F;&#x6307;&#x6325;&#xFF0C;&#x526F;&#x672C;&#x91CC;&#x961F;&#x957F;&#x540D;&#x5355;&#x91CC;&#x603B;&#x6709;&#x4ED6;&#x4EEC;&#x7684;&#x8EAB;&#x5F71;&#x3002; &#x5C31;&#x50CF;&#x4E4B;&#x524D;&#x6240;&#x8BF4;&#xFF0C;&#x9009;&#x62E9;&#x6709;&#x65F6;&#x5019;&#x6BD4;&#x52AA;&#x529B;&#x66F4;&#x91CD;&#x8981;&#xFF0C;&#x9009;&#x62E9;&#x81EA;&#x5DF1;&#x64C5;&#x957F;&#x7684;&#x9886;&#x57DF;&#x548C;&#x65B9;&#x5411;&#x53BB;&#x53D1;&#x5C55;&#xFF0C;&#x4E5F;&#x8BB8;&#x4F1A;&#x8BA9;&#x4F60;&#x5728;&#x8FD9;&#x4E2A;&#x6E38;&#x620F;&#x91CC;&#x6709;&#x66F4;&#x91CD;&#x8981;&#x7684;&#x4EF7;&#x503C;&#x3002;</p>\n<p>&#x81F3;&#x4E8E;&#x5982;&#x4F55;&#x52AA;&#x529B;&#xFF0C;&#x6211;&#x4E2A;&#x4EBA;&#x89C9;&#x5F97;&#xFF0C;&#x770B;&#x4E66;&#x5E94;&#x8BE5;&#x662F;&#x9996;&#x9009;&#xFF0C;&#x7ECF;&#x5178;&#x7684;&#x4E66;&#x7C4D;&#x5F80;&#x5F80;&#x7ECF;&#x8FC7;&#x4E86;&#x53CD;&#x590D;&#x659F;&#x914C;&#x7684;&#x4F18;&#x8D28;&#x5185;&#x5BB9;&#xFF0C;&#x624D;&#x6709;&#x4E86;&#x73B0;&#x5728;&#x7684;&#x53E3;&#x7891;&#xFF0C;&#x6240;&#x4EE5;&#x4E66;&#x7C4D;&#x5185;&#x5BB9;&#x4E0D;&#x4F1A;&#x6709;&#x592A;&#x591A;&#x6F0F;&#x6D1E;&#xFF0C;&#x4E0D;&#x4F1A;&#x50CF;&#x6709;&#x4E9B;&#x4E0D;&#x8D1F;&#x8D23;&#x4EFB;&#x7684;&#x535A;&#x4E3B;&#xFF0C;&#x5199;&#x535A;&#x5BA2;&#x53EA;&#x662F;&#x4E3A;&#x4E86;&#x535A;&#x5F97;&#x5173;&#x6CE8;&#xFF0C;&#x9047;&#x5230;&#x4E0D;&#x786E;&#x5B9A;&#x7684;&#x5730;&#x65B9;&#xFF0C;&#x8981;&#x4E48;&#x4EC5;&#x51ED;&#x81EA;&#x5DF1;&#x731C;&#x6D4B;&#xFF0C;&#x8981;&#x4E48;&#x4E00;&#x7B14;&#x5E26;&#x8FC7;&#xFF0C;&#x8BEF;&#x5BFC;&#x4E86;&#x5F88;&#x591A;&#x8BFB;&#x8005;&#x3002;</p>\n<p>&#x5982;&#x679C;&#x770B;&#x4E66;&#x5B9E;&#x5728;&#x770B;&#x4E0D;&#x4E0B;&#x53BB;&#x7684;&#x8BDD;&#xFF0C;&#x53EF;&#x4EE5;&#x770B;&#x770B;&#x7ECF;&#x5178;&#x7684;&#x89C6;&#x9891;&#x6559;&#x7A0B;&#xFF0C;&#x6155;&#x8BFE;&#x7F51;&#x7684;&#x6559;&#x7A0B;&#x4E2A;&#x4EBA;&#x89C9;&#x5F97;&#x8FD8;&#x7B97;&#x4E0D;&#x9519;&#xFF0C;&#x8BB2;&#x89E3;&#x6BD4;&#x8F83;&#x5F62;&#x8C61;&#xFF0C;&#x6709;&#x5174;&#x8DA3;&#x7684;&#x8BDD;&#x53EF;&#x4EE5;&#x53BB;&#x770B;&#x770B;&#x3002;</p>\n<p>&#x5982;&#x679C;&#x8FD8;&#x662F;&#x4E0D;&#x884C;&#xFF0C;&#x90A3;&#x5C31;&#x627E;&#x4E24;&#x4E2A;&#x6709;&#x610F;&#x601D;&#x7684;&#x9879;&#x76EE;&#x6765;&#x7814;&#x7A76;&#x4E00;&#x4E0B;&#x3002;&#x60F3;&#x60F3;&#x770B;&#x5982;&#x4F55;&#x7528;Java&#x6765;&#x63D0;&#x9AD8;&#x751F;&#x6D3B;&#x8D28;&#x91CF;&#xFF0C;&#x6216;&#x8005;&#x6765;&#x5E2E;&#x52A9;&#x4F60;&#x5B8C;&#x6210;&#x4E00;&#x4E9B;&#x91CD;&#x590D;&#x6027;&#x7684;&#x4F53;&#x529B;&#x52B3;&#x52A8;&#x3002;&#x6BD4;&#x5982;&#x7528;Java&#x6765;&#x6279;&#x91CF;&#x722C;&#x53D6;&#x56FE;&#x7247;&#xFF0C;&#x6279;&#x91CF;&#x5C06;txt&#x6587;&#x4EF6;&#x5BFC;&#x5165;Excel&#x7B49;&#x7B49;&#x3002;</p>\n<h2 id=\"&#x6B63;&#x5F0F;&#x8D77;&#x822A;\"><a href=\"#&#x6B63;&#x5F0F;&#x8D77;&#x822A;\" class=\"headerlink\" title=\"&#x6B63;&#x5F0F;&#x8D77;&#x822A;\"></a>&#x6B63;&#x5F0F;&#x8D77;&#x822A;</h2><p>&#x8FD9;&#x51E0;&#x7BC7;&#x5927;&#x6982;&#x628A;&#x6211;&#x5E73;&#x751F;&#x7684;&#x5E9F;&#x8BDD;&#x90FD;&#x8BF4;&#x5B8C;&#x4E86;&#xFF0C;&#x4E00;&#x672C;&#x6B63;&#x7ECF;&#x7684;&#x80E1;&#x8BF4;&#x516B;&#x9053;&#x4E86;&#x8FD9;&#x4E48;&#x4E45;&#xFF0C;&#x6709;&#x70B9;&#x4E0D;&#x4E60;&#x60EF;&#x3002;&#x5982;&#x679C;&#x8BA9;&#x4F60;&#x611F;&#x5230;&#x65E0;&#x804A;&#x4E86;&#xFF0C;&#x5341;&#x5206;&#x62B1;&#x6B49;&#x3002;&#x3010;&#x9762;&#x58C1;&#x4E2D;&#x3011;</p>\n<p>&#x5982;&#x679C;&#x4F60;&#x770B;&#x5B8C;&#x8FD9;&#x4E9B;&#x5E9F;&#x8BDD;&#xFF0C;&#x89C9;&#x5F97;&#x81EA;&#x5DF1;&#x8FD8;&#x662F;&#x5F88;&#x6709;&#x5174;&#x8DA3;&#x7EE7;&#x7EED;&#x770B;&#x4E0B;&#x53BB;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x8BA9;&#x6211;&#x4EEC;&#x7EA2;&#x5C18;&#x4F5C;&#x4F34;&#xFF0C;&#x6D3B;&#x5F97;&#x6F47;&#x6F47;&#x6D12;&#x6D12;&#x3002;&#x554A;&#xFF0C;&#x8BF4;&#x9519;&#x4E86;&#xFF0C;&#x8BF4;&#x9519;&#x4E86;&#xFF0C;&#x8BA9;&#x6211;&#x4EEC;&#x4E00;&#x8D77;&#x5F00;&#x59CB;Java&#x6E38;&#x620F;&#x4E16;&#x754C;&#x7684;&#x8BD5;&#x70BC;&#x5427;&#xFF01;<span class=\"github-emoji\" style=\"color: transparent;background:no-repeat url(https://assets-cdn.github.com/images/icons/emoji/unicode/1f61d.png?v8) center/contain\" data-src=\"https://assets-cdn.github.com/images/icons/emoji/unicode/1f61d.png?v8\">&#x1F61D;</span></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<blockquote>\n<p>每个人都衣冠楚楚，从来没有人会关心光芒万丈的外表下那藏在角落的，发了霉的落寞。  – 《西风》</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>万事开头难，如果你已经顺利通过了前面安装环境的考验，那么恭喜你已经拿到了Java世界的钥匙，在打开这扇大门之前，我想再说说我玩这个游戏的一些经验，希望能帮助你在这个游戏里有更好的表现。</p>\n<p>前面两篇已经介绍了Java开发环境搭建和IDE的下载安装，如果进行顺利的话，那么现在世界上最好的语言之一和世界上最好用的Java IDE（没有之一，不接受反驳）已经握在了你的手中。所以现在你所需要学习的，就是如何使用这些工具。</p>\n<p>但在此之前，还想先说一说其他的内容。</p>\n<h2 id=\"关于方向\"><a href=\"#关于方向\" class=\"headerlink\" title=\"关于方向\"></a>关于方向</h2><p>当你下定决心走上Java的探索之旅时，你需要确定一个大概的方向，有方向才会有学习下去的动力。</p>\n<p>如果只是单纯的想体验一下Java开发是怎样的，那么可以跟着本系列文章进行尝试，选择学习使用Java来开发一个你想要的功能，比如学习如何用Java来开发一个定时提醒功能，在固定时间或者某些特定事件发生后给你发送闹铃提示或者邮件提示。又比如使用Java来开发QQ、微信机器人，自动接收群友消息并自动回复。兴趣是最好的老师，选择一个你感兴趣的方向，你才能走的更远。</p>\n<p>如果你打算使用Java来找工作，并有较充沛的学习时间预算，那么我建议你多花一点时间在基础的内容上，把Java基础的部分啃透会让你在之后的学习里轻松很多。</p>\n<p>如果你对Java有着强烈的兴趣，对Java有过一段时间的自学，但却因为无法坚持而中途放弃，那么我建议你找一批共同学习的伙伴，在相互交流探讨中，也许可以激发你学习的动力。</p>\n<p>很多人会问，我不是学计算机相关的专业，我以前从未接触过编程，但是我想学Java，以后会不会不好找工作？跟别人比是不是没有竞争力？</p>\n<p>对此，我只能负责任的说，是的，但也不全是。</p>\n<p>有时候，选择比努力更重要，别人选了计算机专业，软件工程专业，在IT行业找工作，相对而言确实比非相关专业的人要容易一点。别人学了计算机四年，比你有优势不是应该的吗。</p>\n<p>但也不要因此就觉得跨专业，跨行业是不可能的事情，事实上，很多Java从业者都不是计算机相关专业，他们带着各种各样的目的，通过各自的方法也同样走上了这条道路。</p>\n<p>我分享的初衷，是希望能让那些对编程充满热情，但是却对未来充满迷茫和困惑的人提供一点方向。</p>\n<h2 id=\"关于努力\"><a href=\"#关于努力\" class=\"headerlink\" title=\"关于努力\"></a>关于努力</h2><p>确定了方向，剩下的事情就只有努力了，就像在学生时代那样，想要考出更好的成绩，只需要不断的刷题学习和总结。</p>\n<p>其实Java学习过程也一样，在Java这个游戏里，必须不断打怪升级才能提升自己，才能接到奖励更丰富的任务，也能获得更高的声望，声望高的人才能在这个游戏里获得别人的认可。</p>\n<p>那如何在这个游戏里获得更好的游戏体验，如何更快更好的提升自我呢？那就是借助前人的经验，在这个游戏里有大批的老玩家，他们在这个游戏世界里已经徜徉了多年，有的满足于每天接循环任务来获取金币，有的喜欢去野外探险，寻找boss挑战，有的喜欢刷副本，企图刷出绝世装备。他们大都有一个自己的经验法则来帮助他们在这个游戏里更好的生存和发展。如果能在这个游戏里交到一个亦师亦友的朋友，那么无疑能给你极大的帮助。</p>\n<p>但需要说明的一点是，努力的方式并不一定是通用的，因为每个人擅长的领域不一样，有的人反应很快，擅长单挑，所以通常是竞技场的常客，有的人擅长指挥，副本里队长名单里总有他们的身影。 就像之前所说，选择有时候比努力更重要，选择自己擅长的领域和方向去发展，也许会让你在这个游戏里有更重要的价值。</p>\n<p>至于如何努力，我个人觉得，看书应该是首选，经典的书籍往往经过了反复斟酌的优质内容，才有了现在的口碑，所以书籍内容不会有太多漏洞，不会像有些不负责任的博主，写博客只是为了博得关注，遇到不确定的地方，要么仅凭自己猜测，要么一笔带过，误导了很多读者。</p>\n<p>如果看书实在看不下去的话，可以看看经典的视频教程，慕课网的教程个人觉得还算不错，讲解比较形象，有兴趣的话可以去看看。</p>\n<p>如果还是不行，那就找两个有意思的项目来研究一下。想想看如何用Java来提高生活质量，或者来帮助你完成一些重复性的体力劳动。比如用Java来批量爬取图片，批量将txt文件导入Excel等等。</p>\n<h2 id=\"正式起航\"><a href=\"#正式起航\" class=\"headerlink\" title=\"正式起航\"></a>正式起航</h2><p>这几篇大概把我平生的废话都说完了，一本正经的胡说八道了这么久，有点不习惯。如果让你感到无聊了，十分抱歉。【面壁中】</p>\n<p>如果你看完这些废话，觉得自己还是很有兴趣继续看下去，那么就让我们红尘作伴，活得潇潇洒洒。啊，说错了，说错了，让我们一起开始Java游戏世界的试炼吧！:stuck_out_tongue_closed_eyes:</p>\n"},{"title":"Java入门篇小结","date":"2018-12-28T11:00:07.000Z","_content":"\n> 只要你在，我便无所不能。 -- 《进击的巨人》\n\n## 小结\n\n至此，Java入门篇就告一段落了，通过本篇的学习，希望你能掌握以下内容：\n\n1. Java有哪些用途\n2. 部署JDK\n3. 安装IDEA\n4. 使用IDEA创建一个类\n5. 使用IDEA开发一个简单的计算器\n\nJava入门篇的内容很简单，目的也只是为了让零基础的人能够快速上手Java并开发一个可以运行的程序，降低学习的门槛，增加学习的乐趣。\n\n如果你已经顺利完成了以上内容的学习，那么恭喜你，已经完成了新手的第一阶段试炼。后面的篇章就要真正开始Java中核心内容的介绍了，如果你学习的热情有幸还没有被浇灭，那么就拿着你的新手套装，在这场征程里继续前行吧。😆","source":"_posts/java/introduction/java-primer-conclusion.md","raw":"---\ntitle: Java入门篇小结\ntags: \n - Java入门\n - Java\ncategories: 编程\ndate: 2018-12-28 19:00:07\n---\n\n> 只要你在，我便无所不能。 -- 《进击的巨人》\n\n## 小结\n\n至此，Java入门篇就告一段落了，通过本篇的学习，希望你能掌握以下内容：\n\n1. Java有哪些用途\n2. 部署JDK\n3. 安装IDEA\n4. 使用IDEA创建一个类\n5. 使用IDEA开发一个简单的计算器\n\nJava入门篇的内容很简单，目的也只是为了让零基础的人能够快速上手Java并开发一个可以运行的程序，降低学习的门槛，增加学习的乐趣。\n\n如果你已经顺利完成了以上内容的学习，那么恭喜你，已经完成了新手的第一阶段试炼。后面的篇章就要真正开始Java中核心内容的介绍了，如果你学习的热情有幸还没有被浇灭，那么就拿着你的新手套装，在这场征程里继续前行吧。😆","slug":"java/introduction/java-primer-conclusion","published":1,"updated":"2018-12-28T10:02:23.895Z","_id":"cjq7rm5qs001rwu9k8k2w6pfh","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>&#x53EA;&#x8981;&#x4F60;&#x5728;&#xFF0C;&#x6211;&#x4FBF;&#x65E0;&#x6240;&#x4E0D;&#x80FD;&#x3002; &#x2013; &#x300A;&#x8FDB;&#x51FB;&#x7684;&#x5DE8;&#x4EBA;&#x300B;</p>\n</blockquote>\n<h2 id=\"&#x5C0F;&#x7ED3;\"><a href=\"#&#x5C0F;&#x7ED3;\" class=\"headerlink\" title=\"&#x5C0F;&#x7ED3;\"></a>&#x5C0F;&#x7ED3;</h2><p>&#x81F3;&#x6B64;&#xFF0C;Java&#x5165;&#x95E8;&#x7BC7;&#x5C31;&#x544A;&#x4E00;&#x6BB5;&#x843D;&#x4E86;&#xFF0C;&#x901A;&#x8FC7;&#x672C;&#x7BC7;&#x7684;&#x5B66;&#x4E60;&#xFF0C;&#x5E0C;&#x671B;&#x4F60;&#x80FD;&#x638C;&#x63E1;&#x4EE5;&#x4E0B;&#x5185;&#x5BB9;&#xFF1A;</p>\n<ol>\n<li>Java&#x6709;&#x54EA;&#x4E9B;&#x7528;&#x9014;</li>\n<li>&#x90E8;&#x7F72;JDK</li>\n<li>&#x5B89;&#x88C5;IDEA</li>\n<li>&#x4F7F;&#x7528;IDEA&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x7C7B;</li>\n<li>&#x4F7F;&#x7528;IDEA&#x5F00;&#x53D1;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x8BA1;&#x7B97;&#x5668;</li>\n</ol>\n<p>Java&#x5165;&#x95E8;&#x7BC7;&#x7684;&#x5185;&#x5BB9;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x76EE;&#x7684;&#x4E5F;&#x53EA;&#x662F;&#x4E3A;&#x4E86;&#x8BA9;&#x96F6;&#x57FA;&#x7840;&#x7684;&#x4EBA;&#x80FD;&#x591F;&#x5FEB;&#x901F;&#x4E0A;&#x624B;Java&#x5E76;&#x5F00;&#x53D1;&#x4E00;&#x4E2A;&#x53EF;&#x4EE5;&#x8FD0;&#x884C;&#x7684;&#x7A0B;&#x5E8F;&#xFF0C;&#x964D;&#x4F4E;&#x5B66;&#x4E60;&#x7684;&#x95E8;&#x69DB;&#xFF0C;&#x589E;&#x52A0;&#x5B66;&#x4E60;&#x7684;&#x4E50;&#x8DA3;&#x3002;</p>\n<p>&#x5982;&#x679C;&#x4F60;&#x5DF2;&#x7ECF;&#x987A;&#x5229;&#x5B8C;&#x6210;&#x4E86;&#x4EE5;&#x4E0A;&#x5185;&#x5BB9;&#x7684;&#x5B66;&#x4E60;&#xFF0C;&#x90A3;&#x4E48;&#x606D;&#x559C;&#x4F60;&#xFF0C;&#x5DF2;&#x7ECF;&#x5B8C;&#x6210;&#x4E86;&#x65B0;&#x624B;&#x7684;&#x7B2C;&#x4E00;&#x9636;&#x6BB5;&#x8BD5;&#x70BC;&#x3002;&#x540E;&#x9762;&#x7684;&#x7BC7;&#x7AE0;&#x5C31;&#x8981;&#x771F;&#x6B63;&#x5F00;&#x59CB;Java&#x4E2D;&#x6838;&#x5FC3;&#x5185;&#x5BB9;&#x7684;&#x4ECB;&#x7ECD;&#x4E86;&#xFF0C;&#x5982;&#x679C;&#x4F60;&#x5B66;&#x4E60;&#x7684;&#x70ED;&#x60C5;&#x6709;&#x5E78;&#x8FD8;&#x6CA1;&#x6709;&#x88AB;&#x6D47;&#x706D;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x62FF;&#x7740;&#x4F60;&#x7684;&#x65B0;&#x624B;&#x5957;&#x88C5;&#xFF0C;&#x5728;&#x8FD9;&#x573A;&#x5F81;&#x7A0B;&#x91CC;&#x7EE7;&#x7EED;&#x524D;&#x884C;&#x5427;&#x3002;&#x1F606;</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<blockquote>\n<p>只要你在，我便无所不能。 – 《进击的巨人》</p>\n</blockquote>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>至此，Java入门篇就告一段落了，通过本篇的学习，希望你能掌握以下内容：</p>\n<ol>\n<li>Java有哪些用途</li>\n<li>部署JDK</li>\n<li>安装IDEA</li>\n<li>使用IDEA创建一个类</li>\n<li>使用IDEA开发一个简单的计算器</li>\n</ol>\n<p>Java入门篇的内容很简单，目的也只是为了让零基础的人能够快速上手Java并开发一个可以运行的程序，降低学习的门槛，增加学习的乐趣。</p>\n<p>如果你已经顺利完成了以上内容的学习，那么恭喜你，已经完成了新手的第一阶段试炼。后面的篇章就要真正开始Java中核心内容的介绍了，如果你学习的热情有幸还没有被浇灭，那么就拿着你的新手套装，在这场征程里继续前行吧。😆</p>\n"},{"title":"Java简单示例","date":"2018-12-28T11:00:06.000Z","_content":"\n> 人都有两面，一面天使，一面恶魔。\n\n## 前言\n\n为了统一风格，也为了增加趣味性，以后的文章都会以关卡的形式进行展示，这样也能让大家明确每一篇的目标，带着目的来阅读会更有方向感。\n\n之前已经写过了Hello World，所以这次就换一个吧，这次的小目标便是——Java简易版计算器。\n\n## 功能说明\n\n第一版的Java计算器仅需要支持加法运算，用户输入两个数字，然后输出它们的和。\n\n## 方法预习\n\n如果是刚开始接触编程，也许你会毫无头绪，莫方，这是很正常的现象，因为你对于如何与计算机尤其是命令行进行交互毫无头绪。\n\n所以在开始编码前，需要先预习一些必要的知识。\n\n### 输出信息\n\n先来认识一个方法 `System.out.println()`，这个方法会将你传入的信息输出到控制台中，emmm，什么是控制台？你运行程序后出现的那个黑不拉几的东西就叫做控制台，它是我们与计算机交互的一个最简单原始的方式。\n\n来试验一下，还记得如何用idea创建一个类吗？不记得的话翻看一下[这里](java-ide.md)。\n\n这次我们继续在hello包下面创建一个类叫做PrintTest，然后添加以下方法：\n\n```java\npackage hello;\n\npublic class PrintTest {\n    public static void main(String[] args){\n        System.out.println(\"输出测试\");\n    }\n}\n```\n\n然后我们点击运行，或者按键（`ctrl+shift+R`），就能看到下面的输出了：\n\n{% asset_img java-simple-example-1.png java-example %}\n\n先不要问这个System是个什么东西，只要知道这样可以输出一行信息就行了，需要注意的是这个方法默认会在末尾加一个换行符，如果想要不换行，可以试试 `System.out.print() `。\n\n### 输入信息\n\n上面已经说过如何输出信息了，现在来看看如何输入信息并进行读取。\n\n先来认识一下Scanner类，Scanner类是用来从各种输入源读取信息的，它可以从各种输入源中读取信息，最常用的当然就是控制台输入。那如何用Scanner读取控制台的输入呢？这就要用到System.in了，来看栗子，我们再新建一个InputTest类：\n\n```java\npackage hello;\n\nimport java.util.Scanner;\n\npublic class InputTest {\n    public static void main(String[] args){\n        Scanner in = new Scanner(System.in);\n        System.out.print(\"请输入一个整数:\");\n        int a = in.nextInt();\n        System.out.println(\"刚才输入的整数为：\" + a);\n    }\n}\n```\n\n然后再运行一下，并且输入一个数字然后按回车键，这里我输入的是20：\n\n{% asset_img java-simple-example-2.png java-example %}\n\n如果对于具体的细节还不清楚，没有关系，先照做就好了。\n\n## 代码编写\n\n那么接下来就开始设计这个最简单的计算器了，首先我们要提示用户输入一个整数，就像上面那样：\n\n```java\nSystem.out.print(\"请输入一个整数:\");\n```\n\n然后用一个int变量来存储，什么？不知道变量是干嘛的？没事，你可以先把它当做一个盒子，用来把用户输入的信息存放进去。\n\n```java\nScanner in = new Scanner(System.in);\nint a = in.nextInt();\n```\n\n然后提示用户再输入一个整数：\n\n```java\nSystem.out.print(\"请输入另一个整数:\");\n```\n\n然后再用一个int变量来存储。\n\n```java\nint b = in.nextInt();\n```\n\n接下来计算两者的和，并存到第三个变量中：\n\n```java\nint sum = a + b;\n```\n\n最后输出这个和：\n\n```java\nSystem.out.print(\"这两个数的和为:\" + sum);\n```\n\n所以整体代码如下：\n\n```java\npackage hello;\n\nimport java.util.Scanner;\n\npublic class SimpleCalculator {\n    public static void main(String[] args){\n        System.out.print(\"请输入一个整数:\");\n        Scanner in = new Scanner(System.in);\n        int a = in.nextInt();\n        System.out.print(\"请再输入一个整数:\");\n        int b = in.nextInt();\n        int sum = a + b;\n        System.out.print(\"这两个数的和为:\" + sum);\n    }\n}\n```\n\n输出如下：\n\n{% asset_img java-simple-example-3.png java-example %}\n\n这样，我们的简易版计算器就完成了。虽然简单，但还是建议你在自己电脑上实现一次，看代码和写代码是完全不一样的两种体验。\n\n回顾一下本篇，我们设计了一个类`SimpleCalculator`，并编写了一个main方法，并在里面完成了简易版计算器的逻辑设计。也许你对于自己写的东西还有很多疑问，对象是什么？类又是什么含义？Scanner还可以做什么？前面的package有什么作用，import又是在干嘛？别着急，接着看后面的文章，相信你的疑问会一点一点消失。\n","source":"_posts/java/introduction/java-simple-example.md","raw":"---\ntitle: Java简单示例\ntags: \n - Java入门\n - Java\ncategories: 编程\ndate: 2018-12-28 19:00:06\n---\n\n> 人都有两面，一面天使，一面恶魔。\n\n## 前言\n\n为了统一风格，也为了增加趣味性，以后的文章都会以关卡的形式进行展示，这样也能让大家明确每一篇的目标，带着目的来阅读会更有方向感。\n\n之前已经写过了Hello World，所以这次就换一个吧，这次的小目标便是——Java简易版计算器。\n\n## 功能说明\n\n第一版的Java计算器仅需要支持加法运算，用户输入两个数字，然后输出它们的和。\n\n## 方法预习\n\n如果是刚开始接触编程，也许你会毫无头绪，莫方，这是很正常的现象，因为你对于如何与计算机尤其是命令行进行交互毫无头绪。\n\n所以在开始编码前，需要先预习一些必要的知识。\n\n### 输出信息\n\n先来认识一个方法 `System.out.println()`，这个方法会将你传入的信息输出到控制台中，emmm，什么是控制台？你运行程序后出现的那个黑不拉几的东西就叫做控制台，它是我们与计算机交互的一个最简单原始的方式。\n\n来试验一下，还记得如何用idea创建一个类吗？不记得的话翻看一下[这里](java-ide.md)。\n\n这次我们继续在hello包下面创建一个类叫做PrintTest，然后添加以下方法：\n\n```java\npackage hello;\n\npublic class PrintTest {\n    public static void main(String[] args){\n        System.out.println(\"输出测试\");\n    }\n}\n```\n\n然后我们点击运行，或者按键（`ctrl+shift+R`），就能看到下面的输出了：\n\n{% asset_img java-simple-example-1.png java-example %}\n\n先不要问这个System是个什么东西，只要知道这样可以输出一行信息就行了，需要注意的是这个方法默认会在末尾加一个换行符，如果想要不换行，可以试试 `System.out.print() `。\n\n### 输入信息\n\n上面已经说过如何输出信息了，现在来看看如何输入信息并进行读取。\n\n先来认识一下Scanner类，Scanner类是用来从各种输入源读取信息的，它可以从各种输入源中读取信息，最常用的当然就是控制台输入。那如何用Scanner读取控制台的输入呢？这就要用到System.in了，来看栗子，我们再新建一个InputTest类：\n\n```java\npackage hello;\n\nimport java.util.Scanner;\n\npublic class InputTest {\n    public static void main(String[] args){\n        Scanner in = new Scanner(System.in);\n        System.out.print(\"请输入一个整数:\");\n        int a = in.nextInt();\n        System.out.println(\"刚才输入的整数为：\" + a);\n    }\n}\n```\n\n然后再运行一下，并且输入一个数字然后按回车键，这里我输入的是20：\n\n{% asset_img java-simple-example-2.png java-example %}\n\n如果对于具体的细节还不清楚，没有关系，先照做就好了。\n\n## 代码编写\n\n那么接下来就开始设计这个最简单的计算器了，首先我们要提示用户输入一个整数，就像上面那样：\n\n```java\nSystem.out.print(\"请输入一个整数:\");\n```\n\n然后用一个int变量来存储，什么？不知道变量是干嘛的？没事，你可以先把它当做一个盒子，用来把用户输入的信息存放进去。\n\n```java\nScanner in = new Scanner(System.in);\nint a = in.nextInt();\n```\n\n然后提示用户再输入一个整数：\n\n```java\nSystem.out.print(\"请输入另一个整数:\");\n```\n\n然后再用一个int变量来存储。\n\n```java\nint b = in.nextInt();\n```\n\n接下来计算两者的和，并存到第三个变量中：\n\n```java\nint sum = a + b;\n```\n\n最后输出这个和：\n\n```java\nSystem.out.print(\"这两个数的和为:\" + sum);\n```\n\n所以整体代码如下：\n\n```java\npackage hello;\n\nimport java.util.Scanner;\n\npublic class SimpleCalculator {\n    public static void main(String[] args){\n        System.out.print(\"请输入一个整数:\");\n        Scanner in = new Scanner(System.in);\n        int a = in.nextInt();\n        System.out.print(\"请再输入一个整数:\");\n        int b = in.nextInt();\n        int sum = a + b;\n        System.out.print(\"这两个数的和为:\" + sum);\n    }\n}\n```\n\n输出如下：\n\n{% asset_img java-simple-example-3.png java-example %}\n\n这样，我们的简易版计算器就完成了。虽然简单，但还是建议你在自己电脑上实现一次，看代码和写代码是完全不一样的两种体验。\n\n回顾一下本篇，我们设计了一个类`SimpleCalculator`，并编写了一个main方法，并在里面完成了简易版计算器的逻辑设计。也许你对于自己写的东西还有很多疑问，对象是什么？类又是什么含义？Scanner还可以做什么？前面的package有什么作用，import又是在干嘛？别着急，接着看后面的文章，相信你的疑问会一点一点消失。\n","slug":"java/introduction/java-simple-example","published":1,"updated":"2018-12-28T10:02:18.350Z","_id":"cjq7rm5qv001uwu9kq9zp27ef","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>&#x4EBA;&#x90FD;&#x6709;&#x4E24;&#x9762;&#xFF0C;&#x4E00;&#x9762;&#x5929;&#x4F7F;&#xFF0C;&#x4E00;&#x9762;&#x6076;&#x9B54;&#x3002;</p>\n</blockquote>\n<h2 id=\"&#x524D;&#x8A00;\"><a href=\"#&#x524D;&#x8A00;\" class=\"headerlink\" title=\"&#x524D;&#x8A00;\"></a>&#x524D;&#x8A00;</h2><p>&#x4E3A;&#x4E86;&#x7EDF;&#x4E00;&#x98CE;&#x683C;&#xFF0C;&#x4E5F;&#x4E3A;&#x4E86;&#x589E;&#x52A0;&#x8DA3;&#x5473;&#x6027;&#xFF0C;&#x4EE5;&#x540E;&#x7684;&#x6587;&#x7AE0;&#x90FD;&#x4F1A;&#x4EE5;&#x5173;&#x5361;&#x7684;&#x5F62;&#x5F0F;&#x8FDB;&#x884C;&#x5C55;&#x793A;&#xFF0C;&#x8FD9;&#x6837;&#x4E5F;&#x80FD;&#x8BA9;&#x5927;&#x5BB6;&#x660E;&#x786E;&#x6BCF;&#x4E00;&#x7BC7;&#x7684;&#x76EE;&#x6807;&#xFF0C;&#x5E26;&#x7740;&#x76EE;&#x7684;&#x6765;&#x9605;&#x8BFB;&#x4F1A;&#x66F4;&#x6709;&#x65B9;&#x5411;&#x611F;&#x3002;</p>\n<p>&#x4E4B;&#x524D;&#x5DF2;&#x7ECF;&#x5199;&#x8FC7;&#x4E86;Hello World&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x6B21;&#x5C31;&#x6362;&#x4E00;&#x4E2A;&#x5427;&#xFF0C;&#x8FD9;&#x6B21;&#x7684;&#x5C0F;&#x76EE;&#x6807;&#x4FBF;&#x662F;&#x2014;&#x2014;Java&#x7B80;&#x6613;&#x7248;&#x8BA1;&#x7B97;&#x5668;&#x3002;</p>\n<h2 id=\"&#x529F;&#x80FD;&#x8BF4;&#x660E;\"><a href=\"#&#x529F;&#x80FD;&#x8BF4;&#x660E;\" class=\"headerlink\" title=\"&#x529F;&#x80FD;&#x8BF4;&#x660E;\"></a>&#x529F;&#x80FD;&#x8BF4;&#x660E;</h2><p>&#x7B2C;&#x4E00;&#x7248;&#x7684;Java&#x8BA1;&#x7B97;&#x5668;&#x4EC5;&#x9700;&#x8981;&#x652F;&#x6301;&#x52A0;&#x6CD5;&#x8FD0;&#x7B97;&#xFF0C;&#x7528;&#x6237;&#x8F93;&#x5165;&#x4E24;&#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x7136;&#x540E;&#x8F93;&#x51FA;&#x5B83;&#x4EEC;&#x7684;&#x548C;&#x3002;</p>\n<h2 id=\"&#x65B9;&#x6CD5;&#x9884;&#x4E60;\"><a href=\"#&#x65B9;&#x6CD5;&#x9884;&#x4E60;\" class=\"headerlink\" title=\"&#x65B9;&#x6CD5;&#x9884;&#x4E60;\"></a>&#x65B9;&#x6CD5;&#x9884;&#x4E60;</h2><p>&#x5982;&#x679C;&#x662F;&#x521A;&#x5F00;&#x59CB;&#x63A5;&#x89E6;&#x7F16;&#x7A0B;&#xFF0C;&#x4E5F;&#x8BB8;&#x4F60;&#x4F1A;&#x6BEB;&#x65E0;&#x5934;&#x7EEA;&#xFF0C;&#x83AB;&#x65B9;&#xFF0C;&#x8FD9;&#x662F;&#x5F88;&#x6B63;&#x5E38;&#x7684;&#x73B0;&#x8C61;&#xFF0C;&#x56E0;&#x4E3A;&#x4F60;&#x5BF9;&#x4E8E;&#x5982;&#x4F55;&#x4E0E;&#x8BA1;&#x7B97;&#x673A;&#x5C24;&#x5176;&#x662F;&#x547D;&#x4EE4;&#x884C;&#x8FDB;&#x884C;&#x4EA4;&#x4E92;&#x6BEB;&#x65E0;&#x5934;&#x7EEA;&#x3002;</p>\n<p>&#x6240;&#x4EE5;&#x5728;&#x5F00;&#x59CB;&#x7F16;&#x7801;&#x524D;&#xFF0C;&#x9700;&#x8981;&#x5148;&#x9884;&#x4E60;&#x4E00;&#x4E9B;&#x5FC5;&#x8981;&#x7684;&#x77E5;&#x8BC6;&#x3002;</p>\n<h3 id=\"&#x8F93;&#x51FA;&#x4FE1;&#x606F;\"><a href=\"#&#x8F93;&#x51FA;&#x4FE1;&#x606F;\" class=\"headerlink\" title=\"&#x8F93;&#x51FA;&#x4FE1;&#x606F;\"></a>&#x8F93;&#x51FA;&#x4FE1;&#x606F;</h3><p>&#x5148;&#x6765;&#x8BA4;&#x8BC6;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5; <code>System.out.println()</code>&#xFF0C;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x4F1A;&#x5C06;&#x4F60;&#x4F20;&#x5165;&#x7684;&#x4FE1;&#x606F;&#x8F93;&#x51FA;&#x5230;&#x63A7;&#x5236;&#x53F0;&#x4E2D;&#xFF0C;emmm&#xFF0C;&#x4EC0;&#x4E48;&#x662F;&#x63A7;&#x5236;&#x53F0;&#xFF1F;&#x4F60;&#x8FD0;&#x884C;&#x7A0B;&#x5E8F;&#x540E;&#x51FA;&#x73B0;&#x7684;&#x90A3;&#x4E2A;&#x9ED1;&#x4E0D;&#x62C9;&#x51E0;&#x7684;&#x4E1C;&#x897F;&#x5C31;&#x53EB;&#x505A;&#x63A7;&#x5236;&#x53F0;&#xFF0C;&#x5B83;&#x662F;&#x6211;&#x4EEC;&#x4E0E;&#x8BA1;&#x7B97;&#x673A;&#x4EA4;&#x4E92;&#x7684;&#x4E00;&#x4E2A;&#x6700;&#x7B80;&#x5355;&#x539F;&#x59CB;&#x7684;&#x65B9;&#x5F0F;&#x3002;</p>\n<p>&#x6765;&#x8BD5;&#x9A8C;&#x4E00;&#x4E0B;&#xFF0C;&#x8FD8;&#x8BB0;&#x5F97;&#x5982;&#x4F55;&#x7528;idea&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x7C7B;&#x5417;&#xFF1F;&#x4E0D;&#x8BB0;&#x5F97;&#x7684;&#x8BDD;&#x7FFB;&#x770B;&#x4E00;&#x4E0B;<a href=\"java-ide.md\">&#x8FD9;&#x91CC;</a>&#x3002;</p>\n<p>&#x8FD9;&#x6B21;&#x6211;&#x4EEC;&#x7EE7;&#x7EED;&#x5728;hello&#x5305;&#x4E0B;&#x9762;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x7C7B;&#x53EB;&#x505A;PrintTest&#xFF0C;&#x7136;&#x540E;&#x6DFB;&#x52A0;&#x4EE5;&#x4E0B;&#x65B9;&#x6CD5;&#xFF1A;</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> hello;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrintTest</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>{</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;&#x8F93;&#x51FA;&#x6D4B;&#x8BD5;&quot;</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>&#x7136;&#x540E;&#x6211;&#x4EEC;&#x70B9;&#x51FB;&#x8FD0;&#x884C;&#xFF0C;&#x6216;&#x8005;&#x6309;&#x952E;&#xFF08;<code>ctrl+shift+R</code>&#xFF09;&#xFF0C;&#x5C31;&#x80FD;&#x770B;&#x5230;&#x4E0B;&#x9762;&#x7684;&#x8F93;&#x51FA;&#x4E86;&#xFF1A;</p>\n<img src=\"/programming/java/introduction/java-simple-example/java-simple-example-1.png\" title=\"java-example\">\n<p>&#x5148;&#x4E0D;&#x8981;&#x95EE;&#x8FD9;&#x4E2A;System&#x662F;&#x4E2A;&#x4EC0;&#x4E48;&#x4E1C;&#x897F;&#xFF0C;&#x53EA;&#x8981;&#x77E5;&#x9053;&#x8FD9;&#x6837;&#x53EF;&#x4EE5;&#x8F93;&#x51FA;&#x4E00;&#x884C;&#x4FE1;&#x606F;&#x5C31;&#x884C;&#x4E86;&#xFF0C;&#x9700;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x662F;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x9ED8;&#x8BA4;&#x4F1A;&#x5728;&#x672B;&#x5C3E;&#x52A0;&#x4E00;&#x4E2A;&#x6362;&#x884C;&#x7B26;&#xFF0C;&#x5982;&#x679C;&#x60F3;&#x8981;&#x4E0D;&#x6362;&#x884C;&#xFF0C;&#x53EF;&#x4EE5;&#x8BD5;&#x8BD5; <code>System.out.print()</code>&#x3002;</p>\n<h3 id=\"&#x8F93;&#x5165;&#x4FE1;&#x606F;\"><a href=\"#&#x8F93;&#x5165;&#x4FE1;&#x606F;\" class=\"headerlink\" title=\"&#x8F93;&#x5165;&#x4FE1;&#x606F;\"></a>&#x8F93;&#x5165;&#x4FE1;&#x606F;</h3><p>&#x4E0A;&#x9762;&#x5DF2;&#x7ECF;&#x8BF4;&#x8FC7;&#x5982;&#x4F55;&#x8F93;&#x51FA;&#x4FE1;&#x606F;&#x4E86;&#xFF0C;&#x73B0;&#x5728;&#x6765;&#x770B;&#x770B;&#x5982;&#x4F55;&#x8F93;&#x5165;&#x4FE1;&#x606F;&#x5E76;&#x8FDB;&#x884C;&#x8BFB;&#x53D6;&#x3002;</p>\n<p>&#x5148;&#x6765;&#x8BA4;&#x8BC6;&#x4E00;&#x4E0B;Scanner&#x7C7B;&#xFF0C;Scanner&#x7C7B;&#x662F;&#x7528;&#x6765;&#x4ECE;&#x5404;&#x79CD;&#x8F93;&#x5165;&#x6E90;&#x8BFB;&#x53D6;&#x4FE1;&#x606F;&#x7684;&#xFF0C;&#x5B83;&#x53EF;&#x4EE5;&#x4ECE;&#x5404;&#x79CD;&#x8F93;&#x5165;&#x6E90;&#x4E2D;&#x8BFB;&#x53D6;&#x4FE1;&#x606F;&#xFF0C;&#x6700;&#x5E38;&#x7528;&#x7684;&#x5F53;&#x7136;&#x5C31;&#x662F;&#x63A7;&#x5236;&#x53F0;&#x8F93;&#x5165;&#x3002;&#x90A3;&#x5982;&#x4F55;&#x7528;Scanner&#x8BFB;&#x53D6;&#x63A7;&#x5236;&#x53F0;&#x7684;&#x8F93;&#x5165;&#x5462;&#xFF1F;&#x8FD9;&#x5C31;&#x8981;&#x7528;&#x5230;System.in&#x4E86;&#xFF0C;&#x6765;&#x770B;&#x6817;&#x5B50;&#xFF0C;&#x6211;&#x4EEC;&#x518D;&#x65B0;&#x5EFA;&#x4E00;&#x4E2A;InputTest&#x7C7B;&#xFF1A;</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> hello;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InputTest</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>{</span><br><span class=\"line\">        Scanner in = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;&#x8BF7;&#x8F93;&#x5165;&#x4E00;&#x4E2A;&#x6574;&#x6570;:&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = in.nextInt();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;&#x521A;&#x624D;&#x8F93;&#x5165;&#x7684;&#x6574;&#x6570;&#x4E3A;&#xFF1A;&quot;</span> + a);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>&#x7136;&#x540E;&#x518D;&#x8FD0;&#x884C;&#x4E00;&#x4E0B;&#xFF0C;&#x5E76;&#x4E14;&#x8F93;&#x5165;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#x7136;&#x540E;&#x6309;&#x56DE;&#x8F66;&#x952E;&#xFF0C;&#x8FD9;&#x91CC;&#x6211;&#x8F93;&#x5165;&#x7684;&#x662F;20&#xFF1A;</p>\n<img src=\"/programming/java/introduction/java-simple-example/java-simple-example-2.png\" title=\"java-example\">\n<p>&#x5982;&#x679C;&#x5BF9;&#x4E8E;&#x5177;&#x4F53;&#x7684;&#x7EC6;&#x8282;&#x8FD8;&#x4E0D;&#x6E05;&#x695A;&#xFF0C;&#x6CA1;&#x6709;&#x5173;&#x7CFB;&#xFF0C;&#x5148;&#x7167;&#x505A;&#x5C31;&#x597D;&#x4E86;&#x3002;</p>\n<h2 id=\"&#x4EE3;&#x7801;&#x7F16;&#x5199;\"><a href=\"#&#x4EE3;&#x7801;&#x7F16;&#x5199;\" class=\"headerlink\" title=\"&#x4EE3;&#x7801;&#x7F16;&#x5199;\"></a>&#x4EE3;&#x7801;&#x7F16;&#x5199;</h2><p>&#x90A3;&#x4E48;&#x63A5;&#x4E0B;&#x6765;&#x5C31;&#x5F00;&#x59CB;&#x8BBE;&#x8BA1;&#x8FD9;&#x4E2A;&#x6700;&#x7B80;&#x5355;&#x7684;&#x8BA1;&#x7B97;&#x5668;&#x4E86;&#xFF0C;&#x9996;&#x5148;&#x6211;&#x4EEC;&#x8981;&#x63D0;&#x793A;&#x7528;&#x6237;&#x8F93;&#x5165;&#x4E00;&#x4E2A;&#x6574;&#x6570;&#xFF0C;&#x5C31;&#x50CF;&#x4E0A;&#x9762;&#x90A3;&#x6837;&#xFF1A;</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.print(<span class=\"string\">&quot;&#x8BF7;&#x8F93;&#x5165;&#x4E00;&#x4E2A;&#x6574;&#x6570;:&quot;</span>);</span><br></pre></td></tr></tbody></table></figure>\n<p>&#x7136;&#x540E;&#x7528;&#x4E00;&#x4E2A;int&#x53D8;&#x91CF;&#x6765;&#x5B58;&#x50A8;&#xFF0C;&#x4EC0;&#x4E48;&#xFF1F;&#x4E0D;&#x77E5;&#x9053;&#x53D8;&#x91CF;&#x662F;&#x5E72;&#x561B;&#x7684;&#xFF1F;&#x6CA1;&#x4E8B;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x5148;&#x628A;&#x5B83;&#x5F53;&#x505A;&#x4E00;&#x4E2A;&#x76D2;&#x5B50;&#xFF0C;&#x7528;&#x6765;&#x628A;&#x7528;&#x6237;&#x8F93;&#x5165;&#x7684;&#x4FE1;&#x606F;&#x5B58;&#x653E;&#x8FDB;&#x53BB;&#x3002;</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scanner in = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\"><span class=\"keyword\">int</span> a = in.nextInt();</span><br></pre></td></tr></tbody></table></figure>\n<p>&#x7136;&#x540E;&#x63D0;&#x793A;&#x7528;&#x6237;&#x518D;&#x8F93;&#x5165;&#x4E00;&#x4E2A;&#x6574;&#x6570;&#xFF1A;</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.print(<span class=\"string\">&quot;&#x8BF7;&#x8F93;&#x5165;&#x53E6;&#x4E00;&#x4E2A;&#x6574;&#x6570;:&quot;</span>);</span><br></pre></td></tr></tbody></table></figure>\n<p>&#x7136;&#x540E;&#x518D;&#x7528;&#x4E00;&#x4E2A;int&#x53D8;&#x91CF;&#x6765;&#x5B58;&#x50A8;&#x3002;</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> b = in.nextInt();</span><br></pre></td></tr></tbody></table></figure>\n<p>&#x63A5;&#x4E0B;&#x6765;&#x8BA1;&#x7B97;&#x4E24;&#x8005;&#x7684;&#x548C;&#xFF0C;&#x5E76;&#x5B58;&#x5230;&#x7B2C;&#x4E09;&#x4E2A;&#x53D8;&#x91CF;&#x4E2D;&#xFF1A;</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> sum = a + b;</span><br></pre></td></tr></tbody></table></figure>\n<p>&#x6700;&#x540E;&#x8F93;&#x51FA;&#x8FD9;&#x4E2A;&#x548C;&#xFF1A;</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.print(<span class=\"string\">&quot;&#x8FD9;&#x4E24;&#x4E2A;&#x6570;&#x7684;&#x548C;&#x4E3A;:&quot;</span> + sum);</span><br></pre></td></tr></tbody></table></figure>\n<p>&#x6240;&#x4EE5;&#x6574;&#x4F53;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A;</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> hello;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleCalculator</span> </span>{</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>{</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;&#x8BF7;&#x8F93;&#x5165;&#x4E00;&#x4E2A;&#x6574;&#x6570;:&quot;</span>);</span><br><span class=\"line\">        Scanner in = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = in.nextInt();</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;&#x8BF7;&#x518D;&#x8F93;&#x5165;&#x4E00;&#x4E2A;&#x6574;&#x6570;:&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> b = in.nextInt();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = a + b;</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;&#x8FD9;&#x4E24;&#x4E2A;&#x6570;&#x7684;&#x548C;&#x4E3A;:&quot;</span> + sum);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>&#x8F93;&#x51FA;&#x5982;&#x4E0B;&#xFF1A;</p>\n<img src=\"/programming/java/introduction/java-simple-example/java-simple-example-3.png\" title=\"java-example\">\n<p>&#x8FD9;&#x6837;&#xFF0C;&#x6211;&#x4EEC;&#x7684;&#x7B80;&#x6613;&#x7248;&#x8BA1;&#x7B97;&#x5668;&#x5C31;&#x5B8C;&#x6210;&#x4E86;&#x3002;&#x867D;&#x7136;&#x7B80;&#x5355;&#xFF0C;&#x4F46;&#x8FD8;&#x662F;&#x5EFA;&#x8BAE;&#x4F60;&#x5728;&#x81EA;&#x5DF1;&#x7535;&#x8111;&#x4E0A;&#x5B9E;&#x73B0;&#x4E00;&#x6B21;&#xFF0C;&#x770B;&#x4EE3;&#x7801;&#x548C;&#x5199;&#x4EE3;&#x7801;&#x662F;&#x5B8C;&#x5168;&#x4E0D;&#x4E00;&#x6837;&#x7684;&#x4E24;&#x79CD;&#x4F53;&#x9A8C;&#x3002;</p>\n<p>&#x56DE;&#x987E;&#x4E00;&#x4E0B;&#x672C;&#x7BC7;&#xFF0C;&#x6211;&#x4EEC;&#x8BBE;&#x8BA1;&#x4E86;&#x4E00;&#x4E2A;&#x7C7B;<code>SimpleCalculator</code>&#xFF0C;&#x5E76;&#x7F16;&#x5199;&#x4E86;&#x4E00;&#x4E2A;main&#x65B9;&#x6CD5;&#xFF0C;&#x5E76;&#x5728;&#x91CC;&#x9762;&#x5B8C;&#x6210;&#x4E86;&#x7B80;&#x6613;&#x7248;&#x8BA1;&#x7B97;&#x5668;&#x7684;&#x903B;&#x8F91;&#x8BBE;&#x8BA1;&#x3002;&#x4E5F;&#x8BB8;&#x4F60;&#x5BF9;&#x4E8E;&#x81EA;&#x5DF1;&#x5199;&#x7684;&#x4E1C;&#x897F;&#x8FD8;&#x6709;&#x5F88;&#x591A;&#x7591;&#x95EE;&#xFF0C;&#x5BF9;&#x8C61;&#x662F;&#x4EC0;&#x4E48;&#xFF1F;&#x7C7B;&#x53C8;&#x662F;&#x4EC0;&#x4E48;&#x542B;&#x4E49;&#xFF1F;Scanner&#x8FD8;&#x53EF;&#x4EE5;&#x505A;&#x4EC0;&#x4E48;&#xFF1F;&#x524D;&#x9762;&#x7684;package&#x6709;&#x4EC0;&#x4E48;&#x4F5C;&#x7528;&#xFF0C;import&#x53C8;&#x662F;&#x5728;&#x5E72;&#x561B;&#xFF1F;&#x522B;&#x7740;&#x6025;&#xFF0C;&#x63A5;&#x7740;&#x770B;&#x540E;&#x9762;&#x7684;&#x6587;&#x7AE0;&#xFF0C;&#x76F8;&#x4FE1;&#x4F60;&#x7684;&#x7591;&#x95EE;&#x4F1A;&#x4E00;&#x70B9;&#x4E00;&#x70B9;&#x6D88;&#x5931;&#x3002;</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<blockquote>\n<p>人都有两面，一面天使，一面恶魔。</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>为了统一风格，也为了增加趣味性，以后的文章都会以关卡的形式进行展示，这样也能让大家明确每一篇的目标，带着目的来阅读会更有方向感。</p>\n<p>之前已经写过了Hello World，所以这次就换一个吧，这次的小目标便是——Java简易版计算器。</p>\n<h2 id=\"功能说明\"><a href=\"#功能说明\" class=\"headerlink\" title=\"功能说明\"></a>功能说明</h2><p>第一版的Java计算器仅需要支持加法运算，用户输入两个数字，然后输出它们的和。</p>\n<h2 id=\"方法预习\"><a href=\"#方法预习\" class=\"headerlink\" title=\"方法预习\"></a>方法预习</h2><p>如果是刚开始接触编程，也许你会毫无头绪，莫方，这是很正常的现象，因为你对于如何与计算机尤其是命令行进行交互毫无头绪。</p>\n<p>所以在开始编码前，需要先预习一些必要的知识。</p>\n<h3 id=\"输出信息\"><a href=\"#输出信息\" class=\"headerlink\" title=\"输出信息\"></a>输出信息</h3><p>先来认识一个方法 <code>System.out.println()</code>，这个方法会将你传入的信息输出到控制台中，emmm，什么是控制台？你运行程序后出现的那个黑不拉几的东西就叫做控制台，它是我们与计算机交互的一个最简单原始的方式。</p>\n<p>来试验一下，还记得如何用idea创建一个类吗？不记得的话翻看一下<a href=\"java-ide.md\">这里</a>。</p>\n<p>这次我们继续在hello包下面创建一个类叫做PrintTest，然后添加以下方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> hello;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrintTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"输出测试\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后我们点击运行，或者按键（<code>ctrl+shift+R</code>），就能看到下面的输出了：</p>\n<img src=\"/programming/java/introduction/java-simple-example/java-simple-example-1.png\" title=\"java-example\">\n<p>先不要问这个System是个什么东西，只要知道这样可以输出一行信息就行了，需要注意的是这个方法默认会在末尾加一个换行符，如果想要不换行，可以试试 <code>System.out.print()</code>。</p>\n<h3 id=\"输入信息\"><a href=\"#输入信息\" class=\"headerlink\" title=\"输入信息\"></a>输入信息</h3><p>上面已经说过如何输出信息了，现在来看看如何输入信息并进行读取。</p>\n<p>先来认识一下Scanner类，Scanner类是用来从各种输入源读取信息的，它可以从各种输入源中读取信息，最常用的当然就是控制台输入。那如何用Scanner读取控制台的输入呢？这就要用到System.in了，来看栗子，我们再新建一个InputTest类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> hello;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InputTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        Scanner in = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        System.out.print(<span class=\"string\">\"请输入一个整数:\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = in.nextInt();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"刚才输入的整数为：\"</span> + a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后再运行一下，并且输入一个数字然后按回车键，这里我输入的是20：</p>\n<img src=\"/programming/java/introduction/java-simple-example/java-simple-example-2.png\" title=\"java-example\">\n<p>如果对于具体的细节还不清楚，没有关系，先照做就好了。</p>\n<h2 id=\"代码编写\"><a href=\"#代码编写\" class=\"headerlink\" title=\"代码编写\"></a>代码编写</h2><p>那么接下来就开始设计这个最简单的计算器了，首先我们要提示用户输入一个整数，就像上面那样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.print(<span class=\"string\">\"请输入一个整数:\"</span>);</span><br></pre></td></tr></table></figure>\n<p>然后用一个int变量来存储，什么？不知道变量是干嘛的？没事，你可以先把它当做一个盒子，用来把用户输入的信息存放进去。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scanner in = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\"><span class=\"keyword\">int</span> a = in.nextInt();</span><br></pre></td></tr></table></figure>\n<p>然后提示用户再输入一个整数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.print(<span class=\"string\">\"请输入另一个整数:\"</span>);</span><br></pre></td></tr></table></figure>\n<p>然后再用一个int变量来存储。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> b = in.nextInt();</span><br></pre></td></tr></table></figure>\n<p>接下来计算两者的和，并存到第三个变量中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> sum = a + b;</span><br></pre></td></tr></table></figure>\n<p>最后输出这个和：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.print(<span class=\"string\">\"这两个数的和为:\"</span> + sum);</span><br></pre></td></tr></table></figure>\n<p>所以整体代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> hello;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleCalculator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        System.out.print(<span class=\"string\">\"请输入一个整数:\"</span>);</span><br><span class=\"line\">        Scanner in = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = in.nextInt();</span><br><span class=\"line\">        System.out.print(<span class=\"string\">\"请再输入一个整数:\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> b = in.nextInt();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = a + b;</span><br><span class=\"line\">        System.out.print(<span class=\"string\">\"这两个数的和为:\"</span> + sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出如下：</p>\n<img src=\"/programming/java/introduction/java-simple-example/java-simple-example-3.png\" title=\"java-example\">\n<p>这样，我们的简易版计算器就完成了。虽然简单，但还是建议你在自己电脑上实现一次，看代码和写代码是完全不一样的两种体验。</p>\n<p>回顾一下本篇，我们设计了一个类<code>SimpleCalculator</code>，并编写了一个main方法，并在里面完成了简易版计算器的逻辑设计。也许你对于自己写的东西还有很多疑问，对象是什么？类又是什么含义？Scanner还可以做什么？前面的package有什么作用，import又是在干嘛？别着急，接着看后面的文章，相信你的疑问会一点一点消失。</p>\n"},{"title":"Java 开发入门篇 - 起航","date":"2018-12-28T11:00:00.000Z","_content":"\n> 最怕的东西，最应该去突破。\n\n## 初衷\n\n之前在[博客园](http://www.cnblogs.com/mfrank/)已经陆续发了几十篇文章，但总体并没有一个很好的串联，在内容编排上也存在较多问题，因此特地将之前的文章做一个整理，一是将原有文章进行润色，让表达更加生动清晰，二是尽可能的将各个知识点连接成线，整理出自己的一套体系，并剔除其中的错误。\n\n本系列文章不会鼓吹Java怎么怎么好，也不打算尝试怂恿那些在Java边缘徘徊的人来学习Java，只想根据自己的学习经验来给那些想要学习Java却不得其法的人提供一点自己的经验和看法。\n\n## 编程的世界观\n\n编程写代码其实跟玩游戏很像，你不断学习，不断提升，然后写代码来完成各种工作的过程就像打怪升级，赚钱买装备，最终打倒BOSS的过程。\n\n每一款好的游戏都有一个较为统一完整的世界观，也会有一个统一的背景设定，你需要先接受和理解这个设定的背景，然后慢慢了解这个游戏的完整世界观，这样才能真正融入这个游戏。\n\n比如说，《剑网3》的世界观设计一直遵循“纯武侠，真江湖”设计，背景设定便是唐宋时期，武林纷争，各大门派先后崛起，而你出身草芥，通过自身努力加入门派，然后通过不断修炼内功和挑战各种任务来提升自我。\n\n又比如《饥荒》是关于一名科学家被恶魔传送到了异世界荒野的故事，游戏的主题是生存，所以你的目标是尽可能的利用各种资源来存活更长时间，同时要抵御各种外来威胁来保证自己的安全。\n\n如果把编程开发也比作游戏的话，它更像是《我的世界》这样的自由度很高的沙盒游戏。有的人会将《我的世界》玩成一款生存游戏，享受被僵尸追杀的快感，有人会将它玩成一款建筑游戏，打造属于自己的王国。带着不同的目的人，会有完全不同的游戏体验。\n\n编程也是如此，在编程的世界里，你拥有的是一个万能工厂，而你是一位工程师，在这里你可以生产出任何产品，汽车、轮船、火箭，如果你足够厉害，甚至可以创造一个新的世界，所有你需要做的，便是给出合格的设计图，接下来的事情，交给这个万能工厂就好了。\n\n每个人拥有这个万能工厂的人都有着不同的目的，有的人只是为了参观，有的人是为了制作出性能强悍的跑车，有的人是为了制作自己用的小玩具。不同的目的就会有完全不同的体验，有的人会觉得枯燥，有的人会觉得无聊，而有的人会感觉激情四射。如果你能真正体会到其中的乐趣，那么你一定会爱上这个工厂。\n\n但做出一张好的设计图并不是一件简单的事情，所以你需要不断的学习它的规范，设计出符合规范的设计图，才能被这个万能工厂正确生产出你想要的产品。等到你真正掌握了这个规范，就会发现，只满足于正确性还远远不够，于是渐渐的会开始追求效率和美感。为了提高设计效率，前辈们已经总结出很多种设计模式，适用于不同的设计场景，掌握了它们，在设计产品的时候便能更加随心所欲。\n\n而关于编程美学，也是一门用经验堆积起来的学问。毕竟，作为工程师的我们，需要与其他工程师不断交流切磋，我们会观摩欣赏别人的设计图，也会把自己的设计图和别人探讨。所以设计图不仅仅是为了给这个万能工厂来运转，也是为了阅读。\n\n当然，这都是后话了。\n\n## Java编程的世界观\n\nJava是一门高级编程语言，所谓的高级，是相对于汇编等机器语言而言的，有更高层次的抽象，更加接近自然语言和数学公式，基本脱离了机器的硬件系统。\n\n前面说到，每种编程语言都是一个万能工厂，Java也有一个万能工厂。不同语言代表的不同工厂都有各自的擅长领域。目前来说，Java的主流应用领域便是Web/APP后端开发、嵌入式设备、大数据、安卓开发，当然，Java也可以开发桌面应用程序，也可以写游戏，但那些并不是Java擅长的领域。就像你可以用菜刀砍树，用斧头切菜一样，可以做，但是会有些别扭，有其他更好用的工具为什么要选择这样蹩脚的方式呢。不要忘了，这些工厂都只是一个工具而已，你的最终目的是实现你的要的功能。\n\n简单来说，不管黑猫白猫，能抓住耗子的猫就是好猫。\n\n所以对待各种编程语言，首先要保持理智，他们都只是一个工具，我们的目的是为了解决问题，不要陷入对某种语言的盲目崇拜的陷阱里，脱离场景而进行语言之间的对比是毫无意义的。\n\nJava有很多开发方向，本系列文章将主要以JavaWeb开发为目标进行探索，利用Java这个大工厂来开发网站后端应用，为我们的前台页面提供强劲稳定的功能支持。\n\n相对于桌面开发而言，JavaWeb开发更多的时候开发出的产品是默默的在后台工作的，需要通过前台html页面或者手机app，亦或是桌面app才能进行间接的交互。比如你打开淘宝，看到的那些页面架构和好看的图片大都是前端和UI的功劳，而你看到的那些文字内容，大都是后端的数据驱动的成果。（当然，现在可能更多的功劳又要归功于基于大数据的推荐系统了）\n\n但不要因此而觉得Java后端开发很无聊，其实一个网站的后端就像一个程序的大脑，绝大部分的数据逻辑处理是由后端完成的，不仅要负责对数据进行处理，还需要跟数据库，各种消息中间件打交道，利用各种算法来实现特定的功能，比如根据销售数据进行热销推荐，对用户进行信用评级等等\n\n前端则负责展示处理后的结果，并做出相应的响应，是一个应用的门面。前端侧重展示和交互，后端侧重程序的逻辑，都是为了提供更好的用户体验，只是着力点不一样而已。\n\nJava这个大工厂能量无穷，想要完全掌控它的妙用需要一段较长的修炼时间，毕竟想要设计一张足够精巧的设计图纸并不是一件简单的事情，所以需要不断的学习。这个过程难免会遇到挫折和困难，其中很多坑对于新手而言是致命的，最简单的比如环境安装，很多人的兴趣就是夭折在环境的折腾上。其实很多坑，早有无数人踩过，也有很多人在网上分享过相关的解决办法，所以当你遇到问题的时候，可以先上百度找找，你要相信一定有人遇到过同样的问题，如果没找到，想想换个姿势搜索。\n\n当然也许苦苦搜寻之后，还是无法解决你的问题，这时候，来自共同学习的小伙伴的支持就显得弥足珍贵了，为此，博主创建了一个QQ群【529253292】，这里也许可以找到你想要的答案。\n\nJava的学习深造过程，就像是升级打怪过关卡，每个知识点都有些小boss，把它们打倒后便能获得相应的经验值，可以提升你的等级，但是随着你的等级的提升，这些小怪小boss对你的修炼的帮助已经聊胜于无了，于是你需要进行更艰难的修炼，去挑战更厉害的boss。\n\n在这个世界里，自由度很大，大到也许会让刚接触的你迷失方向，不知所措。所以本系列文章将会提供给你一条前往JavaWeb开发的修炼道路，虽然并不一定是最优路线，但至少总体方向不会错，如果你刚好想往这个方向发展，那么本系列文章将会给你提供一些帮助。注意，本系列文章主张的是夯实基础，先修炼内功，然后再修炼外功，所以如果你想要的是捷径，想要知道如何在一两个月之内找到工作，那么这个系列文章可能不太适合你。\n\n当你的经验累积到一定的值时，就能获得相应的头衔，在JavaWeb的发展中主要有两条升级路线，一条是技术路线，一条是管理路线，大致就像这样:\n\n{% asset_img java-started-1.png JavaWeb升级之路 %}\n\n两条路线的升级加点方式不太一样，但是都是当技术积累到一定程度后才能选择不同的升级路线。\n\n所以，年轻的勇士，不要犹豫了，拿起你的桃木剑，在Java这个世界探索出自己的道路吧！\n","source":"_posts/java/introduction/java-started.md","raw":"---\ntitle: Java 开发入门篇 - 起航\ntags: \n - Java入门\n - Java\ncategories: 编程\ndate: 2018-12-28 19:00:00\n---\n\n> 最怕的东西，最应该去突破。\n\n## 初衷\n\n之前在[博客园](http://www.cnblogs.com/mfrank/)已经陆续发了几十篇文章，但总体并没有一个很好的串联，在内容编排上也存在较多问题，因此特地将之前的文章做一个整理，一是将原有文章进行润色，让表达更加生动清晰，二是尽可能的将各个知识点连接成线，整理出自己的一套体系，并剔除其中的错误。\n\n本系列文章不会鼓吹Java怎么怎么好，也不打算尝试怂恿那些在Java边缘徘徊的人来学习Java，只想根据自己的学习经验来给那些想要学习Java却不得其法的人提供一点自己的经验和看法。\n\n## 编程的世界观\n\n编程写代码其实跟玩游戏很像，你不断学习，不断提升，然后写代码来完成各种工作的过程就像打怪升级，赚钱买装备，最终打倒BOSS的过程。\n\n每一款好的游戏都有一个较为统一完整的世界观，也会有一个统一的背景设定，你需要先接受和理解这个设定的背景，然后慢慢了解这个游戏的完整世界观，这样才能真正融入这个游戏。\n\n比如说，《剑网3》的世界观设计一直遵循“纯武侠，真江湖”设计，背景设定便是唐宋时期，武林纷争，各大门派先后崛起，而你出身草芥，通过自身努力加入门派，然后通过不断修炼内功和挑战各种任务来提升自我。\n\n又比如《饥荒》是关于一名科学家被恶魔传送到了异世界荒野的故事，游戏的主题是生存，所以你的目标是尽可能的利用各种资源来存活更长时间，同时要抵御各种外来威胁来保证自己的安全。\n\n如果把编程开发也比作游戏的话，它更像是《我的世界》这样的自由度很高的沙盒游戏。有的人会将《我的世界》玩成一款生存游戏，享受被僵尸追杀的快感，有人会将它玩成一款建筑游戏，打造属于自己的王国。带着不同的目的人，会有完全不同的游戏体验。\n\n编程也是如此，在编程的世界里，你拥有的是一个万能工厂，而你是一位工程师，在这里你可以生产出任何产品，汽车、轮船、火箭，如果你足够厉害，甚至可以创造一个新的世界，所有你需要做的，便是给出合格的设计图，接下来的事情，交给这个万能工厂就好了。\n\n每个人拥有这个万能工厂的人都有着不同的目的，有的人只是为了参观，有的人是为了制作出性能强悍的跑车，有的人是为了制作自己用的小玩具。不同的目的就会有完全不同的体验，有的人会觉得枯燥，有的人会觉得无聊，而有的人会感觉激情四射。如果你能真正体会到其中的乐趣，那么你一定会爱上这个工厂。\n\n但做出一张好的设计图并不是一件简单的事情，所以你需要不断的学习它的规范，设计出符合规范的设计图，才能被这个万能工厂正确生产出你想要的产品。等到你真正掌握了这个规范，就会发现，只满足于正确性还远远不够，于是渐渐的会开始追求效率和美感。为了提高设计效率，前辈们已经总结出很多种设计模式，适用于不同的设计场景，掌握了它们，在设计产品的时候便能更加随心所欲。\n\n而关于编程美学，也是一门用经验堆积起来的学问。毕竟，作为工程师的我们，需要与其他工程师不断交流切磋，我们会观摩欣赏别人的设计图，也会把自己的设计图和别人探讨。所以设计图不仅仅是为了给这个万能工厂来运转，也是为了阅读。\n\n当然，这都是后话了。\n\n## Java编程的世界观\n\nJava是一门高级编程语言，所谓的高级，是相对于汇编等机器语言而言的，有更高层次的抽象，更加接近自然语言和数学公式，基本脱离了机器的硬件系统。\n\n前面说到，每种编程语言都是一个万能工厂，Java也有一个万能工厂。不同语言代表的不同工厂都有各自的擅长领域。目前来说，Java的主流应用领域便是Web/APP后端开发、嵌入式设备、大数据、安卓开发，当然，Java也可以开发桌面应用程序，也可以写游戏，但那些并不是Java擅长的领域。就像你可以用菜刀砍树，用斧头切菜一样，可以做，但是会有些别扭，有其他更好用的工具为什么要选择这样蹩脚的方式呢。不要忘了，这些工厂都只是一个工具而已，你的最终目的是实现你的要的功能。\n\n简单来说，不管黑猫白猫，能抓住耗子的猫就是好猫。\n\n所以对待各种编程语言，首先要保持理智，他们都只是一个工具，我们的目的是为了解决问题，不要陷入对某种语言的盲目崇拜的陷阱里，脱离场景而进行语言之间的对比是毫无意义的。\n\nJava有很多开发方向，本系列文章将主要以JavaWeb开发为目标进行探索，利用Java这个大工厂来开发网站后端应用，为我们的前台页面提供强劲稳定的功能支持。\n\n相对于桌面开发而言，JavaWeb开发更多的时候开发出的产品是默默的在后台工作的，需要通过前台html页面或者手机app，亦或是桌面app才能进行间接的交互。比如你打开淘宝，看到的那些页面架构和好看的图片大都是前端和UI的功劳，而你看到的那些文字内容，大都是后端的数据驱动的成果。（当然，现在可能更多的功劳又要归功于基于大数据的推荐系统了）\n\n但不要因此而觉得Java后端开发很无聊，其实一个网站的后端就像一个程序的大脑，绝大部分的数据逻辑处理是由后端完成的，不仅要负责对数据进行处理，还需要跟数据库，各种消息中间件打交道，利用各种算法来实现特定的功能，比如根据销售数据进行热销推荐，对用户进行信用评级等等\n\n前端则负责展示处理后的结果，并做出相应的响应，是一个应用的门面。前端侧重展示和交互，后端侧重程序的逻辑，都是为了提供更好的用户体验，只是着力点不一样而已。\n\nJava这个大工厂能量无穷，想要完全掌控它的妙用需要一段较长的修炼时间，毕竟想要设计一张足够精巧的设计图纸并不是一件简单的事情，所以需要不断的学习。这个过程难免会遇到挫折和困难，其中很多坑对于新手而言是致命的，最简单的比如环境安装，很多人的兴趣就是夭折在环境的折腾上。其实很多坑，早有无数人踩过，也有很多人在网上分享过相关的解决办法，所以当你遇到问题的时候，可以先上百度找找，你要相信一定有人遇到过同样的问题，如果没找到，想想换个姿势搜索。\n\n当然也许苦苦搜寻之后，还是无法解决你的问题，这时候，来自共同学习的小伙伴的支持就显得弥足珍贵了，为此，博主创建了一个QQ群【529253292】，这里也许可以找到你想要的答案。\n\nJava的学习深造过程，就像是升级打怪过关卡，每个知识点都有些小boss，把它们打倒后便能获得相应的经验值，可以提升你的等级，但是随着你的等级的提升，这些小怪小boss对你的修炼的帮助已经聊胜于无了，于是你需要进行更艰难的修炼，去挑战更厉害的boss。\n\n在这个世界里，自由度很大，大到也许会让刚接触的你迷失方向，不知所措。所以本系列文章将会提供给你一条前往JavaWeb开发的修炼道路，虽然并不一定是最优路线，但至少总体方向不会错，如果你刚好想往这个方向发展，那么本系列文章将会给你提供一些帮助。注意，本系列文章主张的是夯实基础，先修炼内功，然后再修炼外功，所以如果你想要的是捷径，想要知道如何在一两个月之内找到工作，那么这个系列文章可能不太适合你。\n\n当你的经验累积到一定的值时，就能获得相应的头衔，在JavaWeb的发展中主要有两条升级路线，一条是技术路线，一条是管理路线，大致就像这样:\n\n{% asset_img java-started-1.png JavaWeb升级之路 %}\n\n两条路线的升级加点方式不太一样，但是都是当技术积累到一定程度后才能选择不同的升级路线。\n\n所以，年轻的勇士，不要犹豫了，拿起你的桃木剑，在Java这个世界探索出自己的道路吧！\n","slug":"java/introduction/java-started","published":1,"updated":"2018-12-28T07:53:30.246Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5qx001ywu9k4mtml6ht","content":"<blockquote>\n<p>最怕的东西，最应该去突破。</p>\n</blockquote>\n<h2 id=\"初衷\"><a href=\"#初衷\" class=\"headerlink\" title=\"初衷\"></a>初衷</h2><p>之前在<a href=\"http://www.cnblogs.com/mfrank/\" target=\"_blank\" rel=\"noopener\">博客园</a>已经陆续发了几十篇文章，但总体并没有一个很好的串联，在内容编排上也存在较多问题，因此特地将之前的文章做一个整理，一是将原有文章进行润色，让表达更加生动清晰，二是尽可能的将各个知识点连接成线，整理出自己的一套体系，并剔除其中的错误。</p>\n<p>本系列文章不会鼓吹Java怎么怎么好，也不打算尝试怂恿那些在Java边缘徘徊的人来学习Java，只想根据自己的学习经验来给那些想要学习Java却不得其法的人提供一点自己的经验和看法。</p>\n<h2 id=\"编程的世界观\"><a href=\"#编程的世界观\" class=\"headerlink\" title=\"编程的世界观\"></a>编程的世界观</h2><p>编程写代码其实跟玩游戏很像，你不断学习，不断提升，然后写代码来完成各种工作的过程就像打怪升级，赚钱买装备，最终打倒BOSS的过程。</p>\n<p>每一款好的游戏都有一个较为统一完整的世界观，也会有一个统一的背景设定，你需要先接受和理解这个设定的背景，然后慢慢了解这个游戏的完整世界观，这样才能真正融入这个游戏。</p>\n<p>比如说，《剑网3》的世界观设计一直遵循“纯武侠，真江湖”设计，背景设定便是唐宋时期，武林纷争，各大门派先后崛起，而你出身草芥，通过自身努力加入门派，然后通过不断修炼内功和挑战各种任务来提升自我。</p>\n<p>又比如《饥荒》是关于一名科学家被恶魔传送到了异世界荒野的故事，游戏的主题是生存，所以你的目标是尽可能的利用各种资源来存活更长时间，同时要抵御各种外来威胁来保证自己的安全。</p>\n<p>如果把编程开发也比作游戏的话，它更像是《我的世界》这样的自由度很高的沙盒游戏。有的人会将《我的世界》玩成一款生存游戏，享受被僵尸追杀的快感，有人会将它玩成一款建筑游戏，打造属于自己的王国。带着不同的目的人，会有完全不同的游戏体验。</p>\n<p>编程也是如此，在编程的世界里，你拥有的是一个万能工厂，而你是一位工程师，在这里你可以生产出任何产品，汽车、轮船、火箭，如果你足够厉害，甚至可以创造一个新的世界，所有你需要做的，便是给出合格的设计图，接下来的事情，交给这个万能工厂就好了。</p>\n<p>每个人拥有这个万能工厂的人都有着不同的目的，有的人只是为了参观，有的人是为了制作出性能强悍的跑车，有的人是为了制作自己用的小玩具。不同的目的就会有完全不同的体验，有的人会觉得枯燥，有的人会觉得无聊，而有的人会感觉激情四射。如果你能真正体会到其中的乐趣，那么你一定会爱上这个工厂。</p>\n<p>但做出一张好的设计图并不是一件简单的事情，所以你需要不断的学习它的规范，设计出符合规范的设计图，才能被这个万能工厂正确生产出你想要的产品。等到你真正掌握了这个规范，就会发现，只满足于正确性还远远不够，于是渐渐的会开始追求效率和美感。为了提高设计效率，前辈们已经总结出很多种设计模式，适用于不同的设计场景，掌握了它们，在设计产品的时候便能更加随心所欲。</p>\n<p>而关于编程美学，也是一门用经验堆积起来的学问。毕竟，作为工程师的我们，需要与其他工程师不断交流切磋，我们会观摩欣赏别人的设计图，也会把自己的设计图和别人探讨。所以设计图不仅仅是为了给这个万能工厂来运转，也是为了阅读。</p>\n<p>当然，这都是后话了。</p>\n<h2 id=\"Java编程的世界观\"><a href=\"#Java编程的世界观\" class=\"headerlink\" title=\"Java编程的世界观\"></a>Java编程的世界观</h2><p>Java是一门高级编程语言，所谓的高级，是相对于汇编等机器语言而言的，有更高层次的抽象，更加接近自然语言和数学公式，基本脱离了机器的硬件系统。</p>\n<p>前面说到，每种编程语言都是一个万能工厂，Java也有一个万能工厂。不同语言代表的不同工厂都有各自的擅长领域。目前来说，Java的主流应用领域便是Web/APP后端开发、嵌入式设备、大数据、安卓开发，当然，Java也可以开发桌面应用程序，也可以写游戏，但那些并不是Java擅长的领域。就像你可以用菜刀砍树，用斧头切菜一样，可以做，但是会有些别扭，有其他更好用的工具为什么要选择这样蹩脚的方式呢。不要忘了，这些工厂都只是一个工具而已，你的最终目的是实现你的要的功能。</p>\n<p>简单来说，不管黑猫白猫，能抓住耗子的猫就是好猫。</p>\n<p>所以对待各种编程语言，首先要保持理智，他们都只是一个工具，我们的目的是为了解决问题，不要陷入对某种语言的盲目崇拜的陷阱里，脱离场景而进行语言之间的对比是毫无意义的。</p>\n<p>Java有很多开发方向，本系列文章将主要以JavaWeb开发为目标进行探索，利用Java这个大工厂来开发网站后端应用，为我们的前台页面提供强劲稳定的功能支持。</p>\n<p>相对于桌面开发而言，JavaWeb开发更多的时候开发出的产品是默默的在后台工作的，需要通过前台html页面或者手机app，亦或是桌面app才能进行间接的交互。比如你打开淘宝，看到的那些页面架构和好看的图片大都是前端和UI的功劳，而你看到的那些文字内容，大都是后端的数据驱动的成果。（当然，现在可能更多的功劳又要归功于基于大数据的推荐系统了）</p>\n<p>但不要因此而觉得Java后端开发很无聊，其实一个网站的后端就像一个程序的大脑，绝大部分的数据逻辑处理是由后端完成的，不仅要负责对数据进行处理，还需要跟数据库，各种消息中间件打交道，利用各种算法来实现特定的功能，比如根据销售数据进行热销推荐，对用户进行信用评级等等</p>\n<p>前端则负责展示处理后的结果，并做出相应的响应，是一个应用的门面。前端侧重展示和交互，后端侧重程序的逻辑，都是为了提供更好的用户体验，只是着力点不一样而已。</p>\n<p>Java这个大工厂能量无穷，想要完全掌控它的妙用需要一段较长的修炼时间，毕竟想要设计一张足够精巧的设计图纸并不是一件简单的事情，所以需要不断的学习。这个过程难免会遇到挫折和困难，其中很多坑对于新手而言是致命的，最简单的比如环境安装，很多人的兴趣就是夭折在环境的折腾上。其实很多坑，早有无数人踩过，也有很多人在网上分享过相关的解决办法，所以当你遇到问题的时候，可以先上百度找找，你要相信一定有人遇到过同样的问题，如果没找到，想想换个姿势搜索。</p>\n<p>当然也许苦苦搜寻之后，还是无法解决你的问题，这时候，来自共同学习的小伙伴的支持就显得弥足珍贵了，为此，博主创建了一个QQ群【529253292】，这里也许可以找到你想要的答案。</p>\n<p>Java的学习深造过程，就像是升级打怪过关卡，每个知识点都有些小boss，把它们打倒后便能获得相应的经验值，可以提升你的等级，但是随着你的等级的提升，这些小怪小boss对你的修炼的帮助已经聊胜于无了，于是你需要进行更艰难的修炼，去挑战更厉害的boss。</p>\n<p>在这个世界里，自由度很大，大到也许会让刚接触的你迷失方向，不知所措。所以本系列文章将会提供给你一条前往JavaWeb开发的修炼道路，虽然并不一定是最优路线，但至少总体方向不会错，如果你刚好想往这个方向发展，那么本系列文章将会给你提供一些帮助。注意，本系列文章主张的是夯实基础，先修炼内功，然后再修炼外功，所以如果你想要的是捷径，想要知道如何在一两个月之内找到工作，那么这个系列文章可能不太适合你。</p>\n<p>当你的经验累积到一定的值时，就能获得相应的头衔，在JavaWeb的发展中主要有两条升级路线，一条是技术路线，一条是管理路线，大致就像这样:</p>\n<img src=\"/programming/java/introduction/java-started/java-started-1.png\" title=\"JavaWeb升级之路\">\n<p>两条路线的升级加点方式不太一样，但是都是当技术积累到一定程度后才能选择不同的升级路线。</p>\n<p>所以，年轻的勇士，不要犹豫了，拿起你的桃木剑，在Java这个世界探索出自己的道路吧！</p>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<blockquote>\n<p>最怕的东西，最应该去突破。</p>\n</blockquote>\n<h2 id=\"初衷\"><a href=\"#初衷\" class=\"headerlink\" title=\"初衷\"></a>初衷</h2><p>之前在<a href=\"http://www.cnblogs.com/mfrank/\" target=\"_blank\" rel=\"noopener\">博客园</a>已经陆续发了几十篇文章，但总体并没有一个很好的串联，在内容编排上也存在较多问题，因此特地将之前的文章做一个整理，一是将原有文章进行润色，让表达更加生动清晰，二是尽可能的将各个知识点连接成线，整理出自己的一套体系，并剔除其中的错误。</p>\n<p>本系列文章不会鼓吹Java怎么怎么好，也不打算尝试怂恿那些在Java边缘徘徊的人来学习Java，只想根据自己的学习经验来给那些想要学习Java却不得其法的人提供一点自己的经验和看法。</p>\n<h2 id=\"编程的世界观\"><a href=\"#编程的世界观\" class=\"headerlink\" title=\"编程的世界观\"></a>编程的世界观</h2><p>编程写代码其实跟玩游戏很像，你不断学习，不断提升，然后写代码来完成各种工作的过程就像打怪升级，赚钱买装备，最终打倒BOSS的过程。</p>\n<p>每一款好的游戏都有一个较为统一完整的世界观，也会有一个统一的背景设定，你需要先接受和理解这个设定的背景，然后慢慢了解这个游戏的完整世界观，这样才能真正融入这个游戏。</p>\n<p>比如说，《剑网3》的世界观设计一直遵循“纯武侠，真江湖”设计，背景设定便是唐宋时期，武林纷争，各大门派先后崛起，而你出身草芥，通过自身努力加入门派，然后通过不断修炼内功和挑战各种任务来提升自我。</p>\n<p>又比如《饥荒》是关于一名科学家被恶魔传送到了异世界荒野的故事，游戏的主题是生存，所以你的目标是尽可能的利用各种资源来存活更长时间，同时要抵御各种外来威胁来保证自己的安全。</p>\n<p>如果把编程开发也比作游戏的话，它更像是《我的世界》这样的自由度很高的沙盒游戏。有的人会将《我的世界》玩成一款生存游戏，享受被僵尸追杀的快感，有人会将它玩成一款建筑游戏，打造属于自己的王国。带着不同的目的人，会有完全不同的游戏体验。</p>\n<p>编程也是如此，在编程的世界里，你拥有的是一个万能工厂，而你是一位工程师，在这里你可以生产出任何产品，汽车、轮船、火箭，如果你足够厉害，甚至可以创造一个新的世界，所有你需要做的，便是给出合格的设计图，接下来的事情，交给这个万能工厂就好了。</p>\n<p>每个人拥有这个万能工厂的人都有着不同的目的，有的人只是为了参观，有的人是为了制作出性能强悍的跑车，有的人是为了制作自己用的小玩具。不同的目的就会有完全不同的体验，有的人会觉得枯燥，有的人会觉得无聊，而有的人会感觉激情四射。如果你能真正体会到其中的乐趣，那么你一定会爱上这个工厂。</p>\n<p>但做出一张好的设计图并不是一件简单的事情，所以你需要不断的学习它的规范，设计出符合规范的设计图，才能被这个万能工厂正确生产出你想要的产品。等到你真正掌握了这个规范，就会发现，只满足于正确性还远远不够，于是渐渐的会开始追求效率和美感。为了提高设计效率，前辈们已经总结出很多种设计模式，适用于不同的设计场景，掌握了它们，在设计产品的时候便能更加随心所欲。</p>\n<p>而关于编程美学，也是一门用经验堆积起来的学问。毕竟，作为工程师的我们，需要与其他工程师不断交流切磋，我们会观摩欣赏别人的设计图，也会把自己的设计图和别人探讨。所以设计图不仅仅是为了给这个万能工厂来运转，也是为了阅读。</p>\n<p>当然，这都是后话了。</p>\n<h2 id=\"Java编程的世界观\"><a href=\"#Java编程的世界观\" class=\"headerlink\" title=\"Java编程的世界观\"></a>Java编程的世界观</h2><p>Java是一门高级编程语言，所谓的高级，是相对于汇编等机器语言而言的，有更高层次的抽象，更加接近自然语言和数学公式，基本脱离了机器的硬件系统。</p>\n<p>前面说到，每种编程语言都是一个万能工厂，Java也有一个万能工厂。不同语言代表的不同工厂都有各自的擅长领域。目前来说，Java的主流应用领域便是Web/APP后端开发、嵌入式设备、大数据、安卓开发，当然，Java也可以开发桌面应用程序，也可以写游戏，但那些并不是Java擅长的领域。就像你可以用菜刀砍树，用斧头切菜一样，可以做，但是会有些别扭，有其他更好用的工具为什么要选择这样蹩脚的方式呢。不要忘了，这些工厂都只是一个工具而已，你的最终目的是实现你的要的功能。</p>\n<p>简单来说，不管黑猫白猫，能抓住耗子的猫就是好猫。</p>\n<p>所以对待各种编程语言，首先要保持理智，他们都只是一个工具，我们的目的是为了解决问题，不要陷入对某种语言的盲目崇拜的陷阱里，脱离场景而进行语言之间的对比是毫无意义的。</p>\n<p>Java有很多开发方向，本系列文章将主要以JavaWeb开发为目标进行探索，利用Java这个大工厂来开发网站后端应用，为我们的前台页面提供强劲稳定的功能支持。</p>\n<p>相对于桌面开发而言，JavaWeb开发更多的时候开发出的产品是默默的在后台工作的，需要通过前台html页面或者手机app，亦或是桌面app才能进行间接的交互。比如你打开淘宝，看到的那些页面架构和好看的图片大都是前端和UI的功劳，而你看到的那些文字内容，大都是后端的数据驱动的成果。（当然，现在可能更多的功劳又要归功于基于大数据的推荐系统了）</p>\n<p>但不要因此而觉得Java后端开发很无聊，其实一个网站的后端就像一个程序的大脑，绝大部分的数据逻辑处理是由后端完成的，不仅要负责对数据进行处理，还需要跟数据库，各种消息中间件打交道，利用各种算法来实现特定的功能，比如根据销售数据进行热销推荐，对用户进行信用评级等等</p>\n<p>前端则负责展示处理后的结果，并做出相应的响应，是一个应用的门面。前端侧重展示和交互，后端侧重程序的逻辑，都是为了提供更好的用户体验，只是着力点不一样而已。</p>\n<p>Java这个大工厂能量无穷，想要完全掌控它的妙用需要一段较长的修炼时间，毕竟想要设计一张足够精巧的设计图纸并不是一件简单的事情，所以需要不断的学习。这个过程难免会遇到挫折和困难，其中很多坑对于新手而言是致命的，最简单的比如环境安装，很多人的兴趣就是夭折在环境的折腾上。其实很多坑，早有无数人踩过，也有很多人在网上分享过相关的解决办法，所以当你遇到问题的时候，可以先上百度找找，你要相信一定有人遇到过同样的问题，如果没找到，想想换个姿势搜索。</p>\n<p>当然也许苦苦搜寻之后，还是无法解决你的问题，这时候，来自共同学习的小伙伴的支持就显得弥足珍贵了，为此，博主创建了一个QQ群【529253292】，这里也许可以找到你想要的答案。</p>\n<p>Java的学习深造过程，就像是升级打怪过关卡，每个知识点都有些小boss，把它们打倒后便能获得相应的经验值，可以提升你的等级，但是随着你的等级的提升，这些小怪小boss对你的修炼的帮助已经聊胜于无了，于是你需要进行更艰难的修炼，去挑战更厉害的boss。</p>\n<p>在这个世界里，自由度很大，大到也许会让刚接触的你迷失方向，不知所措。所以本系列文章将会提供给你一条前往JavaWeb开发的修炼道路，虽然并不一定是最优路线，但至少总体方向不会错，如果你刚好想往这个方向发展，那么本系列文章将会给你提供一些帮助。注意，本系列文章主张的是夯实基础，先修炼内功，然后再修炼外功，所以如果你想要的是捷径，想要知道如何在一两个月之内找到工作，那么这个系列文章可能不太适合你。</p>\n<p>当你的经验累积到一定的值时，就能获得相应的头衔，在JavaWeb的发展中主要有两条升级路线，一条是技术路线，一条是管理路线，大致就像这样:</p>\n<img src=\"/programming/java/introduction/java-started/java-started-1.png\" title=\"JavaWeb升级之路\">\n<p>两条路线的升级加点方式不太一样，但是都是当技术积累到一定程度后才能选择不同的升级路线。</p>\n<p>所以，年轻的勇士，不要犹豫了，拿起你的桃木剑，在Java这个世界探索出自己的道路吧！</p>\n"},{"prev":"./object-self-rescue","next":false,"_content":"\n# 垃圾回收\n\n## 定义\n\n::: tip \nJava中的一个重要特性便是垃圾回收器，Java将程序员从无（dan）尽（teng）的内存管理中解放了出来，使用垃圾回收器自动收集程序中不再使用的对象，并释放其占用的内存空间。\n:::\n\n本篇主要从以下方面对垃圾回收进行介绍 \n\n+ 垃圾收集的意义\n+ 垃圾收集的规则\n\n## 垃圾收集的意义\n\n在C++中，一个对象如果不显式进行释放，那么其占用的内存在程序运行期间将不会被释放；而在Java中，当没有对象引用指向内存中的某个对象时，其内存空间便成为垃圾。JVM的垃圾回收器线程变会自动释放该内存块。\n\n垃圾收集意味着程序员不再需要手动释放内存，不再需要的对象将会变成\"无用对象\"，这些对象将被自动清理和回收。当一个对象不再被引用的时候，将回收它占用的系统资源，如内存，句柄等等，以便这些资源继续分配给后来的新建的对象。\n\n事实上，除了释放没用的对象，垃圾收集也可以清理内存碎片。由于不断的创建对象，垃圾收集器不断进行内存回收和释放，内存会出现碎片。碎片是分配给对象的内存块之间的空闲内存洞。碎片整理将所占用的堆内存移到堆的一端，然后将整理出的内存分配给新的对象。\n\n垃圾收集能自动释放内存空间，减轻编程的负担。这使Java 虚拟机具有一些优点。首先，它能使编程效率提高。在没有垃圾收集机制的时候，可能要花许多时间来解决一个难懂的存储器问题。在用Java语言编程的时候，靠垃圾收集机制可大大缩短时间。其次是它保护程序的完整性， 垃圾收集是Java语言安全性策略的一个重要部份。\n\n垃圾收集的一个潜在的缺点是它的开销影响程序性能。Java虚拟机必须追踪运行程序中有用的对象，而且最终释放没用的对象。这一个过程需要花费处理器的时间。其次垃圾收集算法的不完备性，早先采用的某些垃圾收集算法就不能保证100%收集到所有的废弃内存。当然随着垃圾收集算法的不断改进以及软硬件运行效率的不断提升，这些问题都可以迎刃而解。\n\n## 垃圾收集规则\n\n虽然大部分JVM实现中都会有垃圾回收器，但事实上，JVM规范中并没有规定必须要有一个垃圾回收器。JVM规范在内存管理上给了虚拟机设计者很大设计自由度，甚至可以完全不使用垃圾回收器。\n\n当然，即使实现了垃圾回收器，你也总有办法把内存耗尽。<img src=\"../reference/0190.png\" width=\"40\"/>\n\n虚拟机规范中并没有描述需要给JVM留多大的内存空间，只规定了当JVM内存不足时，应该抛出一个OutOfMemoryError。\n\n此外，虚拟机规范中也并没有规定垃圾回收必须使用哪种算法，所以设计者们可以自由实现合适的垃圾回收算法。这也是众多JVM厂商竞争的领域。因为这对于程序而言十分重要。\n\n\n\n\n\n\n\n\n\n","source":"_posts/java/jvm/garbage-collection.md","raw":"---\nprev: ./object-self-rescue\nnext: false\n---\n\n# 垃圾回收\n\n## 定义\n\n::: tip \nJava中的一个重要特性便是垃圾回收器，Java将程序员从无（dan）尽（teng）的内存管理中解放了出来，使用垃圾回收器自动收集程序中不再使用的对象，并释放其占用的内存空间。\n:::\n\n本篇主要从以下方面对垃圾回收进行介绍 \n\n+ 垃圾收集的意义\n+ 垃圾收集的规则\n\n## 垃圾收集的意义\n\n在C++中，一个对象如果不显式进行释放，那么其占用的内存在程序运行期间将不会被释放；而在Java中，当没有对象引用指向内存中的某个对象时，其内存空间便成为垃圾。JVM的垃圾回收器线程变会自动释放该内存块。\n\n垃圾收集意味着程序员不再需要手动释放内存，不再需要的对象将会变成\"无用对象\"，这些对象将被自动清理和回收。当一个对象不再被引用的时候，将回收它占用的系统资源，如内存，句柄等等，以便这些资源继续分配给后来的新建的对象。\n\n事实上，除了释放没用的对象，垃圾收集也可以清理内存碎片。由于不断的创建对象，垃圾收集器不断进行内存回收和释放，内存会出现碎片。碎片是分配给对象的内存块之间的空闲内存洞。碎片整理将所占用的堆内存移到堆的一端，然后将整理出的内存分配给新的对象。\n\n垃圾收集能自动释放内存空间，减轻编程的负担。这使Java 虚拟机具有一些优点。首先，它能使编程效率提高。在没有垃圾收集机制的时候，可能要花许多时间来解决一个难懂的存储器问题。在用Java语言编程的时候，靠垃圾收集机制可大大缩短时间。其次是它保护程序的完整性， 垃圾收集是Java语言安全性策略的一个重要部份。\n\n垃圾收集的一个潜在的缺点是它的开销影响程序性能。Java虚拟机必须追踪运行程序中有用的对象，而且最终释放没用的对象。这一个过程需要花费处理器的时间。其次垃圾收集算法的不完备性，早先采用的某些垃圾收集算法就不能保证100%收集到所有的废弃内存。当然随着垃圾收集算法的不断改进以及软硬件运行效率的不断提升，这些问题都可以迎刃而解。\n\n## 垃圾收集规则\n\n虽然大部分JVM实现中都会有垃圾回收器，但事实上，JVM规范中并没有规定必须要有一个垃圾回收器。JVM规范在内存管理上给了虚拟机设计者很大设计自由度，甚至可以完全不使用垃圾回收器。\n\n当然，即使实现了垃圾回收器，你也总有办法把内存耗尽。<img src=\"../reference/0190.png\" width=\"40\"/>\n\n虚拟机规范中并没有描述需要给JVM留多大的内存空间，只规定了当JVM内存不足时，应该抛出一个OutOfMemoryError。\n\n此外，虚拟机规范中也并没有规定垃圾回收必须使用哪种算法，所以设计者们可以自由实现合适的垃圾回收算法。这也是众多JVM厂商竞争的领域。因为这对于程序而言十分重要。\n\n\n\n\n\n\n\n\n\n","slug":"java/jvm/garbage-collection","published":1,"date":"2018-12-27T08:03:14.533Z","updated":"2018-12-27T08:03:14.534Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5r00021wu9ke0vbs3ft","content":"<h1 id=\"垃圾回收\"><a href=\"#垃圾回收\" class=\"headerlink\" title=\"垃圾回收\"></a>垃圾回收</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>::: tip<br>Java中的一个重要特性便是垃圾回收器，Java将程序员从无（dan）尽（teng）的内存管理中解放了出来，使用垃圾回收器自动收集程序中不再使用的对象，并释放其占用的内存空间。<br>:::</p>\n<p>本篇主要从以下方面对垃圾回收进行介绍 </p>\n<ul>\n<li>垃圾收集的意义</li>\n<li>垃圾收集的规则</li>\n</ul>\n<h2 id=\"垃圾收集的意义\"><a href=\"#垃圾收集的意义\" class=\"headerlink\" title=\"垃圾收集的意义\"></a>垃圾收集的意义</h2><p>在C++中，一个对象如果不显式进行释放，那么其占用的内存在程序运行期间将不会被释放；而在Java中，当没有对象引用指向内存中的某个对象时，其内存空间便成为垃圾。JVM的垃圾回收器线程变会自动释放该内存块。</p>\n<p>垃圾收集意味着程序员不再需要手动释放内存，不再需要的对象将会变成”无用对象”，这些对象将被自动清理和回收。当一个对象不再被引用的时候，将回收它占用的系统资源，如内存，句柄等等，以便这些资源继续分配给后来的新建的对象。</p>\n<p>事实上，除了释放没用的对象，垃圾收集也可以清理内存碎片。由于不断的创建对象，垃圾收集器不断进行内存回收和释放，内存会出现碎片。碎片是分配给对象的内存块之间的空闲内存洞。碎片整理将所占用的堆内存移到堆的一端，然后将整理出的内存分配给新的对象。</p>\n<p>垃圾收集能自动释放内存空间，减轻编程的负担。这使Java 虚拟机具有一些优点。首先，它能使编程效率提高。在没有垃圾收集机制的时候，可能要花许多时间来解决一个难懂的存储器问题。在用Java语言编程的时候，靠垃圾收集机制可大大缩短时间。其次是它保护程序的完整性， 垃圾收集是Java语言安全性策略的一个重要部份。</p>\n<p>垃圾收集的一个潜在的缺点是它的开销影响程序性能。Java虚拟机必须追踪运行程序中有用的对象，而且最终释放没用的对象。这一个过程需要花费处理器的时间。其次垃圾收集算法的不完备性，早先采用的某些垃圾收集算法就不能保证100%收集到所有的废弃内存。当然随着垃圾收集算法的不断改进以及软硬件运行效率的不断提升，这些问题都可以迎刃而解。</p>\n<h2 id=\"垃圾收集规则\"><a href=\"#垃圾收集规则\" class=\"headerlink\" title=\"垃圾收集规则\"></a>垃圾收集规则</h2><p>虽然大部分JVM实现中都会有垃圾回收器，但事实上，JVM规范中并没有规定必须要有一个垃圾回收器。JVM规范在内存管理上给了虚拟机设计者很大设计自由度，甚至可以完全不使用垃圾回收器。</p>\n<p>当然，即使实现了垃圾回收器，你也总有办法把内存耗尽。<img src=\"../reference/0190.png\" width=\"40\"></p>\n<p>虚拟机规范中并没有描述需要给JVM留多大的内存空间，只规定了当JVM内存不足时，应该抛出一个OutOfMemoryError。</p>\n<p>此外，虚拟机规范中也并没有规定垃圾回收必须使用哪种算法，所以设计者们可以自由实现合适的垃圾回收算法。这也是众多JVM厂商竞争的领域。因为这对于程序而言十分重要。</p>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"垃圾回收\"><a href=\"#垃圾回收\" class=\"headerlink\" title=\"垃圾回收\"></a>垃圾回收</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>::: tip<br>Java中的一个重要特性便是垃圾回收器，Java将程序员从无（dan）尽（teng）的内存管理中解放了出来，使用垃圾回收器自动收集程序中不再使用的对象，并释放其占用的内存空间。<br>:::</p>\n<p>本篇主要从以下方面对垃圾回收进行介绍 </p>\n<ul>\n<li>垃圾收集的意义</li>\n<li>垃圾收集的规则</li>\n</ul>\n<h2 id=\"垃圾收集的意义\"><a href=\"#垃圾收集的意义\" class=\"headerlink\" title=\"垃圾收集的意义\"></a>垃圾收集的意义</h2><p>在C++中，一个对象如果不显式进行释放，那么其占用的内存在程序运行期间将不会被释放；而在Java中，当没有对象引用指向内存中的某个对象时，其内存空间便成为垃圾。JVM的垃圾回收器线程变会自动释放该内存块。</p>\n<p>垃圾收集意味着程序员不再需要手动释放内存，不再需要的对象将会变成”无用对象”，这些对象将被自动清理和回收。当一个对象不再被引用的时候，将回收它占用的系统资源，如内存，句柄等等，以便这些资源继续分配给后来的新建的对象。</p>\n<p>事实上，除了释放没用的对象，垃圾收集也可以清理内存碎片。由于不断的创建对象，垃圾收集器不断进行内存回收和释放，内存会出现碎片。碎片是分配给对象的内存块之间的空闲内存洞。碎片整理将所占用的堆内存移到堆的一端，然后将整理出的内存分配给新的对象。</p>\n<p>垃圾收集能自动释放内存空间，减轻编程的负担。这使Java 虚拟机具有一些优点。首先，它能使编程效率提高。在没有垃圾收集机制的时候，可能要花许多时间来解决一个难懂的存储器问题。在用Java语言编程的时候，靠垃圾收集机制可大大缩短时间。其次是它保护程序的完整性， 垃圾收集是Java语言安全性策略的一个重要部份。</p>\n<p>垃圾收集的一个潜在的缺点是它的开销影响程序性能。Java虚拟机必须追踪运行程序中有用的对象，而且最终释放没用的对象。这一个过程需要花费处理器的时间。其次垃圾收集算法的不完备性，早先采用的某些垃圾收集算法就不能保证100%收集到所有的废弃内存。当然随着垃圾收集算法的不断改进以及软硬件运行效率的不断提升，这些问题都可以迎刃而解。</p>\n<h2 id=\"垃圾收集规则\"><a href=\"#垃圾收集规则\" class=\"headerlink\" title=\"垃圾收集规则\"></a>垃圾收集规则</h2><p>虽然大部分JVM实现中都会有垃圾回收器，但事实上，JVM规范中并没有规定必须要有一个垃圾回收器。JVM规范在内存管理上给了虚拟机设计者很大设计自由度，甚至可以完全不使用垃圾回收器。</p>\n<p>当然，即使实现了垃圾回收器，你也总有办法把内存耗尽。<img src=\"../reference/0190.png\" width=\"40\"></p>\n<p>虚拟机规范中并没有描述需要给JVM留多大的内存空间，只规定了当JVM内存不足时，应该抛出一个OutOfMemoryError。</p>\n<p>此外，虚拟机规范中也并没有规定垃圾回收必须使用哪种算法，所以设计者们可以自由实现合适的垃圾回收算法。这也是众多JVM厂商竞争的领域。因为这对于程序而言十分重要。</p>\n"},{"prev":false,"next":"./reachable","_content":"\n# 内存泄漏\n\n## 定义\n\n::: tip \n内存泄漏是指无用对象（不再使用的对象）持续占有内存或无用对象的内存得不到及时释放，从而造成内存空间的浪费。\n:::\n\n## 说明\n\n长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄漏，尽管短生命周期对象已经不再需要，但是因为长生命周期持有它的引用而导致不能被回收，这就是Java中内存泄漏的发生场景。 \n\n一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，会导致占用的内存空间不断增加，最终发生OOM。\n\n是指你向系统申请分配内存进行使用(new)，可是使用完了以后却不归还(delete)，结果你申请到的那块内存你自己也不能再访问（也许你把它的地址给弄丢了），而系统也不能再次将它分配给需要的程序。一个盘子用尽各种方法只能装4个果子，你装了5个，结果掉倒地上不能吃了。这就是溢出！比方说栈，栈满时再做进栈必定产生空间溢出，叫上溢，栈空时再做退栈也产生空间溢出，称为下溢。就是分配的内存不足以放下数据项序列,称为内存溢出. \n\n## 造成内存泄漏的几种情况\n\n1、静态集合类引起内存泄漏\n\n像HashMap、Vector等的使用最容易出现内存泄露，这些静态变量的生命周期和应用程序一致，他们所引用的所有的对象Object也不能被释放，因为他们也将一直被Vector等引用着。\n\n2、当集合里面的对象属性被修改后，再调用remove()方法时不起作用。\n\n3、监听器\n\n在释放对象的时候却没有去删除这些监听器，增加了内存泄漏的机会。\n\n4、各种连接\n\n比如数据库连接（dataSourse.getConnection()），网络连接(socket)和io连接，除非其显式的调用了其close（）方法将其连接关闭，否则是不会自动被GC 回收的。\n\n5、内部类和外部模块的引用\n\n内部类的引用是比较容易遗忘的一种，而且一旦没释放可能导致一系列的后继类对象没有释放。此外程序员还要小心外部模块不经意的引用，例如程序员A 负责A 模块，调用了B 模块的一个方法如： public void registerMsg(Object b); 这种调用就要非常小心了，传入了一个对象，很可能模块B就保持了对该对象的引用，这时候就需要注意模块B 是否提供相应的操作去除引用。\n\n6、单例模式\n\n不正确使用单例模式是引起内存泄漏的一个常见问题，单例对象在初始化后将在JVM的整个生命周期中存在（以静态变量的方式），如果单例对象持有外部的引用，那么这个对象将不能被JVM正常回收，导致内存泄漏。","source":"_posts/java/jvm/memory-leak.md","raw":"---\nprev: false\nnext: ./reachable\n---\n\n# 内存泄漏\n\n## 定义\n\n::: tip \n内存泄漏是指无用对象（不再使用的对象）持续占有内存或无用对象的内存得不到及时释放，从而造成内存空间的浪费。\n:::\n\n## 说明\n\n长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄漏，尽管短生命周期对象已经不再需要，但是因为长生命周期持有它的引用而导致不能被回收，这就是Java中内存泄漏的发生场景。 \n\n一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，会导致占用的内存空间不断增加，最终发生OOM。\n\n是指你向系统申请分配内存进行使用(new)，可是使用完了以后却不归还(delete)，结果你申请到的那块内存你自己也不能再访问（也许你把它的地址给弄丢了），而系统也不能再次将它分配给需要的程序。一个盘子用尽各种方法只能装4个果子，你装了5个，结果掉倒地上不能吃了。这就是溢出！比方说栈，栈满时再做进栈必定产生空间溢出，叫上溢，栈空时再做退栈也产生空间溢出，称为下溢。就是分配的内存不足以放下数据项序列,称为内存溢出. \n\n## 造成内存泄漏的几种情况\n\n1、静态集合类引起内存泄漏\n\n像HashMap、Vector等的使用最容易出现内存泄露，这些静态变量的生命周期和应用程序一致，他们所引用的所有的对象Object也不能被释放，因为他们也将一直被Vector等引用着。\n\n2、当集合里面的对象属性被修改后，再调用remove()方法时不起作用。\n\n3、监听器\n\n在释放对象的时候却没有去删除这些监听器，增加了内存泄漏的机会。\n\n4、各种连接\n\n比如数据库连接（dataSourse.getConnection()），网络连接(socket)和io连接，除非其显式的调用了其close（）方法将其连接关闭，否则是不会自动被GC 回收的。\n\n5、内部类和外部模块的引用\n\n内部类的引用是比较容易遗忘的一种，而且一旦没释放可能导致一系列的后继类对象没有释放。此外程序员还要小心外部模块不经意的引用，例如程序员A 负责A 模块，调用了B 模块的一个方法如： public void registerMsg(Object b); 这种调用就要非常小心了，传入了一个对象，很可能模块B就保持了对该对象的引用，这时候就需要注意模块B 是否提供相应的操作去除引用。\n\n6、单例模式\n\n不正确使用单例模式是引起内存泄漏的一个常见问题，单例对象在初始化后将在JVM的整个生命周期中存在（以静态变量的方式），如果单例对象持有外部的引用，那么这个对象将不能被JVM正常回收，导致内存泄漏。","slug":"java/jvm/memory-leak","published":1,"date":"2018-12-27T08:03:14.547Z","updated":"2018-12-27T08:03:14.547Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5r20025wu9k39jtd7pm","content":"<h1 id=\"内存泄漏\"><a href=\"#内存泄漏\" class=\"headerlink\" title=\"内存泄漏\"></a>内存泄漏</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>::: tip<br>内存泄漏是指无用对象（不再使用的对象）持续占有内存或无用对象的内存得不到及时释放，从而造成内存空间的浪费。<br>:::</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄漏，尽管短生命周期对象已经不再需要，但是因为长生命周期持有它的引用而导致不能被回收，这就是Java中内存泄漏的发生场景。 </p>\n<p>一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，会导致占用的内存空间不断增加，最终发生OOM。</p>\n<p>是指你向系统申请分配内存进行使用(new)，可是使用完了以后却不归还(delete)，结果你申请到的那块内存你自己也不能再访问（也许你把它的地址给弄丢了），而系统也不能再次将它分配给需要的程序。一个盘子用尽各种方法只能装4个果子，你装了5个，结果掉倒地上不能吃了。这就是溢出！比方说栈，栈满时再做进栈必定产生空间溢出，叫上溢，栈空时再做退栈也产生空间溢出，称为下溢。就是分配的内存不足以放下数据项序列,称为内存溢出. </p>\n<h2 id=\"造成内存泄漏的几种情况\"><a href=\"#造成内存泄漏的几种情况\" class=\"headerlink\" title=\"造成内存泄漏的几种情况\"></a>造成内存泄漏的几种情况</h2><p>1、静态集合类引起内存泄漏</p>\n<p>像HashMap、Vector等的使用最容易出现内存泄露，这些静态变量的生命周期和应用程序一致，他们所引用的所有的对象Object也不能被释放，因为他们也将一直被Vector等引用着。</p>\n<p>2、当集合里面的对象属性被修改后，再调用remove()方法时不起作用。</p>\n<p>3、监听器</p>\n<p>在释放对象的时候却没有去删除这些监听器，增加了内存泄漏的机会。</p>\n<p>4、各种连接</p>\n<p>比如数据库连接（dataSourse.getConnection()），网络连接(socket)和io连接，除非其显式的调用了其close（）方法将其连接关闭，否则是不会自动被GC 回收的。</p>\n<p>5、内部类和外部模块的引用</p>\n<p>内部类的引用是比较容易遗忘的一种，而且一旦没释放可能导致一系列的后继类对象没有释放。此外程序员还要小心外部模块不经意的引用，例如程序员A 负责A 模块，调用了B 模块的一个方法如： public void registerMsg(Object b); 这种调用就要非常小心了，传入了一个对象，很可能模块B就保持了对该对象的引用，这时候就需要注意模块B 是否提供相应的操作去除引用。</p>\n<p>6、单例模式</p>\n<p>不正确使用单例模式是引起内存泄漏的一个常见问题，单例对象在初始化后将在JVM的整个生命周期中存在（以静态变量的方式），如果单例对象持有外部的引用，那么这个对象将不能被JVM正常回收，导致内存泄漏。</p>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"内存泄漏\"><a href=\"#内存泄漏\" class=\"headerlink\" title=\"内存泄漏\"></a>内存泄漏</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>::: tip<br>内存泄漏是指无用对象（不再使用的对象）持续占有内存或无用对象的内存得不到及时释放，从而造成内存空间的浪费。<br>:::</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄漏，尽管短生命周期对象已经不再需要，但是因为长生命周期持有它的引用而导致不能被回收，这就是Java中内存泄漏的发生场景。 </p>\n<p>一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，会导致占用的内存空间不断增加，最终发生OOM。</p>\n<p>是指你向系统申请分配内存进行使用(new)，可是使用完了以后却不归还(delete)，结果你申请到的那块内存你自己也不能再访问（也许你把它的地址给弄丢了），而系统也不能再次将它分配给需要的程序。一个盘子用尽各种方法只能装4个果子，你装了5个，结果掉倒地上不能吃了。这就是溢出！比方说栈，栈满时再做进栈必定产生空间溢出，叫上溢，栈空时再做退栈也产生空间溢出，称为下溢。就是分配的内存不足以放下数据项序列,称为内存溢出. </p>\n<h2 id=\"造成内存泄漏的几种情况\"><a href=\"#造成内存泄漏的几种情况\" class=\"headerlink\" title=\"造成内存泄漏的几种情况\"></a>造成内存泄漏的几种情况</h2><p>1、静态集合类引起内存泄漏</p>\n<p>像HashMap、Vector等的使用最容易出现内存泄露，这些静态变量的生命周期和应用程序一致，他们所引用的所有的对象Object也不能被释放，因为他们也将一直被Vector等引用着。</p>\n<p>2、当集合里面的对象属性被修改后，再调用remove()方法时不起作用。</p>\n<p>3、监听器</p>\n<p>在释放对象的时候却没有去删除这些监听器，增加了内存泄漏的机会。</p>\n<p>4、各种连接</p>\n<p>比如数据库连接（dataSourse.getConnection()），网络连接(socket)和io连接，除非其显式的调用了其close（）方法将其连接关闭，否则是不会自动被GC 回收的。</p>\n<p>5、内部类和外部模块的引用</p>\n<p>内部类的引用是比较容易遗忘的一种，而且一旦没释放可能导致一系列的后继类对象没有释放。此外程序员还要小心外部模块不经意的引用，例如程序员A 负责A 模块，调用了B 模块的一个方法如： public void registerMsg(Object b); 这种调用就要非常小心了，传入了一个对象，很可能模块B就保持了对该对象的引用，这时候就需要注意模块B 是否提供相应的操作去除引用。</p>\n<p>6、单例模式</p>\n<p>不正确使用单例模式是引起内存泄漏的一个常见问题，单例对象在初始化后将在JVM的整个生命周期中存在（以静态变量的方式），如果单例对象持有外部的引用，那么这个对象将不能被JVM正常回收，导致内存泄漏。</p>\n"},{"prev":"./memory-leak","next":"./reachable-in-hotspot","_content":"\n# 可达性\n\n## 定义\n\n::: tip \nJava中，一个对象的可达性（Reachable）是指从一系列GC Roots的对象出发，从这些节点往下搜索，搜索时走过的路径称为引用链（Reference Chain），当一个对象不在任何GC Roots的引用链中时，则表示此对象是不可到达的，将会被判定为可回收对象。\n:::\n\n## 说明\n\n可达性，主要是用来作为垃圾回收器回收的标准，表示一个对象可被访问的难易程度。\n\n可达性按强弱程度依次为强可达（strongly reachable）、软可达（softly reachable）、弱可达（weakly reachable）、虚可达（phantom reachable）和不可达（unreachable）。\n\n``` bash\n当一个对象有其它对象或变量持有其强引用时，该对象就处于强可达状态。\n当一个对象没有任何对象或变量持有其强引用，但有对象或变量持有其软引用，则该变量处于软可达状态。\n当一个对象既没有强引用，也没有软引用指向它，但有弱引用与其关联，则该变量处于弱可达状态。\n当一个对象仅存在虚引用与其关联时，该变量处于虚可达状态。\n当一个对象不存在任何引用与其关联时，该变量处于不可达状态。\n```\n\n垃圾回收，回收的自然是“垃圾”，那么“垃圾”的判断标准是什么？在Java中，使用的是可达性分析算法，也就是根据对象的可达性来判断它是否该被回收。当内存足够时，如果一个对象是弱可达、虚可达或者不可达的，那么它就会判定为可回收对象。如果内存不足时，那么软可达对象也会纳入回收范围之内。\n\n![accessibility1](./accessibility1.jpg)\n\n## GC Roots\n\n那么什么样的对象可以作为GC Roots呢？一般来说，如下情况的对象可以作为GC Roots：\n\n```bash\n1. 虚拟机栈(栈桢中的本地变量表)中引用的对象\n2. 方法区中的类静态属性引用的对象\n3. 方法区中的常量引用的对象\n4. 本地方法栈中JNI（Native方法）引用的对象\n```\n\n## 可达性判断\n\n​\tJVM在进行GC时，判断一个对象是否存在引用，是从根引用GC Roots开始去标识，到达同一个对象的路径有时可能会有多条，如下图所示： \n\n![accessibility1](./accessibility2.png)\n\n此时，JVM判断的标准是：\n\n1. 如果只存在一条路径，则以该路径上最弱的引用为准。\n2. 如果存在不同路径，则以最强的路径引用为准。\n\n例如Obj4的引用，存在3个路径:1->6、2->5、3->4, 那么从根对象到Obj4最强的引用是2->5，因为它们都是强引用，此时Obj4为强可达（strong reachable）对象。\n\n如果仅仅存在一个路径对Obj4有引用时，比如现在只剩1->6,那么根对象到Obj4的引用就是以最弱的为准，就是SoftReference引用,Obj4就是软可达（softly-reachable）对象。\n\n如果还想了解在HotSpot虚拟机中是如何实现可达性分析算法的话，可以点[这里](./reachable-in-hotspot.md)。\n\n","source":"_posts/java/jvm/reachable.md","raw":"---\nprev: ./memory-leak\nnext: ./reachable-in-hotspot\n---\n\n# 可达性\n\n## 定义\n\n::: tip \nJava中，一个对象的可达性（Reachable）是指从一系列GC Roots的对象出发，从这些节点往下搜索，搜索时走过的路径称为引用链（Reference Chain），当一个对象不在任何GC Roots的引用链中时，则表示此对象是不可到达的，将会被判定为可回收对象。\n:::\n\n## 说明\n\n可达性，主要是用来作为垃圾回收器回收的标准，表示一个对象可被访问的难易程度。\n\n可达性按强弱程度依次为强可达（strongly reachable）、软可达（softly reachable）、弱可达（weakly reachable）、虚可达（phantom reachable）和不可达（unreachable）。\n\n``` bash\n当一个对象有其它对象或变量持有其强引用时，该对象就处于强可达状态。\n当一个对象没有任何对象或变量持有其强引用，但有对象或变量持有其软引用，则该变量处于软可达状态。\n当一个对象既没有强引用，也没有软引用指向它，但有弱引用与其关联，则该变量处于弱可达状态。\n当一个对象仅存在虚引用与其关联时，该变量处于虚可达状态。\n当一个对象不存在任何引用与其关联时，该变量处于不可达状态。\n```\n\n垃圾回收，回收的自然是“垃圾”，那么“垃圾”的判断标准是什么？在Java中，使用的是可达性分析算法，也就是根据对象的可达性来判断它是否该被回收。当内存足够时，如果一个对象是弱可达、虚可达或者不可达的，那么它就会判定为可回收对象。如果内存不足时，那么软可达对象也会纳入回收范围之内。\n\n![accessibility1](./accessibility1.jpg)\n\n## GC Roots\n\n那么什么样的对象可以作为GC Roots呢？一般来说，如下情况的对象可以作为GC Roots：\n\n```bash\n1. 虚拟机栈(栈桢中的本地变量表)中引用的对象\n2. 方法区中的类静态属性引用的对象\n3. 方法区中的常量引用的对象\n4. 本地方法栈中JNI（Native方法）引用的对象\n```\n\n## 可达性判断\n\n​\tJVM在进行GC时，判断一个对象是否存在引用，是从根引用GC Roots开始去标识，到达同一个对象的路径有时可能会有多条，如下图所示： \n\n![accessibility1](./accessibility2.png)\n\n此时，JVM判断的标准是：\n\n1. 如果只存在一条路径，则以该路径上最弱的引用为准。\n2. 如果存在不同路径，则以最强的路径引用为准。\n\n例如Obj4的引用，存在3个路径:1->6、2->5、3->4, 那么从根对象到Obj4最强的引用是2->5，因为它们都是强引用，此时Obj4为强可达（strong reachable）对象。\n\n如果仅仅存在一个路径对Obj4有引用时，比如现在只剩1->6,那么根对象到Obj4的引用就是以最弱的为准，就是SoftReference引用,Obj4就是软可达（softly-reachable）对象。\n\n如果还想了解在HotSpot虚拟机中是如何实现可达性分析算法的话，可以点[这里](./reachable-in-hotspot.md)。\n\n","slug":"java/jvm/reachable","published":1,"date":"2018-12-27T08:03:14.590Z","updated":"2018-12-27T08:03:14.590Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5r30028wu9kd2vclsbp","content":"<h1 id=\"可达性\"><a href=\"#可达性\" class=\"headerlink\" title=\"可达性\"></a>可达性</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>::: tip<br>Java中，一个对象的可达性（Reachable）是指从一系列GC Roots的对象出发，从这些节点往下搜索，搜索时走过的路径称为引用链（Reference Chain），当一个对象不在任何GC Roots的引用链中时，则表示此对象是不可到达的，将会被判定为可回收对象。<br>:::</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>可达性，主要是用来作为垃圾回收器回收的标准，表示一个对象可被访问的难易程度。</p>\n<p>可达性按强弱程度依次为强可达（strongly reachable）、软可达（softly reachable）、弱可达（weakly reachable）、虚可达（phantom reachable）和不可达（unreachable）。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当一个对象有其它对象或变量持有其强引用时，该对象就处于强可达状态。</span><br><span class=\"line\">当一个对象没有任何对象或变量持有其强引用，但有对象或变量持有其软引用，则该变量处于软可达状态。</span><br><span class=\"line\">当一个对象既没有强引用，也没有软引用指向它，但有弱引用与其关联，则该变量处于弱可达状态。</span><br><span class=\"line\">当一个对象仅存在虚引用与其关联时，该变量处于虚可达状态。</span><br><span class=\"line\">当一个对象不存在任何引用与其关联时，该变量处于不可达状态。</span><br></pre></td></tr></table></figure>\n<p>垃圾回收，回收的自然是“垃圾”，那么“垃圾”的判断标准是什么？在Java中，使用的是可达性分析算法，也就是根据对象的可达性来判断它是否该被回收。当内存足够时，如果一个对象是弱可达、虚可达或者不可达的，那么它就会判定为可回收对象。如果内存不足时，那么软可达对象也会纳入回收范围之内。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"./accessibility1.jpg\" alt=\"accessibility1\" title=\"\">\n                </div>\n                <div class=\"image-caption\">accessibility1</div>\n            </figure>\n<h2 id=\"GC-Roots\"><a href=\"#GC-Roots\" class=\"headerlink\" title=\"GC Roots\"></a>GC Roots</h2><p>那么什么样的对象可以作为GC Roots呢？一般来说，如下情况的对象可以作为GC Roots：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 虚拟机栈(栈桢中的本地变量表)中引用的对象</span><br><span class=\"line\">2. 方法区中的类静态属性引用的对象</span><br><span class=\"line\">3. 方法区中的常量引用的对象</span><br><span class=\"line\">4. 本地方法栈中JNI（Native方法）引用的对象</span><br></pre></td></tr></table></figure>\n<h2 id=\"可达性判断\"><a href=\"#可达性判断\" class=\"headerlink\" title=\"可达性判断\"></a>可达性判断</h2><p>​    JVM在进行GC时，判断一个对象是否存在引用，是从根引用GC Roots开始去标识，到达同一个对象的路径有时可能会有多条，如下图所示： </p>\n<p><img src=\"./accessibility2.png\" alt=\"accessibility1\"></p>\n<p>此时，JVM判断的标准是：</p>\n<ol>\n<li>如果只存在一条路径，则以该路径上最弱的引用为准。</li>\n<li>如果存在不同路径，则以最强的路径引用为准。</li>\n</ol>\n<p>例如Obj4的引用，存在3个路径:1-&gt;6、2-&gt;5、3-&gt;4, 那么从根对象到Obj4最强的引用是2-&gt;5，因为它们都是强引用，此时Obj4为强可达（strong reachable）对象。</p>\n<p>如果仅仅存在一个路径对Obj4有引用时，比如现在只剩1-&gt;6,那么根对象到Obj4的引用就是以最弱的为准，就是SoftReference引用,Obj4就是软可达（softly-reachable）对象。</p>\n<p>如果还想了解在HotSpot虚拟机中是如何实现可达性分析算法的话，可以点<a href=\"./reachable-in-hotspot.md\">这里</a>。</p>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"可达性\"><a href=\"#可达性\" class=\"headerlink\" title=\"可达性\"></a>可达性</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>::: tip<br>Java中，一个对象的可达性（Reachable）是指从一系列GC Roots的对象出发，从这些节点往下搜索，搜索时走过的路径称为引用链（Reference Chain），当一个对象不在任何GC Roots的引用链中时，则表示此对象是不可到达的，将会被判定为可回收对象。<br>:::</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>可达性，主要是用来作为垃圾回收器回收的标准，表示一个对象可被访问的难易程度。</p>\n<p>可达性按强弱程度依次为强可达（strongly reachable）、软可达（softly reachable）、弱可达（weakly reachable）、虚可达（phantom reachable）和不可达（unreachable）。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当一个对象有其它对象或变量持有其强引用时，该对象就处于强可达状态。</span><br><span class=\"line\">当一个对象没有任何对象或变量持有其强引用，但有对象或变量持有其软引用，则该变量处于软可达状态。</span><br><span class=\"line\">当一个对象既没有强引用，也没有软引用指向它，但有弱引用与其关联，则该变量处于弱可达状态。</span><br><span class=\"line\">当一个对象仅存在虚引用与其关联时，该变量处于虚可达状态。</span><br><span class=\"line\">当一个对象不存在任何引用与其关联时，该变量处于不可达状态。</span><br></pre></td></tr></table></figure>\n<p>垃圾回收，回收的自然是“垃圾”，那么“垃圾”的判断标准是什么？在Java中，使用的是可达性分析算法，也就是根据对象的可达性来判断它是否该被回收。当内存足够时，如果一个对象是弱可达、虚可达或者不可达的，那么它就会判定为可回收对象。如果内存不足时，那么软可达对象也会纳入回收范围之内。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"./accessibility1.jpg\" alt=\"accessibility1\" title=\"\">\n                </div>\n                <div class=\"image-caption\">accessibility1</div>\n            </figure>\n<h2 id=\"GC-Roots\"><a href=\"#GC-Roots\" class=\"headerlink\" title=\"GC Roots\"></a>GC Roots</h2><p>那么什么样的对象可以作为GC Roots呢？一般来说，如下情况的对象可以作为GC Roots：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 虚拟机栈(栈桢中的本地变量表)中引用的对象</span><br><span class=\"line\">2. 方法区中的类静态属性引用的对象</span><br><span class=\"line\">3. 方法区中的常量引用的对象</span><br><span class=\"line\">4. 本地方法栈中JNI（Native方法）引用的对象</span><br></pre></td></tr></table></figure>\n<h2 id=\"可达性判断\"><a href=\"#可达性判断\" class=\"headerlink\" title=\"可达性判断\"></a>可达性判断</h2><p>​    JVM在进行GC时，判断一个对象是否存在引用，是从根引用GC Roots开始去标识，到达同一个对象的路径有时可能会有多条，如下图所示： </p>\n<p><img src=\"./accessibility2.png\" alt=\"accessibility1\"></p>\n<p>此时，JVM判断的标准是：</p>\n<ol>\n<li>如果只存在一条路径，则以该路径上最弱的引用为准。</li>\n<li>如果存在不同路径，则以最强的路径引用为准。</li>\n</ol>\n<p>例如Obj4的引用，存在3个路径:1-&gt;6、2-&gt;5、3-&gt;4, 那么从根对象到Obj4最强的引用是2-&gt;5，因为它们都是强引用，此时Obj4为强可达（strong reachable）对象。</p>\n<p>如果仅仅存在一个路径对Obj4有引用时，比如现在只剩1-&gt;6,那么根对象到Obj4的引用就是以最弱的为准，就是SoftReference引用,Obj4就是软可达（softly-reachable）对象。</p>\n<p>如果还想了解在HotSpot虚拟机中是如何实现可达性分析算法的话，可以点<a href=\"./reachable-in-hotspot.md\">这里</a>。</p>\n"},{"prev":"./reachable-in-hotspot","next":"./garbage-collection","_content":"\n# 对象的自我拯救\n\n占个坑。。。。\n\n","source":"_posts/java/jvm/object-self-rescue.md","raw":"---\nprev: ./reachable-in-hotspot\nnext: ./garbage-collection\n---\n\n# 对象的自我拯救\n\n占个坑。。。。\n\n","slug":"java/jvm/object-self-rescue","published":1,"date":"2018-12-27T08:03:14.555Z","updated":"2018-12-27T08:03:14.555Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5r4002bwu9kye4nlqxg","content":"<h1 id=\"对象的自我拯救\"><a href=\"#对象的自我拯救\" class=\"headerlink\" title=\"对象的自我拯救\"></a>对象的自我拯救</h1><p>占个坑。。。。</p>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"对象的自我拯救\"><a href=\"#对象的自我拯救\" class=\"headerlink\" title=\"对象的自我拯救\"></a>对象的自我拯救</h1><p>占个坑。。。。</p>\n"},{"prev":"./reachable","next":"./object-self-rescue","_content":"\n# HotSpot虚拟机如何实现可达性算法\n\nJava中的主流虚拟机HotSpot采用可达性分析算法来确定一个对象的状态，那么HotSpot是如何实现该算法的呢？\n\n## 使用OopMap记录并枚举根节点\n\n在从GC ROOT向下查找引用链时，可作为GC ROOT的节点主要有全局性引用（常量、静态变量）和执行上下文（栈帧中的本地变量表），通常方法区就有好几百兆，遍历一次需要比较长的时间。\n\n另外，在查找引用链过程中，需要保证引用链的一致性，即在分析过程中对象的引用关系不再变化，否则分析准确性则无法得到保证。因此通常GC执行时会stop the world，停止所有执行线程，即使几乎不发生停顿的CMS收集器中，枚举根节点也是需要停顿的。如果这个停顿的时间过长，肯定是难以接受的。\n\n那么HotSpot是如何在最短的时间内进行这个耗时的搜索工作的呢？\n\n答案就在这个神奇的数据结构中——OopMap。\n\n在遍历堆栈时，虚拟机关心的就是“这块数据是不是指针”。为了让JVM能够判断出所有位置上的数据是不是指向GC堆里的引用，包括活动记录（栈+寄存器）里的数据。HotSpot选择从外部记录下类型信息，存成映射表，也就是OopMap。\n\nOopMap在类加载完成时把对象内的偏移量是什么类型计算出，并且存放下在相应的位置，当需要遍历根结点时访问所有OopMap即可。在JIT编译过程中，也会在特定位置记录下栈和寄存器中的那些位置和引用的，这样GC在扫描时就可以直接获得这些信息。 \n\n## 用安全点Safepoint约束根节点\n\n如果将每个符合GC Roots条件的对象都存放进入OopMap中，那么OopMap也会变得很大，而且其中很多对象很可能会发生一些变化，这些变化使得维护这个映射表很困难。\n\n实际上，HotSpot并没有为每一个对象都创建OopMap，只在特定的位置上创建了这些信息，这些位置称为安全点（Safepoints）。\n\n为了保证虚拟机中安全点的个数不算太多也不是太少，主要决定安全点是否被建立的因素是时间。当进行了耗时的操作时，比如方法调用、循环跳转等时会产生安全点。\n\n在GC发生时需要让线程停顿下来，让线程停顿下来的方案有两种，**抢先式中断**和**主动式中断** \n\n- 抢先式中断：在GC发生时先中断所有线程，如果线程不在安全点上，则启动该线程使其执行到安全点后挂起。\n\n- 主动式中断：不需要直接对线程进行操作，在线程执行时主动轮询这个标识，若中断标识为真，在线程自己中断挂起这个标识和安全点是重合的\n\n## 安全区域（safe region）\n\n上面的安全点检查仿佛完全解决了如何进入GC的问题，但只有安全点还是不够的，安全点只解决了那些在运行的程序，保证了他们可以运行到安全点并挂起，但如果有些线程此时并未执行，例如处于sleep或blocked状态的线程，就无法响应JVM的中断请求，这时就需要使用安全区域了。\n\n**安全区域是指在此区域内，对象的引用关系不会发生变化（即不会影响枚举根节点) **\n\n当线程运行到安全区域时会将自己标识，在JVM准备进行GC时将视这些线程为安全的，不影响GC，当线程运行完毕要离开安全区域时，线程会检查JVM是否在枚举根节点，若是，则等待完成后再离开安全区域继续执行。","source":"_posts/java/jvm/reachable-in-hotspot.md","raw":"---\nprev: ./reachable\nnext: ./object-self-rescue\n---\n\n# HotSpot虚拟机如何实现可达性算法\n\nJava中的主流虚拟机HotSpot采用可达性分析算法来确定一个对象的状态，那么HotSpot是如何实现该算法的呢？\n\n## 使用OopMap记录并枚举根节点\n\n在从GC ROOT向下查找引用链时，可作为GC ROOT的节点主要有全局性引用（常量、静态变量）和执行上下文（栈帧中的本地变量表），通常方法区就有好几百兆，遍历一次需要比较长的时间。\n\n另外，在查找引用链过程中，需要保证引用链的一致性，即在分析过程中对象的引用关系不再变化，否则分析准确性则无法得到保证。因此通常GC执行时会stop the world，停止所有执行线程，即使几乎不发生停顿的CMS收集器中，枚举根节点也是需要停顿的。如果这个停顿的时间过长，肯定是难以接受的。\n\n那么HotSpot是如何在最短的时间内进行这个耗时的搜索工作的呢？\n\n答案就在这个神奇的数据结构中——OopMap。\n\n在遍历堆栈时，虚拟机关心的就是“这块数据是不是指针”。为了让JVM能够判断出所有位置上的数据是不是指向GC堆里的引用，包括活动记录（栈+寄存器）里的数据。HotSpot选择从外部记录下类型信息，存成映射表，也就是OopMap。\n\nOopMap在类加载完成时把对象内的偏移量是什么类型计算出，并且存放下在相应的位置，当需要遍历根结点时访问所有OopMap即可。在JIT编译过程中，也会在特定位置记录下栈和寄存器中的那些位置和引用的，这样GC在扫描时就可以直接获得这些信息。 \n\n## 用安全点Safepoint约束根节点\n\n如果将每个符合GC Roots条件的对象都存放进入OopMap中，那么OopMap也会变得很大，而且其中很多对象很可能会发生一些变化，这些变化使得维护这个映射表很困难。\n\n实际上，HotSpot并没有为每一个对象都创建OopMap，只在特定的位置上创建了这些信息，这些位置称为安全点（Safepoints）。\n\n为了保证虚拟机中安全点的个数不算太多也不是太少，主要决定安全点是否被建立的因素是时间。当进行了耗时的操作时，比如方法调用、循环跳转等时会产生安全点。\n\n在GC发生时需要让线程停顿下来，让线程停顿下来的方案有两种，**抢先式中断**和**主动式中断** \n\n- 抢先式中断：在GC发生时先中断所有线程，如果线程不在安全点上，则启动该线程使其执行到安全点后挂起。\n\n- 主动式中断：不需要直接对线程进行操作，在线程执行时主动轮询这个标识，若中断标识为真，在线程自己中断挂起这个标识和安全点是重合的\n\n## 安全区域（safe region）\n\n上面的安全点检查仿佛完全解决了如何进入GC的问题，但只有安全点还是不够的，安全点只解决了那些在运行的程序，保证了他们可以运行到安全点并挂起，但如果有些线程此时并未执行，例如处于sleep或blocked状态的线程，就无法响应JVM的中断请求，这时就需要使用安全区域了。\n\n**安全区域是指在此区域内，对象的引用关系不会发生变化（即不会影响枚举根节点) **\n\n当线程运行到安全区域时会将自己标识，在JVM准备进行GC时将视这些线程为安全的，不影响GC，当线程运行完毕要离开安全区域时，线程会检查JVM是否在枚举根节点，若是，则等待完成后再离开安全区域继续执行。","slug":"java/jvm/reachable-in-hotspot","published":1,"date":"2018-12-27T08:03:14.563Z","updated":"2018-12-27T08:03:14.564Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5r5002dwu9kno8galhv","content":"<h1 id=\"HotSpot虚拟机如何实现可达性算法\"><a href=\"#HotSpot虚拟机如何实现可达性算法\" class=\"headerlink\" title=\"HotSpot虚拟机如何实现可达性算法\"></a>HotSpot虚拟机如何实现可达性算法</h1><p>Java中的主流虚拟机HotSpot采用可达性分析算法来确定一个对象的状态，那么HotSpot是如何实现该算法的呢？</p>\n<h2 id=\"使用OopMap记录并枚举根节点\"><a href=\"#使用OopMap记录并枚举根节点\" class=\"headerlink\" title=\"使用OopMap记录并枚举根节点\"></a>使用OopMap记录并枚举根节点</h2><p>在从GC ROOT向下查找引用链时，可作为GC ROOT的节点主要有全局性引用（常量、静态变量）和执行上下文（栈帧中的本地变量表），通常方法区就有好几百兆，遍历一次需要比较长的时间。</p>\n<p>另外，在查找引用链过程中，需要保证引用链的一致性，即在分析过程中对象的引用关系不再变化，否则分析准确性则无法得到保证。因此通常GC执行时会stop the world，停止所有执行线程，即使几乎不发生停顿的CMS收集器中，枚举根节点也是需要停顿的。如果这个停顿的时间过长，肯定是难以接受的。</p>\n<p>那么HotSpot是如何在最短的时间内进行这个耗时的搜索工作的呢？</p>\n<p>答案就在这个神奇的数据结构中——OopMap。</p>\n<p>在遍历堆栈时，虚拟机关心的就是“这块数据是不是指针”。为了让JVM能够判断出所有位置上的数据是不是指向GC堆里的引用，包括活动记录（栈+寄存器）里的数据。HotSpot选择从外部记录下类型信息，存成映射表，也就是OopMap。</p>\n<p>OopMap在类加载完成时把对象内的偏移量是什么类型计算出，并且存放下在相应的位置，当需要遍历根结点时访问所有OopMap即可。在JIT编译过程中，也会在特定位置记录下栈和寄存器中的那些位置和引用的，这样GC在扫描时就可以直接获得这些信息。 </p>\n<h2 id=\"用安全点Safepoint约束根节点\"><a href=\"#用安全点Safepoint约束根节点\" class=\"headerlink\" title=\"用安全点Safepoint约束根节点\"></a>用安全点Safepoint约束根节点</h2><p>如果将每个符合GC Roots条件的对象都存放进入OopMap中，那么OopMap也会变得很大，而且其中很多对象很可能会发生一些变化，这些变化使得维护这个映射表很困难。</p>\n<p>实际上，HotSpot并没有为每一个对象都创建OopMap，只在特定的位置上创建了这些信息，这些位置称为安全点（Safepoints）。</p>\n<p>为了保证虚拟机中安全点的个数不算太多也不是太少，主要决定安全点是否被建立的因素是时间。当进行了耗时的操作时，比如方法调用、循环跳转等时会产生安全点。</p>\n<p>在GC发生时需要让线程停顿下来，让线程停顿下来的方案有两种，<strong>抢先式中断</strong>和<strong>主动式中断</strong> </p>\n<ul>\n<li><p>抢先式中断：在GC发生时先中断所有线程，如果线程不在安全点上，则启动该线程使其执行到安全点后挂起。</p>\n</li>\n<li><p>主动式中断：不需要直接对线程进行操作，在线程执行时主动轮询这个标识，若中断标识为真，在线程自己中断挂起这个标识和安全点是重合的</p>\n</li>\n</ul>\n<h2 id=\"安全区域（safe-region）\"><a href=\"#安全区域（safe-region）\" class=\"headerlink\" title=\"安全区域（safe region）\"></a>安全区域（safe region）</h2><p>上面的安全点检查仿佛完全解决了如何进入GC的问题，但只有安全点还是不够的，安全点只解决了那些在运行的程序，保证了他们可以运行到安全点并挂起，但如果有些线程此时并未执行，例如处于sleep或blocked状态的线程，就无法响应JVM的中断请求，这时就需要使用安全区域了。</p>\n<p><strong>安全区域是指在此区域内，对象的引用关系不会发生变化（即不会影响枚举根节点) </strong></p>\n<p>当线程运行到安全区域时会将自己标识，在JVM准备进行GC时将视这些线程为安全的，不影响GC，当线程运行完毕要离开安全区域时，线程会检查JVM是否在枚举根节点，若是，则等待完成后再离开安全区域继续执行。</p>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"HotSpot虚拟机如何实现可达性算法\"><a href=\"#HotSpot虚拟机如何实现可达性算法\" class=\"headerlink\" title=\"HotSpot虚拟机如何实现可达性算法\"></a>HotSpot虚拟机如何实现可达性算法</h1><p>Java中的主流虚拟机HotSpot采用可达性分析算法来确定一个对象的状态，那么HotSpot是如何实现该算法的呢？</p>\n<h2 id=\"使用OopMap记录并枚举根节点\"><a href=\"#使用OopMap记录并枚举根节点\" class=\"headerlink\" title=\"使用OopMap记录并枚举根节点\"></a>使用OopMap记录并枚举根节点</h2><p>在从GC ROOT向下查找引用链时，可作为GC ROOT的节点主要有全局性引用（常量、静态变量）和执行上下文（栈帧中的本地变量表），通常方法区就有好几百兆，遍历一次需要比较长的时间。</p>\n<p>另外，在查找引用链过程中，需要保证引用链的一致性，即在分析过程中对象的引用关系不再变化，否则分析准确性则无法得到保证。因此通常GC执行时会stop the world，停止所有执行线程，即使几乎不发生停顿的CMS收集器中，枚举根节点也是需要停顿的。如果这个停顿的时间过长，肯定是难以接受的。</p>\n<p>那么HotSpot是如何在最短的时间内进行这个耗时的搜索工作的呢？</p>\n<p>答案就在这个神奇的数据结构中——OopMap。</p>\n<p>在遍历堆栈时，虚拟机关心的就是“这块数据是不是指针”。为了让JVM能够判断出所有位置上的数据是不是指向GC堆里的引用，包括活动记录（栈+寄存器）里的数据。HotSpot选择从外部记录下类型信息，存成映射表，也就是OopMap。</p>\n<p>OopMap在类加载完成时把对象内的偏移量是什么类型计算出，并且存放下在相应的位置，当需要遍历根结点时访问所有OopMap即可。在JIT编译过程中，也会在特定位置记录下栈和寄存器中的那些位置和引用的，这样GC在扫描时就可以直接获得这些信息。 </p>\n<h2 id=\"用安全点Safepoint约束根节点\"><a href=\"#用安全点Safepoint约束根节点\" class=\"headerlink\" title=\"用安全点Safepoint约束根节点\"></a>用安全点Safepoint约束根节点</h2><p>如果将每个符合GC Roots条件的对象都存放进入OopMap中，那么OopMap也会变得很大，而且其中很多对象很可能会发生一些变化，这些变化使得维护这个映射表很困难。</p>\n<p>实际上，HotSpot并没有为每一个对象都创建OopMap，只在特定的位置上创建了这些信息，这些位置称为安全点（Safepoints）。</p>\n<p>为了保证虚拟机中安全点的个数不算太多也不是太少，主要决定安全点是否被建立的因素是时间。当进行了耗时的操作时，比如方法调用、循环跳转等时会产生安全点。</p>\n<p>在GC发生时需要让线程停顿下来，让线程停顿下来的方案有两种，<strong>抢先式中断</strong>和<strong>主动式中断</strong> </p>\n<ul>\n<li><p>抢先式中断：在GC发生时先中断所有线程，如果线程不在安全点上，则启动该线程使其执行到安全点后挂起。</p>\n</li>\n<li><p>主动式中断：不需要直接对线程进行操作，在线程执行时主动轮询这个标识，若中断标识为真，在线程自己中断挂起这个标识和安全点是重合的</p>\n</li>\n</ul>\n<h2 id=\"安全区域（safe-region）\"><a href=\"#安全区域（safe-region）\" class=\"headerlink\" title=\"安全区域（safe region）\"></a>安全区域（safe region）</h2><p>上面的安全点检查仿佛完全解决了如何进入GC的问题，但只有安全点还是不够的，安全点只解决了那些在运行的程序，保证了他们可以运行到安全点并挂起，但如果有些线程此时并未执行，例如处于sleep或blocked状态的线程，就无法响应JVM的中断请求，这时就需要使用安全区域了。</p>\n<p><strong>安全区域是指在此区域内，对象的引用关系不会发生变化（即不会影响枚举根节点) </strong></p>\n<p>当线程运行到安全区域时会将自己标识，在JVM准备进行GC时将视这些线程为安全的，不影响GC，当线程运行完毕要离开安全区域时，线程会检查JVM是否在枚举根节点，若是，则等待完成后再离开安全区域继续执行。</p>\n"},{"prev":false,"next":false,"_content":"\n# Java 多线程篇\n\n\n\n","source":"_posts/java/multithread/multithread-start.md","raw":"---\nprev: false\nnext: false\n\n---\n\n# Java 多线程篇\n\n\n\n","slug":"java/multithread/multithread-start","published":1,"date":"2018-12-27T08:03:39.750Z","updated":"2018-12-27T08:03:39.753Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5r6002fwu9k2rseu2x6","content":"<h1 id=\"Java-多线程篇\"><a href=\"#Java-多线程篇\" class=\"headerlink\" title=\"Java 多线程篇\"></a>Java 多线程篇</h1>","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"Java-多线程篇\"><a href=\"#Java-多线程篇\" class=\"headerlink\" title=\"Java 多线程篇\"></a>Java 多线程篇</h1>"},{"prev":"./phantom-reference-code-detail","next":"./reference-summary","_content":"\n# FinalReference 与 Finalizer 详解\n\n## 说明\n\n？？？说好只有四种引用呢，怎么又跑出来一个FinalReference？还有一个奇奇怪怪的Finalizer？\n\n<img src=\"./0012.png\"/>\n\n别别别，把枪放下，事情不是你想的那样。<img src=\"./0190.png\" width=\"40\"/>\n\nFinalReference虽然也是继承自Reference类，但是并不能直接使用它，因为它是包可见的。\n\n```java\nclass FinalReference<T> extends Reference<T> {\n    public FinalReference(T referent, ReferenceQueue<? super T> q) {\n        super(referent, q);\n    }\n}\n```\n\n也很简单明了，就这一个构造函数。既然是包可见，自然是为了来继承的，不直接提供给外部使用。\n\nFinalReference由JVM来实例化，JVM会对那些实现了Object中finalize()方法的类对象实例化一个对应的FinalReference。 而事实上，JVM实际操作的是其子类——Finalizer，那么Finalizer是如何工作的呢？\n\n## Finalizer标记\n\n类其实除了语法层面的显示标记（如final，abstract，public等等）之外，在JVM中其实还会给类标记其他一些符号，比如finalizer类，如果一个类覆盖了Object类的finalize方法，并且方法体非空，则这个类就是finalizer类，JVM会给它做一个标记，以下简称“f类”，GC在处理这种类的对象的时候会做一些特殊的处理，如在这个对象被回收之前会先调用其finalize方法。\n\n## Finalizer源码解析\n\n在java.lang.ref包下，还有最后一个没有说到类，也就是FinalReference的子类——Finalizer，一听就是个专门给人善后的家伙。来看看它长什么样。<img src=\"./06.png\" width=\"40\"/>\n\n```java\nfinal class Finalizer extends FinalReference<Object> {\n    ...\n}\n```\n\nemm….Finalizer看起来比FinalReference更高冷，不仅仅是包访问权限，而且是final修饰的，表示其不能再被继承。\n\n这个类是专门留给JVM去使用的，所以可以才如此设计，防止被篡改。\n\n当加载一个类时，如果该类覆盖了finalize方法，并且方法体非空，那么这个类就会被JVM做上标记，每次实例化该类对象时，就会为其生成一个Finalizer对象，JVM会调用Finalizer.register()将这个对象注册到Finalizer的内部队列中。\n\n### 成员变量\n\n接下来看看Finalizer的成员变量：\n\n```java\nprivate Finalizer\n        next = null,\n        prev = null;\n```\n\nFinalizer是类似双链表的结构，next指向其后一个节点，prev指向其前一个节点。\n\n```java\nprivate static final Object lock = new Object();\n```\n\n这里也有一个lock对象用来做锁。\n\n```java\nprivate static Finalizer unfinalized = null;\n```\n\nunfinalized用来链接所有f类对象，以下称其为“f类对象链表”。这是一个静态变量，目的是防止f类对象在执行finalize方法之前被GC回收掉。\n\n```java\nprivate static ReferenceQueue<Object> queue = new ReferenceQueue<>();\n```\n\nqueue是静态队列（单链表结构），JVM在回收对象时，如果发现它是F类对象，则将其从f类对象链表中取出，将它放入引用队列queue中，并通知FinalizerThread去消费。也就是说，发生GC时并不会直接回收该对象占用的内存，而是将其移入队列中，等到之后的一次或者几次GC时才真正回收其占用的内存。\n\n### 构造函数\n\n```java\nprivate Finalizer(Object finalizee) {\n    super(finalizee, queue);\n    add();\n}\n```\n\n构造函数也是私有的，意味着无法在该类之外构建这类对象，在构造函数中调用add方法，将当前Finalizer插入到f类对象链表中。\n\n### 内部方法\n\n虽然我们无法创建Finalizer对象，但是在Finalizer中有一个register方法，在里面会创建一个Finalizer对象。\n\n```java\nstatic void register(Object finalizee) {\n    new Finalizer(finalizee);\n}\n```\n\n没错，它也是给JVM调用的，那么问题来了，虚拟机会在什么时候调用这个函数呢？\n\n也许你已经猜到了，在创建对象的时候，JVM会将当前对象传递给Finalizer.register方法，给它创建一个Finalizer并且添加到f类对象链表中。\n\n另外，如果我们是通过clone的方式来复制对象时，如果被复制的对象是一个f类对象，那么在clone完成的时候也会调用Finalizer.register方法进行注册。\n\n```java\nprivate void add() {\n    synchronized (lock) {\n        if (unfinalized != null) {\n            this.next = unfinalized;\n            unfinalized.prev = this;\n        }\n        unfinalized = this;\n    }\n}\n```\n\nadd方法中，使用lock对象锁进行加锁操作，然后将当前对象注册到f类对象链表的头部节点。\n\n```java\nprivate void remove() {\n    synchronized (lock) {\n        if (unfinalized == this) {\n            if (this.next != null) {\n                unfinalized = this.next;\n            } else {\n                unfinalized = this.prev;\n            }\n        }\n        if (this.next != null) {\n            this.next.prev = this.prev;\n        }\n        if (this.prev != null) {\n            this.prev.next = this.next;\n        }\n        this.next = this; \n        this.prev = this;\n    }\n}\n```\n\nremove方法中则同样以lock对象锁进行加锁后，将当前对象从f类对象链表中移除。并将next和prev均指向自身，这也用来判断f类对象是否已经被执行过finalize方法。\n\n```java\nprivate boolean hasBeenFinalized() {\n    return (next == this);\n}\n```\n\nhasBeenFinalized方法，正如其名，便是用来判断一个f类对象是否已经被执行过finalize方法，而判断时使用的条件便是next == this。\n\n### FinalizerThread线程\n\n在Finalizer类的最后，有一段静态代码块，用来初始化FinalizerThread线程。\n\n```java\nstatic {\n    ThreadGroup tg = Thread.currentThread().getThreadGroup();\n    for (ThreadGroup tgn = tg;\n         tgn != null;\n         tg = tgn, tgn = tg.getParent());\n    Thread finalizer = new FinalizerThread(tg);\n    finalizer.setPriority(Thread.MAX_PRIORITY - 2);\n    finalizer.setDaemon(true);\n    finalizer.start();\n}\n```\n\n这跟之前说过的ReferenceHandler线程十分相似，但是很重要的一点区别是，这里设置的线程优先级并不是最高优先级，而是：\n\n```java\nfinalizer.setPriority(Thread.MAX_PRIORITY - 2);\n```\n\n所以，这意味着在CPU比较紧张的情况下，这条线程被调度的优先级可能会受到影响。\n\n```java\nprivate static class FinalizerThread extends Thread {\n    // 用来判断该线程是否已经启动的标志\n    private volatile boolean running;\n    FinalizerThread(ThreadGroup g) {\n        super(g, \"Finalizer\");\n    }\n    public void run() {\n        // 如果发生了递归调用则直接返回\n        if (running)\n            return;\n\n        // Finalizer线程在 System.initializeSystemClass 被调用前启动\n        // 需要等到JVM已经初始化完成才能执行\n        while (!VM.isBooted()) {\n            try {\n                VM.awaitBooted();\n            } catch (InterruptedException x) {\n            }\n        }\n        final JavaLangAccess jla = SharedSecrets.getJavaLangAccess();\n        running = true;\n        for (;;) {\n            try {\n                // 将节点从队列中移除\n                Finalizer f = (Finalizer)queue.remove();\n                // 调用其runFinalizer方法\n                f.runFinalizer(jla);\n            } catch (InterruptedException x) {\n                // 出错直接忽略\n            }\n        }\n    }\n}\n```\n\n这个线程的逻辑并不复杂，等待JVM初始化完成后，便开启死循环模式，从引用队列中阻塞式获取元素，并执行其runFinalizer方法。注意这里的try…catch语句，捕获到异常都是忽略处理，所以**如果在类的finalize方法中如果抛出异常，你是得不到任何错误信息的**。\n\n```java\nprivate void runFinalizer(JavaLangAccess jla) {\n    synchronized (this) {\n        // 先判断其是否已经被执行过finalize方法\n        if (hasBeenFinalized()) return;\n        remove();\n    }\n    try {\n        // 取出其引用的对象\n        Object finalizee = this.get();\n        // 如果不为null且不是Enum对象\n        if (finalizee != null && !(finalizee instanceof java.lang.Enum)) {\n            // 执行其finalize方法\n            jla.invokeFinalize(finalizee);\n\n            // 清空包含该变量的堆栈，以减少被保守型GC保留的可能性\n            finalizee = null;\n        }\n    } catch (Throwable x) { }\n    // 调用Reference的clear方法\n    super.clear();\n}\n```\n\n这里的同步代码块只有最前面的一小段，先判断是否已经执行过finalize方法，如果已经执行过，则直接返回。所以**一个对象finalize方法最多只会被执行一次**。所以如果在f类对象的finalize方法中，重新使用全局变量给它关联一个强引用，使其变成一个强可达对象，当这个对象再次变成不可达的对象的时候，就不会再执行它的finalize方法了。这一点在《深入理解JVM虚拟机》一书中有讲到。\n\n该方法在判断完之后，取出Finalizer的内部引用对象，执行其finalize方法，并将其置为null。\n\n### SecondaryFinalizer线程\n\nemmm….除了上面那条线程之外，还有两条辅助线程，在runFinalization方法和runAllFinalizers方法中调用。前一个方法将依次取出queue中的Finalizer并执行其runFinalizer方法，后一个方法则会依次对f类对象链表中的对象执行runFinalizer方法。\n\n```java\nstatic void runFinalization() {\n    if (!VM.isBooted()) {\n        return;\n    }\n\n    forkSecondaryFinalizer(new Runnable() {\n        private volatile boolean running;\n        public void run() {\n            // 如果是递归调用，则直接返回\n            if (running)\n                return;\n            final JavaLangAccess jla = SharedSecrets.getJavaLangAccess();\n            running = true;\n            for (;;) {\n                Finalizer f = (Finalizer)queue.poll();\n                if (f == null) break;\n                f.runFinalizer(jla);\n            }\n        }\n    });\n}\n```\n\nrunFinalization方法对比一下上面的FinalizerThread的run方法便发现其实几乎一样。这是提供给其他类调用的，但Finalizer是包访问权限，所以其他类（如Runtime、Shutdown）并不是直接调用，而是通过JVM间接调用。\n\n例如，调用System.runFinalization方法时，便会调用Runtime.runFinalization方法，最终通过虚拟机，调用Finalizer.runFinalization方法。\n\n再来看看runAllFinalizers方法。\n\n```java\nstatic void runAllFinalizers() {\n    if (!VM.isBooted()) {\n        return;\n    }\n\n    forkSecondaryFinalizer(new Runnable() {\n        private volatile boolean running;\n        public void run() {\n            // 如果是递归调用，则直接返回\n            if (running)\n                return;\n            final JavaLangAccess jla = SharedSecrets.getJavaLangAccess();\n            running = true;\n            for (;;) {\n                Finalizer f;\n                synchronized (lock) {\n                    f = unfinalized;\n                    if (f == null) break;\n                    unfinalized = f.next;\n                }\n                f.runFinalizer(jla);\n            }}});\n}\n```\n\n这里的处理与上面也很相似，只是将queue换成了unfinalized链表。\n\n在java.lang.ShutDown类中的sequence方法中，会调用runAllFinalizer方法：\n\n```java\nif (rfoe) runAllFinalizers();\n```\n\n而这个方法其实是一个本地方法，由JVM间接调用Finalizer的runAllFinalizer方法。\n\n```java\n/* Wormhole for invoking java.lang.ref.Finalizer.runAllFinalizers */\nprivate static native void runAllFinalizers();\n```\n\n这两个方法中都用到了同一个模板方法——forkSecondaryFinalizer：\n\n```java\nprivate static void forkSecondaryFinalizer(final Runnable proc) {\n    AccessController.doPrivileged(\n        new PrivilegedAction<Void>() {\n            public Void run() {\n                ThreadGroup tg = Thread.currentThread().getThreadGroup();\n                for (ThreadGroup tgn = tg;\n                     tgn != null;\n                     tg = tgn, tgn = tg.getParent());\n                Thread sft = new Thread(tg, proc, \"Secondary finalizer\");\n                sft.start();\n                try {\n                    sft.join();\n                } catch (InterruptedException x) {\n                    Thread.currentThread().interrupt();\n                }\n                return null;\n            }});\n}\n```\n\n这里调用了AccessController.doPrivileged方法，这个方法的作用是使其内部的代码段获得更大的权限，可以在里面访问更多的资源。这个涉及到另一个话题，如果想要了解的话可以参考这篇文章——[Java安全模型](https://www.ibm.com/developerworks/cn/java/j-lo-javasecurity/)。\n\n这里你只需要关注run方法即可，run方法里只是启动一个线程的模板代码。\n\n### Finalizer与内存泄漏\n\n利用finalize来释放资源，听起来好像挺不错的，但是事实上却并没有想象中那么好，很容易会导致内存泄漏。\n\n通常而言，你不会知道垃圾回收器何时进行垃圾回收，也不知道何时回收某个特定的对象。但你可能会关心对象的finalize方法是否被执行。Java规范中对于Finalizer有以下规定;\n\n> 在回收一个有Finalizer关联的对象的内存之前，垃圾回收器会先调用其finalizer中的方法（即执行对象的finalize方法）。\n\n但是由于你并不知道对象何时被垃圾回收器收集，你只知道对象的finalize方法最终会被执行。所以必须清楚的一点是，你不会知道一个对象的finalize方法何时被执行。所以不要设计一个需要依赖程序finalize及时执行的程序。\n\n使用finalize一个经典的用法便是在构造器中打开文件，然后在finalize方法中关闭文件。这个设计看似很整洁完美，实际上隐藏一个隐秘的bug，Java中文件句柄数量是有限的，如果所有的句柄都用完了，那么程序将会无法打开任何文件。\n\n这样使用finalize方法，在某些经常执行finalization以确保有足够多可用句柄的JVM中可能工作良好，但是在另一些JVM中可能无法正常工作，因为那些垃圾回收器并不会经常执行finalization来确保有足够的句柄可用。\n\n此外FinalizeThread线程的优先级并不是最高的，所有当CPU资源紧张时，可能会有相当长一段时间不会执行Finalizer队列中的f对象的finalize方法，从而导致内存泄漏的发生。\n\n对于这些即将被回收掉的f对象，并不会在最近的一次GC中马上被回收释放掉，而是会延迟到下一个或几个GC时才会被真正回收。finalize方法无法在GC过程中执行，第一次GC只会讲其放入队列中去，由FinalizerThread去轮询执行。\n\n所以，不要在运行期间不断创建f对象，否则内存泄漏将常伴你左右。<img src=\"./0190.png\" width=\"40\"/>\n\n而且不同f对象的Finalizer的执行顺序并不是确定的，取决于它们被加入f对象链表的时间，而且从上面的源码分析中应该能知道，unfinalized链表更像是一个栈，不像链表那样先进先出，当既有对象进入，又有对象移出时，你无法知道这些Finalizer对象的具体执行顺序，所以不要设计依赖Finalizer执行顺序的程序。\n\n当然，如果你不得不使用finalize方法，并且需要确保其被执行，可以在代码中显式调用System.runFinalization方法。\n\n### Finalizer 应用场景\n\n好嘛，叽叽歪歪介绍了这么一大堆，结果都在说Finalizer怎么怎么不好，怎么怎么会出错。那要它何用？<img src=\"./0012.png\" width=\"50\"/>\n\n嗯，自有妙用。Finalizer一个比较适合的场景便是释放nativa方法中申请的内存，如果一个对象调用了本地方法，并且申请了内存（例如C中的malloc方法），那么可以在这个对象的finalize方法中调用native方法进行内存释放（如free方法），因为在这种情况下，本地方法申请的内存不会被垃圾回收器自动回收。\n\n另一个更常见的用法是为释放非内存资源（如：文件句柄、sockets）提供一个反馈机制。之前提到，你不应该依赖Finalizer来释放这些有限的资源。你应该提供一个释放这些资源的方法。但是你仍希望有一个Finalizer来检查这些资源是否已经被释放，如果没有则将其释放。相当于做一个防护措施，因为当你的代码被其他程序员调用时，也许他会粗心大意的忘记调用释放资源的方法。\n\n## 小结\n\n终于讲完了，现在来小结一下。\n\n+ FinalReference是为处理对象的finalize方法而设计的\n+ 如果一个类或者其父类覆盖了Object类的finalize方法，那么这个类就叫做f类，会被JVM特殊标记\n+ f类对象在创建时会顺便注册一个与其关联的Finalizer对象\n+ f类对象在其不可达时会在GC中被放入引用队列\n+ f类对象的finalize方法执行时间并不确定，f对象至少要经历两次GC才能被回收，有可能执行finalize期间已经经历了多次GC\n+ Finalizer对象的处理是在GC时进行的，如果没有触发GC就不会触发对Finalizer对象的处理，unfinalized队列中的对象也就不会被放入队列，其finalize方法也不会被执行\n+ 依赖f类对象的finalize执行顺序和执行时间的程序很可能会出现内存泄漏\n+ 因为f对象的finalize方法迟迟没有执行，有可能会导致大部分f对象进入到old分代，此时容易导致老年代的GC，甚至Full GC，会使GC暂停时间明显变长\n\n\n\n\n\n### \n\n\n\n","source":"_posts/java/reference/final-reference-code-detail.md","raw":"---\nprev: ./phantom-reference-code-detail\nnext: ./reference-summary\n---\n\n# FinalReference 与 Finalizer 详解\n\n## 说明\n\n？？？说好只有四种引用呢，怎么又跑出来一个FinalReference？还有一个奇奇怪怪的Finalizer？\n\n<img src=\"./0012.png\"/>\n\n别别别，把枪放下，事情不是你想的那样。<img src=\"./0190.png\" width=\"40\"/>\n\nFinalReference虽然也是继承自Reference类，但是并不能直接使用它，因为它是包可见的。\n\n```java\nclass FinalReference<T> extends Reference<T> {\n    public FinalReference(T referent, ReferenceQueue<? super T> q) {\n        super(referent, q);\n    }\n}\n```\n\n也很简单明了，就这一个构造函数。既然是包可见，自然是为了来继承的，不直接提供给外部使用。\n\nFinalReference由JVM来实例化，JVM会对那些实现了Object中finalize()方法的类对象实例化一个对应的FinalReference。 而事实上，JVM实际操作的是其子类——Finalizer，那么Finalizer是如何工作的呢？\n\n## Finalizer标记\n\n类其实除了语法层面的显示标记（如final，abstract，public等等）之外，在JVM中其实还会给类标记其他一些符号，比如finalizer类，如果一个类覆盖了Object类的finalize方法，并且方法体非空，则这个类就是finalizer类，JVM会给它做一个标记，以下简称“f类”，GC在处理这种类的对象的时候会做一些特殊的处理，如在这个对象被回收之前会先调用其finalize方法。\n\n## Finalizer源码解析\n\n在java.lang.ref包下，还有最后一个没有说到类，也就是FinalReference的子类——Finalizer，一听就是个专门给人善后的家伙。来看看它长什么样。<img src=\"./06.png\" width=\"40\"/>\n\n```java\nfinal class Finalizer extends FinalReference<Object> {\n    ...\n}\n```\n\nemm….Finalizer看起来比FinalReference更高冷，不仅仅是包访问权限，而且是final修饰的，表示其不能再被继承。\n\n这个类是专门留给JVM去使用的，所以可以才如此设计，防止被篡改。\n\n当加载一个类时，如果该类覆盖了finalize方法，并且方法体非空，那么这个类就会被JVM做上标记，每次实例化该类对象时，就会为其生成一个Finalizer对象，JVM会调用Finalizer.register()将这个对象注册到Finalizer的内部队列中。\n\n### 成员变量\n\n接下来看看Finalizer的成员变量：\n\n```java\nprivate Finalizer\n        next = null,\n        prev = null;\n```\n\nFinalizer是类似双链表的结构，next指向其后一个节点，prev指向其前一个节点。\n\n```java\nprivate static final Object lock = new Object();\n```\n\n这里也有一个lock对象用来做锁。\n\n```java\nprivate static Finalizer unfinalized = null;\n```\n\nunfinalized用来链接所有f类对象，以下称其为“f类对象链表”。这是一个静态变量，目的是防止f类对象在执行finalize方法之前被GC回收掉。\n\n```java\nprivate static ReferenceQueue<Object> queue = new ReferenceQueue<>();\n```\n\nqueue是静态队列（单链表结构），JVM在回收对象时，如果发现它是F类对象，则将其从f类对象链表中取出，将它放入引用队列queue中，并通知FinalizerThread去消费。也就是说，发生GC时并不会直接回收该对象占用的内存，而是将其移入队列中，等到之后的一次或者几次GC时才真正回收其占用的内存。\n\n### 构造函数\n\n```java\nprivate Finalizer(Object finalizee) {\n    super(finalizee, queue);\n    add();\n}\n```\n\n构造函数也是私有的，意味着无法在该类之外构建这类对象，在构造函数中调用add方法，将当前Finalizer插入到f类对象链表中。\n\n### 内部方法\n\n虽然我们无法创建Finalizer对象，但是在Finalizer中有一个register方法，在里面会创建一个Finalizer对象。\n\n```java\nstatic void register(Object finalizee) {\n    new Finalizer(finalizee);\n}\n```\n\n没错，它也是给JVM调用的，那么问题来了，虚拟机会在什么时候调用这个函数呢？\n\n也许你已经猜到了，在创建对象的时候，JVM会将当前对象传递给Finalizer.register方法，给它创建一个Finalizer并且添加到f类对象链表中。\n\n另外，如果我们是通过clone的方式来复制对象时，如果被复制的对象是一个f类对象，那么在clone完成的时候也会调用Finalizer.register方法进行注册。\n\n```java\nprivate void add() {\n    synchronized (lock) {\n        if (unfinalized != null) {\n            this.next = unfinalized;\n            unfinalized.prev = this;\n        }\n        unfinalized = this;\n    }\n}\n```\n\nadd方法中，使用lock对象锁进行加锁操作，然后将当前对象注册到f类对象链表的头部节点。\n\n```java\nprivate void remove() {\n    synchronized (lock) {\n        if (unfinalized == this) {\n            if (this.next != null) {\n                unfinalized = this.next;\n            } else {\n                unfinalized = this.prev;\n            }\n        }\n        if (this.next != null) {\n            this.next.prev = this.prev;\n        }\n        if (this.prev != null) {\n            this.prev.next = this.next;\n        }\n        this.next = this; \n        this.prev = this;\n    }\n}\n```\n\nremove方法中则同样以lock对象锁进行加锁后，将当前对象从f类对象链表中移除。并将next和prev均指向自身，这也用来判断f类对象是否已经被执行过finalize方法。\n\n```java\nprivate boolean hasBeenFinalized() {\n    return (next == this);\n}\n```\n\nhasBeenFinalized方法，正如其名，便是用来判断一个f类对象是否已经被执行过finalize方法，而判断时使用的条件便是next == this。\n\n### FinalizerThread线程\n\n在Finalizer类的最后，有一段静态代码块，用来初始化FinalizerThread线程。\n\n```java\nstatic {\n    ThreadGroup tg = Thread.currentThread().getThreadGroup();\n    for (ThreadGroup tgn = tg;\n         tgn != null;\n         tg = tgn, tgn = tg.getParent());\n    Thread finalizer = new FinalizerThread(tg);\n    finalizer.setPriority(Thread.MAX_PRIORITY - 2);\n    finalizer.setDaemon(true);\n    finalizer.start();\n}\n```\n\n这跟之前说过的ReferenceHandler线程十分相似，但是很重要的一点区别是，这里设置的线程优先级并不是最高优先级，而是：\n\n```java\nfinalizer.setPriority(Thread.MAX_PRIORITY - 2);\n```\n\n所以，这意味着在CPU比较紧张的情况下，这条线程被调度的优先级可能会受到影响。\n\n```java\nprivate static class FinalizerThread extends Thread {\n    // 用来判断该线程是否已经启动的标志\n    private volatile boolean running;\n    FinalizerThread(ThreadGroup g) {\n        super(g, \"Finalizer\");\n    }\n    public void run() {\n        // 如果发生了递归调用则直接返回\n        if (running)\n            return;\n\n        // Finalizer线程在 System.initializeSystemClass 被调用前启动\n        // 需要等到JVM已经初始化完成才能执行\n        while (!VM.isBooted()) {\n            try {\n                VM.awaitBooted();\n            } catch (InterruptedException x) {\n            }\n        }\n        final JavaLangAccess jla = SharedSecrets.getJavaLangAccess();\n        running = true;\n        for (;;) {\n            try {\n                // 将节点从队列中移除\n                Finalizer f = (Finalizer)queue.remove();\n                // 调用其runFinalizer方法\n                f.runFinalizer(jla);\n            } catch (InterruptedException x) {\n                // 出错直接忽略\n            }\n        }\n    }\n}\n```\n\n这个线程的逻辑并不复杂，等待JVM初始化完成后，便开启死循环模式，从引用队列中阻塞式获取元素，并执行其runFinalizer方法。注意这里的try…catch语句，捕获到异常都是忽略处理，所以**如果在类的finalize方法中如果抛出异常，你是得不到任何错误信息的**。\n\n```java\nprivate void runFinalizer(JavaLangAccess jla) {\n    synchronized (this) {\n        // 先判断其是否已经被执行过finalize方法\n        if (hasBeenFinalized()) return;\n        remove();\n    }\n    try {\n        // 取出其引用的对象\n        Object finalizee = this.get();\n        // 如果不为null且不是Enum对象\n        if (finalizee != null && !(finalizee instanceof java.lang.Enum)) {\n            // 执行其finalize方法\n            jla.invokeFinalize(finalizee);\n\n            // 清空包含该变量的堆栈，以减少被保守型GC保留的可能性\n            finalizee = null;\n        }\n    } catch (Throwable x) { }\n    // 调用Reference的clear方法\n    super.clear();\n}\n```\n\n这里的同步代码块只有最前面的一小段，先判断是否已经执行过finalize方法，如果已经执行过，则直接返回。所以**一个对象finalize方法最多只会被执行一次**。所以如果在f类对象的finalize方法中，重新使用全局变量给它关联一个强引用，使其变成一个强可达对象，当这个对象再次变成不可达的对象的时候，就不会再执行它的finalize方法了。这一点在《深入理解JVM虚拟机》一书中有讲到。\n\n该方法在判断完之后，取出Finalizer的内部引用对象，执行其finalize方法，并将其置为null。\n\n### SecondaryFinalizer线程\n\nemmm….除了上面那条线程之外，还有两条辅助线程，在runFinalization方法和runAllFinalizers方法中调用。前一个方法将依次取出queue中的Finalizer并执行其runFinalizer方法，后一个方法则会依次对f类对象链表中的对象执行runFinalizer方法。\n\n```java\nstatic void runFinalization() {\n    if (!VM.isBooted()) {\n        return;\n    }\n\n    forkSecondaryFinalizer(new Runnable() {\n        private volatile boolean running;\n        public void run() {\n            // 如果是递归调用，则直接返回\n            if (running)\n                return;\n            final JavaLangAccess jla = SharedSecrets.getJavaLangAccess();\n            running = true;\n            for (;;) {\n                Finalizer f = (Finalizer)queue.poll();\n                if (f == null) break;\n                f.runFinalizer(jla);\n            }\n        }\n    });\n}\n```\n\nrunFinalization方法对比一下上面的FinalizerThread的run方法便发现其实几乎一样。这是提供给其他类调用的，但Finalizer是包访问权限，所以其他类（如Runtime、Shutdown）并不是直接调用，而是通过JVM间接调用。\n\n例如，调用System.runFinalization方法时，便会调用Runtime.runFinalization方法，最终通过虚拟机，调用Finalizer.runFinalization方法。\n\n再来看看runAllFinalizers方法。\n\n```java\nstatic void runAllFinalizers() {\n    if (!VM.isBooted()) {\n        return;\n    }\n\n    forkSecondaryFinalizer(new Runnable() {\n        private volatile boolean running;\n        public void run() {\n            // 如果是递归调用，则直接返回\n            if (running)\n                return;\n            final JavaLangAccess jla = SharedSecrets.getJavaLangAccess();\n            running = true;\n            for (;;) {\n                Finalizer f;\n                synchronized (lock) {\n                    f = unfinalized;\n                    if (f == null) break;\n                    unfinalized = f.next;\n                }\n                f.runFinalizer(jla);\n            }}});\n}\n```\n\n这里的处理与上面也很相似，只是将queue换成了unfinalized链表。\n\n在java.lang.ShutDown类中的sequence方法中，会调用runAllFinalizer方法：\n\n```java\nif (rfoe) runAllFinalizers();\n```\n\n而这个方法其实是一个本地方法，由JVM间接调用Finalizer的runAllFinalizer方法。\n\n```java\n/* Wormhole for invoking java.lang.ref.Finalizer.runAllFinalizers */\nprivate static native void runAllFinalizers();\n```\n\n这两个方法中都用到了同一个模板方法——forkSecondaryFinalizer：\n\n```java\nprivate static void forkSecondaryFinalizer(final Runnable proc) {\n    AccessController.doPrivileged(\n        new PrivilegedAction<Void>() {\n            public Void run() {\n                ThreadGroup tg = Thread.currentThread().getThreadGroup();\n                for (ThreadGroup tgn = tg;\n                     tgn != null;\n                     tg = tgn, tgn = tg.getParent());\n                Thread sft = new Thread(tg, proc, \"Secondary finalizer\");\n                sft.start();\n                try {\n                    sft.join();\n                } catch (InterruptedException x) {\n                    Thread.currentThread().interrupt();\n                }\n                return null;\n            }});\n}\n```\n\n这里调用了AccessController.doPrivileged方法，这个方法的作用是使其内部的代码段获得更大的权限，可以在里面访问更多的资源。这个涉及到另一个话题，如果想要了解的话可以参考这篇文章——[Java安全模型](https://www.ibm.com/developerworks/cn/java/j-lo-javasecurity/)。\n\n这里你只需要关注run方法即可，run方法里只是启动一个线程的模板代码。\n\n### Finalizer与内存泄漏\n\n利用finalize来释放资源，听起来好像挺不错的，但是事实上却并没有想象中那么好，很容易会导致内存泄漏。\n\n通常而言，你不会知道垃圾回收器何时进行垃圾回收，也不知道何时回收某个特定的对象。但你可能会关心对象的finalize方法是否被执行。Java规范中对于Finalizer有以下规定;\n\n> 在回收一个有Finalizer关联的对象的内存之前，垃圾回收器会先调用其finalizer中的方法（即执行对象的finalize方法）。\n\n但是由于你并不知道对象何时被垃圾回收器收集，你只知道对象的finalize方法最终会被执行。所以必须清楚的一点是，你不会知道一个对象的finalize方法何时被执行。所以不要设计一个需要依赖程序finalize及时执行的程序。\n\n使用finalize一个经典的用法便是在构造器中打开文件，然后在finalize方法中关闭文件。这个设计看似很整洁完美，实际上隐藏一个隐秘的bug，Java中文件句柄数量是有限的，如果所有的句柄都用完了，那么程序将会无法打开任何文件。\n\n这样使用finalize方法，在某些经常执行finalization以确保有足够多可用句柄的JVM中可能工作良好，但是在另一些JVM中可能无法正常工作，因为那些垃圾回收器并不会经常执行finalization来确保有足够的句柄可用。\n\n此外FinalizeThread线程的优先级并不是最高的，所有当CPU资源紧张时，可能会有相当长一段时间不会执行Finalizer队列中的f对象的finalize方法，从而导致内存泄漏的发生。\n\n对于这些即将被回收掉的f对象，并不会在最近的一次GC中马上被回收释放掉，而是会延迟到下一个或几个GC时才会被真正回收。finalize方法无法在GC过程中执行，第一次GC只会讲其放入队列中去，由FinalizerThread去轮询执行。\n\n所以，不要在运行期间不断创建f对象，否则内存泄漏将常伴你左右。<img src=\"./0190.png\" width=\"40\"/>\n\n而且不同f对象的Finalizer的执行顺序并不是确定的，取决于它们被加入f对象链表的时间，而且从上面的源码分析中应该能知道，unfinalized链表更像是一个栈，不像链表那样先进先出，当既有对象进入，又有对象移出时，你无法知道这些Finalizer对象的具体执行顺序，所以不要设计依赖Finalizer执行顺序的程序。\n\n当然，如果你不得不使用finalize方法，并且需要确保其被执行，可以在代码中显式调用System.runFinalization方法。\n\n### Finalizer 应用场景\n\n好嘛，叽叽歪歪介绍了这么一大堆，结果都在说Finalizer怎么怎么不好，怎么怎么会出错。那要它何用？<img src=\"./0012.png\" width=\"50\"/>\n\n嗯，自有妙用。Finalizer一个比较适合的场景便是释放nativa方法中申请的内存，如果一个对象调用了本地方法，并且申请了内存（例如C中的malloc方法），那么可以在这个对象的finalize方法中调用native方法进行内存释放（如free方法），因为在这种情况下，本地方法申请的内存不会被垃圾回收器自动回收。\n\n另一个更常见的用法是为释放非内存资源（如：文件句柄、sockets）提供一个反馈机制。之前提到，你不应该依赖Finalizer来释放这些有限的资源。你应该提供一个释放这些资源的方法。但是你仍希望有一个Finalizer来检查这些资源是否已经被释放，如果没有则将其释放。相当于做一个防护措施，因为当你的代码被其他程序员调用时，也许他会粗心大意的忘记调用释放资源的方法。\n\n## 小结\n\n终于讲完了，现在来小结一下。\n\n+ FinalReference是为处理对象的finalize方法而设计的\n+ 如果一个类或者其父类覆盖了Object类的finalize方法，那么这个类就叫做f类，会被JVM特殊标记\n+ f类对象在创建时会顺便注册一个与其关联的Finalizer对象\n+ f类对象在其不可达时会在GC中被放入引用队列\n+ f类对象的finalize方法执行时间并不确定，f对象至少要经历两次GC才能被回收，有可能执行finalize期间已经经历了多次GC\n+ Finalizer对象的处理是在GC时进行的，如果没有触发GC就不会触发对Finalizer对象的处理，unfinalized队列中的对象也就不会被放入队列，其finalize方法也不会被执行\n+ 依赖f类对象的finalize执行顺序和执行时间的程序很可能会出现内存泄漏\n+ 因为f对象的finalize方法迟迟没有执行，有可能会导致大部分f对象进入到old分代，此时容易导致老年代的GC，甚至Full GC，会使GC暂停时间明显变长\n\n\n\n\n\n### \n\n\n\n","slug":"java/reference/final-reference-code-detail","published":1,"date":"2018-12-27T08:04:21.446Z","updated":"2018-12-27T08:04:21.447Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5ra002hwu9k8sq9rdac","content":"<h1 id=\"FinalReference-与-Finalizer-详解\"><a href=\"#FinalReference-与-Finalizer-详解\" class=\"headerlink\" title=\"FinalReference 与 Finalizer 详解\"></a>FinalReference 与 Finalizer 详解</h1><h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>？？？说好只有四种引用呢，怎么又跑出来一个FinalReference？还有一个奇奇怪怪的Finalizer？</p>\n<p><img src=\"./0012.png\"></p>\n<p>别别别，把枪放下，事情不是你想的那样。<img src=\"./0190.png\" width=\"40\"></p>\n<p>FinalReference虽然也是继承自Reference类，但是并不能直接使用它，因为它是包可见的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FinalReference</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Reference</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FinalReference</span><span class=\"params\">(T referent, ReferenceQueue&lt;? <span class=\"keyword\">super</span> T&gt; q)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(referent, q);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也很简单明了，就这一个构造函数。既然是包可见，自然是为了来继承的，不直接提供给外部使用。</p>\n<p>FinalReference由JVM来实例化，JVM会对那些实现了Object中finalize()方法的类对象实例化一个对应的FinalReference。 而事实上，JVM实际操作的是其子类——Finalizer，那么Finalizer是如何工作的呢？</p>\n<h2 id=\"Finalizer标记\"><a href=\"#Finalizer标记\" class=\"headerlink\" title=\"Finalizer标记\"></a>Finalizer标记</h2><p>类其实除了语法层面的显示标记（如final，abstract，public等等）之外，在JVM中其实还会给类标记其他一些符号，比如finalizer类，如果一个类覆盖了Object类的finalize方法，并且方法体非空，则这个类就是finalizer类，JVM会给它做一个标记，以下简称“f类”，GC在处理这种类的对象的时候会做一些特殊的处理，如在这个对象被回收之前会先调用其finalize方法。</p>\n<h2 id=\"Finalizer源码解析\"><a href=\"#Finalizer源码解析\" class=\"headerlink\" title=\"Finalizer源码解析\"></a>Finalizer源码解析</h2><p>在java.lang.ref包下，还有最后一个没有说到类，也就是FinalReference的子类——Finalizer，一听就是个专门给人善后的家伙。来看看它长什么样。<img src=\"./06.png\" width=\"40\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Finalizer</span> <span class=\"keyword\">extends</span> <span class=\"title\">FinalReference</span>&lt;<span class=\"title\">Object</span>&gt; </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>emm….Finalizer看起来比FinalReference更高冷，不仅仅是包访问权限，而且是final修饰的，表示其不能再被继承。</p>\n<p>这个类是专门留给JVM去使用的，所以可以才如此设计，防止被篡改。</p>\n<p>当加载一个类时，如果该类覆盖了finalize方法，并且方法体非空，那么这个类就会被JVM做上标记，每次实例化该类对象时，就会为其生成一个Finalizer对象，JVM会调用Finalizer.register()将这个对象注册到Finalizer的内部队列中。</p>\n<h3 id=\"成员变量\"><a href=\"#成员变量\" class=\"headerlink\" title=\"成员变量\"></a>成员变量</h3><p>接下来看看Finalizer的成员变量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Finalizer</span><br><span class=\"line\">        next = <span class=\"keyword\">null</span>,</span><br><span class=\"line\">        prev = <span class=\"keyword\">null</span>;</span><br></pre></td></tr></table></figure>\n<p>Finalizer是类似双链表的结构，next指向其后一个节点，prev指向其前一个节点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object lock = <span class=\"keyword\">new</span> Object();</span><br></pre></td></tr></table></figure>\n<p>这里也有一个lock对象用来做锁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Finalizer unfinalized = <span class=\"keyword\">null</span>;</span><br></pre></td></tr></table></figure>\n<p>unfinalized用来链接所有f类对象，以下称其为“f类对象链表”。这是一个静态变量，目的是防止f类对象在执行finalize方法之前被GC回收掉。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ReferenceQueue&lt;Object&gt; queue = <span class=\"keyword\">new</span> ReferenceQueue&lt;&gt;();</span><br></pre></td></tr></table></figure>\n<p>queue是静态队列（单链表结构），JVM在回收对象时，如果发现它是F类对象，则将其从f类对象链表中取出，将它放入引用队列queue中，并通知FinalizerThread去消费。也就是说，发生GC时并不会直接回收该对象占用的内存，而是将其移入队列中，等到之后的一次或者几次GC时才真正回收其占用的内存。</p>\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Finalizer</span><span class=\"params\">(Object finalizee)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(finalizee, queue);</span><br><span class=\"line\">    add();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>构造函数也是私有的，意味着无法在该类之外构建这类对象，在构造函数中调用add方法，将当前Finalizer插入到f类对象链表中。</p>\n<h3 id=\"内部方法\"><a href=\"#内部方法\" class=\"headerlink\" title=\"内部方法\"></a>内部方法</h3><p>虽然我们无法创建Finalizer对象，但是在Finalizer中有一个register方法，在里面会创建一个Finalizer对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">register</span><span class=\"params\">(Object finalizee)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Finalizer(finalizee);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>没错，它也是给JVM调用的，那么问题来了，虚拟机会在什么时候调用这个函数呢？</p>\n<p>也许你已经猜到了，在创建对象的时候，JVM会将当前对象传递给Finalizer.register方法，给它创建一个Finalizer并且添加到f类对象链表中。</p>\n<p>另外，如果我们是通过clone的方式来复制对象时，如果被复制的对象是一个f类对象，那么在clone完成的时候也会调用Finalizer.register方法进行注册。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (lock) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (unfinalized != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.next = unfinalized;</span><br><span class=\"line\">            unfinalized.prev = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        unfinalized = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>add方法中，使用lock对象锁进行加锁操作，然后将当前对象注册到f类对象链表的头部节点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (lock) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (unfinalized == <span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                unfinalized = <span class=\"keyword\">this</span>.next;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                unfinalized = <span class=\"keyword\">this</span>.prev;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.next.prev = <span class=\"keyword\">this</span>.prev;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.prev != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.prev.next = <span class=\"keyword\">this</span>.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.next = <span class=\"keyword\">this</span>; </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.prev = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>remove方法中则同样以lock对象锁进行加锁后，将当前对象从f类对象链表中移除。并将next和prev均指向自身，这也用来判断f类对象是否已经被执行过finalize方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasBeenFinalized</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (next == <span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>hasBeenFinalized方法，正如其名，便是用来判断一个f类对象是否已经被执行过finalize方法，而判断时使用的条件便是next == this。</p>\n<h3 id=\"FinalizerThread线程\"><a href=\"#FinalizerThread线程\" class=\"headerlink\" title=\"FinalizerThread线程\"></a>FinalizerThread线程</h3><p>在Finalizer类的最后，有一段静态代码块，用来初始化FinalizerThread线程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    ThreadGroup tg = Thread.currentThread().getThreadGroup();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ThreadGroup tgn = tg;</span><br><span class=\"line\">         tgn != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">         tg = tgn, tgn = tg.getParent());</span><br><span class=\"line\">    Thread finalizer = <span class=\"keyword\">new</span> FinalizerThread(tg);</span><br><span class=\"line\">    finalizer.setPriority(Thread.MAX_PRIORITY - <span class=\"number\">2</span>);</span><br><span class=\"line\">    finalizer.setDaemon(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    finalizer.start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这跟之前说过的ReferenceHandler线程十分相似，但是很重要的一点区别是，这里设置的线程优先级并不是最高优先级，而是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">finalizer.setPriority(Thread.MAX_PRIORITY - <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>所以，这意味着在CPU比较紧张的情况下，这条线程被调度的优先级可能会受到影响。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FinalizerThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用来判断该线程是否已经启动的标志</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> running;</span><br><span class=\"line\">    FinalizerThread(ThreadGroup g) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(g, <span class=\"string\">\"Finalizer\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果发生了递归调用则直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (running)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Finalizer线程在 System.initializeSystemClass 被调用前启动</span></span><br><span class=\"line\">        <span class=\"comment\">// 需要等到JVM已经初始化完成才能执行</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!VM.isBooted()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                VM.awaitBooted();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException x) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> JavaLangAccess jla = SharedSecrets.getJavaLangAccess();</span><br><span class=\"line\">        running = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 将节点从队列中移除</span></span><br><span class=\"line\">                Finalizer f = (Finalizer)queue.remove();</span><br><span class=\"line\">                <span class=\"comment\">// 调用其runFinalizer方法</span></span><br><span class=\"line\">                f.runFinalizer(jla);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException x) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 出错直接忽略</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个线程的逻辑并不复杂，等待JVM初始化完成后，便开启死循环模式，从引用队列中阻塞式获取元素，并执行其runFinalizer方法。注意这里的try…catch语句，捕获到异常都是忽略处理，所以<strong>如果在类的finalize方法中如果抛出异常，你是得不到任何错误信息的</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">runFinalizer</span><span class=\"params\">(JavaLangAccess jla)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 先判断其是否已经被执行过finalize方法</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hasBeenFinalized()) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        remove();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 取出其引用的对象</span></span><br><span class=\"line\">        Object finalizee = <span class=\"keyword\">this</span>.get();</span><br><span class=\"line\">        <span class=\"comment\">// 如果不为null且不是Enum对象</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (finalizee != <span class=\"keyword\">null</span> &amp;&amp; !(finalizee <span class=\"keyword\">instanceof</span> java.lang.Enum)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 执行其finalize方法</span></span><br><span class=\"line\">            jla.invokeFinalize(finalizee);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 清空包含该变量的堆栈，以减少被保守型GC保留的可能性</span></span><br><span class=\"line\">            finalizee = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable x) &#123; &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 调用Reference的clear方法</span></span><br><span class=\"line\">    <span class=\"keyword\">super</span>.clear();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的同步代码块只有最前面的一小段，先判断是否已经执行过finalize方法，如果已经执行过，则直接返回。所以<strong>一个对象finalize方法最多只会被执行一次</strong>。所以如果在f类对象的finalize方法中，重新使用全局变量给它关联一个强引用，使其变成一个强可达对象，当这个对象再次变成不可达的对象的时候，就不会再执行它的finalize方法了。这一点在《深入理解JVM虚拟机》一书中有讲到。</p>\n<p>该方法在判断完之后，取出Finalizer的内部引用对象，执行其finalize方法，并将其置为null。</p>\n<h3 id=\"SecondaryFinalizer线程\"><a href=\"#SecondaryFinalizer线程\" class=\"headerlink\" title=\"SecondaryFinalizer线程\"></a>SecondaryFinalizer线程</h3><p>emmm….除了上面那条线程之外，还有两条辅助线程，在runFinalization方法和runAllFinalizers方法中调用。前一个方法将依次取出queue中的Finalizer并执行其runFinalizer方法，后一个方法则会依次对f类对象链表中的对象执行runFinalizer方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">runFinalization</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!VM.isBooted()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    forkSecondaryFinalizer(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> running;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果是递归调用，则直接返回</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (running)</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> JavaLangAccess jla = SharedSecrets.getJavaLangAccess();</span><br><span class=\"line\">            running = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">                Finalizer f = (Finalizer)queue.poll();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (f == <span class=\"keyword\">null</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                f.runFinalizer(jla);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>runFinalization方法对比一下上面的FinalizerThread的run方法便发现其实几乎一样。这是提供给其他类调用的，但Finalizer是包访问权限，所以其他类（如Runtime、Shutdown）并不是直接调用，而是通过JVM间接调用。</p>\n<p>例如，调用System.runFinalization方法时，便会调用Runtime.runFinalization方法，最终通过虚拟机，调用Finalizer.runFinalization方法。</p>\n<p>再来看看runAllFinalizers方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">runAllFinalizers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!VM.isBooted()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    forkSecondaryFinalizer(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> running;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果是递归调用，则直接返回</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (running)</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> JavaLangAccess jla = SharedSecrets.getJavaLangAccess();</span><br><span class=\"line\">            running = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">                Finalizer f;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (lock) &#123;</span><br><span class=\"line\">                    f = unfinalized;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (f == <span class=\"keyword\">null</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    unfinalized = f.next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                f.runFinalizer(jla);</span><br><span class=\"line\">            &#125;&#125;&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的处理与上面也很相似，只是将queue换成了unfinalized链表。</p>\n<p>在java.lang.ShutDown类中的sequence方法中，会调用runAllFinalizer方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (rfoe) runAllFinalizers();</span><br></pre></td></tr></table></figure>\n<p>而这个方法其实是一个本地方法，由JVM间接调用Finalizer的runAllFinalizer方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Wormhole for invoking java.lang.ref.Finalizer.runAllFinalizers */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">runAllFinalizers</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<p>这两个方法中都用到了同一个模板方法——forkSecondaryFinalizer：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">forkSecondaryFinalizer</span><span class=\"params\">(<span class=\"keyword\">final</span> Runnable proc)</span> </span>&#123;</span><br><span class=\"line\">    AccessController.doPrivileged(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Void <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                ThreadGroup tg = Thread.currentThread().getThreadGroup();</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (ThreadGroup tgn = tg;</span><br><span class=\"line\">                     tgn != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                     tg = tgn, tgn = tg.getParent());</span><br><span class=\"line\">                Thread sft = <span class=\"keyword\">new</span> Thread(tg, proc, <span class=\"string\">\"Secondary finalizer\"</span>);</span><br><span class=\"line\">                sft.start();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    sft.join();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException x) &#123;</span><br><span class=\"line\">                    Thread.currentThread().interrupt();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里调用了AccessController.doPrivileged方法，这个方法的作用是使其内部的代码段获得更大的权限，可以在里面访问更多的资源。这个涉及到另一个话题，如果想要了解的话可以参考这篇文章——<a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-javasecurity/\" target=\"_blank\" rel=\"noopener\">Java安全模型</a>。</p>\n<p>这里你只需要关注run方法即可，run方法里只是启动一个线程的模板代码。</p>\n<h3 id=\"Finalizer与内存泄漏\"><a href=\"#Finalizer与内存泄漏\" class=\"headerlink\" title=\"Finalizer与内存泄漏\"></a>Finalizer与内存泄漏</h3><p>利用finalize来释放资源，听起来好像挺不错的，但是事实上却并没有想象中那么好，很容易会导致内存泄漏。</p>\n<p>通常而言，你不会知道垃圾回收器何时进行垃圾回收，也不知道何时回收某个特定的对象。但你可能会关心对象的finalize方法是否被执行。Java规范中对于Finalizer有以下规定;</p>\n<blockquote>\n<p>在回收一个有Finalizer关联的对象的内存之前，垃圾回收器会先调用其finalizer中的方法（即执行对象的finalize方法）。</p>\n</blockquote>\n<p>但是由于你并不知道对象何时被垃圾回收器收集，你只知道对象的finalize方法最终会被执行。所以必须清楚的一点是，你不会知道一个对象的finalize方法何时被执行。所以不要设计一个需要依赖程序finalize及时执行的程序。</p>\n<p>使用finalize一个经典的用法便是在构造器中打开文件，然后在finalize方法中关闭文件。这个设计看似很整洁完美，实际上隐藏一个隐秘的bug，Java中文件句柄数量是有限的，如果所有的句柄都用完了，那么程序将会无法打开任何文件。</p>\n<p>这样使用finalize方法，在某些经常执行finalization以确保有足够多可用句柄的JVM中可能工作良好，但是在另一些JVM中可能无法正常工作，因为那些垃圾回收器并不会经常执行finalization来确保有足够的句柄可用。</p>\n<p>此外FinalizeThread线程的优先级并不是最高的，所有当CPU资源紧张时，可能会有相当长一段时间不会执行Finalizer队列中的f对象的finalize方法，从而导致内存泄漏的发生。</p>\n<p>对于这些即将被回收掉的f对象，并不会在最近的一次GC中马上被回收释放掉，而是会延迟到下一个或几个GC时才会被真正回收。finalize方法无法在GC过程中执行，第一次GC只会讲其放入队列中去，由FinalizerThread去轮询执行。</p>\n<p>所以，不要在运行期间不断创建f对象，否则内存泄漏将常伴你左右。<img src=\"./0190.png\" width=\"40\"></p>\n<p>而且不同f对象的Finalizer的执行顺序并不是确定的，取决于它们被加入f对象链表的时间，而且从上面的源码分析中应该能知道，unfinalized链表更像是一个栈，不像链表那样先进先出，当既有对象进入，又有对象移出时，你无法知道这些Finalizer对象的具体执行顺序，所以不要设计依赖Finalizer执行顺序的程序。</p>\n<p>当然，如果你不得不使用finalize方法，并且需要确保其被执行，可以在代码中显式调用System.runFinalization方法。</p>\n<h3 id=\"Finalizer-应用场景\"><a href=\"#Finalizer-应用场景\" class=\"headerlink\" title=\"Finalizer 应用场景\"></a>Finalizer 应用场景</h3><p>好嘛，叽叽歪歪介绍了这么一大堆，结果都在说Finalizer怎么怎么不好，怎么怎么会出错。那要它何用？<img src=\"./0012.png\" width=\"50\"></p>\n<p>嗯，自有妙用。Finalizer一个比较适合的场景便是释放nativa方法中申请的内存，如果一个对象调用了本地方法，并且申请了内存（例如C中的malloc方法），那么可以在这个对象的finalize方法中调用native方法进行内存释放（如free方法），因为在这种情况下，本地方法申请的内存不会被垃圾回收器自动回收。</p>\n<p>另一个更常见的用法是为释放非内存资源（如：文件句柄、sockets）提供一个反馈机制。之前提到，你不应该依赖Finalizer来释放这些有限的资源。你应该提供一个释放这些资源的方法。但是你仍希望有一个Finalizer来检查这些资源是否已经被释放，如果没有则将其释放。相当于做一个防护措施，因为当你的代码被其他程序员调用时，也许他会粗心大意的忘记调用释放资源的方法。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>终于讲完了，现在来小结一下。</p>\n<ul>\n<li>FinalReference是为处理对象的finalize方法而设计的</li>\n<li>如果一个类或者其父类覆盖了Object类的finalize方法，那么这个类就叫做f类，会被JVM特殊标记</li>\n<li>f类对象在创建时会顺便注册一个与其关联的Finalizer对象</li>\n<li>f类对象在其不可达时会在GC中被放入引用队列</li>\n<li>f类对象的finalize方法执行时间并不确定，f对象至少要经历两次GC才能被回收，有可能执行finalize期间已经经历了多次GC</li>\n<li>Finalizer对象的处理是在GC时进行的，如果没有触发GC就不会触发对Finalizer对象的处理，unfinalized队列中的对象也就不会被放入队列，其finalize方法也不会被执行</li>\n<li>依赖f类对象的finalize执行顺序和执行时间的程序很可能会出现内存泄漏</li>\n<li>因为f对象的finalize方法迟迟没有执行，有可能会导致大部分f对象进入到old分代，此时容易导致老年代的GC，甚至Full GC，会使GC暂停时间明显变长</li>\n</ul>\n<p>### </p>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"FinalReference-与-Finalizer-详解\"><a href=\"#FinalReference-与-Finalizer-详解\" class=\"headerlink\" title=\"FinalReference 与 Finalizer 详解\"></a>FinalReference 与 Finalizer 详解</h1><h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>？？？说好只有四种引用呢，怎么又跑出来一个FinalReference？还有一个奇奇怪怪的Finalizer？</p>\n<p><img src=\"./0012.png\"></p>\n<p>别别别，把枪放下，事情不是你想的那样。<img src=\"./0190.png\" width=\"40\"></p>\n<p>FinalReference虽然也是继承自Reference类，但是并不能直接使用它，因为它是包可见的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FinalReference</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Reference</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FinalReference</span><span class=\"params\">(T referent, ReferenceQueue&lt;? <span class=\"keyword\">super</span> T&gt; q)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(referent, q);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也很简单明了，就这一个构造函数。既然是包可见，自然是为了来继承的，不直接提供给外部使用。</p>\n<p>FinalReference由JVM来实例化，JVM会对那些实现了Object中finalize()方法的类对象实例化一个对应的FinalReference。 而事实上，JVM实际操作的是其子类——Finalizer，那么Finalizer是如何工作的呢？</p>\n<h2 id=\"Finalizer标记\"><a href=\"#Finalizer标记\" class=\"headerlink\" title=\"Finalizer标记\"></a>Finalizer标记</h2><p>类其实除了语法层面的显示标记（如final，abstract，public等等）之外，在JVM中其实还会给类标记其他一些符号，比如finalizer类，如果一个类覆盖了Object类的finalize方法，并且方法体非空，则这个类就是finalizer类，JVM会给它做一个标记，以下简称“f类”，GC在处理这种类的对象的时候会做一些特殊的处理，如在这个对象被回收之前会先调用其finalize方法。</p>\n<h2 id=\"Finalizer源码解析\"><a href=\"#Finalizer源码解析\" class=\"headerlink\" title=\"Finalizer源码解析\"></a>Finalizer源码解析</h2><p>在java.lang.ref包下，还有最后一个没有说到类，也就是FinalReference的子类——Finalizer，一听就是个专门给人善后的家伙。来看看它长什么样。<img src=\"./06.png\" width=\"40\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Finalizer</span> <span class=\"keyword\">extends</span> <span class=\"title\">FinalReference</span>&lt;<span class=\"title\">Object</span>&gt; </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>emm….Finalizer看起来比FinalReference更高冷，不仅仅是包访问权限，而且是final修饰的，表示其不能再被继承。</p>\n<p>这个类是专门留给JVM去使用的，所以可以才如此设计，防止被篡改。</p>\n<p>当加载一个类时，如果该类覆盖了finalize方法，并且方法体非空，那么这个类就会被JVM做上标记，每次实例化该类对象时，就会为其生成一个Finalizer对象，JVM会调用Finalizer.register()将这个对象注册到Finalizer的内部队列中。</p>\n<h3 id=\"成员变量\"><a href=\"#成员变量\" class=\"headerlink\" title=\"成员变量\"></a>成员变量</h3><p>接下来看看Finalizer的成员变量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Finalizer</span><br><span class=\"line\">        next = <span class=\"keyword\">null</span>,</span><br><span class=\"line\">        prev = <span class=\"keyword\">null</span>;</span><br></pre></td></tr></table></figure>\n<p>Finalizer是类似双链表的结构，next指向其后一个节点，prev指向其前一个节点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object lock = <span class=\"keyword\">new</span> Object();</span><br></pre></td></tr></table></figure>\n<p>这里也有一个lock对象用来做锁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Finalizer unfinalized = <span class=\"keyword\">null</span>;</span><br></pre></td></tr></table></figure>\n<p>unfinalized用来链接所有f类对象，以下称其为“f类对象链表”。这是一个静态变量，目的是防止f类对象在执行finalize方法之前被GC回收掉。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ReferenceQueue&lt;Object&gt; queue = <span class=\"keyword\">new</span> ReferenceQueue&lt;&gt;();</span><br></pre></td></tr></table></figure>\n<p>queue是静态队列（单链表结构），JVM在回收对象时，如果发现它是F类对象，则将其从f类对象链表中取出，将它放入引用队列queue中，并通知FinalizerThread去消费。也就是说，发生GC时并不会直接回收该对象占用的内存，而是将其移入队列中，等到之后的一次或者几次GC时才真正回收其占用的内存。</p>\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Finalizer</span><span class=\"params\">(Object finalizee)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(finalizee, queue);</span><br><span class=\"line\">    add();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>构造函数也是私有的，意味着无法在该类之外构建这类对象，在构造函数中调用add方法，将当前Finalizer插入到f类对象链表中。</p>\n<h3 id=\"内部方法\"><a href=\"#内部方法\" class=\"headerlink\" title=\"内部方法\"></a>内部方法</h3><p>虽然我们无法创建Finalizer对象，但是在Finalizer中有一个register方法，在里面会创建一个Finalizer对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">register</span><span class=\"params\">(Object finalizee)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Finalizer(finalizee);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>没错，它也是给JVM调用的，那么问题来了，虚拟机会在什么时候调用这个函数呢？</p>\n<p>也许你已经猜到了，在创建对象的时候，JVM会将当前对象传递给Finalizer.register方法，给它创建一个Finalizer并且添加到f类对象链表中。</p>\n<p>另外，如果我们是通过clone的方式来复制对象时，如果被复制的对象是一个f类对象，那么在clone完成的时候也会调用Finalizer.register方法进行注册。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (lock) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (unfinalized != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.next = unfinalized;</span><br><span class=\"line\">            unfinalized.prev = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        unfinalized = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>add方法中，使用lock对象锁进行加锁操作，然后将当前对象注册到f类对象链表的头部节点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (lock) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (unfinalized == <span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                unfinalized = <span class=\"keyword\">this</span>.next;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                unfinalized = <span class=\"keyword\">this</span>.prev;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.next.prev = <span class=\"keyword\">this</span>.prev;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.prev != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.prev.next = <span class=\"keyword\">this</span>.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.next = <span class=\"keyword\">this</span>; </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.prev = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>remove方法中则同样以lock对象锁进行加锁后，将当前对象从f类对象链表中移除。并将next和prev均指向自身，这也用来判断f类对象是否已经被执行过finalize方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasBeenFinalized</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (next == <span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>hasBeenFinalized方法，正如其名，便是用来判断一个f类对象是否已经被执行过finalize方法，而判断时使用的条件便是next == this。</p>\n<h3 id=\"FinalizerThread线程\"><a href=\"#FinalizerThread线程\" class=\"headerlink\" title=\"FinalizerThread线程\"></a>FinalizerThread线程</h3><p>在Finalizer类的最后，有一段静态代码块，用来初始化FinalizerThread线程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    ThreadGroup tg = Thread.currentThread().getThreadGroup();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ThreadGroup tgn = tg;</span><br><span class=\"line\">         tgn != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">         tg = tgn, tgn = tg.getParent());</span><br><span class=\"line\">    Thread finalizer = <span class=\"keyword\">new</span> FinalizerThread(tg);</span><br><span class=\"line\">    finalizer.setPriority(Thread.MAX_PRIORITY - <span class=\"number\">2</span>);</span><br><span class=\"line\">    finalizer.setDaemon(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    finalizer.start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这跟之前说过的ReferenceHandler线程十分相似，但是很重要的一点区别是，这里设置的线程优先级并不是最高优先级，而是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">finalizer.setPriority(Thread.MAX_PRIORITY - <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>所以，这意味着在CPU比较紧张的情况下，这条线程被调度的优先级可能会受到影响。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FinalizerThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用来判断该线程是否已经启动的标志</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> running;</span><br><span class=\"line\">    FinalizerThread(ThreadGroup g) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(g, <span class=\"string\">\"Finalizer\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果发生了递归调用则直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (running)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Finalizer线程在 System.initializeSystemClass 被调用前启动</span></span><br><span class=\"line\">        <span class=\"comment\">// 需要等到JVM已经初始化完成才能执行</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!VM.isBooted()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                VM.awaitBooted();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException x) &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> JavaLangAccess jla = SharedSecrets.getJavaLangAccess();</span><br><span class=\"line\">        running = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 将节点从队列中移除</span></span><br><span class=\"line\">                Finalizer f = (Finalizer)queue.remove();</span><br><span class=\"line\">                <span class=\"comment\">// 调用其runFinalizer方法</span></span><br><span class=\"line\">                f.runFinalizer(jla);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException x) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 出错直接忽略</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个线程的逻辑并不复杂，等待JVM初始化完成后，便开启死循环模式，从引用队列中阻塞式获取元素，并执行其runFinalizer方法。注意这里的try…catch语句，捕获到异常都是忽略处理，所以<strong>如果在类的finalize方法中如果抛出异常，你是得不到任何错误信息的</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">runFinalizer</span><span class=\"params\">(JavaLangAccess jla)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 先判断其是否已经被执行过finalize方法</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hasBeenFinalized()) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        remove();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 取出其引用的对象</span></span><br><span class=\"line\">        Object finalizee = <span class=\"keyword\">this</span>.get();</span><br><span class=\"line\">        <span class=\"comment\">// 如果不为null且不是Enum对象</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (finalizee != <span class=\"keyword\">null</span> &amp;&amp; !(finalizee <span class=\"keyword\">instanceof</span> java.lang.Enum)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 执行其finalize方法</span></span><br><span class=\"line\">            jla.invokeFinalize(finalizee);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 清空包含该变量的堆栈，以减少被保守型GC保留的可能性</span></span><br><span class=\"line\">            finalizee = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable x) &#123; &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 调用Reference的clear方法</span></span><br><span class=\"line\">    <span class=\"keyword\">super</span>.clear();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的同步代码块只有最前面的一小段，先判断是否已经执行过finalize方法，如果已经执行过，则直接返回。所以<strong>一个对象finalize方法最多只会被执行一次</strong>。所以如果在f类对象的finalize方法中，重新使用全局变量给它关联一个强引用，使其变成一个强可达对象，当这个对象再次变成不可达的对象的时候，就不会再执行它的finalize方法了。这一点在《深入理解JVM虚拟机》一书中有讲到。</p>\n<p>该方法在判断完之后，取出Finalizer的内部引用对象，执行其finalize方法，并将其置为null。</p>\n<h3 id=\"SecondaryFinalizer线程\"><a href=\"#SecondaryFinalizer线程\" class=\"headerlink\" title=\"SecondaryFinalizer线程\"></a>SecondaryFinalizer线程</h3><p>emmm….除了上面那条线程之外，还有两条辅助线程，在runFinalization方法和runAllFinalizers方法中调用。前一个方法将依次取出queue中的Finalizer并执行其runFinalizer方法，后一个方法则会依次对f类对象链表中的对象执行runFinalizer方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">runFinalization</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!VM.isBooted()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    forkSecondaryFinalizer(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> running;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果是递归调用，则直接返回</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (running)</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> JavaLangAccess jla = SharedSecrets.getJavaLangAccess();</span><br><span class=\"line\">            running = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">                Finalizer f = (Finalizer)queue.poll();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (f == <span class=\"keyword\">null</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                f.runFinalizer(jla);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>runFinalization方法对比一下上面的FinalizerThread的run方法便发现其实几乎一样。这是提供给其他类调用的，但Finalizer是包访问权限，所以其他类（如Runtime、Shutdown）并不是直接调用，而是通过JVM间接调用。</p>\n<p>例如，调用System.runFinalization方法时，便会调用Runtime.runFinalization方法，最终通过虚拟机，调用Finalizer.runFinalization方法。</p>\n<p>再来看看runAllFinalizers方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">runAllFinalizers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!VM.isBooted()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    forkSecondaryFinalizer(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">boolean</span> running;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果是递归调用，则直接返回</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (running)</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> JavaLangAccess jla = SharedSecrets.getJavaLangAccess();</span><br><span class=\"line\">            running = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">                Finalizer f;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (lock) &#123;</span><br><span class=\"line\">                    f = unfinalized;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (f == <span class=\"keyword\">null</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    unfinalized = f.next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                f.runFinalizer(jla);</span><br><span class=\"line\">            &#125;&#125;&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的处理与上面也很相似，只是将queue换成了unfinalized链表。</p>\n<p>在java.lang.ShutDown类中的sequence方法中，会调用runAllFinalizer方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (rfoe) runAllFinalizers();</span><br></pre></td></tr></table></figure>\n<p>而这个方法其实是一个本地方法，由JVM间接调用Finalizer的runAllFinalizer方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Wormhole for invoking java.lang.ref.Finalizer.runAllFinalizers */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">runAllFinalizers</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<p>这两个方法中都用到了同一个模板方法——forkSecondaryFinalizer：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">forkSecondaryFinalizer</span><span class=\"params\">(<span class=\"keyword\">final</span> Runnable proc)</span> </span>&#123;</span><br><span class=\"line\">    AccessController.doPrivileged(</span><br><span class=\"line\">        <span class=\"keyword\">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Void <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                ThreadGroup tg = Thread.currentThread().getThreadGroup();</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (ThreadGroup tgn = tg;</span><br><span class=\"line\">                     tgn != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                     tg = tgn, tgn = tg.getParent());</span><br><span class=\"line\">                Thread sft = <span class=\"keyword\">new</span> Thread(tg, proc, <span class=\"string\">\"Secondary finalizer\"</span>);</span><br><span class=\"line\">                sft.start();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    sft.join();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException x) &#123;</span><br><span class=\"line\">                    Thread.currentThread().interrupt();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里调用了AccessController.doPrivileged方法，这个方法的作用是使其内部的代码段获得更大的权限，可以在里面访问更多的资源。这个涉及到另一个话题，如果想要了解的话可以参考这篇文章——<a href=\"https://www.ibm.com/developerworks/cn/java/j-lo-javasecurity/\" target=\"_blank\" rel=\"noopener\">Java安全模型</a>。</p>\n<p>这里你只需要关注run方法即可，run方法里只是启动一个线程的模板代码。</p>\n<h3 id=\"Finalizer与内存泄漏\"><a href=\"#Finalizer与内存泄漏\" class=\"headerlink\" title=\"Finalizer与内存泄漏\"></a>Finalizer与内存泄漏</h3><p>利用finalize来释放资源，听起来好像挺不错的，但是事实上却并没有想象中那么好，很容易会导致内存泄漏。</p>\n<p>通常而言，你不会知道垃圾回收器何时进行垃圾回收，也不知道何时回收某个特定的对象。但你可能会关心对象的finalize方法是否被执行。Java规范中对于Finalizer有以下规定;</p>\n<blockquote>\n<p>在回收一个有Finalizer关联的对象的内存之前，垃圾回收器会先调用其finalizer中的方法（即执行对象的finalize方法）。</p>\n</blockquote>\n<p>但是由于你并不知道对象何时被垃圾回收器收集，你只知道对象的finalize方法最终会被执行。所以必须清楚的一点是，你不会知道一个对象的finalize方法何时被执行。所以不要设计一个需要依赖程序finalize及时执行的程序。</p>\n<p>使用finalize一个经典的用法便是在构造器中打开文件，然后在finalize方法中关闭文件。这个设计看似很整洁完美，实际上隐藏一个隐秘的bug，Java中文件句柄数量是有限的，如果所有的句柄都用完了，那么程序将会无法打开任何文件。</p>\n<p>这样使用finalize方法，在某些经常执行finalization以确保有足够多可用句柄的JVM中可能工作良好，但是在另一些JVM中可能无法正常工作，因为那些垃圾回收器并不会经常执行finalization来确保有足够的句柄可用。</p>\n<p>此外FinalizeThread线程的优先级并不是最高的，所有当CPU资源紧张时，可能会有相当长一段时间不会执行Finalizer队列中的f对象的finalize方法，从而导致内存泄漏的发生。</p>\n<p>对于这些即将被回收掉的f对象，并不会在最近的一次GC中马上被回收释放掉，而是会延迟到下一个或几个GC时才会被真正回收。finalize方法无法在GC过程中执行，第一次GC只会讲其放入队列中去，由FinalizerThread去轮询执行。</p>\n<p>所以，不要在运行期间不断创建f对象，否则内存泄漏将常伴你左右。<img src=\"./0190.png\" width=\"40\"></p>\n<p>而且不同f对象的Finalizer的执行顺序并不是确定的，取决于它们被加入f对象链表的时间，而且从上面的源码分析中应该能知道，unfinalized链表更像是一个栈，不像链表那样先进先出，当既有对象进入，又有对象移出时，你无法知道这些Finalizer对象的具体执行顺序，所以不要设计依赖Finalizer执行顺序的程序。</p>\n<p>当然，如果你不得不使用finalize方法，并且需要确保其被执行，可以在代码中显式调用System.runFinalization方法。</p>\n<h3 id=\"Finalizer-应用场景\"><a href=\"#Finalizer-应用场景\" class=\"headerlink\" title=\"Finalizer 应用场景\"></a>Finalizer 应用场景</h3><p>好嘛，叽叽歪歪介绍了这么一大堆，结果都在说Finalizer怎么怎么不好，怎么怎么会出错。那要它何用？<img src=\"./0012.png\" width=\"50\"></p>\n<p>嗯，自有妙用。Finalizer一个比较适合的场景便是释放nativa方法中申请的内存，如果一个对象调用了本地方法，并且申请了内存（例如C中的malloc方法），那么可以在这个对象的finalize方法中调用native方法进行内存释放（如free方法），因为在这种情况下，本地方法申请的内存不会被垃圾回收器自动回收。</p>\n<p>另一个更常见的用法是为释放非内存资源（如：文件句柄、sockets）提供一个反馈机制。之前提到，你不应该依赖Finalizer来释放这些有限的资源。你应该提供一个释放这些资源的方法。但是你仍希望有一个Finalizer来检查这些资源是否已经被释放，如果没有则将其释放。相当于做一个防护措施，因为当你的代码被其他程序员调用时，也许他会粗心大意的忘记调用释放资源的方法。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>终于讲完了，现在来小结一下。</p>\n<ul>\n<li>FinalReference是为处理对象的finalize方法而设计的</li>\n<li>如果一个类或者其父类覆盖了Object类的finalize方法，那么这个类就叫做f类，会被JVM特殊标记</li>\n<li>f类对象在创建时会顺便注册一个与其关联的Finalizer对象</li>\n<li>f类对象在其不可达时会在GC中被放入引用队列</li>\n<li>f类对象的finalize方法执行时间并不确定，f对象至少要经历两次GC才能被回收，有可能执行finalize期间已经经历了多次GC</li>\n<li>Finalizer对象的处理是在GC时进行的，如果没有触发GC就不会触发对Finalizer对象的处理，unfinalized队列中的对象也就不会被放入队列，其finalize方法也不会被执行</li>\n<li>依赖f类对象的finalize执行顺序和执行时间的程序很可能会出现内存泄漏</li>\n<li>因为f对象的finalize方法迟迟没有执行，有可能会导致大部分f对象进入到old分代，此时容易导致老年代的GC，甚至Full GC，会使GC暂停时间明显变长</li>\n</ul>\n<p>### </p>\n"},{"prev":false,"next":"./strong-reference","_content":"\n# 强引用、软引用、弱引用和虚引用深入探讨\n\n::: tip \n为了更灵活的控制对象的生命周期，在JDK1.2之后，引用被划分为强引用、软引用、弱引用、虚引用四种类型。\n:::\n\n引用类型在日常开发中并不常关注，也很少注意到，因此很多人忽略了它们的存在，而事实上，引用类型在Java体系中扮演着十分重要的角色，如果要想对Java体系有一个更深层次的理解，那么了解和掌握这些引用的用法是十分必要的。\n\n在正式开始前，我们先来上两道开胃菜。<img src=\"./0046.png\" width=\"50\"/>\n\n## 为什么需要回收\n\n每一个Java程序中的对象都会占用一定的计算机资源，最常见的，如：每个对象都会在堆空间上申请一定的内存空间。但是除了内存之外，对象还会占用其它资源，如文件句柄，端口，socket等等。当你创建一个对象的时候，必须保证它在销毁的时候会释放它占用的资源。否则程序将会在OOM中结束它的使命。<img src=\"./0005.png\" width=\"50\"/>\n\n在Java中，程序员不需要关心对象的内存具体如何分配和如何释放，不需要了解其中回收的细节，也不需要担心会将同一个对象释放两次而导致内存损坏。JVM有自动进行内存管理的神器——垃圾回收器，垃圾回收器会自动回收那些不再使用的对象，并释放掉它们的内存，你只需要保证那些不再被使用的对象的所有强引用都已经被释放掉了。  \n\n虽然垃圾回收器确实让Java中的内存管理比C、C++中的内存管理容易许多，但是你不能对于内存完全不关心。如果你不清楚JVM到底会在什么条件下才会对对象进行回收，那么就有可能会不小心在代码中留下内存泄漏的bug。\n\n因此，关注对象的回收时机，理解JVM中垃圾收集的机制，可以提高对于这个问题的敏感度，也能在发生内存泄漏问题时更快的定位问题所在。想了解更多关于垃圾回收相关的细节，可以参考[这篇文章](../jvm/garbage-collection.md)。\n\n## 为什么需要引用类型\n\n在JDK 1.2以前的版本中，如果一个对象没有被任何变量引用，那么程序就无法再使用这个对象。也就是说，只有当对象处于可达（reachable）状态时，程序才能使用它。只有在对象没有任何其他对象引用它时，垃圾回收器才会对它进行回收。对象只有被引用和没有被引用两种状态。这种方式无法描述一些“食之无味，弃之可惜”的对象。 而很多时候，\n\n我们希望存在这样一些对象：当内存空间足够时，可以将它们保存在内存中，不进行回收；当内存空间变得紧张时，允许JVM回收这些对象。大部分缓存都符合这样的场景。\n\n从JDK 1.2版本开始，Java对引用的概念进行了扩充，对象的引用分成了4种级别，从而使程序开发者能更加灵活地控制对象的生命周期，更好的控制创建的对象何时被释放和回收。\n\n引用类型是与JVM密切合作的类型，有些引用类型甚至允许其引用对象在程序中仍需要的时候被JVM释放。\n\n这4种引用类型的强度由高到低依次为：**强引用**、**软引用**、**弱引用**和**虚引用**。\n\n有了这些引用类型之后，可以一定程度上增加对垃圾回收的粒度把控，可以让垃圾回收器在更合适的时机回收掉那些可以被回收掉的对象，而并不仅仅是只回收不再使用的对象。\n\n这些引用类型各有特点，各有各的适用场景，清楚的了解和掌握它们的用法可以帮助你写出更加健壮的代码。<img src=\"./148.png\" width=\"50\"/>\n\n## 实力翻车\n\n下面欢迎来到大型翻车现场，接下来将实力演示一波因为强引用过多导致的翻车例子。\n\n如果你需要在整个程序运行期间保存一些对象（因为它们的初始化很耗费时间和资源），你可能会使用静态集合对象来存储并且在代码中随处使用它们。\n\n```java\npublic static Map<K, V> storedObjs = new HashMap<>();\n```\n\n但是这样，你就能成功阻止垃圾回收器对集合中的对象进行回收和销毁。从而顺利引发OOM。例如：\n\n```java\npublic class OOMTest {\n    public static List<Integer> cachedObjs = new ArrayList<>();\n \n    public static void main(String[] args) {\n        for (int i = 0; i < 100_000_000; i++) {\n            cachedObjs.add(i);\n        }\n    }\n}\n```\n\n输出如下：\n\n```bash\nException in thread “main” java.lang.OutOfMemoryError: Java heap space\n```\n\n<img src=\"./0005.png\" width=\"50\"/>这样就符合预期的翻车了。但你也许会说，谁会这么无聊，创建这么多变量。\n\n嗯，确实是的，但是别忘了，一个程序可能会运行很长时间，几个月，甚至几年（如果你的代码和公司足够健壮的话），如果期间不断的创建变量而不清理的话（像上面那样把HashMap当缓存使用，不断往里面添加内容但是却不做删除），是有可能会导致这种情况发生的。\n\n## 内容编排\n\n 接下来的文章将从以下几方面对这四种引用进行介绍：\n\n+ <LabelBlock>简要介绍    </LabelBlock>\n  + [强引用](./strong-reference.md)\n  + [软引用](./soft-reference.md)\n  + [弱引用](./weak-referecen.md)\n  + [虚引用](./phantom-reference.md)\n+ <LabelBlock>源码剖析    </LabelBlock>\n  + [Reference源码详解](./reference-code-detail.md)\n  + [ReferenceQueue源码详解](./reference-queue-code-detail.md)\n  + [SoftReference源码详解](./soft-reference-code-detail.md)\n  + [WeakReference源码详解](./weak-reference-code-detail.md)\n  + [PhantomReference源码详解](./phantom-reference-code-detail.md)\n  + [FinalReference与Finalizer详解](./final-reference-code-detail.md)\n+ <LabelBlock>总结    </LabelBlock>\n  + [四种引用类型总结](./reference-summary.md)\n\n::: warning 注意\n本系列文章都是以`JDK1.8` 版本的代码进行分析，不同版本中代码会略有差异。 \n:::\n\n如果只是想要对这些引用进行简单了解，那么看完简要介绍部分即可，如果想要有更深入的研究，可以继续查阅源码剖析部分。<img src=\"./0003.png\" width=\"50\"/>","source":"_posts/java/reference/four-kinds-of-reference.md","raw":"---\nprev: false\nnext: ./strong-reference\n\n---\n\n# 强引用、软引用、弱引用和虚引用深入探讨\n\n::: tip \n为了更灵活的控制对象的生命周期，在JDK1.2之后，引用被划分为强引用、软引用、弱引用、虚引用四种类型。\n:::\n\n引用类型在日常开发中并不常关注，也很少注意到，因此很多人忽略了它们的存在，而事实上，引用类型在Java体系中扮演着十分重要的角色，如果要想对Java体系有一个更深层次的理解，那么了解和掌握这些引用的用法是十分必要的。\n\n在正式开始前，我们先来上两道开胃菜。<img src=\"./0046.png\" width=\"50\"/>\n\n## 为什么需要回收\n\n每一个Java程序中的对象都会占用一定的计算机资源，最常见的，如：每个对象都会在堆空间上申请一定的内存空间。但是除了内存之外，对象还会占用其它资源，如文件句柄，端口，socket等等。当你创建一个对象的时候，必须保证它在销毁的时候会释放它占用的资源。否则程序将会在OOM中结束它的使命。<img src=\"./0005.png\" width=\"50\"/>\n\n在Java中，程序员不需要关心对象的内存具体如何分配和如何释放，不需要了解其中回收的细节，也不需要担心会将同一个对象释放两次而导致内存损坏。JVM有自动进行内存管理的神器——垃圾回收器，垃圾回收器会自动回收那些不再使用的对象，并释放掉它们的内存，你只需要保证那些不再被使用的对象的所有强引用都已经被释放掉了。  \n\n虽然垃圾回收器确实让Java中的内存管理比C、C++中的内存管理容易许多，但是你不能对于内存完全不关心。如果你不清楚JVM到底会在什么条件下才会对对象进行回收，那么就有可能会不小心在代码中留下内存泄漏的bug。\n\n因此，关注对象的回收时机，理解JVM中垃圾收集的机制，可以提高对于这个问题的敏感度，也能在发生内存泄漏问题时更快的定位问题所在。想了解更多关于垃圾回收相关的细节，可以参考[这篇文章](../jvm/garbage-collection.md)。\n\n## 为什么需要引用类型\n\n在JDK 1.2以前的版本中，如果一个对象没有被任何变量引用，那么程序就无法再使用这个对象。也就是说，只有当对象处于可达（reachable）状态时，程序才能使用它。只有在对象没有任何其他对象引用它时，垃圾回收器才会对它进行回收。对象只有被引用和没有被引用两种状态。这种方式无法描述一些“食之无味，弃之可惜”的对象。 而很多时候，\n\n我们希望存在这样一些对象：当内存空间足够时，可以将它们保存在内存中，不进行回收；当内存空间变得紧张时，允许JVM回收这些对象。大部分缓存都符合这样的场景。\n\n从JDK 1.2版本开始，Java对引用的概念进行了扩充，对象的引用分成了4种级别，从而使程序开发者能更加灵活地控制对象的生命周期，更好的控制创建的对象何时被释放和回收。\n\n引用类型是与JVM密切合作的类型，有些引用类型甚至允许其引用对象在程序中仍需要的时候被JVM释放。\n\n这4种引用类型的强度由高到低依次为：**强引用**、**软引用**、**弱引用**和**虚引用**。\n\n有了这些引用类型之后，可以一定程度上增加对垃圾回收的粒度把控，可以让垃圾回收器在更合适的时机回收掉那些可以被回收掉的对象，而并不仅仅是只回收不再使用的对象。\n\n这些引用类型各有特点，各有各的适用场景，清楚的了解和掌握它们的用法可以帮助你写出更加健壮的代码。<img src=\"./148.png\" width=\"50\"/>\n\n## 实力翻车\n\n下面欢迎来到大型翻车现场，接下来将实力演示一波因为强引用过多导致的翻车例子。\n\n如果你需要在整个程序运行期间保存一些对象（因为它们的初始化很耗费时间和资源），你可能会使用静态集合对象来存储并且在代码中随处使用它们。\n\n```java\npublic static Map<K, V> storedObjs = new HashMap<>();\n```\n\n但是这样，你就能成功阻止垃圾回收器对集合中的对象进行回收和销毁。从而顺利引发OOM。例如：\n\n```java\npublic class OOMTest {\n    public static List<Integer> cachedObjs = new ArrayList<>();\n \n    public static void main(String[] args) {\n        for (int i = 0; i < 100_000_000; i++) {\n            cachedObjs.add(i);\n        }\n    }\n}\n```\n\n输出如下：\n\n```bash\nException in thread “main” java.lang.OutOfMemoryError: Java heap space\n```\n\n<img src=\"./0005.png\" width=\"50\"/>这样就符合预期的翻车了。但你也许会说，谁会这么无聊，创建这么多变量。\n\n嗯，确实是的，但是别忘了，一个程序可能会运行很长时间，几个月，甚至几年（如果你的代码和公司足够健壮的话），如果期间不断的创建变量而不清理的话（像上面那样把HashMap当缓存使用，不断往里面添加内容但是却不做删除），是有可能会导致这种情况发生的。\n\n## 内容编排\n\n 接下来的文章将从以下几方面对这四种引用进行介绍：\n\n+ <LabelBlock>简要介绍    </LabelBlock>\n  + [强引用](./strong-reference.md)\n  + [软引用](./soft-reference.md)\n  + [弱引用](./weak-referecen.md)\n  + [虚引用](./phantom-reference.md)\n+ <LabelBlock>源码剖析    </LabelBlock>\n  + [Reference源码详解](./reference-code-detail.md)\n  + [ReferenceQueue源码详解](./reference-queue-code-detail.md)\n  + [SoftReference源码详解](./soft-reference-code-detail.md)\n  + [WeakReference源码详解](./weak-reference-code-detail.md)\n  + [PhantomReference源码详解](./phantom-reference-code-detail.md)\n  + [FinalReference与Finalizer详解](./final-reference-code-detail.md)\n+ <LabelBlock>总结    </LabelBlock>\n  + [四种引用类型总结](./reference-summary.md)\n\n::: warning 注意\n本系列文章都是以`JDK1.8` 版本的代码进行分析，不同版本中代码会略有差异。 \n:::\n\n如果只是想要对这些引用进行简单了解，那么看完简要介绍部分即可，如果想要有更深入的研究，可以继续查阅源码剖析部分。<img src=\"./0003.png\" width=\"50\"/>","slug":"java/reference/four-kinds-of-reference","published":1,"date":"2018-12-27T08:04:21.456Z","updated":"2018-12-27T08:04:21.457Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5rd002jwu9kvp7dyhm2","content":"<h1 id=\"强引用、软引用、弱引用和虚引用深入探讨\"><a href=\"#强引用、软引用、弱引用和虚引用深入探讨\" class=\"headerlink\" title=\"强引用、软引用、弱引用和虚引用深入探讨\"></a>强引用、软引用、弱引用和虚引用深入探讨</h1><p>::: tip<br>为了更灵活的控制对象的生命周期，在JDK1.2之后，引用被划分为强引用、软引用、弱引用、虚引用四种类型。<br>:::</p>\n<p>引用类型在日常开发中并不常关注，也很少注意到，因此很多人忽略了它们的存在，而事实上，引用类型在Java体系中扮演着十分重要的角色，如果要想对Java体系有一个更深层次的理解，那么了解和掌握这些引用的用法是十分必要的。</p>\n<p>在正式开始前，我们先来上两道开胃菜。<img src=\"./0046.png\" width=\"50\"></p>\n<h2 id=\"为什么需要回收\"><a href=\"#为什么需要回收\" class=\"headerlink\" title=\"为什么需要回收\"></a>为什么需要回收</h2><p>每一个Java程序中的对象都会占用一定的计算机资源，最常见的，如：每个对象都会在堆空间上申请一定的内存空间。但是除了内存之外，对象还会占用其它资源，如文件句柄，端口，socket等等。当你创建一个对象的时候，必须保证它在销毁的时候会释放它占用的资源。否则程序将会在OOM中结束它的使命。<img src=\"./0005.png\" width=\"50\"></p>\n<p>在Java中，程序员不需要关心对象的内存具体如何分配和如何释放，不需要了解其中回收的细节，也不需要担心会将同一个对象释放两次而导致内存损坏。JVM有自动进行内存管理的神器——垃圾回收器，垃圾回收器会自动回收那些不再使用的对象，并释放掉它们的内存，你只需要保证那些不再被使用的对象的所有强引用都已经被释放掉了。  </p>\n<p>虽然垃圾回收器确实让Java中的内存管理比C、C++中的内存管理容易许多，但是你不能对于内存完全不关心。如果你不清楚JVM到底会在什么条件下才会对对象进行回收，那么就有可能会不小心在代码中留下内存泄漏的bug。</p>\n<p>因此，关注对象的回收时机，理解JVM中垃圾收集的机制，可以提高对于这个问题的敏感度，也能在发生内存泄漏问题时更快的定位问题所在。想了解更多关于垃圾回收相关的细节，可以参考<a href=\"../jvm/garbage-collection.md\">这篇文章</a>。</p>\n<h2 id=\"为什么需要引用类型\"><a href=\"#为什么需要引用类型\" class=\"headerlink\" title=\"为什么需要引用类型\"></a>为什么需要引用类型</h2><p>在JDK 1.2以前的版本中，如果一个对象没有被任何变量引用，那么程序就无法再使用这个对象。也就是说，只有当对象处于可达（reachable）状态时，程序才能使用它。只有在对象没有任何其他对象引用它时，垃圾回收器才会对它进行回收。对象只有被引用和没有被引用两种状态。这种方式无法描述一些“食之无味，弃之可惜”的对象。 而很多时候，</p>\n<p>我们希望存在这样一些对象：当内存空间足够时，可以将它们保存在内存中，不进行回收；当内存空间变得紧张时，允许JVM回收这些对象。大部分缓存都符合这样的场景。</p>\n<p>从JDK 1.2版本开始，Java对引用的概念进行了扩充，对象的引用分成了4种级别，从而使程序开发者能更加灵活地控制对象的生命周期，更好的控制创建的对象何时被释放和回收。</p>\n<p>引用类型是与JVM密切合作的类型，有些引用类型甚至允许其引用对象在程序中仍需要的时候被JVM释放。</p>\n<p>这4种引用类型的强度由高到低依次为：<strong>强引用</strong>、<strong>软引用</strong>、<strong>弱引用</strong>和<strong>虚引用</strong>。</p>\n<p>有了这些引用类型之后，可以一定程度上增加对垃圾回收的粒度把控，可以让垃圾回收器在更合适的时机回收掉那些可以被回收掉的对象，而并不仅仅是只回收不再使用的对象。</p>\n<p>这些引用类型各有特点，各有各的适用场景，清楚的了解和掌握它们的用法可以帮助你写出更加健壮的代码。<img src=\"./148.png\" width=\"50\"></p>\n<h2 id=\"实力翻车\"><a href=\"#实力翻车\" class=\"headerlink\" title=\"实力翻车\"></a>实力翻车</h2><p>下面欢迎来到大型翻车现场，接下来将实力演示一波因为强引用过多导致的翻车例子。</p>\n<p>如果你需要在整个程序运行期间保存一些对象（因为它们的初始化很耗费时间和资源），你可能会使用静态集合对象来存储并且在代码中随处使用它们。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map&lt;K, V&gt; storedObjs = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br></pre></td></tr></table></figure>\n<p>但是这样，你就能成功阻止垃圾回收器对集合中的对象进行回收和销毁。从而顺利引发OOM。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OOMTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Integer&gt; cachedObjs = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100_000_000</span>; i++) &#123;</span><br><span class=\"line\">            cachedObjs.add(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception <span class=\"keyword\">in</span> thread “main” java.lang.OutOfMemoryError: Java heap space</span><br></pre></td></tr></table></figure>\n<p><img src=\"./0005.png\" width=\"50\">这样就符合预期的翻车了。但你也许会说，谁会这么无聊，创建这么多变量。</p>\n<p>嗯，确实是的，但是别忘了，一个程序可能会运行很长时间，几个月，甚至几年（如果你的代码和公司足够健壮的话），如果期间不断的创建变量而不清理的话（像上面那样把HashMap当缓存使用，不断往里面添加内容但是却不做删除），是有可能会导致这种情况发生的。</p>\n<h2 id=\"内容编排\"><a href=\"#内容编排\" class=\"headerlink\" title=\"内容编排\"></a>内容编排</h2><p> 接下来的文章将从以下几方面对这四种引用进行介绍：</p>\n<ul>\n<li><labelblock>简要介绍    </labelblock><ul>\n<li><a href=\"./strong-reference.md\">强引用</a></li>\n<li><a href=\"./soft-reference.md\">软引用</a></li>\n<li><a href=\"./weak-referecen.md\">弱引用</a></li>\n<li><a href=\"./phantom-reference.md\">虚引用</a></li>\n</ul>\n</li>\n<li><labelblock>源码剖析    </labelblock><ul>\n<li><a href=\"./reference-code-detail.md\">Reference源码详解</a></li>\n<li><a href=\"./reference-queue-code-detail.md\">ReferenceQueue源码详解</a></li>\n<li><a href=\"./soft-reference-code-detail.md\">SoftReference源码详解</a></li>\n<li><a href=\"./weak-reference-code-detail.md\">WeakReference源码详解</a></li>\n<li><a href=\"./phantom-reference-code-detail.md\">PhantomReference源码详解</a></li>\n<li><a href=\"./final-reference-code-detail.md\">FinalReference与Finalizer详解</a></li>\n</ul>\n</li>\n<li><labelblock>总结    </labelblock><ul>\n<li><a href=\"./reference-summary.md\">四种引用类型总结</a></li>\n</ul>\n</li>\n</ul>\n<p>::: warning 注意<br>本系列文章都是以<code>JDK1.8</code> 版本的代码进行分析，不同版本中代码会略有差异。<br>:::</p>\n<p>如果只是想要对这些引用进行简单了解，那么看完简要介绍部分即可，如果想要有更深入的研究，可以继续查阅源码剖析部分。<img src=\"./0003.png\" width=\"50\"></p>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"强引用、软引用、弱引用和虚引用深入探讨\"><a href=\"#强引用、软引用、弱引用和虚引用深入探讨\" class=\"headerlink\" title=\"强引用、软引用、弱引用和虚引用深入探讨\"></a>强引用、软引用、弱引用和虚引用深入探讨</h1><p>::: tip<br>为了更灵活的控制对象的生命周期，在JDK1.2之后，引用被划分为强引用、软引用、弱引用、虚引用四种类型。<br>:::</p>\n<p>引用类型在日常开发中并不常关注，也很少注意到，因此很多人忽略了它们的存在，而事实上，引用类型在Java体系中扮演着十分重要的角色，如果要想对Java体系有一个更深层次的理解，那么了解和掌握这些引用的用法是十分必要的。</p>\n<p>在正式开始前，我们先来上两道开胃菜。<img src=\"./0046.png\" width=\"50\"></p>\n<h2 id=\"为什么需要回收\"><a href=\"#为什么需要回收\" class=\"headerlink\" title=\"为什么需要回收\"></a>为什么需要回收</h2><p>每一个Java程序中的对象都会占用一定的计算机资源，最常见的，如：每个对象都会在堆空间上申请一定的内存空间。但是除了内存之外，对象还会占用其它资源，如文件句柄，端口，socket等等。当你创建一个对象的时候，必须保证它在销毁的时候会释放它占用的资源。否则程序将会在OOM中结束它的使命。<img src=\"./0005.png\" width=\"50\"></p>\n<p>在Java中，程序员不需要关心对象的内存具体如何分配和如何释放，不需要了解其中回收的细节，也不需要担心会将同一个对象释放两次而导致内存损坏。JVM有自动进行内存管理的神器——垃圾回收器，垃圾回收器会自动回收那些不再使用的对象，并释放掉它们的内存，你只需要保证那些不再被使用的对象的所有强引用都已经被释放掉了。  </p>\n<p>虽然垃圾回收器确实让Java中的内存管理比C、C++中的内存管理容易许多，但是你不能对于内存完全不关心。如果你不清楚JVM到底会在什么条件下才会对对象进行回收，那么就有可能会不小心在代码中留下内存泄漏的bug。</p>\n<p>因此，关注对象的回收时机，理解JVM中垃圾收集的机制，可以提高对于这个问题的敏感度，也能在发生内存泄漏问题时更快的定位问题所在。想了解更多关于垃圾回收相关的细节，可以参考<a href=\"../jvm/garbage-collection.md\">这篇文章</a>。</p>\n<h2 id=\"为什么需要引用类型\"><a href=\"#为什么需要引用类型\" class=\"headerlink\" title=\"为什么需要引用类型\"></a>为什么需要引用类型</h2><p>在JDK 1.2以前的版本中，如果一个对象没有被任何变量引用，那么程序就无法再使用这个对象。也就是说，只有当对象处于可达（reachable）状态时，程序才能使用它。只有在对象没有任何其他对象引用它时，垃圾回收器才会对它进行回收。对象只有被引用和没有被引用两种状态。这种方式无法描述一些“食之无味，弃之可惜”的对象。 而很多时候，</p>\n<p>我们希望存在这样一些对象：当内存空间足够时，可以将它们保存在内存中，不进行回收；当内存空间变得紧张时，允许JVM回收这些对象。大部分缓存都符合这样的场景。</p>\n<p>从JDK 1.2版本开始，Java对引用的概念进行了扩充，对象的引用分成了4种级别，从而使程序开发者能更加灵活地控制对象的生命周期，更好的控制创建的对象何时被释放和回收。</p>\n<p>引用类型是与JVM密切合作的类型，有些引用类型甚至允许其引用对象在程序中仍需要的时候被JVM释放。</p>\n<p>这4种引用类型的强度由高到低依次为：<strong>强引用</strong>、<strong>软引用</strong>、<strong>弱引用</strong>和<strong>虚引用</strong>。</p>\n<p>有了这些引用类型之后，可以一定程度上增加对垃圾回收的粒度把控，可以让垃圾回收器在更合适的时机回收掉那些可以被回收掉的对象，而并不仅仅是只回收不再使用的对象。</p>\n<p>这些引用类型各有特点，各有各的适用场景，清楚的了解和掌握它们的用法可以帮助你写出更加健壮的代码。<img src=\"./148.png\" width=\"50\"></p>\n<h2 id=\"实力翻车\"><a href=\"#实力翻车\" class=\"headerlink\" title=\"实力翻车\"></a>实力翻车</h2><p>下面欢迎来到大型翻车现场，接下来将实力演示一波因为强引用过多导致的翻车例子。</p>\n<p>如果你需要在整个程序运行期间保存一些对象（因为它们的初始化很耗费时间和资源），你可能会使用静态集合对象来存储并且在代码中随处使用它们。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Map&lt;K, V&gt; storedObjs = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br></pre></td></tr></table></figure>\n<p>但是这样，你就能成功阻止垃圾回收器对集合中的对象进行回收和销毁。从而顺利引发OOM。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OOMTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;Integer&gt; cachedObjs = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100_000_000</span>; i++) &#123;</span><br><span class=\"line\">            cachedObjs.add(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception <span class=\"keyword\">in</span> thread “main” java.lang.OutOfMemoryError: Java heap space</span><br></pre></td></tr></table></figure>\n<p><img src=\"./0005.png\" width=\"50\">这样就符合预期的翻车了。但你也许会说，谁会这么无聊，创建这么多变量。</p>\n<p>嗯，确实是的，但是别忘了，一个程序可能会运行很长时间，几个月，甚至几年（如果你的代码和公司足够健壮的话），如果期间不断的创建变量而不清理的话（像上面那样把HashMap当缓存使用，不断往里面添加内容但是却不做删除），是有可能会导致这种情况发生的。</p>\n<h2 id=\"内容编排\"><a href=\"#内容编排\" class=\"headerlink\" title=\"内容编排\"></a>内容编排</h2><p> 接下来的文章将从以下几方面对这四种引用进行介绍：</p>\n<ul>\n<li><labelblock>简要介绍    </labelblock><ul>\n<li><a href=\"./strong-reference.md\">强引用</a></li>\n<li><a href=\"./soft-reference.md\">软引用</a></li>\n<li><a href=\"./weak-referecen.md\">弱引用</a></li>\n<li><a href=\"./phantom-reference.md\">虚引用</a></li>\n</ul>\n</li>\n<li><labelblock>源码剖析    </labelblock><ul>\n<li><a href=\"./reference-code-detail.md\">Reference源码详解</a></li>\n<li><a href=\"./reference-queue-code-detail.md\">ReferenceQueue源码详解</a></li>\n<li><a href=\"./soft-reference-code-detail.md\">SoftReference源码详解</a></li>\n<li><a href=\"./weak-reference-code-detail.md\">WeakReference源码详解</a></li>\n<li><a href=\"./phantom-reference-code-detail.md\">PhantomReference源码详解</a></li>\n<li><a href=\"./final-reference-code-detail.md\">FinalReference与Finalizer详解</a></li>\n</ul>\n</li>\n<li><labelblock>总结    </labelblock><ul>\n<li><a href=\"./reference-summary.md\">四种引用类型总结</a></li>\n</ul>\n</li>\n</ul>\n<p>::: warning 注意<br>本系列文章都是以<code>JDK1.8</code> 版本的代码进行分析，不同版本中代码会略有差异。<br>:::</p>\n<p>如果只是想要对这些引用进行简单了解，那么看完简要介绍部分即可，如果想要有更深入的研究，可以继续查阅源码剖析部分。<img src=\"./0003.png\" width=\"50\"></p>\n"},{"prev":"./weak-reference-code-detail","next":"./final-reference-code-detail","_content":"\n# PhantomReference源码详解\n\n## 定义\n\n::: tip \nPhantomReference是虚引用，该引用不会影响不会影响对象的生命周期，也无法从虚引用中获取对象实例。\n:::\n\n## 说明\n\n源码介绍部分其实也没多大内容，主要内容都在前面介绍中说完了。PhantomReference类的源码和WeakReference类一样简单：\n\n```java\npublic class PhantomReference<T> extends Reference<T> {\n    public T get() {\n        return null;\n    }\n\n    /**\n     * 这里传入的引用队列也可以为null，但是这样的引用没有任何意义，因为永远不会入队\n     */\n    public PhantomReference(T referent, ReferenceQueue<? super T> q) {\n        super(referent, q);\n    }\n}\n```\n\n可以看到，get方法直接返回null，有一个两个参数的构造方法，传入被引用的对象和引用队列。\n\n<img src=\"./06.png\" width=\"40\"/>那么，这篇也先告一段落吧。 ","source":"_posts/java/reference/phantom-reference-code-detail.md","raw":"---\nprev: ./weak-reference-code-detail\nnext: ./final-reference-code-detail\n---\n\n# PhantomReference源码详解\n\n## 定义\n\n::: tip \nPhantomReference是虚引用，该引用不会影响不会影响对象的生命周期，也无法从虚引用中获取对象实例。\n:::\n\n## 说明\n\n源码介绍部分其实也没多大内容，主要内容都在前面介绍中说完了。PhantomReference类的源码和WeakReference类一样简单：\n\n```java\npublic class PhantomReference<T> extends Reference<T> {\n    public T get() {\n        return null;\n    }\n\n    /**\n     * 这里传入的引用队列也可以为null，但是这样的引用没有任何意义，因为永远不会入队\n     */\n    public PhantomReference(T referent, ReferenceQueue<? super T> q) {\n        super(referent, q);\n    }\n}\n```\n\n可以看到，get方法直接返回null，有一个两个参数的构造方法，传入被引用的对象和引用队列。\n\n<img src=\"./06.png\" width=\"40\"/>那么，这篇也先告一段落吧。 ","slug":"java/reference/phantom-reference-code-detail","published":1,"date":"2018-12-27T08:04:21.486Z","updated":"2018-12-27T08:04:21.486Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5re002lwu9kaa1i2q1i","content":"<h1 id=\"PhantomReference源码详解\"><a href=\"#PhantomReference源码详解\" class=\"headerlink\" title=\"PhantomReference源码详解\"></a>PhantomReference源码详解</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>::: tip<br>PhantomReference是虚引用，该引用不会影响不会影响对象的生命周期，也无法从虚引用中获取对象实例。<br>:::</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>源码介绍部分其实也没多大内容，主要内容都在前面介绍中说完了。PhantomReference类的源码和WeakReference类一样简单：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PhantomReference</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Reference</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 这里传入的引用队列也可以为null，但是这样的引用没有任何意义，因为永远不会入队</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PhantomReference</span><span class=\"params\">(T referent, ReferenceQueue&lt;? <span class=\"keyword\">super</span> T&gt; q)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(referent, q);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，get方法直接返回null，有一个两个参数的构造方法，传入被引用的对象和引用队列。</p>\n<p><img src=\"./06.png\" width=\"40\">那么，这篇也先告一段落吧。 </p>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"PhantomReference源码详解\"><a href=\"#PhantomReference源码详解\" class=\"headerlink\" title=\"PhantomReference源码详解\"></a>PhantomReference源码详解</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>::: tip<br>PhantomReference是虚引用，该引用不会影响不会影响对象的生命周期，也无法从虚引用中获取对象实例。<br>:::</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>源码介绍部分其实也没多大内容，主要内容都在前面介绍中说完了。PhantomReference类的源码和WeakReference类一样简单：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PhantomReference</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Reference</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 这里传入的引用队列也可以为null，但是这样的引用没有任何意义，因为永远不会入队</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PhantomReference</span><span class=\"params\">(T referent, ReferenceQueue&lt;? <span class=\"keyword\">super</span> T&gt; q)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(referent, q);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，get方法直接返回null，有一个两个参数的构造方法，传入被引用的对象和引用队列。</p>\n<p><img src=\"./06.png\" width=\"40\">那么，这篇也先告一段落吧。 </p>\n"},{"prev":"./weak-reference","next":"./reference-code-detail","_content":"\n# 虚引用\n\n## 定义\n\n::: tip \n虚引用是使用PhantomReference创建的引用，虚引用也称为幽灵引用或者幻影引用，是所有引用类型中最弱的一个。一个对象是否有虚引用的存在，完全不会对其生命周期构成影响，也无法通过虚引用获得一个对象实例。\n:::\n\n## 说明\n\n虚引用，正如其名，对一个对象而言，这个引用形同虚设，有和没有一样。\n\n::: tip 虚可达\n如果一个对象与GC Roots之间仅存在虚引用，则称这个对象为`虚可达（phantom reachable）`对象。\n:::\n\n当试图通过虚引用的get()方法取得强引用时，总是会返回null，并且，虚引用必须和引用队列一起使用。既然这么虚，那么它出现的意义何在？？\n\n别慌别慌，自然有它的用处。它的作用在于跟踪垃圾回收过程，在对象被收集器回收时收到一个系统通知。 当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在垃圾回收后，将这个虚引用加入引用队列，在其关联的虚引用出队前，不会彻底销毁该对象。 所以可以通过检查引用队列中是否有相应的虚引用来判断对象是否已经被回收了。\n\n如果一个对象没有强引用和软引用，对于垃圾回收器而言便是可以被清除的，在清除之前，会调用其finalize方法，如果一个对象已经被调用过finalize方法但是还没有被释放，它就变成了一个虚可达对象。\n\n与软引用和弱引用不同，显式使用虚引用可以阻止对象被清除，只有在程序中显式或者隐式移除这个虚引用时，这个已经执行过finalize方法的对象才会被清除。想要显式的移除虚引用的话，只需要将其从引用队列中取出然后扔掉（置为null）即可。\n\n同样来看一个栗子：\n\n```java\npublic class PhantomReferenceTest {\n    private static final List<Object> TEST_DATA = new LinkedList<>();\n    private static final ReferenceQueue<TestClass> QUEUE = new ReferenceQueue<>();\n\n    public static void main(String[] args) {\n        TestClass obj = new TestClass(\"Test\");\n        PhantomReference<TestClass> phantomReference = new PhantomReference<>(obj, QUEUE);\n\n        // 该线程不断读取这个虚引用，并不断往列表里插入数据，以促使系统早点进行GC\n        new Thread(() -> {\n            while (true) {\n                TEST_DATA.add(new byte[1024 * 100]);\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                    Thread.currentThread().interrupt();\n                }\n                System.out.println(phantomReference.get());\n            }\n        }).start();\n\n        // 这个线程不断读取引用队列，当弱引用指向的对象呗回收时，该引用就会被加入到引用队列中\n        new Thread(() -> {\n            while (true) {\n                Reference<? extends TestClass> poll = QUEUE.poll();\n                if (poll != null) {\n                    System.out.println(\"--- 虚引用对象被jvm回收了 ---- \" + poll);\n                    System.out.println(\"--- 回收对象 ---- \" + poll.get());\n                }\n            }\n        }).start();\n\n        obj = null;\n\n        try {\n            Thread.currentThread().join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n            System.exit(1);\n        }\n    }\n\n    static class TestClass {\n        private String name;\n\n        public TestClass(String name) {\n            this.name = name;\n        }\n\n        @Override\n        public String toString() {\n            return \"TestClass - \" + name;\n        }\n    }\n}\n```\n\n使用的虚拟机设置如下：\n\n```bash\n-verbose:gc -Xms4m -Xmx4m -Xmn2m\n```\n\n运行结果如下：\n\n```bash\n[GC (Allocation Failure)  1024K->432K(3584K), 0.0113386 secs]\n[GC (Allocation Failure)  1455K->520K(3584K), 0.0133610 secs]\n[GC (Allocation Failure)  1544K->648K(3584K), 0.0008654 secs]\nnull\nnull\nnull\n[GC (Allocation Failure)  1655K->973K(3584K), 0.0008111 secs]\nnull\n...省略几个null的输出\n[GC (Allocation Failure)  1980K->1997K(3584K), 0.0009289 secs]\n[Full GC (Ergonomics)  1997K->1870K(3584K), 0.0048483 secs]\n--- 弱引用对象被jvm回收了 ---- java.lang.ref.PhantomReference@74cbe23d\n--- 回收对象 ---- null\nnull\n...省略几个null和几次Full GC的输出\n[Full GC (Ergonomics)  2971K->2971K(3584K), 0.0024850 secs]\n[Full GC (Allocation Failure)  2971K->2971K(3584K), 0.0022460 secs]\nException in thread \"Thread-0\" java.lang.OutOfMemoryError: Java heap space\n\tat weakhashmap.PhantomReferenceTest.lambda$main$0(PhantomReferenceTest.java:20)\n\tat weakhashmap.PhantomReferenceTest$$Lambda$1/2065951873.run(Unknown Source)\n\tat java.lang.Thread.run(Thread.java:748)\n```\n\n因为设置的虚拟机堆大小比较小，所以创建一个100k的对象时直接进入了老年代，等到发生Full GC时才会被扫描然后回收。\n\n## 适用场景\n\n使用虚引用的目的就是为了得知对象被GC的时机，所以可以利用虚引用来进行销毁前的一些操作，比如说资源释放等。这个虚引用对于对象而言完全是无感知的，有没有完全一样，但是对于虚引用的使用者而言，就像是待观察的对象的把脉线，可以通过它来观察对象是否已经被回收，从而进行相应的处理。\n\n事实上，虚引用有一个很重要的用途就是用来做堆外内存的释放，DirectByteBuffer就是通过虚引用来实现堆外内存的释放的。 \n\n## 小结\n\n+ 虚引用是最弱的引用\n+ 虚引用对对象而言是无感知的，对象有虚引用跟没有是完全一样的\n+ 虚引用不会影响对象的生命周期\n+ 虚引用可以用来做为对象是否存活的监控","source":"_posts/java/reference/phantom-reference.md","raw":"---\nprev: ./weak-reference\nnext: ./reference-code-detail\n---\n\n# 虚引用\n\n## 定义\n\n::: tip \n虚引用是使用PhantomReference创建的引用，虚引用也称为幽灵引用或者幻影引用，是所有引用类型中最弱的一个。一个对象是否有虚引用的存在，完全不会对其生命周期构成影响，也无法通过虚引用获得一个对象实例。\n:::\n\n## 说明\n\n虚引用，正如其名，对一个对象而言，这个引用形同虚设，有和没有一样。\n\n::: tip 虚可达\n如果一个对象与GC Roots之间仅存在虚引用，则称这个对象为`虚可达（phantom reachable）`对象。\n:::\n\n当试图通过虚引用的get()方法取得强引用时，总是会返回null，并且，虚引用必须和引用队列一起使用。既然这么虚，那么它出现的意义何在？？\n\n别慌别慌，自然有它的用处。它的作用在于跟踪垃圾回收过程，在对象被收集器回收时收到一个系统通知。 当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在垃圾回收后，将这个虚引用加入引用队列，在其关联的虚引用出队前，不会彻底销毁该对象。 所以可以通过检查引用队列中是否有相应的虚引用来判断对象是否已经被回收了。\n\n如果一个对象没有强引用和软引用，对于垃圾回收器而言便是可以被清除的，在清除之前，会调用其finalize方法，如果一个对象已经被调用过finalize方法但是还没有被释放，它就变成了一个虚可达对象。\n\n与软引用和弱引用不同，显式使用虚引用可以阻止对象被清除，只有在程序中显式或者隐式移除这个虚引用时，这个已经执行过finalize方法的对象才会被清除。想要显式的移除虚引用的话，只需要将其从引用队列中取出然后扔掉（置为null）即可。\n\n同样来看一个栗子：\n\n```java\npublic class PhantomReferenceTest {\n    private static final List<Object> TEST_DATA = new LinkedList<>();\n    private static final ReferenceQueue<TestClass> QUEUE = new ReferenceQueue<>();\n\n    public static void main(String[] args) {\n        TestClass obj = new TestClass(\"Test\");\n        PhantomReference<TestClass> phantomReference = new PhantomReference<>(obj, QUEUE);\n\n        // 该线程不断读取这个虚引用，并不断往列表里插入数据，以促使系统早点进行GC\n        new Thread(() -> {\n            while (true) {\n                TEST_DATA.add(new byte[1024 * 100]);\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                    Thread.currentThread().interrupt();\n                }\n                System.out.println(phantomReference.get());\n            }\n        }).start();\n\n        // 这个线程不断读取引用队列，当弱引用指向的对象呗回收时，该引用就会被加入到引用队列中\n        new Thread(() -> {\n            while (true) {\n                Reference<? extends TestClass> poll = QUEUE.poll();\n                if (poll != null) {\n                    System.out.println(\"--- 虚引用对象被jvm回收了 ---- \" + poll);\n                    System.out.println(\"--- 回收对象 ---- \" + poll.get());\n                }\n            }\n        }).start();\n\n        obj = null;\n\n        try {\n            Thread.currentThread().join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n            System.exit(1);\n        }\n    }\n\n    static class TestClass {\n        private String name;\n\n        public TestClass(String name) {\n            this.name = name;\n        }\n\n        @Override\n        public String toString() {\n            return \"TestClass - \" + name;\n        }\n    }\n}\n```\n\n使用的虚拟机设置如下：\n\n```bash\n-verbose:gc -Xms4m -Xmx4m -Xmn2m\n```\n\n运行结果如下：\n\n```bash\n[GC (Allocation Failure)  1024K->432K(3584K), 0.0113386 secs]\n[GC (Allocation Failure)  1455K->520K(3584K), 0.0133610 secs]\n[GC (Allocation Failure)  1544K->648K(3584K), 0.0008654 secs]\nnull\nnull\nnull\n[GC (Allocation Failure)  1655K->973K(3584K), 0.0008111 secs]\nnull\n...省略几个null的输出\n[GC (Allocation Failure)  1980K->1997K(3584K), 0.0009289 secs]\n[Full GC (Ergonomics)  1997K->1870K(3584K), 0.0048483 secs]\n--- 弱引用对象被jvm回收了 ---- java.lang.ref.PhantomReference@74cbe23d\n--- 回收对象 ---- null\nnull\n...省略几个null和几次Full GC的输出\n[Full GC (Ergonomics)  2971K->2971K(3584K), 0.0024850 secs]\n[Full GC (Allocation Failure)  2971K->2971K(3584K), 0.0022460 secs]\nException in thread \"Thread-0\" java.lang.OutOfMemoryError: Java heap space\n\tat weakhashmap.PhantomReferenceTest.lambda$main$0(PhantomReferenceTest.java:20)\n\tat weakhashmap.PhantomReferenceTest$$Lambda$1/2065951873.run(Unknown Source)\n\tat java.lang.Thread.run(Thread.java:748)\n```\n\n因为设置的虚拟机堆大小比较小，所以创建一个100k的对象时直接进入了老年代，等到发生Full GC时才会被扫描然后回收。\n\n## 适用场景\n\n使用虚引用的目的就是为了得知对象被GC的时机，所以可以利用虚引用来进行销毁前的一些操作，比如说资源释放等。这个虚引用对于对象而言完全是无感知的，有没有完全一样，但是对于虚引用的使用者而言，就像是待观察的对象的把脉线，可以通过它来观察对象是否已经被回收，从而进行相应的处理。\n\n事实上，虚引用有一个很重要的用途就是用来做堆外内存的释放，DirectByteBuffer就是通过虚引用来实现堆外内存的释放的。 \n\n## 小结\n\n+ 虚引用是最弱的引用\n+ 虚引用对对象而言是无感知的，对象有虚引用跟没有是完全一样的\n+ 虚引用不会影响对象的生命周期\n+ 虚引用可以用来做为对象是否存活的监控","slug":"java/reference/phantom-reference","published":1,"date":"2018-12-27T08:04:21.493Z","updated":"2018-12-27T08:04:21.494Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5rf002nwu9kot4wh3g2","content":"<h1 id=\"虚引用\"><a href=\"#虚引用\" class=\"headerlink\" title=\"虚引用\"></a>虚引用</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>::: tip<br>虚引用是使用PhantomReference创建的引用，虚引用也称为幽灵引用或者幻影引用，是所有引用类型中最弱的一个。一个对象是否有虚引用的存在，完全不会对其生命周期构成影响，也无法通过虚引用获得一个对象实例。<br>:::</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>虚引用，正如其名，对一个对象而言，这个引用形同虚设，有和没有一样。</p>\n<p>::: tip 虚可达<br>如果一个对象与GC Roots之间仅存在虚引用，则称这个对象为<code>虚可达（phantom reachable）</code>对象。<br>:::</p>\n<p>当试图通过虚引用的get()方法取得强引用时，总是会返回null，并且，虚引用必须和引用队列一起使用。既然这么虚，那么它出现的意义何在？？</p>\n<p>别慌别慌，自然有它的用处。它的作用在于跟踪垃圾回收过程，在对象被收集器回收时收到一个系统通知。 当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在垃圾回收后，将这个虚引用加入引用队列，在其关联的虚引用出队前，不会彻底销毁该对象。 所以可以通过检查引用队列中是否有相应的虚引用来判断对象是否已经被回收了。</p>\n<p>如果一个对象没有强引用和软引用，对于垃圾回收器而言便是可以被清除的，在清除之前，会调用其finalize方法，如果一个对象已经被调用过finalize方法但是还没有被释放，它就变成了一个虚可达对象。</p>\n<p>与软引用和弱引用不同，显式使用虚引用可以阻止对象被清除，只有在程序中显式或者隐式移除这个虚引用时，这个已经执行过finalize方法的对象才会被清除。想要显式的移除虚引用的话，只需要将其从引用队列中取出然后扔掉（置为null）即可。</p>\n<p>同样来看一个栗子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PhantomReferenceTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> List&lt;Object&gt; TEST_DATA = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ReferenceQueue&lt;TestClass&gt; QUEUE = <span class=\"keyword\">new</span> ReferenceQueue&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        TestClass obj = <span class=\"keyword\">new</span> TestClass(<span class=\"string\">\"Test\"</span>);</span><br><span class=\"line\">        PhantomReference&lt;TestClass&gt; phantomReference = <span class=\"keyword\">new</span> PhantomReference&lt;&gt;(obj, QUEUE);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 该线程不断读取这个虚引用，并不断往列表里插入数据，以促使系统早点进行GC</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                TEST_DATA.add(<span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span> * <span class=\"number\">100</span>]);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                    Thread.currentThread().interrupt();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(phantomReference.get());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 这个线程不断读取引用队列，当弱引用指向的对象呗回收时，该引用就会被加入到引用队列中</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                Reference&lt;? extends TestClass&gt; poll = QUEUE.poll();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (poll != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"--- 虚引用对象被jvm回收了 ---- \"</span> + poll);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"--- 回收对象 ---- \"</span> + poll.get());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        obj = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.currentThread().join();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            System.exit(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestClass</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestClass</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"TestClass - \"</span> + name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用的虚拟机设置如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-verbose:gc -Xms4m -Xmx4m -Xmn2m</span><br></pre></td></tr></table></figure>\n<p>运行结果如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[GC (Allocation Failure)  1024K-&gt;432K(3584K), 0.0113386 secs]</span><br><span class=\"line\">[GC (Allocation Failure)  1455K-&gt;520K(3584K), 0.0133610 secs]</span><br><span class=\"line\">[GC (Allocation Failure)  1544K-&gt;648K(3584K), 0.0008654 secs]</span><br><span class=\"line\">null</span><br><span class=\"line\">null</span><br><span class=\"line\">null</span><br><span class=\"line\">[GC (Allocation Failure)  1655K-&gt;973K(3584K), 0.0008111 secs]</span><br><span class=\"line\">null</span><br><span class=\"line\">...省略几个null的输出</span><br><span class=\"line\">[GC (Allocation Failure)  1980K-&gt;1997K(3584K), 0.0009289 secs]</span><br><span class=\"line\">[Full GC (Ergonomics)  1997K-&gt;1870K(3584K), 0.0048483 secs]</span><br><span class=\"line\">--- 弱引用对象被jvm回收了 ---- java.lang.ref.PhantomReference@74cbe23d</span><br><span class=\"line\">--- 回收对象 ---- null</span><br><span class=\"line\">null</span><br><span class=\"line\">...省略几个null和几次Full GC的输出</span><br><span class=\"line\">[Full GC (Ergonomics)  2971K-&gt;2971K(3584K), 0.0024850 secs]</span><br><span class=\"line\">[Full GC (Allocation Failure)  2971K-&gt;2971K(3584K), 0.0022460 secs]</span><br><span class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">\"Thread-0\"</span> java.lang.OutOfMemoryError: Java heap space</span><br><span class=\"line\">\tat weakhashmap.PhantomReferenceTest.lambda<span class=\"variable\">$main</span><span class=\"variable\">$0</span>(PhantomReferenceTest.java:20)</span><br><span class=\"line\">\tat weakhashmap.PhantomReferenceTest$<span class=\"variable\">$Lambda</span><span class=\"variable\">$1</span>/2065951873.run(Unknown Source)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure>\n<p>因为设置的虚拟机堆大小比较小，所以创建一个100k的对象时直接进入了老年代，等到发生Full GC时才会被扫描然后回收。</p>\n<h2 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><p>使用虚引用的目的就是为了得知对象被GC的时机，所以可以利用虚引用来进行销毁前的一些操作，比如说资源释放等。这个虚引用对于对象而言完全是无感知的，有没有完全一样，但是对于虚引用的使用者而言，就像是待观察的对象的把脉线，可以通过它来观察对象是否已经被回收，从而进行相应的处理。</p>\n<p>事实上，虚引用有一个很重要的用途就是用来做堆外内存的释放，DirectByteBuffer就是通过虚引用来实现堆外内存的释放的。 </p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li>虚引用是最弱的引用</li>\n<li>虚引用对对象而言是无感知的，对象有虚引用跟没有是完全一样的</li>\n<li>虚引用不会影响对象的生命周期</li>\n<li>虚引用可以用来做为对象是否存活的监控</li>\n</ul>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"虚引用\"><a href=\"#虚引用\" class=\"headerlink\" title=\"虚引用\"></a>虚引用</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>::: tip<br>虚引用是使用PhantomReference创建的引用，虚引用也称为幽灵引用或者幻影引用，是所有引用类型中最弱的一个。一个对象是否有虚引用的存在，完全不会对其生命周期构成影响，也无法通过虚引用获得一个对象实例。<br>:::</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>虚引用，正如其名，对一个对象而言，这个引用形同虚设，有和没有一样。</p>\n<p>::: tip 虚可达<br>如果一个对象与GC Roots之间仅存在虚引用，则称这个对象为<code>虚可达（phantom reachable）</code>对象。<br>:::</p>\n<p>当试图通过虚引用的get()方法取得强引用时，总是会返回null，并且，虚引用必须和引用队列一起使用。既然这么虚，那么它出现的意义何在？？</p>\n<p>别慌别慌，自然有它的用处。它的作用在于跟踪垃圾回收过程，在对象被收集器回收时收到一个系统通知。 当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在垃圾回收后，将这个虚引用加入引用队列，在其关联的虚引用出队前，不会彻底销毁该对象。 所以可以通过检查引用队列中是否有相应的虚引用来判断对象是否已经被回收了。</p>\n<p>如果一个对象没有强引用和软引用，对于垃圾回收器而言便是可以被清除的，在清除之前，会调用其finalize方法，如果一个对象已经被调用过finalize方法但是还没有被释放，它就变成了一个虚可达对象。</p>\n<p>与软引用和弱引用不同，显式使用虚引用可以阻止对象被清除，只有在程序中显式或者隐式移除这个虚引用时，这个已经执行过finalize方法的对象才会被清除。想要显式的移除虚引用的话，只需要将其从引用队列中取出然后扔掉（置为null）即可。</p>\n<p>同样来看一个栗子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PhantomReferenceTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> List&lt;Object&gt; TEST_DATA = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ReferenceQueue&lt;TestClass&gt; QUEUE = <span class=\"keyword\">new</span> ReferenceQueue&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        TestClass obj = <span class=\"keyword\">new</span> TestClass(<span class=\"string\">\"Test\"</span>);</span><br><span class=\"line\">        PhantomReference&lt;TestClass&gt; phantomReference = <span class=\"keyword\">new</span> PhantomReference&lt;&gt;(obj, QUEUE);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 该线程不断读取这个虚引用，并不断往列表里插入数据，以促使系统早点进行GC</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                TEST_DATA.add(<span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span> * <span class=\"number\">100</span>]);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                    Thread.currentThread().interrupt();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(phantomReference.get());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 这个线程不断读取引用队列，当弱引用指向的对象呗回收时，该引用就会被加入到引用队列中</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                Reference&lt;? extends TestClass&gt; poll = QUEUE.poll();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (poll != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"--- 虚引用对象被jvm回收了 ---- \"</span> + poll);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"--- 回收对象 ---- \"</span> + poll.get());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        obj = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.currentThread().join();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            System.exit(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestClass</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestClass</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"TestClass - \"</span> + name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用的虚拟机设置如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-verbose:gc -Xms4m -Xmx4m -Xmn2m</span><br></pre></td></tr></table></figure>\n<p>运行结果如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[GC (Allocation Failure)  1024K-&gt;432K(3584K), 0.0113386 secs]</span><br><span class=\"line\">[GC (Allocation Failure)  1455K-&gt;520K(3584K), 0.0133610 secs]</span><br><span class=\"line\">[GC (Allocation Failure)  1544K-&gt;648K(3584K), 0.0008654 secs]</span><br><span class=\"line\">null</span><br><span class=\"line\">null</span><br><span class=\"line\">null</span><br><span class=\"line\">[GC (Allocation Failure)  1655K-&gt;973K(3584K), 0.0008111 secs]</span><br><span class=\"line\">null</span><br><span class=\"line\">...省略几个null的输出</span><br><span class=\"line\">[GC (Allocation Failure)  1980K-&gt;1997K(3584K), 0.0009289 secs]</span><br><span class=\"line\">[Full GC (Ergonomics)  1997K-&gt;1870K(3584K), 0.0048483 secs]</span><br><span class=\"line\">--- 弱引用对象被jvm回收了 ---- java.lang.ref.PhantomReference@74cbe23d</span><br><span class=\"line\">--- 回收对象 ---- null</span><br><span class=\"line\">null</span><br><span class=\"line\">...省略几个null和几次Full GC的输出</span><br><span class=\"line\">[Full GC (Ergonomics)  2971K-&gt;2971K(3584K), 0.0024850 secs]</span><br><span class=\"line\">[Full GC (Allocation Failure)  2971K-&gt;2971K(3584K), 0.0022460 secs]</span><br><span class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">\"Thread-0\"</span> java.lang.OutOfMemoryError: Java heap space</span><br><span class=\"line\">\tat weakhashmap.PhantomReferenceTest.lambda<span class=\"variable\">$main</span><span class=\"variable\">$0</span>(PhantomReferenceTest.java:20)</span><br><span class=\"line\">\tat weakhashmap.PhantomReferenceTest$<span class=\"variable\">$Lambda</span><span class=\"variable\">$1</span>/2065951873.run(Unknown Source)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure>\n<p>因为设置的虚拟机堆大小比较小，所以创建一个100k的对象时直接进入了老年代，等到发生Full GC时才会被扫描然后回收。</p>\n<h2 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><p>使用虚引用的目的就是为了得知对象被GC的时机，所以可以利用虚引用来进行销毁前的一些操作，比如说资源释放等。这个虚引用对于对象而言完全是无感知的，有没有完全一样，但是对于虚引用的使用者而言，就像是待观察的对象的把脉线，可以通过它来观察对象是否已经被回收，从而进行相应的处理。</p>\n<p>事实上，虚引用有一个很重要的用途就是用来做堆外内存的释放，DirectByteBuffer就是通过虚引用来实现堆外内存的释放的。 </p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li>虚引用是最弱的引用</li>\n<li>虚引用对对象而言是无感知的，对象有虚引用跟没有是完全一样的</li>\n<li>虚引用不会影响对象的生命周期</li>\n<li>虚引用可以用来做为对象是否存活的监控</li>\n</ul>\n"},{"prev":"./phantom-reference","next":"./reference-queue-code-detail","_content":"\n# Reference源码详解\n\n![Reference-relastionship](./reference-1.png)\n\n## 定义\n\n::: tip \nReference是所有引用类型的父类，定义了引用的公共行为和操作。\n:::\n\n::: warning 说明\nreference指代引用对象本身，referent指代reference引用的对象，下文介绍会以reference，referent形式出现。\n:::\n\n## 说明\n\nReference类与垃圾回收是密切配合的，所以该类不能被直接子类化。简单来讲，Reference的继承类都是经过严格设计的，甚至连成员变量的先后顺序都不能改变，所以在代码中直接继承Reference类是没有任何意义的。但是可以继承Reference类的子类。\n\n::: tip 例如\nFinalizer 继承自 FinalReference，Cleaner 继承自 PhantomReference\n:::\n\n## 构造函数\n\nReference类中有两个构造函数，一个需要传入引用队列，另一个则不需要。\n\n这个队列的意义在于增加一种判断机制，可以在外部通过监控这个队列来判断对象是否被回收。如果一个对象即将被回收，那么引用这个对象的reference对象就会被放到这个队列中。通过监控这个队列，就可以取出这个reference后再进行一些善后处理。<img src=\"./0003.png\" width=\"50\"/>\n\n如果没有这个队列，就只能通过不断地轮询reference对象，通过get方法是否返回null( phantomReference对象不能这样做，其get方法始终返回null，因此它只有带queue的构造函数 )来判断对象是否被回收。\n\n这两种方法均有相应的使用场景，具体使用需要具体情况具体分析。比如在weakHashMap中，就通过查询queue的数据，来判定是否有对象将被回收。而ThreadLocalMap，则采用判断get()是否为null来进行处理。\n\n```java\n/* -- Constructors -- */\nReference(T referent) {\n    this(referent, null);\n}\n\nReference(T referent, ReferenceQueue<? super T> queue) {\n    this.referent = referent;\n    this.queue = (queue == null) ? ReferenceQueue.NULL : queue;\n}\n```\n\n## 内部成员\n\nReference类内部有这么几个成员变量：\n\nreferent：保存reference指向的对象。\n\n``` java\nprivate T referent;\n```\n\nqueue：引用对象关联的引用队列。是对象即将被回收时所要通知的队列。当对象将被回收时，reference对象( 而不是referent引用的对象 )会被放到queue里面，然后外部程序即可通过监控这个queue拿到相应的数据了。\n\n这里的queue( 即，ReferenceQueue对象 )名义上是一个队列，实际内部是使用单链表来表示的单向队列，可以理解为queue就是一个链表，其自身仅存储当前的head节点，后面的节点由每个reference节点通过next来保持即可。\n\n```java\nvolatile ReferenceQueue<? super T> queue;\n```\n\nnext：指向下一个引用，Reference是一个单链表的结构。\n\n```java\nReference next;\n```\ndiscovered：表示要处理的对象的下一个对象。\n\n```java\n/* 当处于active状态: discovered链表中下一个待处理对象\n * 当处于pending状态: pending列表中的下一个对象\n * 其它状态:   NULL\n */\ntransient private Reference<T> discovered;\n```\n\nlock：内部同步锁对象。用作在操作pending链表时的同步对象。注意这是一个静态对象，意味着所有Reference对象共用同一个锁。\n\n```java\nstatic private class Lock { }\nprivate static Lock lock = new Lock();\n```\n\npending：等待添加到queue中的元素链表。注意这是一个静态对象，意味着所有Reference对象共用同一个pending队列。\n\n```java\n/* 用来保存那些需要被放入队列中的reference，收集器会把引用添加到这个列表里来，\n * Reference-handler线程会从中移除它们。\n * 这个列表由上面的lock对象锁进行保护。列表使用discovered字段来链接它的元素。\n */\nprivate static Reference<Object> pending = null;\n```\n\n::: warning 说明\nqueue队列使用next来查找下一个reference，pending队列使用discovered来查找下一个reference。\n:::\n\n## Reference状态\n\n在Reference类中，有一段很长的注释，来对内部对象referent的状态进行了说明。\n\n> Active: \n> reference如果处于此状态，会受到垃圾处理器的特殊处理。当垃圾回收器检测到referent已经更改为合适的状态后(没有任何强引用和软引用关联)，会在某个时间将实例的状态更改为Pending或者Inactive。具体取决于实例是否在创建时注册到一个引用队列中。\n> 在前一种情况下（将状态更改为Pending），他还会将实例添加到pending-Reference列表中。新创建的实例处于活动状态。\n>\n> Pending:\n> 实例如果处于此状态，表明它是pending-Reference列表中的一个元素，等待被Reference-handler线程做入队处理。未注册引用队列的实例永远不会处于该状态。\n>\n> Enqueued: \n> 实例如果处于此状态，表明它已经是它注册的引用队列中的一个元素，当它被从引用队列中移除时，它的状态将会变为Inactive，未注册引用队列的实例永远不会处于该状态。\n>\n> Inactive: \n> 实例如果处于此状态，那么它就是个废实例了(滑稽)，它的状态将永远不会再改变了。\n\n所以实例一共有四种状态，Active（活跃状态）、Pending（半死不活状态）、Enqueued（濒死状态）、Inactive（凉凉状态）。当然，Pending和Enqueued状态是引用实例在创建时注册了引用队列才会有。\n\n一个reference处于Active状态时，表示它是活跃正常的，垃圾回收器会监视这个引用的referent，如果扫描到它没有任何强引用关联时就会进行回收判定了。\n\n如果判定为需要进行回收，则判断其是否注册了引用队列，如果有的话将reference的状态置为pending。当reference处于pending状态时，表明已经准备将它放入引用队列中，在这个状态下要处理的对象将逐个放入queue中。在这个时间窗口期，相应的引用对象为pending状态。\n\n当它进入到Enqueued状态时，表明已经引用实例已经被放到queue当中了，准备由外部线程来轮询获取相应信息。此时引用指向的对即将被垃圾回收器回收掉了。\n\n当它变成Inactive状态时，表明它已经凉透了，它的生命已经到了尽头。不管你用什么方式，也救不了它了。\n\nJVM中并没有显示定义这样的状态，而是通过next和queue来进行判断。\n\n```bash\nActive：如果创建Reference对象时，没有传入ReferenceQueue，queue=ReferenceQueue.NULL。如果有传入，则queue指向传入的ReferenceQueue队列对象。next == null；\n\nPending：queue为初始化时传入ReferenceQueue对象；next == this；\n\nEnqueue：queue == ReferenceQueue.ENQUEUED；next为queue中下一个reference对象，或者若为最后一个了next == this；\n\nInactive：queue == ReferenceQueue.NULL; next == this.\n```\n\n如果next==null，则reference处于Active状态；\n\n如果next!=null，queue == ReferenceQueue.NULL，则reference处于Inactive状态；\n\n如果next!=null，queue == ReferenceQueue.ENQUEUED，则reference处于Enqueue状态；\n\n如果next != null，queue != ReferenceQueue.NULL && queu != ReferenceQueue.ENQUEUED ，则reference处于Pending状态。\n\n![Reference-relastionship](./reference-2.png)\n\n## ReferenceHandler线程\n\nReference类中有一个特殊的线程叫ReferenceHandler，专门处理那些pending链表中的引用对象。ReferenceHandler类是Reference类的一个静态内部类，继承自Thread，所以这条线程就叫它ReferenceHandler线程。<img src=\"./0019.png\" width=\"50\"/>\n\n```java\nprivate static class ReferenceHandler extends Thread {\n    // 确保类已经被初始化\n    private static void ensureClassInitialized(Class<?> clazz) {\n        try {\n            Class.forName(clazz.getName(), true, clazz.getClassLoader());\n        } catch (ClassNotFoundException e) {\n            throw (Error) new NoClassDefFoundError(e.getMessage()).initCause(e);\n        }\n    }\n\n    static {\n        // 预加载并初始化 InterruptedException 和 Cleaner 类\n        // 来避免出现在循环运行过程中时由于内存不足而无法加载它们\t\t \n        ensureClassInitialized(InterruptedException.class);\n        ensureClassInitialized(Cleaner.class);\n    }\n\n    ReferenceHandler(ThreadGroup g, String name) {\n        super(g, name);\n    }\n\n    public void run() {\n        // 死循环调用\n        while (true) {\n            tryHandlePending(true);\n        }\n    }\n}\n```\n\n这个类其实也很简单，就是先预加载了两个类，然后run方法中使用了while死循环运行tryHandlerPending方法。这个方法通过名字就能大概判断，应该是来处理pending链表的，让我们看看它的内部代码：\n\n```java\nstatic {\n    ThreadGroup tg = Thread.currentThread().getThreadGroup();\n    for (ThreadGroup tgn = tg;\n         tgn != null;\n         tg = tgn, tgn = tg.getParent());\n    // 将handler线程注册到根线程组中并设置最高优先级\n    Thread handler = new ReferenceHandler(tg, \"Reference Handler\");\n    handler.setPriority(Thread.MAX_PRIORITY);\n    handler.setDaemon(true);\n    handler.start();\n\n    // 覆盖jvm的默认处理方式\n    SharedSecrets.setJavaLangRefAccess(new JavaLangRefAccess() {\n        @Override\n        public boolean tryHandlePendingReference() {\n            return tryHandlePending(false);\n        }\n    });\n}\n```\n\n这里其实就是在静态代码段里在根线程组中启动了一条最高优先级的ReferenceHandler线程，并覆盖了JVM中对pending的默认处理方式。嗯，关键点就在 tryHandlePending(false) 这一句了。接下来再看看这里的实现：\n\n```java\nstatic boolean tryHandlePending(boolean waitForNotify) {\n    Reference<Object> r;\n    Cleaner c;\n    try {\n        synchronized (lock) {\n            // 如果pending链表不为null，则开始进行处理\n            if (pending != null) {\n                r = pending;\n                // 使用 'instanceof' 有时会导致OOM\n                // 所以在将r从链表中摘除时先进行这个操作\n                c = r instanceof Cleaner ? (Cleaner) r : null;\n                // 移除头结点，将pending指向其后一个节点\n                pending = r.discovered;\n                // 此时r为原来pending链表的头结点，已经从链表中脱离出来\n                r.discovered = null;\n            } else {\n                // 在锁上等待可能会造成OOM，因为它会试图分配exception对象\n                if (waitForNotify) {\n                    lock.wait();\n                }\n                // 重试\n                return waitForNotify;\n            }\n        }\n    } catch (OutOfMemoryError x) {\n        Thread.yield();\n        // 重试\n        return true;\n    } catch (InterruptedException x) {\n        // 重试\n        return true;\n    }\n\n    // 如果摘除的元素是Cleaner类型，则执行其clean方法\n    if (c != null) {\n        c.clean();\n        return true;\n    }\n\n    ReferenceQueue<? super Object> q = r.queue;\n    // 最后，如果其引用队列不为空，则将该元素入队\n    if (q != ReferenceQueue.NULL) q.enqueue(r);\n    return true;\n}\n```\n\n所以，这里整个过程就是摘取pending链表的头结点，如果是Cleaner，则执行clean操作，否则进行入队处理。\n\n## 常用方法\n\n```java\n/**\n  * 返回引用指向的对象，如果referent已经被程序或者垃圾回收器清理，则返回null。\n  */\npublic T get() {\n    return this.referent;\n}\n\n/**\n  * 清理referent对象，调用该方法不会使得这个对象进入Enqueued状态。\n  */\npublic void clear() {\n    this.referent = null;\n}\n\n/**\n  * 判断该reference是否已经入队。\n  */\npublic boolean isEnqueued() {\n    return (this.queue == ReferenceQueue.ENQUEUED);\n}\n\n/**\n  * 将该引用添加到其注册的引用队列中。\n  * 如果reference成功入队则返回true，如果它已经在队列中或者创建时没有注册队列则返回false\n  */\npublic boolean enqueue() {\n    return this.queue.enqueue(this);\n}\n```\n\nReference类就是用来包装对象的，通过跟JVM的一些密切配合，使得被包裹其中的对象能够被JVM特殊处理，所以使用Reference对象可以使得我们在更细粒度上控制对象的生命周期。\n\n## 小结\n\n+ Reference类是所有引用类的父类\n\n+ Reference中可以在创建时注册引用队列\n\n+ Reference有四种状态，如果创建时没有注册引用队列，则只有两种状态\n\n+ 可以通过get方法获取内部的对象，但如果对象已经被回收了，则会返回null \n\n\n\n\n\n\n\n\n\n","source":"_posts/java/reference/reference-code-detail.md","raw":"---\nprev: ./phantom-reference\nnext: ./reference-queue-code-detail\n---\n\n# Reference源码详解\n\n![Reference-relastionship](./reference-1.png)\n\n## 定义\n\n::: tip \nReference是所有引用类型的父类，定义了引用的公共行为和操作。\n:::\n\n::: warning 说明\nreference指代引用对象本身，referent指代reference引用的对象，下文介绍会以reference，referent形式出现。\n:::\n\n## 说明\n\nReference类与垃圾回收是密切配合的，所以该类不能被直接子类化。简单来讲，Reference的继承类都是经过严格设计的，甚至连成员变量的先后顺序都不能改变，所以在代码中直接继承Reference类是没有任何意义的。但是可以继承Reference类的子类。\n\n::: tip 例如\nFinalizer 继承自 FinalReference，Cleaner 继承自 PhantomReference\n:::\n\n## 构造函数\n\nReference类中有两个构造函数，一个需要传入引用队列，另一个则不需要。\n\n这个队列的意义在于增加一种判断机制，可以在外部通过监控这个队列来判断对象是否被回收。如果一个对象即将被回收，那么引用这个对象的reference对象就会被放到这个队列中。通过监控这个队列，就可以取出这个reference后再进行一些善后处理。<img src=\"./0003.png\" width=\"50\"/>\n\n如果没有这个队列，就只能通过不断地轮询reference对象，通过get方法是否返回null( phantomReference对象不能这样做，其get方法始终返回null，因此它只有带queue的构造函数 )来判断对象是否被回收。\n\n这两种方法均有相应的使用场景，具体使用需要具体情况具体分析。比如在weakHashMap中，就通过查询queue的数据，来判定是否有对象将被回收。而ThreadLocalMap，则采用判断get()是否为null来进行处理。\n\n```java\n/* -- Constructors -- */\nReference(T referent) {\n    this(referent, null);\n}\n\nReference(T referent, ReferenceQueue<? super T> queue) {\n    this.referent = referent;\n    this.queue = (queue == null) ? ReferenceQueue.NULL : queue;\n}\n```\n\n## 内部成员\n\nReference类内部有这么几个成员变量：\n\nreferent：保存reference指向的对象。\n\n``` java\nprivate T referent;\n```\n\nqueue：引用对象关联的引用队列。是对象即将被回收时所要通知的队列。当对象将被回收时，reference对象( 而不是referent引用的对象 )会被放到queue里面，然后外部程序即可通过监控这个queue拿到相应的数据了。\n\n这里的queue( 即，ReferenceQueue对象 )名义上是一个队列，实际内部是使用单链表来表示的单向队列，可以理解为queue就是一个链表，其自身仅存储当前的head节点，后面的节点由每个reference节点通过next来保持即可。\n\n```java\nvolatile ReferenceQueue<? super T> queue;\n```\n\nnext：指向下一个引用，Reference是一个单链表的结构。\n\n```java\nReference next;\n```\ndiscovered：表示要处理的对象的下一个对象。\n\n```java\n/* 当处于active状态: discovered链表中下一个待处理对象\n * 当处于pending状态: pending列表中的下一个对象\n * 其它状态:   NULL\n */\ntransient private Reference<T> discovered;\n```\n\nlock：内部同步锁对象。用作在操作pending链表时的同步对象。注意这是一个静态对象，意味着所有Reference对象共用同一个锁。\n\n```java\nstatic private class Lock { }\nprivate static Lock lock = new Lock();\n```\n\npending：等待添加到queue中的元素链表。注意这是一个静态对象，意味着所有Reference对象共用同一个pending队列。\n\n```java\n/* 用来保存那些需要被放入队列中的reference，收集器会把引用添加到这个列表里来，\n * Reference-handler线程会从中移除它们。\n * 这个列表由上面的lock对象锁进行保护。列表使用discovered字段来链接它的元素。\n */\nprivate static Reference<Object> pending = null;\n```\n\n::: warning 说明\nqueue队列使用next来查找下一个reference，pending队列使用discovered来查找下一个reference。\n:::\n\n## Reference状态\n\n在Reference类中，有一段很长的注释，来对内部对象referent的状态进行了说明。\n\n> Active: \n> reference如果处于此状态，会受到垃圾处理器的特殊处理。当垃圾回收器检测到referent已经更改为合适的状态后(没有任何强引用和软引用关联)，会在某个时间将实例的状态更改为Pending或者Inactive。具体取决于实例是否在创建时注册到一个引用队列中。\n> 在前一种情况下（将状态更改为Pending），他还会将实例添加到pending-Reference列表中。新创建的实例处于活动状态。\n>\n> Pending:\n> 实例如果处于此状态，表明它是pending-Reference列表中的一个元素，等待被Reference-handler线程做入队处理。未注册引用队列的实例永远不会处于该状态。\n>\n> Enqueued: \n> 实例如果处于此状态，表明它已经是它注册的引用队列中的一个元素，当它被从引用队列中移除时，它的状态将会变为Inactive，未注册引用队列的实例永远不会处于该状态。\n>\n> Inactive: \n> 实例如果处于此状态，那么它就是个废实例了(滑稽)，它的状态将永远不会再改变了。\n\n所以实例一共有四种状态，Active（活跃状态）、Pending（半死不活状态）、Enqueued（濒死状态）、Inactive（凉凉状态）。当然，Pending和Enqueued状态是引用实例在创建时注册了引用队列才会有。\n\n一个reference处于Active状态时，表示它是活跃正常的，垃圾回收器会监视这个引用的referent，如果扫描到它没有任何强引用关联时就会进行回收判定了。\n\n如果判定为需要进行回收，则判断其是否注册了引用队列，如果有的话将reference的状态置为pending。当reference处于pending状态时，表明已经准备将它放入引用队列中，在这个状态下要处理的对象将逐个放入queue中。在这个时间窗口期，相应的引用对象为pending状态。\n\n当它进入到Enqueued状态时，表明已经引用实例已经被放到queue当中了，准备由外部线程来轮询获取相应信息。此时引用指向的对即将被垃圾回收器回收掉了。\n\n当它变成Inactive状态时，表明它已经凉透了，它的生命已经到了尽头。不管你用什么方式，也救不了它了。\n\nJVM中并没有显示定义这样的状态，而是通过next和queue来进行判断。\n\n```bash\nActive：如果创建Reference对象时，没有传入ReferenceQueue，queue=ReferenceQueue.NULL。如果有传入，则queue指向传入的ReferenceQueue队列对象。next == null；\n\nPending：queue为初始化时传入ReferenceQueue对象；next == this；\n\nEnqueue：queue == ReferenceQueue.ENQUEUED；next为queue中下一个reference对象，或者若为最后一个了next == this；\n\nInactive：queue == ReferenceQueue.NULL; next == this.\n```\n\n如果next==null，则reference处于Active状态；\n\n如果next!=null，queue == ReferenceQueue.NULL，则reference处于Inactive状态；\n\n如果next!=null，queue == ReferenceQueue.ENQUEUED，则reference处于Enqueue状态；\n\n如果next != null，queue != ReferenceQueue.NULL && queu != ReferenceQueue.ENQUEUED ，则reference处于Pending状态。\n\n![Reference-relastionship](./reference-2.png)\n\n## ReferenceHandler线程\n\nReference类中有一个特殊的线程叫ReferenceHandler，专门处理那些pending链表中的引用对象。ReferenceHandler类是Reference类的一个静态内部类，继承自Thread，所以这条线程就叫它ReferenceHandler线程。<img src=\"./0019.png\" width=\"50\"/>\n\n```java\nprivate static class ReferenceHandler extends Thread {\n    // 确保类已经被初始化\n    private static void ensureClassInitialized(Class<?> clazz) {\n        try {\n            Class.forName(clazz.getName(), true, clazz.getClassLoader());\n        } catch (ClassNotFoundException e) {\n            throw (Error) new NoClassDefFoundError(e.getMessage()).initCause(e);\n        }\n    }\n\n    static {\n        // 预加载并初始化 InterruptedException 和 Cleaner 类\n        // 来避免出现在循环运行过程中时由于内存不足而无法加载它们\t\t \n        ensureClassInitialized(InterruptedException.class);\n        ensureClassInitialized(Cleaner.class);\n    }\n\n    ReferenceHandler(ThreadGroup g, String name) {\n        super(g, name);\n    }\n\n    public void run() {\n        // 死循环调用\n        while (true) {\n            tryHandlePending(true);\n        }\n    }\n}\n```\n\n这个类其实也很简单，就是先预加载了两个类，然后run方法中使用了while死循环运行tryHandlerPending方法。这个方法通过名字就能大概判断，应该是来处理pending链表的，让我们看看它的内部代码：\n\n```java\nstatic {\n    ThreadGroup tg = Thread.currentThread().getThreadGroup();\n    for (ThreadGroup tgn = tg;\n         tgn != null;\n         tg = tgn, tgn = tg.getParent());\n    // 将handler线程注册到根线程组中并设置最高优先级\n    Thread handler = new ReferenceHandler(tg, \"Reference Handler\");\n    handler.setPriority(Thread.MAX_PRIORITY);\n    handler.setDaemon(true);\n    handler.start();\n\n    // 覆盖jvm的默认处理方式\n    SharedSecrets.setJavaLangRefAccess(new JavaLangRefAccess() {\n        @Override\n        public boolean tryHandlePendingReference() {\n            return tryHandlePending(false);\n        }\n    });\n}\n```\n\n这里其实就是在静态代码段里在根线程组中启动了一条最高优先级的ReferenceHandler线程，并覆盖了JVM中对pending的默认处理方式。嗯，关键点就在 tryHandlePending(false) 这一句了。接下来再看看这里的实现：\n\n```java\nstatic boolean tryHandlePending(boolean waitForNotify) {\n    Reference<Object> r;\n    Cleaner c;\n    try {\n        synchronized (lock) {\n            // 如果pending链表不为null，则开始进行处理\n            if (pending != null) {\n                r = pending;\n                // 使用 'instanceof' 有时会导致OOM\n                // 所以在将r从链表中摘除时先进行这个操作\n                c = r instanceof Cleaner ? (Cleaner) r : null;\n                // 移除头结点，将pending指向其后一个节点\n                pending = r.discovered;\n                // 此时r为原来pending链表的头结点，已经从链表中脱离出来\n                r.discovered = null;\n            } else {\n                // 在锁上等待可能会造成OOM，因为它会试图分配exception对象\n                if (waitForNotify) {\n                    lock.wait();\n                }\n                // 重试\n                return waitForNotify;\n            }\n        }\n    } catch (OutOfMemoryError x) {\n        Thread.yield();\n        // 重试\n        return true;\n    } catch (InterruptedException x) {\n        // 重试\n        return true;\n    }\n\n    // 如果摘除的元素是Cleaner类型，则执行其clean方法\n    if (c != null) {\n        c.clean();\n        return true;\n    }\n\n    ReferenceQueue<? super Object> q = r.queue;\n    // 最后，如果其引用队列不为空，则将该元素入队\n    if (q != ReferenceQueue.NULL) q.enqueue(r);\n    return true;\n}\n```\n\n所以，这里整个过程就是摘取pending链表的头结点，如果是Cleaner，则执行clean操作，否则进行入队处理。\n\n## 常用方法\n\n```java\n/**\n  * 返回引用指向的对象，如果referent已经被程序或者垃圾回收器清理，则返回null。\n  */\npublic T get() {\n    return this.referent;\n}\n\n/**\n  * 清理referent对象，调用该方法不会使得这个对象进入Enqueued状态。\n  */\npublic void clear() {\n    this.referent = null;\n}\n\n/**\n  * 判断该reference是否已经入队。\n  */\npublic boolean isEnqueued() {\n    return (this.queue == ReferenceQueue.ENQUEUED);\n}\n\n/**\n  * 将该引用添加到其注册的引用队列中。\n  * 如果reference成功入队则返回true，如果它已经在队列中或者创建时没有注册队列则返回false\n  */\npublic boolean enqueue() {\n    return this.queue.enqueue(this);\n}\n```\n\nReference类就是用来包装对象的，通过跟JVM的一些密切配合，使得被包裹其中的对象能够被JVM特殊处理，所以使用Reference对象可以使得我们在更细粒度上控制对象的生命周期。\n\n## 小结\n\n+ Reference类是所有引用类的父类\n\n+ Reference中可以在创建时注册引用队列\n\n+ Reference有四种状态，如果创建时没有注册引用队列，则只有两种状态\n\n+ 可以通过get方法获取内部的对象，但如果对象已经被回收了，则会返回null \n\n\n\n\n\n\n\n\n\n","slug":"java/reference/reference-code-detail","published":1,"date":"2018-12-27T08:04:21.563Z","updated":"2018-12-27T08:04:21.563Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5rg002pwu9k70um7ln0","content":"<h1 id=\"Reference源码详解\"><a href=\"#Reference源码详解\" class=\"headerlink\" title=\"Reference源码详解\"></a>Reference源码详解</h1><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"./reference-1.png\" alt=\"Reference-relastionship\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Reference-relastionship</div>\n            </figure>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>::: tip<br>Reference是所有引用类型的父类，定义了引用的公共行为和操作。<br>:::</p>\n<p>::: warning 说明<br>reference指代引用对象本身，referent指代reference引用的对象，下文介绍会以reference，referent形式出现。<br>:::</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>Reference类与垃圾回收是密切配合的，所以该类不能被直接子类化。简单来讲，Reference的继承类都是经过严格设计的，甚至连成员变量的先后顺序都不能改变，所以在代码中直接继承Reference类是没有任何意义的。但是可以继承Reference类的子类。</p>\n<p>::: tip 例如<br>Finalizer 继承自 FinalReference，Cleaner 继承自 PhantomReference<br>:::</p>\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><p>Reference类中有两个构造函数，一个需要传入引用队列，另一个则不需要。</p>\n<p>这个队列的意义在于增加一种判断机制，可以在外部通过监控这个队列来判断对象是否被回收。如果一个对象即将被回收，那么引用这个对象的reference对象就会被放到这个队列中。通过监控这个队列，就可以取出这个reference后再进行一些善后处理。<img src=\"./0003.png\" width=\"50\"></p>\n<p>如果没有这个队列，就只能通过不断地轮询reference对象，通过get方法是否返回null( phantomReference对象不能这样做，其get方法始终返回null，因此它只有带queue的构造函数 )来判断对象是否被回收。</p>\n<p>这两种方法均有相应的使用场景，具体使用需要具体情况具体分析。比如在weakHashMap中，就通过查询queue的数据，来判定是否有对象将被回收。而ThreadLocalMap，则采用判断get()是否为null来进行处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* -- Constructors -- */</span></span><br><span class=\"line\">Reference(T referent) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(referent, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Reference(T referent, ReferenceQueue&lt;? <span class=\"keyword\">super</span> T&gt; queue) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.referent = referent;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.queue = (queue == <span class=\"keyword\">null</span>) ? ReferenceQueue.NULL : queue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"内部成员\"><a href=\"#内部成员\" class=\"headerlink\" title=\"内部成员\"></a>内部成员</h2><p>Reference类内部有这么几个成员变量：</p>\n<p>referent：保存reference指向的对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> T referent;</span><br></pre></td></tr></table></figure>\n<p>queue：引用对象关联的引用队列。是对象即将被回收时所要通知的队列。当对象将被回收时，reference对象( 而不是referent引用的对象 )会被放到queue里面，然后外部程序即可通过监控这个queue拿到相应的数据了。</p>\n<p>这里的queue( 即，ReferenceQueue对象 )名义上是一个队列，实际内部是使用单链表来表示的单向队列，可以理解为queue就是一个链表，其自身仅存储当前的head节点，后面的节点由每个reference节点通过next来保持即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">volatile</span> ReferenceQueue&lt;? <span class=\"keyword\">super</span> T&gt; queue;</span><br></pre></td></tr></table></figure>\n<p>next：指向下一个引用，Reference是一个单链表的结构。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Reference next;</span><br></pre></td></tr></table></figure>\n<p>discovered：表示要处理的对象的下一个对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 当处于active状态: discovered链表中下一个待处理对象</span></span><br><span class=\"line\"><span class=\"comment\"> * 当处于pending状态: pending列表中的下一个对象</span></span><br><span class=\"line\"><span class=\"comment\"> * 其它状态:   NULL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> <span class=\"keyword\">private</span> Reference&lt;T&gt; discovered;</span><br></pre></td></tr></table></figure>\n<p>lock：内部同步锁对象。用作在操作pending链表时的同步对象。注意这是一个静态对象，意味着所有Reference对象共用同一个锁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Lock</span> </span>&#123; &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Lock lock = <span class=\"keyword\">new</span> Lock();</span><br></pre></td></tr></table></figure>\n<p>pending：等待添加到queue中的元素链表。注意这是一个静态对象，意味着所有Reference对象共用同一个pending队列。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 用来保存那些需要被放入队列中的reference，收集器会把引用添加到这个列表里来，</span></span><br><span class=\"line\"><span class=\"comment\"> * Reference-handler线程会从中移除它们。</span></span><br><span class=\"line\"><span class=\"comment\"> * 这个列表由上面的lock对象锁进行保护。列表使用discovered字段来链接它的元素。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Reference&lt;Object&gt; pending = <span class=\"keyword\">null</span>;</span><br></pre></td></tr></table></figure>\n<p>::: warning 说明<br>queue队列使用next来查找下一个reference，pending队列使用discovered来查找下一个reference。<br>:::</p>\n<h2 id=\"Reference状态\"><a href=\"#Reference状态\" class=\"headerlink\" title=\"Reference状态\"></a>Reference状态</h2><p>在Reference类中，有一段很长的注释，来对内部对象referent的状态进行了说明。</p>\n<blockquote>\n<p>Active:<br>reference如果处于此状态，会受到垃圾处理器的特殊处理。当垃圾回收器检测到referent已经更改为合适的状态后(没有任何强引用和软引用关联)，会在某个时间将实例的状态更改为Pending或者Inactive。具体取决于实例是否在创建时注册到一个引用队列中。<br>在前一种情况下（将状态更改为Pending），他还会将实例添加到pending-Reference列表中。新创建的实例处于活动状态。</p>\n<p>Pending:<br>实例如果处于此状态，表明它是pending-Reference列表中的一个元素，等待被Reference-handler线程做入队处理。未注册引用队列的实例永远不会处于该状态。</p>\n<p>Enqueued:<br>实例如果处于此状态，表明它已经是它注册的引用队列中的一个元素，当它被从引用队列中移除时，它的状态将会变为Inactive，未注册引用队列的实例永远不会处于该状态。</p>\n<p>Inactive:<br>实例如果处于此状态，那么它就是个废实例了(滑稽)，它的状态将永远不会再改变了。</p>\n</blockquote>\n<p>所以实例一共有四种状态，Active（活跃状态）、Pending（半死不活状态）、Enqueued（濒死状态）、Inactive（凉凉状态）。当然，Pending和Enqueued状态是引用实例在创建时注册了引用队列才会有。</p>\n<p>一个reference处于Active状态时，表示它是活跃正常的，垃圾回收器会监视这个引用的referent，如果扫描到它没有任何强引用关联时就会进行回收判定了。</p>\n<p>如果判定为需要进行回收，则判断其是否注册了引用队列，如果有的话将reference的状态置为pending。当reference处于pending状态时，表明已经准备将它放入引用队列中，在这个状态下要处理的对象将逐个放入queue中。在这个时间窗口期，相应的引用对象为pending状态。</p>\n<p>当它进入到Enqueued状态时，表明已经引用实例已经被放到queue当中了，准备由外部线程来轮询获取相应信息。此时引用指向的对即将被垃圾回收器回收掉了。</p>\n<p>当它变成Inactive状态时，表明它已经凉透了，它的生命已经到了尽头。不管你用什么方式，也救不了它了。</p>\n<p>JVM中并没有显示定义这样的状态，而是通过next和queue来进行判断。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Active：如果创建Reference对象时，没有传入ReferenceQueue，queue=ReferenceQueue.NULL。如果有传入，则queue指向传入的ReferenceQueue队列对象。next == null；</span><br><span class=\"line\"></span><br><span class=\"line\">Pending：queue为初始化时传入ReferenceQueue对象；next == this；</span><br><span class=\"line\"></span><br><span class=\"line\">Enqueue：queue == ReferenceQueue.ENQUEUED；next为queue中下一个reference对象，或者若为最后一个了next == this；</span><br><span class=\"line\"></span><br><span class=\"line\">Inactive：queue == ReferenceQueue.NULL; next == this.</span><br></pre></td></tr></table></figure>\n<p>如果next==null，则reference处于Active状态；</p>\n<p>如果next!=null，queue == ReferenceQueue.NULL，则reference处于Inactive状态；</p>\n<p>如果next!=null，queue == ReferenceQueue.ENQUEUED，则reference处于Enqueue状态；</p>\n<p>如果next != null，queue != ReferenceQueue.NULL &amp;&amp; queu != ReferenceQueue.ENQUEUED ，则reference处于Pending状态。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"./reference-2.png\" alt=\"Reference-relastionship\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Reference-relastionship</div>\n            </figure>\n<h2 id=\"ReferenceHandler线程\"><a href=\"#ReferenceHandler线程\" class=\"headerlink\" title=\"ReferenceHandler线程\"></a>ReferenceHandler线程</h2><p>Reference类中有一个特殊的线程叫ReferenceHandler，专门处理那些pending链表中的引用对象。ReferenceHandler类是Reference类的一个静态内部类，继承自Thread，所以这条线程就叫它ReferenceHandler线程。<img src=\"./0019.png\" width=\"50\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReferenceHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 确保类已经被初始化</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureClassInitialized</span><span class=\"params\">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Class.forName(clazz.getName(), <span class=\"keyword\">true</span>, clazz.getClassLoader());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> (Error) <span class=\"keyword\">new</span> NoClassDefFoundError(e.getMessage()).initCause(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 预加载并初始化 InterruptedException 和 Cleaner 类</span></span><br><span class=\"line\">        <span class=\"comment\">// 来避免出现在循环运行过程中时由于内存不足而无法加载它们\t\t </span></span><br><span class=\"line\">        ensureClassInitialized(InterruptedException.class);</span><br><span class=\"line\">        ensureClassInitialized(Cleaner.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ReferenceHandler(ThreadGroup g, String name) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(g, name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 死循环调用</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            tryHandlePending(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个类其实也很简单，就是先预加载了两个类，然后run方法中使用了while死循环运行tryHandlerPending方法。这个方法通过名字就能大概判断，应该是来处理pending链表的，让我们看看它的内部代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    ThreadGroup tg = Thread.currentThread().getThreadGroup();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ThreadGroup tgn = tg;</span><br><span class=\"line\">         tgn != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">         tg = tgn, tgn = tg.getParent());</span><br><span class=\"line\">    <span class=\"comment\">// 将handler线程注册到根线程组中并设置最高优先级</span></span><br><span class=\"line\">    Thread handler = <span class=\"keyword\">new</span> ReferenceHandler(tg, <span class=\"string\">\"Reference Handler\"</span>);</span><br><span class=\"line\">    handler.setPriority(Thread.MAX_PRIORITY);</span><br><span class=\"line\">    handler.setDaemon(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    handler.start();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 覆盖jvm的默认处理方式</span></span><br><span class=\"line\">    SharedSecrets.setJavaLangRefAccess(<span class=\"keyword\">new</span> JavaLangRefAccess() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryHandlePendingReference</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> tryHandlePending(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里其实就是在静态代码段里在根线程组中启动了一条最高优先级的ReferenceHandler线程，并覆盖了JVM中对pending的默认处理方式。嗯，关键点就在 tryHandlePending(false) 这一句了。接下来再看看这里的实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryHandlePending</span><span class=\"params\">(<span class=\"keyword\">boolean</span> waitForNotify)</span> </span>&#123;</span><br><span class=\"line\">    Reference&lt;Object&gt; r;</span><br><span class=\"line\">    Cleaner c;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (lock) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果pending链表不为null，则开始进行处理</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pending != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                r = pending;</span><br><span class=\"line\">                <span class=\"comment\">// 使用 'instanceof' 有时会导致OOM</span></span><br><span class=\"line\">                <span class=\"comment\">// 所以在将r从链表中摘除时先进行这个操作</span></span><br><span class=\"line\">                c = r <span class=\"keyword\">instanceof</span> Cleaner ? (Cleaner) r : <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 移除头结点，将pending指向其后一个节点</span></span><br><span class=\"line\">                pending = r.discovered;</span><br><span class=\"line\">                <span class=\"comment\">// 此时r为原来pending链表的头结点，已经从链表中脱离出来</span></span><br><span class=\"line\">                r.discovered = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 在锁上等待可能会造成OOM，因为它会试图分配exception对象</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (waitForNotify) &#123;</span><br><span class=\"line\">                    lock.wait();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 重试</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> waitForNotify;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (OutOfMemoryError x) &#123;</span><br><span class=\"line\">        Thread.yield();</span><br><span class=\"line\">        <span class=\"comment\">// 重试</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException x) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 重试</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果摘除的元素是Cleaner类型，则执行其clean方法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        c.clean();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ReferenceQueue&lt;? <span class=\"keyword\">super</span> Object&gt; q = r.queue;</span><br><span class=\"line\">    <span class=\"comment\">// 最后，如果其引用队列不为空，则将该元素入队</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (q != ReferenceQueue.NULL) q.enqueue(r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以，这里整个过程就是摘取pending链表的头结点，如果是Cleaner，则执行clean操作，否则进行入队处理。</p>\n<h2 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 返回引用指向的对象，如果referent已经被程序或者垃圾回收器清理，则返回null。</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.referent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 清理referent对象，调用该方法不会使得这个对象进入Enqueued状态。</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.referent = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 判断该reference是否已经入队。</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEnqueued</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span>.queue == ReferenceQueue.ENQUEUED);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 将该引用添加到其注册的引用队列中。</span></span><br><span class=\"line\"><span class=\"comment\">  * 如果reference成功入队则返回true，如果它已经在队列中或者创建时没有注册队列则返回false</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">enqueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.queue.enqueue(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Reference类就是用来包装对象的，通过跟JVM的一些密切配合，使得被包裹其中的对象能够被JVM特殊处理，所以使用Reference对象可以使得我们在更细粒度上控制对象的生命周期。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>Reference类是所有引用类的父类</p>\n</li>\n<li><p>Reference中可以在创建时注册引用队列</p>\n</li>\n<li><p>Reference有四种状态，如果创建时没有注册引用队列，则只有两种状态</p>\n</li>\n<li><p>可以通过get方法获取内部的对象，但如果对象已经被回收了，则会返回null </p>\n</li>\n</ul>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"Reference源码详解\"><a href=\"#Reference源码详解\" class=\"headerlink\" title=\"Reference源码详解\"></a>Reference源码详解</h1><figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"./reference-1.png\" alt=\"Reference-relastionship\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Reference-relastionship</div>\n            </figure>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>::: tip<br>Reference是所有引用类型的父类，定义了引用的公共行为和操作。<br>:::</p>\n<p>::: warning 说明<br>reference指代引用对象本身，referent指代reference引用的对象，下文介绍会以reference，referent形式出现。<br>:::</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>Reference类与垃圾回收是密切配合的，所以该类不能被直接子类化。简单来讲，Reference的继承类都是经过严格设计的，甚至连成员变量的先后顺序都不能改变，所以在代码中直接继承Reference类是没有任何意义的。但是可以继承Reference类的子类。</p>\n<p>::: tip 例如<br>Finalizer 继承自 FinalReference，Cleaner 继承自 PhantomReference<br>:::</p>\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><p>Reference类中有两个构造函数，一个需要传入引用队列，另一个则不需要。</p>\n<p>这个队列的意义在于增加一种判断机制，可以在外部通过监控这个队列来判断对象是否被回收。如果一个对象即将被回收，那么引用这个对象的reference对象就会被放到这个队列中。通过监控这个队列，就可以取出这个reference后再进行一些善后处理。<img src=\"./0003.png\" width=\"50\"></p>\n<p>如果没有这个队列，就只能通过不断地轮询reference对象，通过get方法是否返回null( phantomReference对象不能这样做，其get方法始终返回null，因此它只有带queue的构造函数 )来判断对象是否被回收。</p>\n<p>这两种方法均有相应的使用场景，具体使用需要具体情况具体分析。比如在weakHashMap中，就通过查询queue的数据，来判定是否有对象将被回收。而ThreadLocalMap，则采用判断get()是否为null来进行处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* -- Constructors -- */</span></span><br><span class=\"line\">Reference(T referent) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(referent, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Reference(T referent, ReferenceQueue&lt;? <span class=\"keyword\">super</span> T&gt; queue) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.referent = referent;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.queue = (queue == <span class=\"keyword\">null</span>) ? ReferenceQueue.NULL : queue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"内部成员\"><a href=\"#内部成员\" class=\"headerlink\" title=\"内部成员\"></a>内部成员</h2><p>Reference类内部有这么几个成员变量：</p>\n<p>referent：保存reference指向的对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> T referent;</span><br></pre></td></tr></table></figure>\n<p>queue：引用对象关联的引用队列。是对象即将被回收时所要通知的队列。当对象将被回收时，reference对象( 而不是referent引用的对象 )会被放到queue里面，然后外部程序即可通过监控这个queue拿到相应的数据了。</p>\n<p>这里的queue( 即，ReferenceQueue对象 )名义上是一个队列，实际内部是使用单链表来表示的单向队列，可以理解为queue就是一个链表，其自身仅存储当前的head节点，后面的节点由每个reference节点通过next来保持即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">volatile</span> ReferenceQueue&lt;? <span class=\"keyword\">super</span> T&gt; queue;</span><br></pre></td></tr></table></figure>\n<p>next：指向下一个引用，Reference是一个单链表的结构。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Reference next;</span><br></pre></td></tr></table></figure>\n<p>discovered：表示要处理的对象的下一个对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 当处于active状态: discovered链表中下一个待处理对象</span></span><br><span class=\"line\"><span class=\"comment\"> * 当处于pending状态: pending列表中的下一个对象</span></span><br><span class=\"line\"><span class=\"comment\"> * 其它状态:   NULL</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">transient</span> <span class=\"keyword\">private</span> Reference&lt;T&gt; discovered;</span><br></pre></td></tr></table></figure>\n<p>lock：内部同步锁对象。用作在操作pending链表时的同步对象。注意这是一个静态对象，意味着所有Reference对象共用同一个锁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Lock</span> </span>&#123; &#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Lock lock = <span class=\"keyword\">new</span> Lock();</span><br></pre></td></tr></table></figure>\n<p>pending：等待添加到queue中的元素链表。注意这是一个静态对象，意味着所有Reference对象共用同一个pending队列。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 用来保存那些需要被放入队列中的reference，收集器会把引用添加到这个列表里来，</span></span><br><span class=\"line\"><span class=\"comment\"> * Reference-handler线程会从中移除它们。</span></span><br><span class=\"line\"><span class=\"comment\"> * 这个列表由上面的lock对象锁进行保护。列表使用discovered字段来链接它的元素。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Reference&lt;Object&gt; pending = <span class=\"keyword\">null</span>;</span><br></pre></td></tr></table></figure>\n<p>::: warning 说明<br>queue队列使用next来查找下一个reference，pending队列使用discovered来查找下一个reference。<br>:::</p>\n<h2 id=\"Reference状态\"><a href=\"#Reference状态\" class=\"headerlink\" title=\"Reference状态\"></a>Reference状态</h2><p>在Reference类中，有一段很长的注释，来对内部对象referent的状态进行了说明。</p>\n<blockquote>\n<p>Active:<br>reference如果处于此状态，会受到垃圾处理器的特殊处理。当垃圾回收器检测到referent已经更改为合适的状态后(没有任何强引用和软引用关联)，会在某个时间将实例的状态更改为Pending或者Inactive。具体取决于实例是否在创建时注册到一个引用队列中。<br>在前一种情况下（将状态更改为Pending），他还会将实例添加到pending-Reference列表中。新创建的实例处于活动状态。</p>\n<p>Pending:<br>实例如果处于此状态，表明它是pending-Reference列表中的一个元素，等待被Reference-handler线程做入队处理。未注册引用队列的实例永远不会处于该状态。</p>\n<p>Enqueued:<br>实例如果处于此状态，表明它已经是它注册的引用队列中的一个元素，当它被从引用队列中移除时，它的状态将会变为Inactive，未注册引用队列的实例永远不会处于该状态。</p>\n<p>Inactive:<br>实例如果处于此状态，那么它就是个废实例了(滑稽)，它的状态将永远不会再改变了。</p>\n</blockquote>\n<p>所以实例一共有四种状态，Active（活跃状态）、Pending（半死不活状态）、Enqueued（濒死状态）、Inactive（凉凉状态）。当然，Pending和Enqueued状态是引用实例在创建时注册了引用队列才会有。</p>\n<p>一个reference处于Active状态时，表示它是活跃正常的，垃圾回收器会监视这个引用的referent，如果扫描到它没有任何强引用关联时就会进行回收判定了。</p>\n<p>如果判定为需要进行回收，则判断其是否注册了引用队列，如果有的话将reference的状态置为pending。当reference处于pending状态时，表明已经准备将它放入引用队列中，在这个状态下要处理的对象将逐个放入queue中。在这个时间窗口期，相应的引用对象为pending状态。</p>\n<p>当它进入到Enqueued状态时，表明已经引用实例已经被放到queue当中了，准备由外部线程来轮询获取相应信息。此时引用指向的对即将被垃圾回收器回收掉了。</p>\n<p>当它变成Inactive状态时，表明它已经凉透了，它的生命已经到了尽头。不管你用什么方式，也救不了它了。</p>\n<p>JVM中并没有显示定义这样的状态，而是通过next和queue来进行判断。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Active：如果创建Reference对象时，没有传入ReferenceQueue，queue=ReferenceQueue.NULL。如果有传入，则queue指向传入的ReferenceQueue队列对象。next == null；</span><br><span class=\"line\"></span><br><span class=\"line\">Pending：queue为初始化时传入ReferenceQueue对象；next == this；</span><br><span class=\"line\"></span><br><span class=\"line\">Enqueue：queue == ReferenceQueue.ENQUEUED；next为queue中下一个reference对象，或者若为最后一个了next == this；</span><br><span class=\"line\"></span><br><span class=\"line\">Inactive：queue == ReferenceQueue.NULL; next == this.</span><br></pre></td></tr></table></figure>\n<p>如果next==null，则reference处于Active状态；</p>\n<p>如果next!=null，queue == ReferenceQueue.NULL，则reference处于Inactive状态；</p>\n<p>如果next!=null，queue == ReferenceQueue.ENQUEUED，则reference处于Enqueue状态；</p>\n<p>如果next != null，queue != ReferenceQueue.NULL &amp;&amp; queu != ReferenceQueue.ENQUEUED ，则reference处于Pending状态。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"./reference-2.png\" alt=\"Reference-relastionship\" title=\"\">\n                </div>\n                <div class=\"image-caption\">Reference-relastionship</div>\n            </figure>\n<h2 id=\"ReferenceHandler线程\"><a href=\"#ReferenceHandler线程\" class=\"headerlink\" title=\"ReferenceHandler线程\"></a>ReferenceHandler线程</h2><p>Reference类中有一个特殊的线程叫ReferenceHandler，专门处理那些pending链表中的引用对象。ReferenceHandler类是Reference类的一个静态内部类，继承自Thread，所以这条线程就叫它ReferenceHandler线程。<img src=\"./0019.png\" width=\"50\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReferenceHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 确保类已经被初始化</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureClassInitialized</span><span class=\"params\">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Class.forName(clazz.getName(), <span class=\"keyword\">true</span>, clazz.getClassLoader());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> (Error) <span class=\"keyword\">new</span> NoClassDefFoundError(e.getMessage()).initCause(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 预加载并初始化 InterruptedException 和 Cleaner 类</span></span><br><span class=\"line\">        <span class=\"comment\">// 来避免出现在循环运行过程中时由于内存不足而无法加载它们\t\t </span></span><br><span class=\"line\">        ensureClassInitialized(InterruptedException.class);</span><br><span class=\"line\">        ensureClassInitialized(Cleaner.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ReferenceHandler(ThreadGroup g, String name) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(g, name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 死循环调用</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            tryHandlePending(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个类其实也很简单，就是先预加载了两个类，然后run方法中使用了while死循环运行tryHandlerPending方法。这个方法通过名字就能大概判断，应该是来处理pending链表的，让我们看看它的内部代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    ThreadGroup tg = Thread.currentThread().getThreadGroup();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ThreadGroup tgn = tg;</span><br><span class=\"line\">         tgn != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">         tg = tgn, tgn = tg.getParent());</span><br><span class=\"line\">    <span class=\"comment\">// 将handler线程注册到根线程组中并设置最高优先级</span></span><br><span class=\"line\">    Thread handler = <span class=\"keyword\">new</span> ReferenceHandler(tg, <span class=\"string\">\"Reference Handler\"</span>);</span><br><span class=\"line\">    handler.setPriority(Thread.MAX_PRIORITY);</span><br><span class=\"line\">    handler.setDaemon(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    handler.start();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 覆盖jvm的默认处理方式</span></span><br><span class=\"line\">    SharedSecrets.setJavaLangRefAccess(<span class=\"keyword\">new</span> JavaLangRefAccess() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryHandlePendingReference</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> tryHandlePending(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里其实就是在静态代码段里在根线程组中启动了一条最高优先级的ReferenceHandler线程，并覆盖了JVM中对pending的默认处理方式。嗯，关键点就在 tryHandlePending(false) 这一句了。接下来再看看这里的实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryHandlePending</span><span class=\"params\">(<span class=\"keyword\">boolean</span> waitForNotify)</span> </span>&#123;</span><br><span class=\"line\">    Reference&lt;Object&gt; r;</span><br><span class=\"line\">    Cleaner c;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (lock) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果pending链表不为null，则开始进行处理</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pending != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                r = pending;</span><br><span class=\"line\">                <span class=\"comment\">// 使用 'instanceof' 有时会导致OOM</span></span><br><span class=\"line\">                <span class=\"comment\">// 所以在将r从链表中摘除时先进行这个操作</span></span><br><span class=\"line\">                c = r <span class=\"keyword\">instanceof</span> Cleaner ? (Cleaner) r : <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 移除头结点，将pending指向其后一个节点</span></span><br><span class=\"line\">                pending = r.discovered;</span><br><span class=\"line\">                <span class=\"comment\">// 此时r为原来pending链表的头结点，已经从链表中脱离出来</span></span><br><span class=\"line\">                r.discovered = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 在锁上等待可能会造成OOM，因为它会试图分配exception对象</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (waitForNotify) &#123;</span><br><span class=\"line\">                    lock.wait();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// 重试</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> waitForNotify;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (OutOfMemoryError x) &#123;</span><br><span class=\"line\">        Thread.yield();</span><br><span class=\"line\">        <span class=\"comment\">// 重试</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InterruptedException x) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 重试</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果摘除的元素是Cleaner类型，则执行其clean方法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        c.clean();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ReferenceQueue&lt;? <span class=\"keyword\">super</span> Object&gt; q = r.queue;</span><br><span class=\"line\">    <span class=\"comment\">// 最后，如果其引用队列不为空，则将该元素入队</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (q != ReferenceQueue.NULL) q.enqueue(r);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以，这里整个过程就是摘取pending链表的头结点，如果是Cleaner，则执行clean操作，否则进行入队处理。</p>\n<h2 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 返回引用指向的对象，如果referent已经被程序或者垃圾回收器清理，则返回null。</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.referent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 清理referent对象，调用该方法不会使得这个对象进入Enqueued状态。</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.referent = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 判断该reference是否已经入队。</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEnqueued</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span>.queue == ReferenceQueue.ENQUEUED);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 将该引用添加到其注册的引用队列中。</span></span><br><span class=\"line\"><span class=\"comment\">  * 如果reference成功入队则返回true，如果它已经在队列中或者创建时没有注册队列则返回false</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">enqueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.queue.enqueue(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Reference类就是用来包装对象的，通过跟JVM的一些密切配合，使得被包裹其中的对象能够被JVM特殊处理，所以使用Reference对象可以使得我们在更细粒度上控制对象的生命周期。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><p>Reference类是所有引用类的父类</p>\n</li>\n<li><p>Reference中可以在创建时注册引用队列</p>\n</li>\n<li><p>Reference有四种状态，如果创建时没有注册引用队列，则只有两种状态</p>\n</li>\n<li><p>可以通过get方法获取内部的对象，但如果对象已经被回收了，则会返回null </p>\n</li>\n</ul>\n"},{"prev":"./reference-code-detail","next":"./soft-reference-code-detail","_content":"\n# ReferenceQueue源码详解\n\n## 定义\n\n::: tip \nReferenceQueue是引用队列，用于存放待回收的引用对象。\n:::\n\n## 说明\n\n对于软引用、弱引用和虚引用，如果我们希望当一个对象被垃圾回收器回收时能得到通知，进行额外的处理，这时候就需要使用到引用队列了。 \n\n在一个对象被垃圾回收器扫描到将要进行回收时，其相应的引用包装类，即reference对象会被放入其注册的引用队列queue中。可以从queue中获取到相应的对象信息，同时进行额外的处理。比如反向操作，数据清理，资源释放等。\n\n## 使用例子\n\n```java\npublic class ReferenceQueueTest {\n    private static ReferenceQueue<byte[]> rq = new ReferenceQueue<>();\n    private static int _1M = 1024 * 1024;\n\n    public static void main(String[] args) {\n        Object value = new Object();\n        Map<WeakReference<byte[]>, Object> map = new HashMap<>();\n        Thread thread = new Thread(ReferenceQueueTest::run);\n        thread.setDaemon(true);\n        thread.start();\n\n        for(int i = 0;i < 100;i++) {\n            byte[] bytes = new byte[_1M];\n            WeakReference<byte[]> weakReference = new WeakReference<>(bytes, rq);\n            map.put(weakReference, value);\n        }\n        System.out.println(\"map.size->\" + map.size());\n        \n        int aliveNum = 0;\n        for (Map.Entry<WeakReference<byte[]>, Object> entry : map.entrySet()){\n            if (entry != null){\n                if (entry.getKey().get() != null){\n                    aliveNum++;\n                }\n            }\n        }\n        System.out.println(\"100个对象中存活的对象数量：\" + aliveNum);\n    }\n\n    private static void run() {\n        try {\n            int n = 0;\n            WeakReference k;\n            while ((k = (WeakReference) rq.remove()) != null) {\n                System.out.println((++n) + \"回收了:\" + k);\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n这里有一个小栗子，main方法中，创建了一条线程，使用死循环来从引用队列中获取元素，监控对象被回收的状态。然后循环往map中添加了100个映射关系，以下是运行结果：\n\n```java\n...前面省略了大量相似输出\n85回收了:java.lang.ref.WeakReference@7106e68e\n86回收了:java.lang.ref.WeakReference@1f17ae12\n87回收了:java.lang.ref.WeakReference@c4437c4\nmap.size->100\n100个对象中存活的对象数量：12\n```\n\n通过配合使用ReferenceQueue，可以较好的监控对象的生存状态。\n\n## 成员变量\n\nReferenceQueue中内部成员变量也很少，主要有这么几个：\n\n```java\nstatic ReferenceQueue<Object> NULL = new Null<>();\nstatic ReferenceQueue<Object> ENQUEUED = new Null<>();\n```\n\n有两个用来做为特殊标记的静态成员变量，一个是NULL，一个是ENQUEUE，上一篇中说的ReferenceQueue.NULL和ReferenceQueue.ENQUEUED就是这两个家伙。\n\n来看看Null长什么样：\n\n```java\nprivate static class Null<S> extends ReferenceQueue<S> {\n    boolean enqueue(Reference<? extends S> r) {\n        return false;\n    }\n}\n```\n\n只是简单继承了ReferenceQueue的一个类，emmm，为什么不直接new一个ReferenceQueue呢？这里自然是有它的道理的，如果直接使用ReferenceQueue，就会导致有可能误操作这个NULL和ENQUEUED变量，因为ReferenceQueue中enqueue方法是需要使用lock对象锁的，这里覆盖了这个方法并直接返回false，这样就避免了乱用的可能性，也避免了不必要的资源浪费。\n\n```java\nstatic private class Lock { };\nprivate Lock lock = new Lock();\n```\n\n跟Reference一样，有一个lock对象用来做同步对象。\n\n```java\nprivate volatile Reference<? extends T> head = null;\n```\n\nhead用来保存队列的头结点，因为Reference是一个单链表结构，所以只需要保存头结点即可。\n\n```java\nprivate long queueLength = 0;\n```\n\nqueueLength用来保存队列长度，在添加元素的时候+1，移除元素的时候-1，因为在添加和移除操作的时候都会使用synchronized进行同步，所以不用担心多线程修改会不会出错的问题。\n\n## 内部方法\n\n```java\n// 这个方法仅会被Reference类调用\nboolean enqueue(Reference<? extends T> r) { \n    synchronized (lock) {\n        // 检测从获取这个锁之后，该Reference没有入队，并且没有被移除\n        ReferenceQueue<?> queue = r.queue;\n        if ((queue == NULL) || (queue == ENQUEUED)) {\n            return false;\n        }\n        assert queue == this;\n        // 将reference的queue标记为ENQUEUED\n        r.queue = ENQUEUED;\n        // 将r设置为链表的头结点\n        r.next = (head == null) ? r : head;\n        head = r;\n        queueLength++;\n        // 如果r的FinalReference类型，则将FinalRef+1\n        if (r instanceof FinalReference) {\n            sun.misc.VM.addFinalRefCount(1);\n        }\n        lock.notifyAll();\n        return true;\n    }\n}\n```\n\n这里是入队的方法，使用了lock对象锁进行同步，将传入的r添加到队列中，并重置头结点为传入的节点。\n\n```java\npublic Reference<? extends T> poll() {\n    if (head == null)\n        return null;\n    synchronized (lock) {\n        return reallyPoll();\n    }\n}\n\nprivate Reference<? extends T> reallyPoll() {     \n    Reference<? extends T> r = head;\n    if (r != null) {\n        head = (r.next == r) ?\n            null : r.next;\n        r.queue = NULL;\n        r.next = r;\n        queueLength--;\n        if (r instanceof FinalReference) {\n            sun.misc.VM.addFinalRefCount(-1);\n        }\n        return r;\n    }\n    return null;\n}\n```\n\npoll方法将头结点弹出。嗯，没错，弹出的是头结点而不是尾节点，名义上，它叫ReferenceQueue，实际上是一个ReferenceStack（滑稽）。惊不惊喜，意不意外。<img src=\"./0001.png\" width=\"50\"/>\n\n```java\n/**\n  * 移除并返回队列首节点，此方法将阻塞到获取到一个Reference对象或者超时才会返回\n  * timeout时间的单位是毫秒\n  */\npublic Reference<? extends T> remove(long timeout)\n    throws IllegalArgumentException, InterruptedException{\n    if (timeout < 0) {\n        throw new IllegalArgumentException(\"Negative timeout value\");\n    }\n    synchronized (lock) {\n        Reference<? extends T> r = reallyPoll();\n        if (r != null) return r;\n        long start = (timeout == 0) ? 0 : System.nanoTime();\n        // 死循环，直到取到数据或者超时\n        for (;;) {\n            lock.wait(timeout);\n            r = reallyPoll();\n            if (r != null) return r;\n            if (timeout != 0) {\n                // System.nanoTime方法返回的是纳秒，1毫秒=1纳秒*1000*1000\n                long end = System.nanoTime();\n                timeout -= (end - start) / 1000_000;\n                if (timeout <= 0) return null;\n                start = end;\n            }\n        }\n    }\n}\n\n/**\n * 移除并返回队列首节点，此方法将阻塞到获取到一个Reference对象才会返回\n */\npublic Reference<? extends T> remove() throws InterruptedException {\n\treturn remove(0);\n}\n```\n\n这里两个方法都是从队列中移除首节点，与poll不同的是，它会阻塞到超时或者取到一个Reference对象才会返回。\n\n聪明的你可能会想到，调用remove方法的时候，如果队列为空，则会一直阻塞，也会一直占用lock对象锁，这个时候，有引用需要入队的话，不就进不来了吗？\n\n嗯，讲道理确实是这样的，但是注意注释，enqueue只是给Reference调用的，在Reference的public方法enqueue中可以将该引用直接入队，但是虚拟机作为程序的管理者可不吃这套，而是通过其它方式将Reference对象塞进去的，所以才会出现之前的栗子中，死循环调用remove方法，并不会阻塞引用进入队列中的情况。\n\n## 应用场景\n\nReferenceQueue一般用来与SoftReference、WeakReference或者PhantomReference配合使用，将需要关注的引用对象注册到引用队列后，便可以通过监控该队列来判断关注的对象是否被回收，从而执行相应的方法。\n\n主要使用场景：\n\n1、使用引用队列进行数据监控，类似前面栗子的用法。\n\n2、队列监控的反向操作\n\n反向操作，即意味着一个数据变化了，可以通过Reference对象反向拿到相关的数据，从而进行后续的处理。下面有个小栗子：\n\n```java\npublic class TestB {\n\n    private static ReferenceQueue<byte[]> referenceQueue = new ReferenceQueue<>();\n    private static int _1M = 1024 * 1024;\n\n    public static void main(String[] args) throws InterruptedException {\n        final Map<Object, MyWeakReference> hashMap = new HashMap<>();\n        Thread thread = new Thread(() -> {\n            try {\n                int n = 0;\n                MyWeakReference k;\n                while(null != (k = (MyWeakReference) referenceQueue.remove())) {\n                    System.out.println((++n) + \"回收了:\" + k);\n                    //反向获取，移除对应的entry\n                    hashMap.remove(k.key);\n                    //额外对key对象作其它处理，比如关闭流，通知操作等\n                }\n            } catch(InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        thread.setDaemon(true);\n        thread.start();\n\n        for(int i = 0;i < 10000;i++) {\n            byte[] bytesKey = new byte[_1M];\n            byte[] bytesValue = new byte[_1M];\n            hashMap.put(bytesKey, new MyWeakReference(bytesKey, bytesValue, referenceQueue));\n        }\n    }\n\n    static class MyWeakReference extends WeakReference<byte[]> {\n        private Object key;\n        MyWeakReference(Object key, byte[] referent, ReferenceQueue<? super byte[]> q) {\n            super(referent, q);\n            this.key = key;\n        }\n    }\n}\n```\n\n这里通过referenceQueue监控到有引用被回收后，通过map反向获取到对应的value，然后进行资源释放等。\n\n## 小结\n\n+ ReferenceQueue是用来保存需要关注的Reference队列\n+ ReferenceQueue内部实现实际上是一个栈\n+ ReferenceQueue可以用来进行数据监控，资源释放等\n\n\n\n\n\n\n\n\n\n","source":"_posts/java/reference/reference-queue-code-detail.md","raw":"---\nprev: ./reference-code-detail\nnext: ./soft-reference-code-detail\n---\n\n# ReferenceQueue源码详解\n\n## 定义\n\n::: tip \nReferenceQueue是引用队列，用于存放待回收的引用对象。\n:::\n\n## 说明\n\n对于软引用、弱引用和虚引用，如果我们希望当一个对象被垃圾回收器回收时能得到通知，进行额外的处理，这时候就需要使用到引用队列了。 \n\n在一个对象被垃圾回收器扫描到将要进行回收时，其相应的引用包装类，即reference对象会被放入其注册的引用队列queue中。可以从queue中获取到相应的对象信息，同时进行额外的处理。比如反向操作，数据清理，资源释放等。\n\n## 使用例子\n\n```java\npublic class ReferenceQueueTest {\n    private static ReferenceQueue<byte[]> rq = new ReferenceQueue<>();\n    private static int _1M = 1024 * 1024;\n\n    public static void main(String[] args) {\n        Object value = new Object();\n        Map<WeakReference<byte[]>, Object> map = new HashMap<>();\n        Thread thread = new Thread(ReferenceQueueTest::run);\n        thread.setDaemon(true);\n        thread.start();\n\n        for(int i = 0;i < 100;i++) {\n            byte[] bytes = new byte[_1M];\n            WeakReference<byte[]> weakReference = new WeakReference<>(bytes, rq);\n            map.put(weakReference, value);\n        }\n        System.out.println(\"map.size->\" + map.size());\n        \n        int aliveNum = 0;\n        for (Map.Entry<WeakReference<byte[]>, Object> entry : map.entrySet()){\n            if (entry != null){\n                if (entry.getKey().get() != null){\n                    aliveNum++;\n                }\n            }\n        }\n        System.out.println(\"100个对象中存活的对象数量：\" + aliveNum);\n    }\n\n    private static void run() {\n        try {\n            int n = 0;\n            WeakReference k;\n            while ((k = (WeakReference) rq.remove()) != null) {\n                System.out.println((++n) + \"回收了:\" + k);\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n这里有一个小栗子，main方法中，创建了一条线程，使用死循环来从引用队列中获取元素，监控对象被回收的状态。然后循环往map中添加了100个映射关系，以下是运行结果：\n\n```java\n...前面省略了大量相似输出\n85回收了:java.lang.ref.WeakReference@7106e68e\n86回收了:java.lang.ref.WeakReference@1f17ae12\n87回收了:java.lang.ref.WeakReference@c4437c4\nmap.size->100\n100个对象中存活的对象数量：12\n```\n\n通过配合使用ReferenceQueue，可以较好的监控对象的生存状态。\n\n## 成员变量\n\nReferenceQueue中内部成员变量也很少，主要有这么几个：\n\n```java\nstatic ReferenceQueue<Object> NULL = new Null<>();\nstatic ReferenceQueue<Object> ENQUEUED = new Null<>();\n```\n\n有两个用来做为特殊标记的静态成员变量，一个是NULL，一个是ENQUEUE，上一篇中说的ReferenceQueue.NULL和ReferenceQueue.ENQUEUED就是这两个家伙。\n\n来看看Null长什么样：\n\n```java\nprivate static class Null<S> extends ReferenceQueue<S> {\n    boolean enqueue(Reference<? extends S> r) {\n        return false;\n    }\n}\n```\n\n只是简单继承了ReferenceQueue的一个类，emmm，为什么不直接new一个ReferenceQueue呢？这里自然是有它的道理的，如果直接使用ReferenceQueue，就会导致有可能误操作这个NULL和ENQUEUED变量，因为ReferenceQueue中enqueue方法是需要使用lock对象锁的，这里覆盖了这个方法并直接返回false，这样就避免了乱用的可能性，也避免了不必要的资源浪费。\n\n```java\nstatic private class Lock { };\nprivate Lock lock = new Lock();\n```\n\n跟Reference一样，有一个lock对象用来做同步对象。\n\n```java\nprivate volatile Reference<? extends T> head = null;\n```\n\nhead用来保存队列的头结点，因为Reference是一个单链表结构，所以只需要保存头结点即可。\n\n```java\nprivate long queueLength = 0;\n```\n\nqueueLength用来保存队列长度，在添加元素的时候+1，移除元素的时候-1，因为在添加和移除操作的时候都会使用synchronized进行同步，所以不用担心多线程修改会不会出错的问题。\n\n## 内部方法\n\n```java\n// 这个方法仅会被Reference类调用\nboolean enqueue(Reference<? extends T> r) { \n    synchronized (lock) {\n        // 检测从获取这个锁之后，该Reference没有入队，并且没有被移除\n        ReferenceQueue<?> queue = r.queue;\n        if ((queue == NULL) || (queue == ENQUEUED)) {\n            return false;\n        }\n        assert queue == this;\n        // 将reference的queue标记为ENQUEUED\n        r.queue = ENQUEUED;\n        // 将r设置为链表的头结点\n        r.next = (head == null) ? r : head;\n        head = r;\n        queueLength++;\n        // 如果r的FinalReference类型，则将FinalRef+1\n        if (r instanceof FinalReference) {\n            sun.misc.VM.addFinalRefCount(1);\n        }\n        lock.notifyAll();\n        return true;\n    }\n}\n```\n\n这里是入队的方法，使用了lock对象锁进行同步，将传入的r添加到队列中，并重置头结点为传入的节点。\n\n```java\npublic Reference<? extends T> poll() {\n    if (head == null)\n        return null;\n    synchronized (lock) {\n        return reallyPoll();\n    }\n}\n\nprivate Reference<? extends T> reallyPoll() {     \n    Reference<? extends T> r = head;\n    if (r != null) {\n        head = (r.next == r) ?\n            null : r.next;\n        r.queue = NULL;\n        r.next = r;\n        queueLength--;\n        if (r instanceof FinalReference) {\n            sun.misc.VM.addFinalRefCount(-1);\n        }\n        return r;\n    }\n    return null;\n}\n```\n\npoll方法将头结点弹出。嗯，没错，弹出的是头结点而不是尾节点，名义上，它叫ReferenceQueue，实际上是一个ReferenceStack（滑稽）。惊不惊喜，意不意外。<img src=\"./0001.png\" width=\"50\"/>\n\n```java\n/**\n  * 移除并返回队列首节点，此方法将阻塞到获取到一个Reference对象或者超时才会返回\n  * timeout时间的单位是毫秒\n  */\npublic Reference<? extends T> remove(long timeout)\n    throws IllegalArgumentException, InterruptedException{\n    if (timeout < 0) {\n        throw new IllegalArgumentException(\"Negative timeout value\");\n    }\n    synchronized (lock) {\n        Reference<? extends T> r = reallyPoll();\n        if (r != null) return r;\n        long start = (timeout == 0) ? 0 : System.nanoTime();\n        // 死循环，直到取到数据或者超时\n        for (;;) {\n            lock.wait(timeout);\n            r = reallyPoll();\n            if (r != null) return r;\n            if (timeout != 0) {\n                // System.nanoTime方法返回的是纳秒，1毫秒=1纳秒*1000*1000\n                long end = System.nanoTime();\n                timeout -= (end - start) / 1000_000;\n                if (timeout <= 0) return null;\n                start = end;\n            }\n        }\n    }\n}\n\n/**\n * 移除并返回队列首节点，此方法将阻塞到获取到一个Reference对象才会返回\n */\npublic Reference<? extends T> remove() throws InterruptedException {\n\treturn remove(0);\n}\n```\n\n这里两个方法都是从队列中移除首节点，与poll不同的是，它会阻塞到超时或者取到一个Reference对象才会返回。\n\n聪明的你可能会想到，调用remove方法的时候，如果队列为空，则会一直阻塞，也会一直占用lock对象锁，这个时候，有引用需要入队的话，不就进不来了吗？\n\n嗯，讲道理确实是这样的，但是注意注释，enqueue只是给Reference调用的，在Reference的public方法enqueue中可以将该引用直接入队，但是虚拟机作为程序的管理者可不吃这套，而是通过其它方式将Reference对象塞进去的，所以才会出现之前的栗子中，死循环调用remove方法，并不会阻塞引用进入队列中的情况。\n\n## 应用场景\n\nReferenceQueue一般用来与SoftReference、WeakReference或者PhantomReference配合使用，将需要关注的引用对象注册到引用队列后，便可以通过监控该队列来判断关注的对象是否被回收，从而执行相应的方法。\n\n主要使用场景：\n\n1、使用引用队列进行数据监控，类似前面栗子的用法。\n\n2、队列监控的反向操作\n\n反向操作，即意味着一个数据变化了，可以通过Reference对象反向拿到相关的数据，从而进行后续的处理。下面有个小栗子：\n\n```java\npublic class TestB {\n\n    private static ReferenceQueue<byte[]> referenceQueue = new ReferenceQueue<>();\n    private static int _1M = 1024 * 1024;\n\n    public static void main(String[] args) throws InterruptedException {\n        final Map<Object, MyWeakReference> hashMap = new HashMap<>();\n        Thread thread = new Thread(() -> {\n            try {\n                int n = 0;\n                MyWeakReference k;\n                while(null != (k = (MyWeakReference) referenceQueue.remove())) {\n                    System.out.println((++n) + \"回收了:\" + k);\n                    //反向获取，移除对应的entry\n                    hashMap.remove(k.key);\n                    //额外对key对象作其它处理，比如关闭流，通知操作等\n                }\n            } catch(InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        thread.setDaemon(true);\n        thread.start();\n\n        for(int i = 0;i < 10000;i++) {\n            byte[] bytesKey = new byte[_1M];\n            byte[] bytesValue = new byte[_1M];\n            hashMap.put(bytesKey, new MyWeakReference(bytesKey, bytesValue, referenceQueue));\n        }\n    }\n\n    static class MyWeakReference extends WeakReference<byte[]> {\n        private Object key;\n        MyWeakReference(Object key, byte[] referent, ReferenceQueue<? super byte[]> q) {\n            super(referent, q);\n            this.key = key;\n        }\n    }\n}\n```\n\n这里通过referenceQueue监控到有引用被回收后，通过map反向获取到对应的value，然后进行资源释放等。\n\n## 小结\n\n+ ReferenceQueue是用来保存需要关注的Reference队列\n+ ReferenceQueue内部实现实际上是一个栈\n+ ReferenceQueue可以用来进行数据监控，资源释放等\n\n\n\n\n\n\n\n\n\n","slug":"java/reference/reference-queue-code-detail","published":1,"date":"2018-12-27T08:04:21.571Z","updated":"2018-12-27T08:04:21.571Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5rh002qwu9kv9akoewi","content":"<h1 id=\"ReferenceQueue源码详解\"><a href=\"#ReferenceQueue源码详解\" class=\"headerlink\" title=\"ReferenceQueue源码详解\"></a>ReferenceQueue源码详解</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>::: tip<br>ReferenceQueue是引用队列，用于存放待回收的引用对象。<br>:::</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>对于软引用、弱引用和虚引用，如果我们希望当一个对象被垃圾回收器回收时能得到通知，进行额外的处理，这时候就需要使用到引用队列了。 </p>\n<p>在一个对象被垃圾回收器扫描到将要进行回收时，其相应的引用包装类，即reference对象会被放入其注册的引用队列queue中。可以从queue中获取到相应的对象信息，同时进行额外的处理。比如反向操作，数据清理，资源释放等。</p>\n<h2 id=\"使用例子\"><a href=\"#使用例子\" class=\"headerlink\" title=\"使用例子\"></a>使用例子</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReferenceQueueTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ReferenceQueue&lt;<span class=\"keyword\">byte</span>[]&gt; rq = <span class=\"keyword\">new</span> ReferenceQueue&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> _1M = <span class=\"number\">1024</span> * <span class=\"number\">1024</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Object value = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">        Map&lt;WeakReference&lt;<span class=\"keyword\">byte</span>[]&gt;, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        Thread thread = <span class=\"keyword\">new</span> Thread(ReferenceQueueTest::run);</span><br><span class=\"line\">        thread.setDaemon(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">100</span>;i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[_1M];</span><br><span class=\"line\">            WeakReference&lt;<span class=\"keyword\">byte</span>[]&gt; weakReference = <span class=\"keyword\">new</span> WeakReference&lt;&gt;(bytes, rq);</span><br><span class=\"line\">            map.put(weakReference, value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"map.size-&gt;\"</span> + map.size());</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> aliveNum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;WeakReference&lt;<span class=\"keyword\">byte</span>[]&gt;, Object&gt; entry : map.entrySet())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (entry != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (entry.getKey().get() != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                    aliveNum++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"100个对象中存活的对象数量：\"</span> + aliveNum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">            WeakReference k;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((k = (WeakReference) rq.remove()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                System.out.println((++n) + <span class=\"string\">\"回收了:\"</span> + k);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里有一个小栗子，main方法中，创建了一条线程，使用死循环来从引用队列中获取元素，监控对象被回收的状态。然后循环往map中添加了100个映射关系，以下是运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...前面省略了大量相似输出</span><br><span class=\"line\"><span class=\"number\">85</span>回收了:java.lang.ref.WeakReference@<span class=\"number\">7106e68</span>e</span><br><span class=\"line\"><span class=\"number\">86</span>回收了:java.lang.ref.WeakReference@<span class=\"number\">1f</span>17ae12</span><br><span class=\"line\"><span class=\"number\">87</span>回收了:java.lang.ref.WeakReference<span class=\"meta\">@c</span>4437c4</span><br><span class=\"line\">map.size-&gt;<span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">100</span>个对象中存活的对象数量：<span class=\"number\">12</span></span><br></pre></td></tr></table></figure>\n<p>通过配合使用ReferenceQueue，可以较好的监控对象的生存状态。</p>\n<h2 id=\"成员变量\"><a href=\"#成员变量\" class=\"headerlink\" title=\"成员变量\"></a>成员变量</h2><p>ReferenceQueue中内部成员变量也很少，主要有这么几个：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> ReferenceQueue&lt;Object&gt; NULL = <span class=\"keyword\">new</span> Null&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">static</span> ReferenceQueue&lt;Object&gt; ENQUEUED = <span class=\"keyword\">new</span> Null&lt;&gt;();</span><br></pre></td></tr></table></figure>\n<p>有两个用来做为特殊标记的静态成员变量，一个是NULL，一个是ENQUEUE，上一篇中说的ReferenceQueue.NULL和ReferenceQueue.ENQUEUED就是这两个家伙。</p>\n<p>来看看Null长什么样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Null</span>&lt;<span class=\"title\">S</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">ReferenceQueue</span>&lt;<span class=\"title\">S</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">enqueue</span><span class=\"params\">(Reference&lt;? extends S&gt; r)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>只是简单继承了ReferenceQueue的一个类，emmm，为什么不直接new一个ReferenceQueue呢？这里自然是有它的道理的，如果直接使用ReferenceQueue，就会导致有可能误操作这个NULL和ENQUEUED变量，因为ReferenceQueue中enqueue方法是需要使用lock对象锁的，这里覆盖了这个方法并直接返回false，这样就避免了乱用的可能性，也避免了不必要的资源浪费。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Lock</span> </span>&#123; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">private</span> Lock lock = <span class=\"keyword\">new</span> Lock();</span><br></pre></td></tr></table></figure>\n<p>跟Reference一样，有一个lock对象用来做同步对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> Reference&lt;? extends T&gt; head = <span class=\"keyword\">null</span>;</span><br></pre></td></tr></table></figure>\n<p>head用来保存队列的头结点，因为Reference是一个单链表结构，所以只需要保存头结点即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">long</span> queueLength = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<p>queueLength用来保存队列长度，在添加元素的时候+1，移除元素的时候-1，因为在添加和移除操作的时候都会使用synchronized进行同步，所以不用担心多线程修改会不会出错的问题。</p>\n<h2 id=\"内部方法\"><a href=\"#内部方法\" class=\"headerlink\" title=\"内部方法\"></a>内部方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个方法仅会被Reference类调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">enqueue</span><span class=\"params\">(Reference&lt;? extends T&gt; r)</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (lock) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 检测从获取这个锁之后，该Reference没有入队，并且没有被移除</span></span><br><span class=\"line\">        ReferenceQueue&lt;?&gt; queue = r.queue;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((queue == NULL) || (queue == ENQUEUED)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> queue == <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 将reference的queue标记为ENQUEUED</span></span><br><span class=\"line\">        r.queue = ENQUEUED;</span><br><span class=\"line\">        <span class=\"comment\">// 将r设置为链表的头结点</span></span><br><span class=\"line\">        r.next = (head == <span class=\"keyword\">null</span>) ? r : head;</span><br><span class=\"line\">        head = r;</span><br><span class=\"line\">        queueLength++;</span><br><span class=\"line\">        <span class=\"comment\">// 如果r的FinalReference类型，则将FinalRef+1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r <span class=\"keyword\">instanceof</span> FinalReference) &#123;</span><br><span class=\"line\">            sun.misc.VM.addFinalRefCount(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        lock.notifyAll();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里是入队的方法，使用了lock对象锁进行同步，将传入的r添加到队列中，并重置头结点为传入的节点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Reference&lt;? extends T&gt; poll() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (lock) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> reallyPoll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> Reference&lt;? extends T&gt; reallyPoll() &#123;     </span><br><span class=\"line\">    Reference&lt;? extends T&gt; r = head;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        head = (r.next == r) ?</span><br><span class=\"line\">            <span class=\"keyword\">null</span> : r.next;</span><br><span class=\"line\">        r.queue = NULL;</span><br><span class=\"line\">        r.next = r;</span><br><span class=\"line\">        queueLength--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r <span class=\"keyword\">instanceof</span> FinalReference) &#123;</span><br><span class=\"line\">            sun.misc.VM.addFinalRefCount(-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>poll方法将头结点弹出。嗯，没错，弹出的是头结点而不是尾节点，名义上，它叫ReferenceQueue，实际上是一个ReferenceStack（滑稽）。惊不惊喜，意不意外。<img src=\"./0001.png\" width=\"50\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 移除并返回队列首节点，此方法将阻塞到获取到一个Reference对象或者超时才会返回</span></span><br><span class=\"line\"><span class=\"comment\">  * timeout时间的单位是毫秒</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Reference&lt;? extends T&gt; remove(<span class=\"keyword\">long</span> timeout)</span><br><span class=\"line\">    <span class=\"keyword\">throws</span> IllegalArgumentException, InterruptedException&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timeout &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Negative timeout value\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (lock) &#123;</span><br><span class=\"line\">        Reference&lt;? extends T&gt; r = reallyPoll();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r != <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> start = (timeout == <span class=\"number\">0</span>) ? <span class=\"number\">0</span> : System.nanoTime();</span><br><span class=\"line\">        <span class=\"comment\">// 死循环，直到取到数据或者超时</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            lock.wait(timeout);</span><br><span class=\"line\">            r = reallyPoll();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (r != <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (timeout != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// System.nanoTime方法返回的是纳秒，1毫秒=1纳秒*1000*1000</span></span><br><span class=\"line\">                <span class=\"keyword\">long</span> end = System.nanoTime();</span><br><span class=\"line\">                timeout -= (end - start) / <span class=\"number\">1000_000</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (timeout &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                start = end;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 移除并返回队列首节点，此方法将阻塞到获取到一个Reference对象才会返回</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Reference&lt;? extends T&gt; remove() <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> remove(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里两个方法都是从队列中移除首节点，与poll不同的是，它会阻塞到超时或者取到一个Reference对象才会返回。</p>\n<p>聪明的你可能会想到，调用remove方法的时候，如果队列为空，则会一直阻塞，也会一直占用lock对象锁，这个时候，有引用需要入队的话，不就进不来了吗？</p>\n<p>嗯，讲道理确实是这样的，但是注意注释，enqueue只是给Reference调用的，在Reference的public方法enqueue中可以将该引用直接入队，但是虚拟机作为程序的管理者可不吃这套，而是通过其它方式将Reference对象塞进去的，所以才会出现之前的栗子中，死循环调用remove方法，并不会阻塞引用进入队列中的情况。</p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>ReferenceQueue一般用来与SoftReference、WeakReference或者PhantomReference配合使用，将需要关注的引用对象注册到引用队列后，便可以通过监控该队列来判断关注的对象是否被回收，从而执行相应的方法。</p>\n<p>主要使用场景：</p>\n<p>1、使用引用队列进行数据监控，类似前面栗子的用法。</p>\n<p>2、队列监控的反向操作</p>\n<p>反向操作，即意味着一个数据变化了，可以通过Reference对象反向拿到相关的数据，从而进行后续的处理。下面有个小栗子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestB</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ReferenceQueue&lt;<span class=\"keyword\">byte</span>[]&gt; referenceQueue = <span class=\"keyword\">new</span> ReferenceQueue&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> _1M = <span class=\"number\">1024</span> * <span class=\"number\">1024</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Map&lt;Object, MyWeakReference&gt; hashMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        Thread thread = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">                MyWeakReference k;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(<span class=\"keyword\">null</span> != (k = (MyWeakReference) referenceQueue.remove())) &#123;</span><br><span class=\"line\">                    System.out.println((++n) + <span class=\"string\">\"回收了:\"</span> + k);</span><br><span class=\"line\">                    <span class=\"comment\">//反向获取，移除对应的entry</span></span><br><span class=\"line\">                    hashMap.remove(k.key);</span><br><span class=\"line\">                    <span class=\"comment\">//额外对key对象作其它处理，比如关闭流，通知操作等</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span>(InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        thread.setDaemon(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">10000</span>;i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] bytesKey = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[_1M];</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] bytesValue = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[_1M];</span><br><span class=\"line\">            hashMap.put(bytesKey, <span class=\"keyword\">new</span> MyWeakReference(bytesKey, bytesValue, referenceQueue));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    static class MyWeakReference extends WeakReference&lt;byte[]&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Object key;</span><br><span class=\"line\">        MyWeakReference(Object key, <span class=\"keyword\">byte</span>[] referent, ReferenceQueue&lt;? <span class=\"keyword\">super</span> <span class=\"keyword\">byte</span>[]&gt; q) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(referent, q);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里通过referenceQueue监控到有引用被回收后，通过map反向获取到对应的value，然后进行资源释放等。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li>ReferenceQueue是用来保存需要关注的Reference队列</li>\n<li>ReferenceQueue内部实现实际上是一个栈</li>\n<li>ReferenceQueue可以用来进行数据监控，资源释放等</li>\n</ul>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"ReferenceQueue源码详解\"><a href=\"#ReferenceQueue源码详解\" class=\"headerlink\" title=\"ReferenceQueue源码详解\"></a>ReferenceQueue源码详解</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>::: tip<br>ReferenceQueue是引用队列，用于存放待回收的引用对象。<br>:::</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>对于软引用、弱引用和虚引用，如果我们希望当一个对象被垃圾回收器回收时能得到通知，进行额外的处理，这时候就需要使用到引用队列了。 </p>\n<p>在一个对象被垃圾回收器扫描到将要进行回收时，其相应的引用包装类，即reference对象会被放入其注册的引用队列queue中。可以从queue中获取到相应的对象信息，同时进行额外的处理。比如反向操作，数据清理，资源释放等。</p>\n<h2 id=\"使用例子\"><a href=\"#使用例子\" class=\"headerlink\" title=\"使用例子\"></a>使用例子</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReferenceQueueTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ReferenceQueue&lt;<span class=\"keyword\">byte</span>[]&gt; rq = <span class=\"keyword\">new</span> ReferenceQueue&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> _1M = <span class=\"number\">1024</span> * <span class=\"number\">1024</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Object value = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">        Map&lt;WeakReference&lt;<span class=\"keyword\">byte</span>[]&gt;, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        Thread thread = <span class=\"keyword\">new</span> Thread(ReferenceQueueTest::run);</span><br><span class=\"line\">        thread.setDaemon(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">100</span>;i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[_1M];</span><br><span class=\"line\">            WeakReference&lt;<span class=\"keyword\">byte</span>[]&gt; weakReference = <span class=\"keyword\">new</span> WeakReference&lt;&gt;(bytes, rq);</span><br><span class=\"line\">            map.put(weakReference, value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"map.size-&gt;\"</span> + map.size());</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> aliveNum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;WeakReference&lt;<span class=\"keyword\">byte</span>[]&gt;, Object&gt; entry : map.entrySet())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (entry != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (entry.getKey().get() != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                    aliveNum++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"100个对象中存活的对象数量：\"</span> + aliveNum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">            WeakReference k;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((k = (WeakReference) rq.remove()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                System.out.println((++n) + <span class=\"string\">\"回收了:\"</span> + k);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里有一个小栗子，main方法中，创建了一条线程，使用死循环来从引用队列中获取元素，监控对象被回收的状态。然后循环往map中添加了100个映射关系，以下是运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...前面省略了大量相似输出</span><br><span class=\"line\"><span class=\"number\">85</span>回收了:java.lang.ref.WeakReference@<span class=\"number\">7106e68</span>e</span><br><span class=\"line\"><span class=\"number\">86</span>回收了:java.lang.ref.WeakReference@<span class=\"number\">1f</span>17ae12</span><br><span class=\"line\"><span class=\"number\">87</span>回收了:java.lang.ref.WeakReference<span class=\"meta\">@c</span>4437c4</span><br><span class=\"line\">map.size-&gt;<span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">100</span>个对象中存活的对象数量：<span class=\"number\">12</span></span><br></pre></td></tr></table></figure>\n<p>通过配合使用ReferenceQueue，可以较好的监控对象的生存状态。</p>\n<h2 id=\"成员变量\"><a href=\"#成员变量\" class=\"headerlink\" title=\"成员变量\"></a>成员变量</h2><p>ReferenceQueue中内部成员变量也很少，主要有这么几个：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> ReferenceQueue&lt;Object&gt; NULL = <span class=\"keyword\">new</span> Null&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">static</span> ReferenceQueue&lt;Object&gt; ENQUEUED = <span class=\"keyword\">new</span> Null&lt;&gt;();</span><br></pre></td></tr></table></figure>\n<p>有两个用来做为特殊标记的静态成员变量，一个是NULL，一个是ENQUEUE，上一篇中说的ReferenceQueue.NULL和ReferenceQueue.ENQUEUED就是这两个家伙。</p>\n<p>来看看Null长什么样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Null</span>&lt;<span class=\"title\">S</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">ReferenceQueue</span>&lt;<span class=\"title\">S</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">enqueue</span><span class=\"params\">(Reference&lt;? extends S&gt; r)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>只是简单继承了ReferenceQueue的一个类，emmm，为什么不直接new一个ReferenceQueue呢？这里自然是有它的道理的，如果直接使用ReferenceQueue，就会导致有可能误操作这个NULL和ENQUEUED变量，因为ReferenceQueue中enqueue方法是需要使用lock对象锁的，这里覆盖了这个方法并直接返回false，这样就避免了乱用的可能性，也避免了不必要的资源浪费。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Lock</span> </span>&#123; &#125;;</span><br><span class=\"line\"><span class=\"keyword\">private</span> Lock lock = <span class=\"keyword\">new</span> Lock();</span><br></pre></td></tr></table></figure>\n<p>跟Reference一样，有一个lock对象用来做同步对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> Reference&lt;? extends T&gt; head = <span class=\"keyword\">null</span>;</span><br></pre></td></tr></table></figure>\n<p>head用来保存队列的头结点，因为Reference是一个单链表结构，所以只需要保存头结点即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">long</span> queueLength = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<p>queueLength用来保存队列长度，在添加元素的时候+1，移除元素的时候-1，因为在添加和移除操作的时候都会使用synchronized进行同步，所以不用担心多线程修改会不会出错的问题。</p>\n<h2 id=\"内部方法\"><a href=\"#内部方法\" class=\"headerlink\" title=\"内部方法\"></a>内部方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个方法仅会被Reference类调用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">enqueue</span><span class=\"params\">(Reference&lt;? extends T&gt; r)</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (lock) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 检测从获取这个锁之后，该Reference没有入队，并且没有被移除</span></span><br><span class=\"line\">        ReferenceQueue&lt;?&gt; queue = r.queue;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((queue == NULL) || (queue == ENQUEUED)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">assert</span> queue == <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 将reference的queue标记为ENQUEUED</span></span><br><span class=\"line\">        r.queue = ENQUEUED;</span><br><span class=\"line\">        <span class=\"comment\">// 将r设置为链表的头结点</span></span><br><span class=\"line\">        r.next = (head == <span class=\"keyword\">null</span>) ? r : head;</span><br><span class=\"line\">        head = r;</span><br><span class=\"line\">        queueLength++;</span><br><span class=\"line\">        <span class=\"comment\">// 如果r的FinalReference类型，则将FinalRef+1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r <span class=\"keyword\">instanceof</span> FinalReference) &#123;</span><br><span class=\"line\">            sun.misc.VM.addFinalRefCount(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        lock.notifyAll();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里是入队的方法，使用了lock对象锁进行同步，将传入的r添加到队列中，并重置头结点为传入的节点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Reference&lt;? extends T&gt; poll() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (lock) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> reallyPoll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> Reference&lt;? extends T&gt; reallyPoll() &#123;     </span><br><span class=\"line\">    Reference&lt;? extends T&gt; r = head;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (r != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        head = (r.next == r) ?</span><br><span class=\"line\">            <span class=\"keyword\">null</span> : r.next;</span><br><span class=\"line\">        r.queue = NULL;</span><br><span class=\"line\">        r.next = r;</span><br><span class=\"line\">        queueLength--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r <span class=\"keyword\">instanceof</span> FinalReference) &#123;</span><br><span class=\"line\">            sun.misc.VM.addFinalRefCount(-<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>poll方法将头结点弹出。嗯，没错，弹出的是头结点而不是尾节点，名义上，它叫ReferenceQueue，实际上是一个ReferenceStack（滑稽）。惊不惊喜，意不意外。<img src=\"./0001.png\" width=\"50\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 移除并返回队列首节点，此方法将阻塞到获取到一个Reference对象或者超时才会返回</span></span><br><span class=\"line\"><span class=\"comment\">  * timeout时间的单位是毫秒</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Reference&lt;? extends T&gt; remove(<span class=\"keyword\">long</span> timeout)</span><br><span class=\"line\">    <span class=\"keyword\">throws</span> IllegalArgumentException, InterruptedException&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timeout &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Negative timeout value\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (lock) &#123;</span><br><span class=\"line\">        Reference&lt;? extends T&gt; r = reallyPoll();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r != <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> start = (timeout == <span class=\"number\">0</span>) ? <span class=\"number\">0</span> : System.nanoTime();</span><br><span class=\"line\">        <span class=\"comment\">// 死循环，直到取到数据或者超时</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            lock.wait(timeout);</span><br><span class=\"line\">            r = reallyPoll();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (r != <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (timeout != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// System.nanoTime方法返回的是纳秒，1毫秒=1纳秒*1000*1000</span></span><br><span class=\"line\">                <span class=\"keyword\">long</span> end = System.nanoTime();</span><br><span class=\"line\">                timeout -= (end - start) / <span class=\"number\">1000_000</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (timeout &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                start = end;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 移除并返回队列首节点，此方法将阻塞到获取到一个Reference对象才会返回</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Reference&lt;? extends T&gt; remove() <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> remove(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里两个方法都是从队列中移除首节点，与poll不同的是，它会阻塞到超时或者取到一个Reference对象才会返回。</p>\n<p>聪明的你可能会想到，调用remove方法的时候，如果队列为空，则会一直阻塞，也会一直占用lock对象锁，这个时候，有引用需要入队的话，不就进不来了吗？</p>\n<p>嗯，讲道理确实是这样的，但是注意注释，enqueue只是给Reference调用的，在Reference的public方法enqueue中可以将该引用直接入队，但是虚拟机作为程序的管理者可不吃这套，而是通过其它方式将Reference对象塞进去的，所以才会出现之前的栗子中，死循环调用remove方法，并不会阻塞引用进入队列中的情况。</p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>ReferenceQueue一般用来与SoftReference、WeakReference或者PhantomReference配合使用，将需要关注的引用对象注册到引用队列后，便可以通过监控该队列来判断关注的对象是否被回收，从而执行相应的方法。</p>\n<p>主要使用场景：</p>\n<p>1、使用引用队列进行数据监控，类似前面栗子的用法。</p>\n<p>2、队列监控的反向操作</p>\n<p>反向操作，即意味着一个数据变化了，可以通过Reference对象反向拿到相关的数据，从而进行后续的处理。下面有个小栗子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestB</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ReferenceQueue&lt;<span class=\"keyword\">byte</span>[]&gt; referenceQueue = <span class=\"keyword\">new</span> ReferenceQueue&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> _1M = <span class=\"number\">1024</span> * <span class=\"number\">1024</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Map&lt;Object, MyWeakReference&gt; hashMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        Thread thread = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\">                MyWeakReference k;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(<span class=\"keyword\">null</span> != (k = (MyWeakReference) referenceQueue.remove())) &#123;</span><br><span class=\"line\">                    System.out.println((++n) + <span class=\"string\">\"回收了:\"</span> + k);</span><br><span class=\"line\">                    <span class=\"comment\">//反向获取，移除对应的entry</span></span><br><span class=\"line\">                    hashMap.remove(k.key);</span><br><span class=\"line\">                    <span class=\"comment\">//额外对key对象作其它处理，比如关闭流，通知操作等</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span>(InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        thread.setDaemon(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">10000</span>;i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] bytesKey = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[_1M];</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] bytesValue = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[_1M];</span><br><span class=\"line\">            hashMap.put(bytesKey, <span class=\"keyword\">new</span> MyWeakReference(bytesKey, bytesValue, referenceQueue));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    static class MyWeakReference extends WeakReference&lt;byte[]&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Object key;</span><br><span class=\"line\">        MyWeakReference(Object key, <span class=\"keyword\">byte</span>[] referent, ReferenceQueue&lt;? <span class=\"keyword\">super</span> <span class=\"keyword\">byte</span>[]&gt; q) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(referent, q);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.key = key;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里通过referenceQueue监控到有引用被回收后，通过map反向获取到对应的value，然后进行资源释放等。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li>ReferenceQueue是用来保存需要关注的Reference队列</li>\n<li>ReferenceQueue内部实现实际上是一个栈</li>\n<li>ReferenceQueue可以用来进行数据监控，资源释放等</li>\n</ul>\n"},{"prev":"./final-reference-code-detail","next":"./four-kinds-of-reference","_content":"# 四种引用类型总结\n\n::: tip \n引用级别：强引用 > 软引用 > 弱引用 > 虚引用\n:::\n\n## 理解\n\n就如最开始说的，设置四种引用类型，是为了更好的控制对象的生命周期，让代码能够一定程度上干涉GC过程，所以引用类型主要就是跟垃圾回收有关了。\n\n对于JVM、GC和内存，可以这样理解，内存好比你的抽屉，这个抽屉有一定大小，并不能无限存放东西。\n\nJVM好比你自己，会时不时来整理抽屉。那些申请的对象好比放在抽屉里的东西，生活中的必需品就好比强引用，而那些可能用到的东西（非必需品）就好比软引用或者弱引用。\n\n当抽屉还很空的时候，放一些非必须品你也不会在意，但是随着买的东西越来越多，抽屉里快放不下的时候，就需要根据重要程度来选择一些东西扔出抽屉，这个过程就好比GC。\n\nJVM在内存够用的时候，不会对软引用的对象进行回收，但是当内存紧张的时候，就会对它们进行清理。\n\n## 四种引用类型对比\n\n| 引用类型 | 引用对象被垃圾回收的时间                        | 用途                                       | 是否可以转为强引用 | 对应的类                       |\n| :------- | ----------------------------------------------- | ------------------------------------------ | ------------------ | ------------------------------ |\n| 强引用   | 从来不会                                        | 一般用途，保持对象不被回收                 | 可以               | 默认                           |\n| 软引用   | 发生一次GC后，JVM决定还需要进一步回收更多空间时 | 缓存，保持对象在内存足够时不被回收         | 可以               | SoftReference                  |\n| 弱引用   | 进行垃圾回收时，如果对象只存在弱引用            | 缓存，仅仅在对象仍被使用时保持其不被回收   | 可以               | WeakReference<br />WeakHashMap |\n| 虚引用   | 进行垃圾回收时                                  | 跟踪GC过程，在对象被回收前进行一些清理工作 | 不可以             | PhantomReference               |\n\n## 题外话\n\nemmmm….总觉得少了点什么，有没有想过，为什么没有StrongReference类？ \n\n嗯，讲道理，软引用，弱引用，虚引用都有其对应的类，为什么强引用却没有？试想一下，如果有StrongReference类，那么在自定义缓存中进行引用类型判断时将会比较方便，事实上，在guava的LocalCache中，确实构造了一个[StrongValueReference](https://github.com/google/guava/blob/1670960e088fe9c1e78b5d7dd7c0505741bf2988/guava/src/com/google/common/cache/LocalCache.java#L1676)的类，用来包裹一个强引用。\n\n所以当你想要自己造缓存的轮子时，可以先看看人家的轮子好不好用。<img src=\"./0003.png\" width=\"50\"/>\n\n至此，这一系列就算告一段落了，为了写这一系列文章，花了不少心思，离底层实现越来越近的感觉就像山洞探险，这个探索过程的曲径通幽，柳暗花明处其实就是最好的奖励。\n\n对于学习，就像是打通经脉的过程，从一个一个零散的点，到慢慢将它们贯通成线，点与点的联结会让人产生极大的快感，最终如果能将这些点编织成网，便像打通奇经八脉那样，知识不过是手到擒来了。<img src=\"./94.png\" width=\"50\"/>\n\n（这个B装的不错，还多了一些细节在里面，哈哈哈哈，溜了溜了）","source":"_posts/java/reference/reference-summary.md","raw":"---\nprev: ./final-reference-code-detail\nnext: ./four-kinds-of-reference\n---\n# 四种引用类型总结\n\n::: tip \n引用级别：强引用 > 软引用 > 弱引用 > 虚引用\n:::\n\n## 理解\n\n就如最开始说的，设置四种引用类型，是为了更好的控制对象的生命周期，让代码能够一定程度上干涉GC过程，所以引用类型主要就是跟垃圾回收有关了。\n\n对于JVM、GC和内存，可以这样理解，内存好比你的抽屉，这个抽屉有一定大小，并不能无限存放东西。\n\nJVM好比你自己，会时不时来整理抽屉。那些申请的对象好比放在抽屉里的东西，生活中的必需品就好比强引用，而那些可能用到的东西（非必需品）就好比软引用或者弱引用。\n\n当抽屉还很空的时候，放一些非必须品你也不会在意，但是随着买的东西越来越多，抽屉里快放不下的时候，就需要根据重要程度来选择一些东西扔出抽屉，这个过程就好比GC。\n\nJVM在内存够用的时候，不会对软引用的对象进行回收，但是当内存紧张的时候，就会对它们进行清理。\n\n## 四种引用类型对比\n\n| 引用类型 | 引用对象被垃圾回收的时间                        | 用途                                       | 是否可以转为强引用 | 对应的类                       |\n| :------- | ----------------------------------------------- | ------------------------------------------ | ------------------ | ------------------------------ |\n| 强引用   | 从来不会                                        | 一般用途，保持对象不被回收                 | 可以               | 默认                           |\n| 软引用   | 发生一次GC后，JVM决定还需要进一步回收更多空间时 | 缓存，保持对象在内存足够时不被回收         | 可以               | SoftReference                  |\n| 弱引用   | 进行垃圾回收时，如果对象只存在弱引用            | 缓存，仅仅在对象仍被使用时保持其不被回收   | 可以               | WeakReference<br />WeakHashMap |\n| 虚引用   | 进行垃圾回收时                                  | 跟踪GC过程，在对象被回收前进行一些清理工作 | 不可以             | PhantomReference               |\n\n## 题外话\n\nemmmm….总觉得少了点什么，有没有想过，为什么没有StrongReference类？ \n\n嗯，讲道理，软引用，弱引用，虚引用都有其对应的类，为什么强引用却没有？试想一下，如果有StrongReference类，那么在自定义缓存中进行引用类型判断时将会比较方便，事实上，在guava的LocalCache中，确实构造了一个[StrongValueReference](https://github.com/google/guava/blob/1670960e088fe9c1e78b5d7dd7c0505741bf2988/guava/src/com/google/common/cache/LocalCache.java#L1676)的类，用来包裹一个强引用。\n\n所以当你想要自己造缓存的轮子时，可以先看看人家的轮子好不好用。<img src=\"./0003.png\" width=\"50\"/>\n\n至此，这一系列就算告一段落了，为了写这一系列文章，花了不少心思，离底层实现越来越近的感觉就像山洞探险，这个探索过程的曲径通幽，柳暗花明处其实就是最好的奖励。\n\n对于学习，就像是打通经脉的过程，从一个一个零散的点，到慢慢将它们贯通成线，点与点的联结会让人产生极大的快感，最终如果能将这些点编织成网，便像打通奇经八脉那样，知识不过是手到擒来了。<img src=\"./94.png\" width=\"50\"/>\n\n（这个B装的不错，还多了一些细节在里面，哈哈哈哈，溜了溜了）","slug":"java/reference/reference-summary","published":1,"date":"2018-12-27T08:04:21.588Z","updated":"2018-12-27T08:04:21.588Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5rj002rwu9k7lzeninp","content":"<h1 id=\"四种引用类型总结\"><a href=\"#四种引用类型总结\" class=\"headerlink\" title=\"四种引用类型总结\"></a>四种引用类型总结</h1><p>::: tip<br>引用级别：强引用 &gt; 软引用 &gt; 弱引用 &gt; 虚引用<br>:::</p>\n<h2 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解\"></a>理解</h2><p>就如最开始说的，设置四种引用类型，是为了更好的控制对象的生命周期，让代码能够一定程度上干涉GC过程，所以引用类型主要就是跟垃圾回收有关了。</p>\n<p>对于JVM、GC和内存，可以这样理解，内存好比你的抽屉，这个抽屉有一定大小，并不能无限存放东西。</p>\n<p>JVM好比你自己，会时不时来整理抽屉。那些申请的对象好比放在抽屉里的东西，生活中的必需品就好比强引用，而那些可能用到的东西（非必需品）就好比软引用或者弱引用。</p>\n<p>当抽屉还很空的时候，放一些非必须品你也不会在意，但是随着买的东西越来越多，抽屉里快放不下的时候，就需要根据重要程度来选择一些东西扔出抽屉，这个过程就好比GC。</p>\n<p>JVM在内存够用的时候，不会对软引用的对象进行回收，但是当内存紧张的时候，就会对它们进行清理。</p>\n<h2 id=\"四种引用类型对比\"><a href=\"#四种引用类型对比\" class=\"headerlink\" title=\"四种引用类型对比\"></a>四种引用类型对比</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">引用类型</th>\n<th>引用对象被垃圾回收的时间</th>\n<th>用途</th>\n<th>是否可以转为强引用</th>\n<th>对应的类</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">强引用</td>\n<td>从来不会</td>\n<td>一般用途，保持对象不被回收</td>\n<td>可以</td>\n<td>默认</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">软引用</td>\n<td>发生一次GC后，JVM决定还需要进一步回收更多空间时</td>\n<td>缓存，保持对象在内存足够时不被回收</td>\n<td>可以</td>\n<td>SoftReference</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">弱引用</td>\n<td>进行垃圾回收时，如果对象只存在弱引用</td>\n<td>缓存，仅仅在对象仍被使用时保持其不被回收</td>\n<td>可以</td>\n<td>WeakReference<br>WeakHashMap</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">虚引用</td>\n<td>进行垃圾回收时</td>\n<td>跟踪GC过程，在对象被回收前进行一些清理工作</td>\n<td>不可以</td>\n<td>PhantomReference</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"题外话\"><a href=\"#题外话\" class=\"headerlink\" title=\"题外话\"></a>题外话</h2><p>emmmm….总觉得少了点什么，有没有想过，为什么没有StrongReference类？ </p>\n<p>嗯，讲道理，软引用，弱引用，虚引用都有其对应的类，为什么强引用却没有？试想一下，如果有StrongReference类，那么在自定义缓存中进行引用类型判断时将会比较方便，事实上，在guava的LocalCache中，确实构造了一个<a href=\"https://github.com/google/guava/blob/1670960e088fe9c1e78b5d7dd7c0505741bf2988/guava/src/com/google/common/cache/LocalCache.java#L1676\" target=\"_blank\" rel=\"noopener\">StrongValueReference</a>的类，用来包裹一个强引用。</p>\n<p>所以当你想要自己造缓存的轮子时，可以先看看人家的轮子好不好用。<img src=\"./0003.png\" width=\"50\"></p>\n<p>至此，这一系列就算告一段落了，为了写这一系列文章，花了不少心思，离底层实现越来越近的感觉就像山洞探险，这个探索过程的曲径通幽，柳暗花明处其实就是最好的奖励。</p>\n<p>对于学习，就像是打通经脉的过程，从一个一个零散的点，到慢慢将它们贯通成线，点与点的联结会让人产生极大的快感，最终如果能将这些点编织成网，便像打通奇经八脉那样，知识不过是手到擒来了。<img src=\"./94.png\" width=\"50\"></p>\n<p>（这个B装的不错，还多了一些细节在里面，哈哈哈哈，溜了溜了）</p>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"四种引用类型总结\"><a href=\"#四种引用类型总结\" class=\"headerlink\" title=\"四种引用类型总结\"></a>四种引用类型总结</h1><p>::: tip<br>引用级别：强引用 &gt; 软引用 &gt; 弱引用 &gt; 虚引用<br>:::</p>\n<h2 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解\"></a>理解</h2><p>就如最开始说的，设置四种引用类型，是为了更好的控制对象的生命周期，让代码能够一定程度上干涉GC过程，所以引用类型主要就是跟垃圾回收有关了。</p>\n<p>对于JVM、GC和内存，可以这样理解，内存好比你的抽屉，这个抽屉有一定大小，并不能无限存放东西。</p>\n<p>JVM好比你自己，会时不时来整理抽屉。那些申请的对象好比放在抽屉里的东西，生活中的必需品就好比强引用，而那些可能用到的东西（非必需品）就好比软引用或者弱引用。</p>\n<p>当抽屉还很空的时候，放一些非必须品你也不会在意，但是随着买的东西越来越多，抽屉里快放不下的时候，就需要根据重要程度来选择一些东西扔出抽屉，这个过程就好比GC。</p>\n<p>JVM在内存够用的时候，不会对软引用的对象进行回收，但是当内存紧张的时候，就会对它们进行清理。</p>\n<h2 id=\"四种引用类型对比\"><a href=\"#四种引用类型对比\" class=\"headerlink\" title=\"四种引用类型对比\"></a>四种引用类型对比</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">引用类型</th>\n<th>引用对象被垃圾回收的时间</th>\n<th>用途</th>\n<th>是否可以转为强引用</th>\n<th>对应的类</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">强引用</td>\n<td>从来不会</td>\n<td>一般用途，保持对象不被回收</td>\n<td>可以</td>\n<td>默认</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">软引用</td>\n<td>发生一次GC后，JVM决定还需要进一步回收更多空间时</td>\n<td>缓存，保持对象在内存足够时不被回收</td>\n<td>可以</td>\n<td>SoftReference</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">弱引用</td>\n<td>进行垃圾回收时，如果对象只存在弱引用</td>\n<td>缓存，仅仅在对象仍被使用时保持其不被回收</td>\n<td>可以</td>\n<td>WeakReference<br>WeakHashMap</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">虚引用</td>\n<td>进行垃圾回收时</td>\n<td>跟踪GC过程，在对象被回收前进行一些清理工作</td>\n<td>不可以</td>\n<td>PhantomReference</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"题外话\"><a href=\"#题外话\" class=\"headerlink\" title=\"题外话\"></a>题外话</h2><p>emmmm….总觉得少了点什么，有没有想过，为什么没有StrongReference类？ </p>\n<p>嗯，讲道理，软引用，弱引用，虚引用都有其对应的类，为什么强引用却没有？试想一下，如果有StrongReference类，那么在自定义缓存中进行引用类型判断时将会比较方便，事实上，在guava的LocalCache中，确实构造了一个<a href=\"https://github.com/google/guava/blob/1670960e088fe9c1e78b5d7dd7c0505741bf2988/guava/src/com/google/common/cache/LocalCache.java#L1676\" target=\"_blank\" rel=\"noopener\">StrongValueReference</a>的类，用来包裹一个强引用。</p>\n<p>所以当你想要自己造缓存的轮子时，可以先看看人家的轮子好不好用。<img src=\"./0003.png\" width=\"50\"></p>\n<p>至此，这一系列就算告一段落了，为了写这一系列文章，花了不少心思，离底层实现越来越近的感觉就像山洞探险，这个探索过程的曲径通幽，柳暗花明处其实就是最好的奖励。</p>\n<p>对于学习，就像是打通经脉的过程，从一个一个零散的点，到慢慢将它们贯通成线，点与点的联结会让人产生极大的快感，最终如果能将这些点编织成网，便像打通奇经八脉那样，知识不过是手到擒来了。<img src=\"./94.png\" width=\"50\"></p>\n<p>（这个B装的不错，还多了一些细节在里面，哈哈哈哈，溜了溜了）</p>\n"},{"prev":"./reference-queue-code-detail","next":"./weak-reference-code-detail","_content":"\n# SoftReference源码详解\n\n## 定义\n\n::: tip \nSoftReference是软引用，其引用的对象在内存不足的时候会被回收。只有软引用指向的对象称为软可达（softly-reachable）对象。\n:::\n\n## 说明\n\n垃圾回收器会在内存不足，经过一次垃圾回收后，内存仍旧不足的时候回收掉软可达对象。在虚拟机抛出OOM之前，会保证已经清除了所有指向软可达对象的软引用。\n\n如果内存足够，并没有规定回收软引用的具体时间，所以在内存充足的情况下，软引用对象也可能存活很长时间。\n\nJVM会根据当前内存的情况来决定是否回收softly-reachable对象，但只要referent有强引用存在，该referent就一定不会被清理，因此SoftReference适合用来实现memory-sensitive caches。软引用的回收策略在不同的JVM实现会略有不同。\n\n另外，JVM不仅仅只会考虑当前内存情况，还会考虑软引用所指向的referent最近使用情况和创建时间来综合决定是否回收该referent。\n\n一般而言，SoftReference对象会在垃圾回收器回收其内部referent后，才会被放入其注册的引用队列中（如果创建时注册了的话）。\n\n```ba&#39;sh\nSoft reference objects, which are cleared at the discretion of the garbage collector in response to memory demand. \n```\n\n就是说，软引用具体什么时候回收最终还是由虚拟机自己决定的，所以不同虚拟机对软引用的回收方式会有些不一样。\n\n## SoftReference源码\n\n```java\npublic class SoftReference<T> extends Reference<T> {\n    /**\n     * 由垃圾回收器负责更新的时间戳\n     */\n    static private long clock;\n\n    /**\n     * 在get方法调用时更新的时间戳，当虚拟机选择软引用进行清理时，可能会参考这个字段。\n     */\n    private long timestamp;\n\n    public SoftReference(T referent) {\n        super(referent);\n        this.timestamp = clock;\n    }\n\n    public SoftReference(T referent, ReferenceQueue<? super T> q) {\n        super(referent, q);\n        this.timestamp = clock;\n    }\n\n    /**\n     * 返回引用指向的对象，如果referent已经被程序或者垃圾回收器清理，则返回null。\n     */\n    public T get() {\n        T o = super.get();\n        if (o != null && this.timestamp != clock)\n            this.timestamp = clock;\n        return o;\n    }\n}\n```\n\nSoftReference类内部代码很少，两个成员变量，clock是一个静态变量，是由垃圾回收器负责更新的时间戳，在JVM初始化时，会对变量clock进行初始化，同时，在JVM发生GC时，也会更新clock的值，所以clock会记录上次GC发生的时间点。\n\ntimestamp是在创建和更新时更新的时间戳，将其更新为clock的值，垃圾回收器在回收软引用对象时可能会参考timestamp。\n\nSoftReference类有两个构造函数，一个是不传引用队列，一个传引用队列。在创建时，都会更新timestamp，将其赋值为clock的值，get方法也并没有什么骚操作，只是简单的调用 super.get() 并在返回值不为null时更新timestamp。\n\n## 软引用何时回收\n\n前面说过，软引用会在内存不足的时候进行回收，但是回收时并不会一次性全部回收，而是会使用一定的回收策略。\n\n下面以最常用的虚拟机HotSpot进行说明。下面是Oracle文档中的说明：\n\n```java\nThe default value is 1000 ms per megabyte, which means that a soft reference will survive (after the last strong reference to the object has been collected) for 1 second for each megabyte of free space in the heap\n```\n\n默认的生存周期为1000ms/Mb，举个具体的栗子：\n\n假设，堆内存为512Mb，并且可用内存为400Mb，我们创建一个object A，用软引用创建一个引用A的缓存对象cache，以及另一个object B 引用object A。此时，由于B持有A的强引用，所以对象A是强可达并且不会被垃圾回收器回收。\n\n![soft-reference-1](./soft-reference-3.png)\n\n如果B被删除了，那么A仅剩下一个软引用cache引用它，如果A在400s内没有再次被强引用关联，它将会在超时后被删除。\n\n![soft-reference-2](./soft-reference-2.png)\n\n下面是一个控制软引用的栗子：\n\n```java\npublic class SoftRefTest {\n    public static class A{\n    }\n    public static class B{\n        private A strongRef;\n \n        public void setStrongRef(A ref) {\n            this.strongRef = ref;\n        }\n    }\n    public static SoftReference<A> cache;\n \n    public static void main(String[] args) throws InterruptedException{\n        //用一个A类实例的软引用初始化cache对象\n        SoftRefTest.A instanceA = new SoftRefTest.A();\n        cache = new SoftReference<SoftRefTest.A>(instanceA);\n        instanceA = null;\n        // instanceA 现在是软可达状态，并且会在之后的某个时间被垃圾回收器回收\n        Thread.sleep(10000);\n \n        ...\n        SoftRefTest.B instanceB = new SoftRefTest.B();\n        //由于cache仅持有instanceA的软引用，所以无法保证instanceA仍然存活\n        instanceA = cache.get();\n        if (instanceA == null){\n            instanceA = new SoftRefTest.A();\n            cache = new SoftReference<SoftRefTest.A>(instanceA);\n        }\n        instanceB.setStrongRef(instanceA);\n        instanceA = null;\n        // instanceA现在与cache对象存在软引用并且与B对象存在强引用，所以它不会被垃圾回收器回收\n \n        ...\n    }\n}\n```\n\n但是需要注意的是，被软引用对象关联的对象会自动被垃圾回收器回收，但是软引用对象本身也是一个对象，这些创建的软引用并不会自动被垃圾回收器回收掉，所以在之前一篇中说明里的[栗子](./soft-reference.md#说明)里，软引用是不会被释放掉的。\n\n所以，你仍然需要手动去清理它们，否则也会导致OOM的产生，这里也举一个小栗子：\n\n```java\npublic class SoftReferenceTest{\n\n    public static class MyBigObject{\n        int[] data = new int[128];\n    }\n\n    public static int CACHE_INITIAL_CAPACITY = 100_000;\n    // 静态集合保存软引用，会导致这些软引用对象本身无法被垃圾回收器回收\n    public static Set<SoftReference<MyBigObject>> cache = new HashSet<>(CACHE_INITIAL_CAPACITY);\n\n    public static void main(String[] args) {\n        for (int i = 0; i < 100_000; i++) {\n            MyBigObject obj = new MyBigObject();\n            cache.add(new SoftReference<>(obj));\n            if (i%10_000 == 0){\n                System.out.println(\"size of cache:\" + cache.size());\n            }\n        }\n        System.out.println(\"End\");\n    }\n}\n```\n\n使用的虚拟机参数为：\n\n```java\n-Xms4m -Xmx4m -Xmn2m\n```\n\n输出如下：\n\n```bash\nsize of cache:1\nsize of cache:10001\nsize of cache:20001\nsize of cache:30001\nException in thread \"main\" java.lang.OutOfMemoryError: GC overhead limit exceeded\n```\n\n最终抛出了OOM，但这里的原因却并不是`Java heap space`，而是` GC overhead limit exceeded ` ，之所以会抛出这个错误，是由于虚拟机一直在不断回收软引用，回收进行的速度过快，占用的cpu过大（超过98%），并且每次回收掉的内存过小（小于2%），导致最终抛出了这个错误。\n\n对于这里，合适的处理方式是注册一个引用队列，每次循环之后将引用队列中出现的软引用对象从cache中移除。\n\n```java\npublic class SoftReferenceTest{\n\n    public static int removedSoftRefs = 0;\n\n    public static class MyBigObject{\n        int[] data = new int[128];\n    }\n\n    public static int CACHE_INITIAL_CAPACITY = 100_000;\n    // 静态集合保存软引用，会导致这些软引用对象本身无法被垃圾回收器回收\n    public static Set<SoftReference<MyBigObject>> cache = new HashSet<>(CACHE_INITIAL_CAPACITY);\n    public static ReferenceQueue<MyBigObject> referenceQueue = new ReferenceQueue<>();\n\n    public static void main(String[] args) {\n        for (int i = 0; i < 100_000; i++) {\n            MyBigObject obj = new MyBigObject();\n            cache.add(new SoftReference<>(obj, referenceQueue));\n            clearUselessReferences();\n        }\n        System.out.println(\"End, removed soft references=\" + removedSoftRefs);\n    }\n\n    public static void clearUselessReferences() {\n        Reference<? extends MyBigObject> ref = referenceQueue.poll();\n        while (ref != null) {\n            if (cache.remove(ref)) {\n                removedSoftRefs++;\n            }\n            ref = referenceQueue.poll();\n        }\n    }\n}\n```\n\n使用同样的虚拟机配置，输出如下：\n\n```bash\nEnd, removed soft references=97319\n```\n\n## HotSpot虚拟机对于软引用的处理\n\n就HotSpot虚拟机而言，常用的回收策略是基于当前堆大小的LRU策略（LRUCurrentHeapPolicy），会使用clock的值减去timestamp，得到的差值，就是这个软引用被闲置的时间，如果闲置足够长时间，就认为是可被回收的。\n\n```c++\nbool LRUCurrentHeapPolicy::should_clear_reference(oop p,\n                                                  jlong timestamp_clock) {\n  jlong interval = timestamp_clock - java_lang_ref_SoftReference::timestamp(p);\n  assert(interval >= 0, \"Sanity check\");\n\n  if(interval <= _max_interval) {\n    return false;\n  }\n\n  return true;\n}\n```\n\n这里 `timestamp_clock` 即SoftReference中clock的值，即上次GC时间。java_lang_ref_SoftReference::timestamp(p)可以获取引用中timestamp的值。\n\n那么这个足够长的时间 `_max_interval`是怎么计算的呢？\n\n```c++\nvoid LRUCurrentHeapPolicy::setup() {\n  _max_interval = (Universe::get_heap_free_at_last_gc() / M) * SoftRefLRUPolicyMSPerMB;\n  assert(_max_interval >= 0,\"Sanity check\");\n}\n```\n\n其中`SoftRefLRUPolicyMSPerMB`默认1000，所以可以看出这个回收时间与上次GC后的剩余空间大小有关，可用空间越大，`_max_interval`就越大。\n\n如果GC之后，堆的可用空间还很大的话，SoftReference对象可以长时间的在堆中而不被回收。反之，如果GC之后，只剩下很少的内存可用，那么SoftReference对象便会很快进行回收。\n\nSoftReference在一定程度上会影响垃圾回收，如果软可达对象中对应的referent多次垃圾回收仍然不满足释放条件，那么它会停留在堆的老年代，占据很大部分空间，在JVM没有抛出OutOfMemoryError前，它有可能会导致频繁的Full GC，会对性能有一定的影响。 \n\n## 小结\n\n+ 软引用的具体回收时间与具体虚拟机有关\n+ 软引用中会在创建和调用get方法的时候更新内部timestamp，提供给虚拟机回收时进行参考\n+ hotspot虚拟机对于软引用使用的是LRU策略，回收时会根据软引用被闲置的时间和当前内存综合进行判断\n\n","source":"_posts/java/reference/soft-reference-code-detail.md","raw":"---\nprev: ./reference-queue-code-detail\nnext: ./weak-reference-code-detail\n---\n\n# SoftReference源码详解\n\n## 定义\n\n::: tip \nSoftReference是软引用，其引用的对象在内存不足的时候会被回收。只有软引用指向的对象称为软可达（softly-reachable）对象。\n:::\n\n## 说明\n\n垃圾回收器会在内存不足，经过一次垃圾回收后，内存仍旧不足的时候回收掉软可达对象。在虚拟机抛出OOM之前，会保证已经清除了所有指向软可达对象的软引用。\n\n如果内存足够，并没有规定回收软引用的具体时间，所以在内存充足的情况下，软引用对象也可能存活很长时间。\n\nJVM会根据当前内存的情况来决定是否回收softly-reachable对象，但只要referent有强引用存在，该referent就一定不会被清理，因此SoftReference适合用来实现memory-sensitive caches。软引用的回收策略在不同的JVM实现会略有不同。\n\n另外，JVM不仅仅只会考虑当前内存情况，还会考虑软引用所指向的referent最近使用情况和创建时间来综合决定是否回收该referent。\n\n一般而言，SoftReference对象会在垃圾回收器回收其内部referent后，才会被放入其注册的引用队列中（如果创建时注册了的话）。\n\n```ba&#39;sh\nSoft reference objects, which are cleared at the discretion of the garbage collector in response to memory demand. \n```\n\n就是说，软引用具体什么时候回收最终还是由虚拟机自己决定的，所以不同虚拟机对软引用的回收方式会有些不一样。\n\n## SoftReference源码\n\n```java\npublic class SoftReference<T> extends Reference<T> {\n    /**\n     * 由垃圾回收器负责更新的时间戳\n     */\n    static private long clock;\n\n    /**\n     * 在get方法调用时更新的时间戳，当虚拟机选择软引用进行清理时，可能会参考这个字段。\n     */\n    private long timestamp;\n\n    public SoftReference(T referent) {\n        super(referent);\n        this.timestamp = clock;\n    }\n\n    public SoftReference(T referent, ReferenceQueue<? super T> q) {\n        super(referent, q);\n        this.timestamp = clock;\n    }\n\n    /**\n     * 返回引用指向的对象，如果referent已经被程序或者垃圾回收器清理，则返回null。\n     */\n    public T get() {\n        T o = super.get();\n        if (o != null && this.timestamp != clock)\n            this.timestamp = clock;\n        return o;\n    }\n}\n```\n\nSoftReference类内部代码很少，两个成员变量，clock是一个静态变量，是由垃圾回收器负责更新的时间戳，在JVM初始化时，会对变量clock进行初始化，同时，在JVM发生GC时，也会更新clock的值，所以clock会记录上次GC发生的时间点。\n\ntimestamp是在创建和更新时更新的时间戳，将其更新为clock的值，垃圾回收器在回收软引用对象时可能会参考timestamp。\n\nSoftReference类有两个构造函数，一个是不传引用队列，一个传引用队列。在创建时，都会更新timestamp，将其赋值为clock的值，get方法也并没有什么骚操作，只是简单的调用 super.get() 并在返回值不为null时更新timestamp。\n\n## 软引用何时回收\n\n前面说过，软引用会在内存不足的时候进行回收，但是回收时并不会一次性全部回收，而是会使用一定的回收策略。\n\n下面以最常用的虚拟机HotSpot进行说明。下面是Oracle文档中的说明：\n\n```java\nThe default value is 1000 ms per megabyte, which means that a soft reference will survive (after the last strong reference to the object has been collected) for 1 second for each megabyte of free space in the heap\n```\n\n默认的生存周期为1000ms/Mb，举个具体的栗子：\n\n假设，堆内存为512Mb，并且可用内存为400Mb，我们创建一个object A，用软引用创建一个引用A的缓存对象cache，以及另一个object B 引用object A。此时，由于B持有A的强引用，所以对象A是强可达并且不会被垃圾回收器回收。\n\n![soft-reference-1](./soft-reference-3.png)\n\n如果B被删除了，那么A仅剩下一个软引用cache引用它，如果A在400s内没有再次被强引用关联，它将会在超时后被删除。\n\n![soft-reference-2](./soft-reference-2.png)\n\n下面是一个控制软引用的栗子：\n\n```java\npublic class SoftRefTest {\n    public static class A{\n    }\n    public static class B{\n        private A strongRef;\n \n        public void setStrongRef(A ref) {\n            this.strongRef = ref;\n        }\n    }\n    public static SoftReference<A> cache;\n \n    public static void main(String[] args) throws InterruptedException{\n        //用一个A类实例的软引用初始化cache对象\n        SoftRefTest.A instanceA = new SoftRefTest.A();\n        cache = new SoftReference<SoftRefTest.A>(instanceA);\n        instanceA = null;\n        // instanceA 现在是软可达状态，并且会在之后的某个时间被垃圾回收器回收\n        Thread.sleep(10000);\n \n        ...\n        SoftRefTest.B instanceB = new SoftRefTest.B();\n        //由于cache仅持有instanceA的软引用，所以无法保证instanceA仍然存活\n        instanceA = cache.get();\n        if (instanceA == null){\n            instanceA = new SoftRefTest.A();\n            cache = new SoftReference<SoftRefTest.A>(instanceA);\n        }\n        instanceB.setStrongRef(instanceA);\n        instanceA = null;\n        // instanceA现在与cache对象存在软引用并且与B对象存在强引用，所以它不会被垃圾回收器回收\n \n        ...\n    }\n}\n```\n\n但是需要注意的是，被软引用对象关联的对象会自动被垃圾回收器回收，但是软引用对象本身也是一个对象，这些创建的软引用并不会自动被垃圾回收器回收掉，所以在之前一篇中说明里的[栗子](./soft-reference.md#说明)里，软引用是不会被释放掉的。\n\n所以，你仍然需要手动去清理它们，否则也会导致OOM的产生，这里也举一个小栗子：\n\n```java\npublic class SoftReferenceTest{\n\n    public static class MyBigObject{\n        int[] data = new int[128];\n    }\n\n    public static int CACHE_INITIAL_CAPACITY = 100_000;\n    // 静态集合保存软引用，会导致这些软引用对象本身无法被垃圾回收器回收\n    public static Set<SoftReference<MyBigObject>> cache = new HashSet<>(CACHE_INITIAL_CAPACITY);\n\n    public static void main(String[] args) {\n        for (int i = 0; i < 100_000; i++) {\n            MyBigObject obj = new MyBigObject();\n            cache.add(new SoftReference<>(obj));\n            if (i%10_000 == 0){\n                System.out.println(\"size of cache:\" + cache.size());\n            }\n        }\n        System.out.println(\"End\");\n    }\n}\n```\n\n使用的虚拟机参数为：\n\n```java\n-Xms4m -Xmx4m -Xmn2m\n```\n\n输出如下：\n\n```bash\nsize of cache:1\nsize of cache:10001\nsize of cache:20001\nsize of cache:30001\nException in thread \"main\" java.lang.OutOfMemoryError: GC overhead limit exceeded\n```\n\n最终抛出了OOM，但这里的原因却并不是`Java heap space`，而是` GC overhead limit exceeded ` ，之所以会抛出这个错误，是由于虚拟机一直在不断回收软引用，回收进行的速度过快，占用的cpu过大（超过98%），并且每次回收掉的内存过小（小于2%），导致最终抛出了这个错误。\n\n对于这里，合适的处理方式是注册一个引用队列，每次循环之后将引用队列中出现的软引用对象从cache中移除。\n\n```java\npublic class SoftReferenceTest{\n\n    public static int removedSoftRefs = 0;\n\n    public static class MyBigObject{\n        int[] data = new int[128];\n    }\n\n    public static int CACHE_INITIAL_CAPACITY = 100_000;\n    // 静态集合保存软引用，会导致这些软引用对象本身无法被垃圾回收器回收\n    public static Set<SoftReference<MyBigObject>> cache = new HashSet<>(CACHE_INITIAL_CAPACITY);\n    public static ReferenceQueue<MyBigObject> referenceQueue = new ReferenceQueue<>();\n\n    public static void main(String[] args) {\n        for (int i = 0; i < 100_000; i++) {\n            MyBigObject obj = new MyBigObject();\n            cache.add(new SoftReference<>(obj, referenceQueue));\n            clearUselessReferences();\n        }\n        System.out.println(\"End, removed soft references=\" + removedSoftRefs);\n    }\n\n    public static void clearUselessReferences() {\n        Reference<? extends MyBigObject> ref = referenceQueue.poll();\n        while (ref != null) {\n            if (cache.remove(ref)) {\n                removedSoftRefs++;\n            }\n            ref = referenceQueue.poll();\n        }\n    }\n}\n```\n\n使用同样的虚拟机配置，输出如下：\n\n```bash\nEnd, removed soft references=97319\n```\n\n## HotSpot虚拟机对于软引用的处理\n\n就HotSpot虚拟机而言，常用的回收策略是基于当前堆大小的LRU策略（LRUCurrentHeapPolicy），会使用clock的值减去timestamp，得到的差值，就是这个软引用被闲置的时间，如果闲置足够长时间，就认为是可被回收的。\n\n```c++\nbool LRUCurrentHeapPolicy::should_clear_reference(oop p,\n                                                  jlong timestamp_clock) {\n  jlong interval = timestamp_clock - java_lang_ref_SoftReference::timestamp(p);\n  assert(interval >= 0, \"Sanity check\");\n\n  if(interval <= _max_interval) {\n    return false;\n  }\n\n  return true;\n}\n```\n\n这里 `timestamp_clock` 即SoftReference中clock的值，即上次GC时间。java_lang_ref_SoftReference::timestamp(p)可以获取引用中timestamp的值。\n\n那么这个足够长的时间 `_max_interval`是怎么计算的呢？\n\n```c++\nvoid LRUCurrentHeapPolicy::setup() {\n  _max_interval = (Universe::get_heap_free_at_last_gc() / M) * SoftRefLRUPolicyMSPerMB;\n  assert(_max_interval >= 0,\"Sanity check\");\n}\n```\n\n其中`SoftRefLRUPolicyMSPerMB`默认1000，所以可以看出这个回收时间与上次GC后的剩余空间大小有关，可用空间越大，`_max_interval`就越大。\n\n如果GC之后，堆的可用空间还很大的话，SoftReference对象可以长时间的在堆中而不被回收。反之，如果GC之后，只剩下很少的内存可用，那么SoftReference对象便会很快进行回收。\n\nSoftReference在一定程度上会影响垃圾回收，如果软可达对象中对应的referent多次垃圾回收仍然不满足释放条件，那么它会停留在堆的老年代，占据很大部分空间，在JVM没有抛出OutOfMemoryError前，它有可能会导致频繁的Full GC，会对性能有一定的影响。 \n\n## 小结\n\n+ 软引用的具体回收时间与具体虚拟机有关\n+ 软引用中会在创建和调用get方法的时候更新内部timestamp，提供给虚拟机回收时进行参考\n+ hotspot虚拟机对于软引用使用的是LRU策略，回收时会根据软引用被闲置的时间和当前内存综合进行判断\n\n","slug":"java/reference/soft-reference-code-detail","published":1,"date":"2018-12-27T08:04:21.637Z","updated":"2018-12-27T08:04:21.638Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5rk002swu9k851unk0x","content":"<h1 id=\"SoftReference源码详解\"><a href=\"#SoftReference源码详解\" class=\"headerlink\" title=\"SoftReference源码详解\"></a>SoftReference源码详解</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>::: tip<br>SoftReference是软引用，其引用的对象在内存不足的时候会被回收。只有软引用指向的对象称为软可达（softly-reachable）对象。<br>:::</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>垃圾回收器会在内存不足，经过一次垃圾回收后，内存仍旧不足的时候回收掉软可达对象。在虚拟机抛出OOM之前，会保证已经清除了所有指向软可达对象的软引用。</p>\n<p>如果内存足够，并没有规定回收软引用的具体时间，所以在内存充足的情况下，软引用对象也可能存活很长时间。</p>\n<p>JVM会根据当前内存的情况来决定是否回收softly-reachable对象，但只要referent有强引用存在，该referent就一定不会被清理，因此SoftReference适合用来实现memory-sensitive caches。软引用的回收策略在不同的JVM实现会略有不同。</p>\n<p>另外，JVM不仅仅只会考虑当前内存情况，还会考虑软引用所指向的referent最近使用情况和创建时间来综合决定是否回收该referent。</p>\n<p>一般而言，SoftReference对象会在垃圾回收器回收其内部referent后，才会被放入其注册的引用队列中（如果创建时注册了的话）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Soft reference objects, which are cleared at the discretion of the garbage collector in response to memory demand.</span><br></pre></td></tr></table></figure>\n<p>就是说，软引用具体什么时候回收最终还是由虚拟机自己决定的，所以不同虚拟机对软引用的回收方式会有些不一样。</p>\n<h2 id=\"SoftReference源码\"><a href=\"#SoftReference源码\" class=\"headerlink\" title=\"SoftReference源码\"></a>SoftReference源码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SoftReference</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Reference</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 由垃圾回收器负责更新的时间戳</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> clock;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 在get方法调用时更新的时间戳，当虚拟机选择软引用进行清理时，可能会参考这个字段。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> timestamp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SoftReference</span><span class=\"params\">(T referent)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(referent);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.timestamp = clock;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SoftReference</span><span class=\"params\">(T referent, ReferenceQueue&lt;? <span class=\"keyword\">super</span> T&gt; q)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(referent, q);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.timestamp = clock;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回引用指向的对象，如果referent已经被程序或者垃圾回收器清理，则返回null。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        T o = <span class=\"keyword\">super</span>.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (o != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"keyword\">this</span>.timestamp != clock)</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.timestamp = clock;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>SoftReference类内部代码很少，两个成员变量，clock是一个静态变量，是由垃圾回收器负责更新的时间戳，在JVM初始化时，会对变量clock进行初始化，同时，在JVM发生GC时，也会更新clock的值，所以clock会记录上次GC发生的时间点。</p>\n<p>timestamp是在创建和更新时更新的时间戳，将其更新为clock的值，垃圾回收器在回收软引用对象时可能会参考timestamp。</p>\n<p>SoftReference类有两个构造函数，一个是不传引用队列，一个传引用队列。在创建时，都会更新timestamp，将其赋值为clock的值，get方法也并没有什么骚操作，只是简单的调用 super.get() 并在返回值不为null时更新timestamp。</p>\n<h2 id=\"软引用何时回收\"><a href=\"#软引用何时回收\" class=\"headerlink\" title=\"软引用何时回收\"></a>软引用何时回收</h2><p>前面说过，软引用会在内存不足的时候进行回收，但是回收时并不会一次性全部回收，而是会使用一定的回收策略。</p>\n<p>下面以最常用的虚拟机HotSpot进行说明。下面是Oracle文档中的说明：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The <span class=\"keyword\">default</span> value is <span class=\"number\">1000</span> ms per megabyte, <span class=\"function\">which means that a soft reference will <span class=\"title\">survive</span> <span class=\"params\">(after the last strong reference to the object has been collected)</span> <span class=\"keyword\">for</span> 1 second <span class=\"keyword\">for</span> each megabyte of free space in the heap</span></span><br></pre></td></tr></table></figure>\n<p>默认的生存周期为1000ms/Mb，举个具体的栗子：</p>\n<p>假设，堆内存为512Mb，并且可用内存为400Mb，我们创建一个object A，用软引用创建一个引用A的缓存对象cache，以及另一个object B 引用object A。此时，由于B持有A的强引用，所以对象A是强可达并且不会被垃圾回收器回收。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"./soft-reference-3.png\" alt=\"soft-reference-1\" title=\"\">\n                </div>\n                <div class=\"image-caption\">soft-reference-1</div>\n            </figure>\n<p>如果B被删除了，那么A仅剩下一个软引用cache引用它，如果A在400s内没有再次被强引用关联，它将会在超时后被删除。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"./soft-reference-2.png\" alt=\"soft-reference-2\" title=\"\">\n                </div>\n                <div class=\"image-caption\">soft-reference-2</div>\n            </figure>\n<p>下面是一个控制软引用的栗子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SoftRefTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> A strongRef;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStrongRef</span><span class=\"params\">(A ref)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.strongRef = ref;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SoftReference&lt;A&gt; cache;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//用一个A类实例的软引用初始化cache对象</span></span><br><span class=\"line\">        SoftRefTest.A instanceA = <span class=\"keyword\">new</span> SoftRefTest.A();</span><br><span class=\"line\">        cache = <span class=\"keyword\">new</span> SoftReference&lt;SoftRefTest.A&gt;(instanceA);</span><br><span class=\"line\">        instanceA = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// instanceA 现在是软可达状态，并且会在之后的某个时间被垃圾回收器回收</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">10000</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">        ...</span><br><span class=\"line\">        SoftRefTest.B instanceB = <span class=\"keyword\">new</span> SoftRefTest.B();</span><br><span class=\"line\">        <span class=\"comment\">//由于cache仅持有instanceA的软引用，所以无法保证instanceA仍然存活</span></span><br><span class=\"line\">        instanceA = cache.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instanceA == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            instanceA = <span class=\"keyword\">new</span> SoftRefTest.A();</span><br><span class=\"line\">            cache = <span class=\"keyword\">new</span> SoftReference&lt;SoftRefTest.A&gt;(instanceA);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        instanceB.setStrongRef(instanceA);</span><br><span class=\"line\">        instanceA = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// instanceA现在与cache对象存在软引用并且与B对象存在强引用，所以它不会被垃圾回收器回收</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是需要注意的是，被软引用对象关联的对象会自动被垃圾回收器回收，但是软引用对象本身也是一个对象，这些创建的软引用并不会自动被垃圾回收器回收掉，所以在之前一篇中说明里的<a href=\"./soft-reference.md#说明\">栗子</a>里，软引用是不会被释放掉的。</p>\n<p>所以，你仍然需要手动去清理它们，否则也会导致OOM的产生，这里也举一个小栗子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SoftReferenceTest</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBigObject</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] data = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">128</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> CACHE_INITIAL_CAPACITY = <span class=\"number\">100_000</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 静态集合保存软引用，会导致这些软引用对象本身无法被垃圾回收器回收</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Set&lt;SoftReference&lt;MyBigObject&gt;&gt; cache = <span class=\"keyword\">new</span> HashSet&lt;&gt;(CACHE_INITIAL_CAPACITY);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100_000</span>; i++) &#123;</span><br><span class=\"line\">            MyBigObject obj = <span class=\"keyword\">new</span> MyBigObject();</span><br><span class=\"line\">            cache.add(<span class=\"keyword\">new</span> SoftReference&lt;&gt;(obj));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i%<span class=\"number\">10_000</span> == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"size of cache:\"</span> + cache.size());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"End\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用的虚拟机参数为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-Xms4m -Xmx4m -Xmn2m</span><br></pre></td></tr></table></figure>\n<p>输出如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">size of cache:1</span><br><span class=\"line\">size of cache:10001</span><br><span class=\"line\">size of cache:20001</span><br><span class=\"line\">size of cache:30001</span><br><span class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">\"main\"</span> java.lang.OutOfMemoryError: GC overhead <span class=\"built_in\">limit</span> exceeded</span><br></pre></td></tr></table></figure>\n<p>最终抛出了OOM，但这里的原因却并不是<code>Java heap space</code>，而是<code>GC overhead limit exceeded</code> ，之所以会抛出这个错误，是由于虚拟机一直在不断回收软引用，回收进行的速度过快，占用的cpu过大（超过98%），并且每次回收掉的内存过小（小于2%），导致最终抛出了这个错误。</p>\n<p>对于这里，合适的处理方式是注册一个引用队列，每次循环之后将引用队列中出现的软引用对象从cache中移除。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SoftReferenceTest</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> removedSoftRefs = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBigObject</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] data = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">128</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> CACHE_INITIAL_CAPACITY = <span class=\"number\">100_000</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 静态集合保存软引用，会导致这些软引用对象本身无法被垃圾回收器回收</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Set&lt;SoftReference&lt;MyBigObject&gt;&gt; cache = <span class=\"keyword\">new</span> HashSet&lt;&gt;(CACHE_INITIAL_CAPACITY);</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ReferenceQueue&lt;MyBigObject&gt; referenceQueue = <span class=\"keyword\">new</span> ReferenceQueue&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100_000</span>; i++) &#123;</span><br><span class=\"line\">            MyBigObject obj = <span class=\"keyword\">new</span> MyBigObject();</span><br><span class=\"line\">            cache.add(<span class=\"keyword\">new</span> SoftReference&lt;&gt;(obj, referenceQueue));</span><br><span class=\"line\">            clearUselessReferences();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"End, removed soft references=\"</span> + removedSoftRefs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">clearUselessReferences</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Reference&lt;? extends MyBigObject&gt; ref = referenceQueue.poll();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (ref != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cache.remove(ref)) &#123;</span><br><span class=\"line\">                removedSoftRefs++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ref = referenceQueue.poll();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用同样的虚拟机配置，输出如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">End, removed soft references=97319</span><br></pre></td></tr></table></figure>\n<h2 id=\"HotSpot虚拟机对于软引用的处理\"><a href=\"#HotSpot虚拟机对于软引用的处理\" class=\"headerlink\" title=\"HotSpot虚拟机对于软引用的处理\"></a>HotSpot虚拟机对于软引用的处理</h2><p>就HotSpot虚拟机而言，常用的回收策略是基于当前堆大小的LRU策略（LRUCurrentHeapPolicy），会使用clock的值减去timestamp，得到的差值，就是这个软引用被闲置的时间，如果闲置足够长时间，就认为是可被回收的。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> LRUCurrentHeapPolicy::should_clear_reference(oop p,</span><br><span class=\"line\">                                                  jlong timestamp_clock) &#123;</span><br><span class=\"line\">  jlong interval = timestamp_clock - java_lang_ref_SoftReference::timestamp(p);</span><br><span class=\"line\">  assert(interval &gt;= <span class=\"number\">0</span>, <span class=\"string\">\"Sanity check\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(interval &lt;= _max_interval) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里 <code>timestamp_clock</code> 即SoftReference中clock的值，即上次GC时间。java_lang_ref_SoftReference::timestamp(p)可以获取引用中timestamp的值。</p>\n<p>那么这个足够长的时间 <code>_max_interval</code>是怎么计算的呢？</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> LRUCurrentHeapPolicy::setup() &#123;</span><br><span class=\"line\">  _max_interval = (Universe::get_heap_free_at_last_gc() / M) * SoftRefLRUPolicyMSPerMB;</span><br><span class=\"line\">  assert(_max_interval &gt;= <span class=\"number\">0</span>,<span class=\"string\">\"Sanity check\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中<code>SoftRefLRUPolicyMSPerMB</code>默认1000，所以可以看出这个回收时间与上次GC后的剩余空间大小有关，可用空间越大，<code>_max_interval</code>就越大。</p>\n<p>如果GC之后，堆的可用空间还很大的话，SoftReference对象可以长时间的在堆中而不被回收。反之，如果GC之后，只剩下很少的内存可用，那么SoftReference对象便会很快进行回收。</p>\n<p>SoftReference在一定程度上会影响垃圾回收，如果软可达对象中对应的referent多次垃圾回收仍然不满足释放条件，那么它会停留在堆的老年代，占据很大部分空间，在JVM没有抛出OutOfMemoryError前，它有可能会导致频繁的Full GC，会对性能有一定的影响。 </p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li>软引用的具体回收时间与具体虚拟机有关</li>\n<li>软引用中会在创建和调用get方法的时候更新内部timestamp，提供给虚拟机回收时进行参考</li>\n<li>hotspot虚拟机对于软引用使用的是LRU策略，回收时会根据软引用被闲置的时间和当前内存综合进行判断</li>\n</ul>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"SoftReference源码详解\"><a href=\"#SoftReference源码详解\" class=\"headerlink\" title=\"SoftReference源码详解\"></a>SoftReference源码详解</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>::: tip<br>SoftReference是软引用，其引用的对象在内存不足的时候会被回收。只有软引用指向的对象称为软可达（softly-reachable）对象。<br>:::</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>垃圾回收器会在内存不足，经过一次垃圾回收后，内存仍旧不足的时候回收掉软可达对象。在虚拟机抛出OOM之前，会保证已经清除了所有指向软可达对象的软引用。</p>\n<p>如果内存足够，并没有规定回收软引用的具体时间，所以在内存充足的情况下，软引用对象也可能存活很长时间。</p>\n<p>JVM会根据当前内存的情况来决定是否回收softly-reachable对象，但只要referent有强引用存在，该referent就一定不会被清理，因此SoftReference适合用来实现memory-sensitive caches。软引用的回收策略在不同的JVM实现会略有不同。</p>\n<p>另外，JVM不仅仅只会考虑当前内存情况，还会考虑软引用所指向的referent最近使用情况和创建时间来综合决定是否回收该referent。</p>\n<p>一般而言，SoftReference对象会在垃圾回收器回收其内部referent后，才会被放入其注册的引用队列中（如果创建时注册了的话）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Soft reference objects, which are cleared at the discretion of the garbage collector in response to memory demand.</span><br></pre></td></tr></table></figure>\n<p>就是说，软引用具体什么时候回收最终还是由虚拟机自己决定的，所以不同虚拟机对软引用的回收方式会有些不一样。</p>\n<h2 id=\"SoftReference源码\"><a href=\"#SoftReference源码\" class=\"headerlink\" title=\"SoftReference源码\"></a>SoftReference源码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SoftReference</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Reference</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 由垃圾回收器负责更新的时间戳</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> clock;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 在get方法调用时更新的时间戳，当虚拟机选择软引用进行清理时，可能会参考这个字段。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> timestamp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SoftReference</span><span class=\"params\">(T referent)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(referent);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.timestamp = clock;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SoftReference</span><span class=\"params\">(T referent, ReferenceQueue&lt;? <span class=\"keyword\">super</span> T&gt; q)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(referent, q);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.timestamp = clock;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回引用指向的对象，如果referent已经被程序或者垃圾回收器清理，则返回null。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        T o = <span class=\"keyword\">super</span>.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (o != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"keyword\">this</span>.timestamp != clock)</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.timestamp = clock;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>SoftReference类内部代码很少，两个成员变量，clock是一个静态变量，是由垃圾回收器负责更新的时间戳，在JVM初始化时，会对变量clock进行初始化，同时，在JVM发生GC时，也会更新clock的值，所以clock会记录上次GC发生的时间点。</p>\n<p>timestamp是在创建和更新时更新的时间戳，将其更新为clock的值，垃圾回收器在回收软引用对象时可能会参考timestamp。</p>\n<p>SoftReference类有两个构造函数，一个是不传引用队列，一个传引用队列。在创建时，都会更新timestamp，将其赋值为clock的值，get方法也并没有什么骚操作，只是简单的调用 super.get() 并在返回值不为null时更新timestamp。</p>\n<h2 id=\"软引用何时回收\"><a href=\"#软引用何时回收\" class=\"headerlink\" title=\"软引用何时回收\"></a>软引用何时回收</h2><p>前面说过，软引用会在内存不足的时候进行回收，但是回收时并不会一次性全部回收，而是会使用一定的回收策略。</p>\n<p>下面以最常用的虚拟机HotSpot进行说明。下面是Oracle文档中的说明：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The <span class=\"keyword\">default</span> value is <span class=\"number\">1000</span> ms per megabyte, <span class=\"function\">which means that a soft reference will <span class=\"title\">survive</span> <span class=\"params\">(after the last strong reference to the object has been collected)</span> <span class=\"keyword\">for</span> 1 second <span class=\"keyword\">for</span> each megabyte of free space in the heap</span></span><br></pre></td></tr></table></figure>\n<p>默认的生存周期为1000ms/Mb，举个具体的栗子：</p>\n<p>假设，堆内存为512Mb，并且可用内存为400Mb，我们创建一个object A，用软引用创建一个引用A的缓存对象cache，以及另一个object B 引用object A。此时，由于B持有A的强引用，所以对象A是强可达并且不会被垃圾回收器回收。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"./soft-reference-3.png\" alt=\"soft-reference-1\" title=\"\">\n                </div>\n                <div class=\"image-caption\">soft-reference-1</div>\n            </figure>\n<p>如果B被删除了，那么A仅剩下一个软引用cache引用它，如果A在400s内没有再次被强引用关联，它将会在超时后被删除。</p>\n<figure class=\"image-bubble\">\n                <div class=\"img-lightbox\">\n                    <div class=\"overlay\"></div>\n                    <img src=\"./soft-reference-2.png\" alt=\"soft-reference-2\" title=\"\">\n                </div>\n                <div class=\"image-caption\">soft-reference-2</div>\n            </figure>\n<p>下面是一个控制软引用的栗子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SoftRefTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> A strongRef;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStrongRef</span><span class=\"params\">(A ref)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.strongRef = ref;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SoftReference&lt;A&gt; cache;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//用一个A类实例的软引用初始化cache对象</span></span><br><span class=\"line\">        SoftRefTest.A instanceA = <span class=\"keyword\">new</span> SoftRefTest.A();</span><br><span class=\"line\">        cache = <span class=\"keyword\">new</span> SoftReference&lt;SoftRefTest.A&gt;(instanceA);</span><br><span class=\"line\">        instanceA = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// instanceA 现在是软可达状态，并且会在之后的某个时间被垃圾回收器回收</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">10000</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">        ...</span><br><span class=\"line\">        SoftRefTest.B instanceB = <span class=\"keyword\">new</span> SoftRefTest.B();</span><br><span class=\"line\">        <span class=\"comment\">//由于cache仅持有instanceA的软引用，所以无法保证instanceA仍然存活</span></span><br><span class=\"line\">        instanceA = cache.get();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instanceA == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            instanceA = <span class=\"keyword\">new</span> SoftRefTest.A();</span><br><span class=\"line\">            cache = <span class=\"keyword\">new</span> SoftReference&lt;SoftRefTest.A&gt;(instanceA);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        instanceB.setStrongRef(instanceA);</span><br><span class=\"line\">        instanceA = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// instanceA现在与cache对象存在软引用并且与B对象存在强引用，所以它不会被垃圾回收器回收</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是需要注意的是，被软引用对象关联的对象会自动被垃圾回收器回收，但是软引用对象本身也是一个对象，这些创建的软引用并不会自动被垃圾回收器回收掉，所以在之前一篇中说明里的<a href=\"./soft-reference.md#说明\">栗子</a>里，软引用是不会被释放掉的。</p>\n<p>所以，你仍然需要手动去清理它们，否则也会导致OOM的产生，这里也举一个小栗子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SoftReferenceTest</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBigObject</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] data = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">128</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> CACHE_INITIAL_CAPACITY = <span class=\"number\">100_000</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 静态集合保存软引用，会导致这些软引用对象本身无法被垃圾回收器回收</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Set&lt;SoftReference&lt;MyBigObject&gt;&gt; cache = <span class=\"keyword\">new</span> HashSet&lt;&gt;(CACHE_INITIAL_CAPACITY);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100_000</span>; i++) &#123;</span><br><span class=\"line\">            MyBigObject obj = <span class=\"keyword\">new</span> MyBigObject();</span><br><span class=\"line\">            cache.add(<span class=\"keyword\">new</span> SoftReference&lt;&gt;(obj));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i%<span class=\"number\">10_000</span> == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"size of cache:\"</span> + cache.size());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"End\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用的虚拟机参数为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-Xms4m -Xmx4m -Xmn2m</span><br></pre></td></tr></table></figure>\n<p>输出如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">size of cache:1</span><br><span class=\"line\">size of cache:10001</span><br><span class=\"line\">size of cache:20001</span><br><span class=\"line\">size of cache:30001</span><br><span class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">\"main\"</span> java.lang.OutOfMemoryError: GC overhead <span class=\"built_in\">limit</span> exceeded</span><br></pre></td></tr></table></figure>\n<p>最终抛出了OOM，但这里的原因却并不是<code>Java heap space</code>，而是<code>GC overhead limit exceeded</code> ，之所以会抛出这个错误，是由于虚拟机一直在不断回收软引用，回收进行的速度过快，占用的cpu过大（超过98%），并且每次回收掉的内存过小（小于2%），导致最终抛出了这个错误。</p>\n<p>对于这里，合适的处理方式是注册一个引用队列，每次循环之后将引用队列中出现的软引用对象从cache中移除。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SoftReferenceTest</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> removedSoftRefs = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBigObject</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] data = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">128</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> CACHE_INITIAL_CAPACITY = <span class=\"number\">100_000</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 静态集合保存软引用，会导致这些软引用对象本身无法被垃圾回收器回收</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Set&lt;SoftReference&lt;MyBigObject&gt;&gt; cache = <span class=\"keyword\">new</span> HashSet&lt;&gt;(CACHE_INITIAL_CAPACITY);</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ReferenceQueue&lt;MyBigObject&gt; referenceQueue = <span class=\"keyword\">new</span> ReferenceQueue&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100_000</span>; i++) &#123;</span><br><span class=\"line\">            MyBigObject obj = <span class=\"keyword\">new</span> MyBigObject();</span><br><span class=\"line\">            cache.add(<span class=\"keyword\">new</span> SoftReference&lt;&gt;(obj, referenceQueue));</span><br><span class=\"line\">            clearUselessReferences();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"End, removed soft references=\"</span> + removedSoftRefs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">clearUselessReferences</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Reference&lt;? extends MyBigObject&gt; ref = referenceQueue.poll();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (ref != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cache.remove(ref)) &#123;</span><br><span class=\"line\">                removedSoftRefs++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ref = referenceQueue.poll();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用同样的虚拟机配置，输出如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">End, removed soft references=97319</span><br></pre></td></tr></table></figure>\n<h2 id=\"HotSpot虚拟机对于软引用的处理\"><a href=\"#HotSpot虚拟机对于软引用的处理\" class=\"headerlink\" title=\"HotSpot虚拟机对于软引用的处理\"></a>HotSpot虚拟机对于软引用的处理</h2><p>就HotSpot虚拟机而言，常用的回收策略是基于当前堆大小的LRU策略（LRUCurrentHeapPolicy），会使用clock的值减去timestamp，得到的差值，就是这个软引用被闲置的时间，如果闲置足够长时间，就认为是可被回收的。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">bool</span> LRUCurrentHeapPolicy::should_clear_reference(oop p,</span><br><span class=\"line\">                                                  jlong timestamp_clock) &#123;</span><br><span class=\"line\">  jlong interval = timestamp_clock - java_lang_ref_SoftReference::timestamp(p);</span><br><span class=\"line\">  assert(interval &gt;= <span class=\"number\">0</span>, <span class=\"string\">\"Sanity check\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(interval &lt;= _max_interval) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里 <code>timestamp_clock</code> 即SoftReference中clock的值，即上次GC时间。java_lang_ref_SoftReference::timestamp(p)可以获取引用中timestamp的值。</p>\n<p>那么这个足够长的时间 <code>_max_interval</code>是怎么计算的呢？</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> LRUCurrentHeapPolicy::setup() &#123;</span><br><span class=\"line\">  _max_interval = (Universe::get_heap_free_at_last_gc() / M) * SoftRefLRUPolicyMSPerMB;</span><br><span class=\"line\">  assert(_max_interval &gt;= <span class=\"number\">0</span>,<span class=\"string\">\"Sanity check\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中<code>SoftRefLRUPolicyMSPerMB</code>默认1000，所以可以看出这个回收时间与上次GC后的剩余空间大小有关，可用空间越大，<code>_max_interval</code>就越大。</p>\n<p>如果GC之后，堆的可用空间还很大的话，SoftReference对象可以长时间的在堆中而不被回收。反之，如果GC之后，只剩下很少的内存可用，那么SoftReference对象便会很快进行回收。</p>\n<p>SoftReference在一定程度上会影响垃圾回收，如果软可达对象中对应的referent多次垃圾回收仍然不满足释放条件，那么它会停留在堆的老年代，占据很大部分空间，在JVM没有抛出OutOfMemoryError前，它有可能会导致频繁的Full GC，会对性能有一定的影响。 </p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li>软引用的具体回收时间与具体虚拟机有关</li>\n<li>软引用中会在创建和调用get方法的时候更新内部timestamp，提供给虚拟机回收时进行参考</li>\n<li>hotspot虚拟机对于软引用使用的是LRU策略，回收时会根据软引用被闲置的时间和当前内存综合进行判断</li>\n</ul>\n"},{"prev":"./strong-reference","next":"./weak-reference","_content":"\n# 软引用\n\n## 定义\n\n::: tip \n软引用是使用SoftReference创建的引用，强度弱于强引用，被其引用的对象在内存不足的时候会被回收，不会产生内存溢出。\n:::\n\n## 说明\n\n软引用，顾名思义就是比较“软”一点的引用。<img src=\"./0003.png\" width=\"50\"/>\n\n当一个对象与GC Roots之间存在强引用时，无论何时都不会被GC回收掉。如果一个对象与GC Roots之间没有强引用与其关联而存在软引用关联时，那么垃圾回收器对它的态度就取决于内存的紧张程度了。如果内存空间足够，垃圾回收器就不会回收这个对象，但如果内存空间不足了，它就难逃被回收的厄运。<img src=\"./0005.png\" width=\"50\"/>\n\n::: tip 软可达\n如果一个对象与GC Roots之间不存在强引用，但是存在软引用，则称这个对象为`软可达（soft reachable）`对象。\n:::\n\n在垃圾回收器没有回收它的时候，软可达对象就像强可达对象一样，可以被程序正常访问和使用，但是需要通过软引用对象间接访问，需要的话也能重新使用强引用将其关联。所以软引用适合用来做内存敏感的高速缓存。\n\n```java\nString s = new String(\"Frank\");    // 创建强引用与String对象关联，现在该String对象为强可达状态\nSoftReference<String> softRef = new SoftReference<String>(s);     // 再创建一个软引用关联该对象\ns = null;        // 消除强引用，现在只剩下软引用与其关联，该String对象为软可达状态\ns = softRef.get();  // 重新关联上强引用\n```\n\n这里变量s持有对字符串对象的强引用，而softRef持有对该对象的软引用，所以当执行s = null后，字符串对象就只剩下软引用了，这时如果因为内存不足发生Full GC，就会把这个字符串对象回收掉。\n\n::: warning 注意\n在垃圾回收器回收一个对象前，SoftReference类所提供的get方法会返回Java对象的强引用，一旦垃圾线程回收该对象之后，get方法将返回null。所以在获取软引用对象的代码中，一定要先判断返回是否为null，以免出现NullPointerException异常而导致应用崩溃。<img src=\"./2030.png\" width=\"50\"/>\n:::\n\n下面的代码会让s再次持有对象的强引用：\n\n```java\ns = softRef.get();\n```\n\n如果在softRef指向的对象被回收前，用强引用指向该对象，那这个对象又会变成强可达。\n\n来看一个使用SoftReference的栗子：\n\n```java\npublic class TestA {\n    static class OOMClass{\n        private int[] oom = new int[1024 * 100];// 100KB\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        ReferenceQueue<OOMClass> queue = new ReferenceQueue<>();\n        List<SoftReference> list = new ArrayList<>();\n        while(true){\n            for (int i = 0; i < 100; i++) {\n                list.add(new SoftReference<OOMClass>(new OOMClass(), queue));\n            }\n            Thread.sleep(500);\n        }\n    }\n}\n```\n\n::: warning 注意\nReferenceQueue中声明的类型为OOMClass，即与SoftReference引用的类型一致。\n:::\n\n设置一下虚拟机参数：\n\n```bash\n-verbose:gc -Xms4m -Xmx4m -Xmn2m\n```\n\n运行结果：\n\n```bash\n[GC (Allocation Failure)  1017K->432K(3584K), 0.0017239 secs]\n[GC (Allocation Failure)  1072K->472K(3584K), 0.0099237 secs]\n[GC (Allocation Failure)  1323K->1296K(3584K), 0.0009528 secs]\n[GC (Allocation Failure)  2114K->2136K(3584K), 0.0009951 secs]\n[Full GC (Ergonomics)  2136K->1992K(3584K), 0.0040658 secs]\n[Full GC (Ergonomics)  2807K->2791K(3584K), 0.0036280 secs]\n[Full GC (Allocation Failure)  2791K->373K(3584K), 0.0032477 secs]\n[Full GC (Ergonomics)  2786K->2773K(3584K), 0.0034554 secs]\n[Full GC (Allocation Failure)  2773K->373K(3584K), 0.0032667 secs]\n[Full GC (Ergonomics)  2798K->2775K(3584K), 0.0036231 secs]\n[Full GC (Allocation Failure)  2775K->375K(3584K), 0.0055482 secs]\n[Full GC (Ergonomics)  2799K->2776K(3584K), 0.0031358 secs]\n...省略n次GC信息\n```\n\n在TestA中，我们使用死循环不断的往list中添加新对象，如果是强引用，会很快因为内存不足而抛出OOM，因为这里的堆内存大小设置为了4M，而一个对象就有100KB，一个循环添加100个对象，也就是差不多10M，显然一个循环都跑不完就会内存不足，而这里，因为使用的是软引用，所以JVM会在内存不足的时候将软引用回收掉。\n\n```bash\n[Full GC (Allocation Failure)  2791K->373K(3584K), 0.0032477 secs]\n```\n\n从这一条可以看出，在内存不足发生Full GC时，回收掉了大部分的软引用指向的对象，释放了大量的内存。\n\n因为这里新生代只分配了2M，所以很快就会发生GC，如果你的程序运行没有看到这个结果，请先确认一下虚拟机参数是否设置正确，如果设置正确还是没有看到，那么将循环次数由1000改为10000或者100000在试试看。<img src=\"./141.png\" width=\"50\"/>\n\n## 应用场景\n\n软引用关联的对象，只有在内存不足的时候JVM才会回收该对象。这一点可以很好地用来解决OOM的问题，并且这个特性很适合用来实现缓存：比如网页缓存、图片缓存等。 \n\n现在考虑这样一个场景 ，在很多应用中，都会出现大量的默认图片，比如说QQ的默认头像，应用内的默认图标等等，这些图片很多地方会用到。\n\n如果每次都去读取图片，由于读取文件速度较慢，大量重复的读取会导致性能下降。所以可以考虑将图片缓存起来，需要的时候直接从内存中读取。但是，由于图片占用内存空间比较大，缓存的图片过多会占用比较多的内存，就可能比较容易发生OOM。这时候，软引用就派得上用场了。<img src=\"./0009.png\" width=\"50\"/>\n\n::: warning 注意\nSoftReference对象是用来保存软引用的，但它同时也是一个Java对象。所以，当软可及对象被回收之后，虽然这个SoftReference对象的get()方法返回null，但SoftReference对象本身并不是null，而此时这个SoftReference对象已经不再具有存在的价值，需要一个适当的清除机制，避免大量SoftReference对象带来的内存泄漏。\n:::\n\nReferenceQueue就是用来保存这些需要被清理的引用对象的。软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收器回收，Java虚拟机就会把这个软引用加入到与之关联的引用队列中。\n\n下面用SoftReference来实现一个简单的缓存类：\n\n```java\npublic class SoftCache<T> {\n    // 引用队列\n    private ReferenceQueue<T> referenceQueue = new ReferenceQueue<>();\n    // 保存软引用集合，在引用对象被回收后销毁\n    private List<Reference<T>> list = new ArrayList<>();\n\n    // 添加缓存对象\n    public synchronized void add(T obj){\n        // 构建软引用\n        Reference<T> reference = new SoftReference<T>(obj, referenceQueue);\n        // 加入列表中\n        list.add(reference);\n    }\n\n    // 获取缓存对象\n    public synchronized T get(int index){\n        // 先对无效引用进行清理\n        clear();\n        if (index < 0 || list.size() < index){\n            return null;\n        }\n        Reference<T> reference = list.get(index);\n        return reference == null ? null : reference.get();\n    }\n\n    public int size(){\n        return list.size();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private void clear(){\n        Reference<T> reference;\n        while (null != (reference = (Reference<T>) referenceQueue.poll())){\n            list.remove(reference);\n        }\n    }\n}\n```\n\n然后测试一下这个缓存类：\n\n```java\npublic class SoftCacheTest {\n    private static int num = 0;\n\n    public static void main(String[] args){\n        SoftCache<OOMClass> softCache = new SoftCache<>();\n        for (int i = 0; i < 40; i++) {\n            softCache.add(new OOMClass(\"OOM Obj-\" + ++num));\n        }\n        System.out.println(softCache.size());\n        for (int i = 0; i < softCache.size(); i++) {\n            OOMClass obj = softCache.get(i);\n            System.out.println(obj == null ? \"null\" : obj.name);\n        }\n        System.out.println(softCache.size());\n    }\n\n    static class OOMClass{\n        private String name;\n        private int[] oom = new int[1024 * 100];// 100KB\n\n        public OOMClass(String name) {\n            this.name = name;\n        }\n    }\n}\n```\n\n仍使用之前的虚拟机参数：\n\n```bash\n-verbose:gc -Xms4m -Xmx4m -Xmn2m\n```\n\n运行结果：\n\n```java\n[GC (Allocation Failure)  1017K->432K(3584K), 0.0012236 secs]\n[GC (Allocation Failure)  1117K->496K(3584K), 0.0016875 secs]\n[GC (Allocation Failure)  1347K->1229K(3584K), 0.0015059 secs]\n[GC (Allocation Failure)  2047K->2125K(3584K), 0.0018090 secs]\n[Full GC (Ergonomics)  2125K->1994K(3584K), 0.0054759 secs]\n[Full GC (Ergonomics)  2822K->2794K(3584K), 0.0023167 secs]\n[Full GC (Allocation Failure)  2794K->376K(3584K), 0.0036056 secs]\n[Full GC (Ergonomics)  2795K->2776K(3584K), 0.0042365 secs]\n[Full GC (Allocation Failure)  2776K->376K(3584K), 0.0035122 secs]\n[Full GC (Ergonomics)  2795K->2776K(3584K), 0.0054760 secs]\n[Full GC (Allocation Failure)  2776K->376K(3584K), 0.0036965 secs]\n[Full GC (Ergonomics)  2802K->2777K(3584K), 0.0044513 secs]\n[Full GC (Allocation Failure)  2777K->376K(3584K), 0.0041400 secs]\n[Full GC (Ergonomics)  2796K->2777K(3584K), 0.0025255 secs]\n[Full GC (Allocation Failure)  2777K->376K(3584K), 0.0037690 secs]\n[Full GC (Ergonomics)  2817K->2777K(3584K), 0.0037759 secs]\n[Full GC (Allocation Failure)  2777K->377K(3584K), 0.0042416 secs]\n缓存列表大小：40\nOOM Obj-37\nOOM Obj-38\nOOM Obj-39\nOOM Obj-40\n缓存列表大小：4\n```\n\n可以看到，缓存40个软引用对象之后，如果一次性全部存储，显然内存大小无法满足，所以在不断创建软引用对象的过程中，不断发生GC来进行垃圾回收，最终只有4个软引用未被清理掉。\n\n## 强引用与软引用对比\n\n没有对比就没有伤害，来将强引用和软引用对比一下：\n\n```java\npublic class Test {\n\n    static class OOMClass{\n        private int[] oom = new int[1024];\n    }\n\n    public static void main(String[] args) {\n        testStrongReference();\n        //testSoftReference();\n    }\n\n    public static void testStrongReference(){\n        List<OOMClass> list = new ArrayList<>();\n        for (int i = 0; i < 1000; i++) {\n            list.add(new OOMClass());\n        }\n    }\n\n    public static void testSoftReference(){\n        ReferenceQueue<OOMClass> referenceQueue = new ReferenceQueue<>();\n        List<SoftReference> list = new ArrayList<>();\n        for (int i = 0; i < 1000; i++) {\n            OOMClass oomClass = new OOMClass();\n            list.add(new SoftReference(oomClass, referenceQueue));\n            oomClass = null;\n        }\n    }\n}\n```\n\n运行testStrongReference方法的结果如下：\n\n```java\n[GC (Allocation Failure)  1019K->384K(3584K), 0.0033595 secs]\n[GC (Allocation Failure)  1406K->856K(3584K), 0.0013098 secs]\n[GC (Allocation Failure)  1880K->1836K(3584K), 0.0014382 secs]\n[Full GC (Ergonomics)  1836K->1756K(3584K), 0.0039761 secs]\n[Full GC (Ergonomics)  2778K->2758K(3584K), 0.0021269 secs]\n[Full GC (Ergonomics)  2779K->2770K(3584K), 0.0016329 secs]\n[Full GC (Ergonomics)  2779K->2775K(3584K), 0.0023157 secs]\n[Full GC (Ergonomics)  2775K->2775K(3584K), 0.0015927 secs]\n[Full GC (Ergonomics)  3037K->3029K(3584K), 0.0025071 secs]\n[Full GC (Ergonomics)  3067K->3065K(3584K), 0.0017529 secs]\n[Full GC (Allocation Failure)  3065K->3047K(3584K), 0.0033445 secs]\n[Full GC (Ergonomics)  3068K->3059K(3584K), 0.0016623 secs]\n[Full GC (Ergonomics)  3070K->3068K(3584K), 0.0028357 secs]\n[Full GC (Allocation Failure)  3068K->3068K(3584K), 0.0017616 secs]\njava.lang.OutOfMemoryError: Java heap space\nDumping heap to java_pid3352.hprof ...\nException in thread \"main\" java.lang.OutOfMemoryError: Java heap space\nHeap dump file created [3855956 bytes in 0.017 secs]\n[Full GC (Ergonomics)  3071K->376K(3584K), 0.0032068 secs]\n\tat reference.Test$OOMClass.<init>(Test.java:11)\n\tat reference.Test.testStrongReference(Test.java:22)\n\tat reference.Test.main(Test.java:15)\n\nProcess finished with exit code 1\n```\n\n可以看到，很快就抛出了OOM，原因是Java heap space，也就是堆内存不足。\n\n如果运行testSoftReference方法，将会得到如下结果：\n\n```java\n[GC (Allocation Failure)  1019K->464K(3584K), 0.0019850 secs]\n[GC (Allocation Failure)  1484K->844K(3584K), 0.0015920 secs]\n[GC (Allocation Failure)  1868K->1860K(3584K), 0.0043236 secs]\n[Full GC (Ergonomics)  1860K->1781K(3584K), 0.0044581 secs]\n[Full GC (Ergonomics)  2802K->2754K(3584K), 0.0041726 secs]\n[Full GC (Ergonomics)  2802K->2799K(3584K), 0.0031293 secs]\n[Full GC (Ergonomics)  3023K->3023K(3584K), 0.0024830 secs]\n[Full GC (Ergonomics)  3071K->3068K(3584K), 0.0035025 secs]\n[Full GC (Allocation Failure)  3068K->405K(3584K), 0.0040672 secs]\n[GC (Allocation Failure)  1512K->1567K(3584K), 0.0011170 secs]\n[Full GC (Ergonomics)  1567K->1496K(3584K), 0.0048438 secs]\n```\n\n可以看到，并没有抛出OOM，而是进行多次了GC，可以明显的看到这一条：\n\n```bash\n[Full GC (Allocation Failure)  3068K->405K(3584K), 0.0040672 secs]\n```\n\n当内存不足时进行了一次Full GC，回收了大部分内存空间，也就是将大部分软引用指向的对象回收掉了。\n\n## 小结\n\n+ 软引用弱于强引用\n+ 软引用指向的对象会在内存不足时被垃圾回收清理掉\n+ JVM会优先回收长时间闲置不用的软引用对象，对那些刚刚构建的或刚刚使用过的软引用对象会尽可能保留\n+ 软引用可以有效的解决OOM问题\n+ 软引用适合用作非必须大对象的缓存\n\n至此，本篇就告一段落了，这里只简单的介绍了软引用的作用以及用法。其实软引用并没有这么好，它的使用有一些可能是致命的缺点，如果想要更深入的了解软引用的运行原理以及软引用到底是在何时进行回收，又是如何进行回收的话，可以查看翻阅后续的章节。 \n\n\n\n","source":"_posts/java/reference/soft-reference.md","raw":"---\nprev: ./strong-reference\nnext: ./weak-reference\n---\n\n# 软引用\n\n## 定义\n\n::: tip \n软引用是使用SoftReference创建的引用，强度弱于强引用，被其引用的对象在内存不足的时候会被回收，不会产生内存溢出。\n:::\n\n## 说明\n\n软引用，顾名思义就是比较“软”一点的引用。<img src=\"./0003.png\" width=\"50\"/>\n\n当一个对象与GC Roots之间存在强引用时，无论何时都不会被GC回收掉。如果一个对象与GC Roots之间没有强引用与其关联而存在软引用关联时，那么垃圾回收器对它的态度就取决于内存的紧张程度了。如果内存空间足够，垃圾回收器就不会回收这个对象，但如果内存空间不足了，它就难逃被回收的厄运。<img src=\"./0005.png\" width=\"50\"/>\n\n::: tip 软可达\n如果一个对象与GC Roots之间不存在强引用，但是存在软引用，则称这个对象为`软可达（soft reachable）`对象。\n:::\n\n在垃圾回收器没有回收它的时候，软可达对象就像强可达对象一样，可以被程序正常访问和使用，但是需要通过软引用对象间接访问，需要的话也能重新使用强引用将其关联。所以软引用适合用来做内存敏感的高速缓存。\n\n```java\nString s = new String(\"Frank\");    // 创建强引用与String对象关联，现在该String对象为强可达状态\nSoftReference<String> softRef = new SoftReference<String>(s);     // 再创建一个软引用关联该对象\ns = null;        // 消除强引用，现在只剩下软引用与其关联，该String对象为软可达状态\ns = softRef.get();  // 重新关联上强引用\n```\n\n这里变量s持有对字符串对象的强引用，而softRef持有对该对象的软引用，所以当执行s = null后，字符串对象就只剩下软引用了，这时如果因为内存不足发生Full GC，就会把这个字符串对象回收掉。\n\n::: warning 注意\n在垃圾回收器回收一个对象前，SoftReference类所提供的get方法会返回Java对象的强引用，一旦垃圾线程回收该对象之后，get方法将返回null。所以在获取软引用对象的代码中，一定要先判断返回是否为null，以免出现NullPointerException异常而导致应用崩溃。<img src=\"./2030.png\" width=\"50\"/>\n:::\n\n下面的代码会让s再次持有对象的强引用：\n\n```java\ns = softRef.get();\n```\n\n如果在softRef指向的对象被回收前，用强引用指向该对象，那这个对象又会变成强可达。\n\n来看一个使用SoftReference的栗子：\n\n```java\npublic class TestA {\n    static class OOMClass{\n        private int[] oom = new int[1024 * 100];// 100KB\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        ReferenceQueue<OOMClass> queue = new ReferenceQueue<>();\n        List<SoftReference> list = new ArrayList<>();\n        while(true){\n            for (int i = 0; i < 100; i++) {\n                list.add(new SoftReference<OOMClass>(new OOMClass(), queue));\n            }\n            Thread.sleep(500);\n        }\n    }\n}\n```\n\n::: warning 注意\nReferenceQueue中声明的类型为OOMClass，即与SoftReference引用的类型一致。\n:::\n\n设置一下虚拟机参数：\n\n```bash\n-verbose:gc -Xms4m -Xmx4m -Xmn2m\n```\n\n运行结果：\n\n```bash\n[GC (Allocation Failure)  1017K->432K(3584K), 0.0017239 secs]\n[GC (Allocation Failure)  1072K->472K(3584K), 0.0099237 secs]\n[GC (Allocation Failure)  1323K->1296K(3584K), 0.0009528 secs]\n[GC (Allocation Failure)  2114K->2136K(3584K), 0.0009951 secs]\n[Full GC (Ergonomics)  2136K->1992K(3584K), 0.0040658 secs]\n[Full GC (Ergonomics)  2807K->2791K(3584K), 0.0036280 secs]\n[Full GC (Allocation Failure)  2791K->373K(3584K), 0.0032477 secs]\n[Full GC (Ergonomics)  2786K->2773K(3584K), 0.0034554 secs]\n[Full GC (Allocation Failure)  2773K->373K(3584K), 0.0032667 secs]\n[Full GC (Ergonomics)  2798K->2775K(3584K), 0.0036231 secs]\n[Full GC (Allocation Failure)  2775K->375K(3584K), 0.0055482 secs]\n[Full GC (Ergonomics)  2799K->2776K(3584K), 0.0031358 secs]\n...省略n次GC信息\n```\n\n在TestA中，我们使用死循环不断的往list中添加新对象，如果是强引用，会很快因为内存不足而抛出OOM，因为这里的堆内存大小设置为了4M，而一个对象就有100KB，一个循环添加100个对象，也就是差不多10M，显然一个循环都跑不完就会内存不足，而这里，因为使用的是软引用，所以JVM会在内存不足的时候将软引用回收掉。\n\n```bash\n[Full GC (Allocation Failure)  2791K->373K(3584K), 0.0032477 secs]\n```\n\n从这一条可以看出，在内存不足发生Full GC时，回收掉了大部分的软引用指向的对象，释放了大量的内存。\n\n因为这里新生代只分配了2M，所以很快就会发生GC，如果你的程序运行没有看到这个结果，请先确认一下虚拟机参数是否设置正确，如果设置正确还是没有看到，那么将循环次数由1000改为10000或者100000在试试看。<img src=\"./141.png\" width=\"50\"/>\n\n## 应用场景\n\n软引用关联的对象，只有在内存不足的时候JVM才会回收该对象。这一点可以很好地用来解决OOM的问题，并且这个特性很适合用来实现缓存：比如网页缓存、图片缓存等。 \n\n现在考虑这样一个场景 ，在很多应用中，都会出现大量的默认图片，比如说QQ的默认头像，应用内的默认图标等等，这些图片很多地方会用到。\n\n如果每次都去读取图片，由于读取文件速度较慢，大量重复的读取会导致性能下降。所以可以考虑将图片缓存起来，需要的时候直接从内存中读取。但是，由于图片占用内存空间比较大，缓存的图片过多会占用比较多的内存，就可能比较容易发生OOM。这时候，软引用就派得上用场了。<img src=\"./0009.png\" width=\"50\"/>\n\n::: warning 注意\nSoftReference对象是用来保存软引用的，但它同时也是一个Java对象。所以，当软可及对象被回收之后，虽然这个SoftReference对象的get()方法返回null，但SoftReference对象本身并不是null，而此时这个SoftReference对象已经不再具有存在的价值，需要一个适当的清除机制，避免大量SoftReference对象带来的内存泄漏。\n:::\n\nReferenceQueue就是用来保存这些需要被清理的引用对象的。软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收器回收，Java虚拟机就会把这个软引用加入到与之关联的引用队列中。\n\n下面用SoftReference来实现一个简单的缓存类：\n\n```java\npublic class SoftCache<T> {\n    // 引用队列\n    private ReferenceQueue<T> referenceQueue = new ReferenceQueue<>();\n    // 保存软引用集合，在引用对象被回收后销毁\n    private List<Reference<T>> list = new ArrayList<>();\n\n    // 添加缓存对象\n    public synchronized void add(T obj){\n        // 构建软引用\n        Reference<T> reference = new SoftReference<T>(obj, referenceQueue);\n        // 加入列表中\n        list.add(reference);\n    }\n\n    // 获取缓存对象\n    public synchronized T get(int index){\n        // 先对无效引用进行清理\n        clear();\n        if (index < 0 || list.size() < index){\n            return null;\n        }\n        Reference<T> reference = list.get(index);\n        return reference == null ? null : reference.get();\n    }\n\n    public int size(){\n        return list.size();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private void clear(){\n        Reference<T> reference;\n        while (null != (reference = (Reference<T>) referenceQueue.poll())){\n            list.remove(reference);\n        }\n    }\n}\n```\n\n然后测试一下这个缓存类：\n\n```java\npublic class SoftCacheTest {\n    private static int num = 0;\n\n    public static void main(String[] args){\n        SoftCache<OOMClass> softCache = new SoftCache<>();\n        for (int i = 0; i < 40; i++) {\n            softCache.add(new OOMClass(\"OOM Obj-\" + ++num));\n        }\n        System.out.println(softCache.size());\n        for (int i = 0; i < softCache.size(); i++) {\n            OOMClass obj = softCache.get(i);\n            System.out.println(obj == null ? \"null\" : obj.name);\n        }\n        System.out.println(softCache.size());\n    }\n\n    static class OOMClass{\n        private String name;\n        private int[] oom = new int[1024 * 100];// 100KB\n\n        public OOMClass(String name) {\n            this.name = name;\n        }\n    }\n}\n```\n\n仍使用之前的虚拟机参数：\n\n```bash\n-verbose:gc -Xms4m -Xmx4m -Xmn2m\n```\n\n运行结果：\n\n```java\n[GC (Allocation Failure)  1017K->432K(3584K), 0.0012236 secs]\n[GC (Allocation Failure)  1117K->496K(3584K), 0.0016875 secs]\n[GC (Allocation Failure)  1347K->1229K(3584K), 0.0015059 secs]\n[GC (Allocation Failure)  2047K->2125K(3584K), 0.0018090 secs]\n[Full GC (Ergonomics)  2125K->1994K(3584K), 0.0054759 secs]\n[Full GC (Ergonomics)  2822K->2794K(3584K), 0.0023167 secs]\n[Full GC (Allocation Failure)  2794K->376K(3584K), 0.0036056 secs]\n[Full GC (Ergonomics)  2795K->2776K(3584K), 0.0042365 secs]\n[Full GC (Allocation Failure)  2776K->376K(3584K), 0.0035122 secs]\n[Full GC (Ergonomics)  2795K->2776K(3584K), 0.0054760 secs]\n[Full GC (Allocation Failure)  2776K->376K(3584K), 0.0036965 secs]\n[Full GC (Ergonomics)  2802K->2777K(3584K), 0.0044513 secs]\n[Full GC (Allocation Failure)  2777K->376K(3584K), 0.0041400 secs]\n[Full GC (Ergonomics)  2796K->2777K(3584K), 0.0025255 secs]\n[Full GC (Allocation Failure)  2777K->376K(3584K), 0.0037690 secs]\n[Full GC (Ergonomics)  2817K->2777K(3584K), 0.0037759 secs]\n[Full GC (Allocation Failure)  2777K->377K(3584K), 0.0042416 secs]\n缓存列表大小：40\nOOM Obj-37\nOOM Obj-38\nOOM Obj-39\nOOM Obj-40\n缓存列表大小：4\n```\n\n可以看到，缓存40个软引用对象之后，如果一次性全部存储，显然内存大小无法满足，所以在不断创建软引用对象的过程中，不断发生GC来进行垃圾回收，最终只有4个软引用未被清理掉。\n\n## 强引用与软引用对比\n\n没有对比就没有伤害，来将强引用和软引用对比一下：\n\n```java\npublic class Test {\n\n    static class OOMClass{\n        private int[] oom = new int[1024];\n    }\n\n    public static void main(String[] args) {\n        testStrongReference();\n        //testSoftReference();\n    }\n\n    public static void testStrongReference(){\n        List<OOMClass> list = new ArrayList<>();\n        for (int i = 0; i < 1000; i++) {\n            list.add(new OOMClass());\n        }\n    }\n\n    public static void testSoftReference(){\n        ReferenceQueue<OOMClass> referenceQueue = new ReferenceQueue<>();\n        List<SoftReference> list = new ArrayList<>();\n        for (int i = 0; i < 1000; i++) {\n            OOMClass oomClass = new OOMClass();\n            list.add(new SoftReference(oomClass, referenceQueue));\n            oomClass = null;\n        }\n    }\n}\n```\n\n运行testStrongReference方法的结果如下：\n\n```java\n[GC (Allocation Failure)  1019K->384K(3584K), 0.0033595 secs]\n[GC (Allocation Failure)  1406K->856K(3584K), 0.0013098 secs]\n[GC (Allocation Failure)  1880K->1836K(3584K), 0.0014382 secs]\n[Full GC (Ergonomics)  1836K->1756K(3584K), 0.0039761 secs]\n[Full GC (Ergonomics)  2778K->2758K(3584K), 0.0021269 secs]\n[Full GC (Ergonomics)  2779K->2770K(3584K), 0.0016329 secs]\n[Full GC (Ergonomics)  2779K->2775K(3584K), 0.0023157 secs]\n[Full GC (Ergonomics)  2775K->2775K(3584K), 0.0015927 secs]\n[Full GC (Ergonomics)  3037K->3029K(3584K), 0.0025071 secs]\n[Full GC (Ergonomics)  3067K->3065K(3584K), 0.0017529 secs]\n[Full GC (Allocation Failure)  3065K->3047K(3584K), 0.0033445 secs]\n[Full GC (Ergonomics)  3068K->3059K(3584K), 0.0016623 secs]\n[Full GC (Ergonomics)  3070K->3068K(3584K), 0.0028357 secs]\n[Full GC (Allocation Failure)  3068K->3068K(3584K), 0.0017616 secs]\njava.lang.OutOfMemoryError: Java heap space\nDumping heap to java_pid3352.hprof ...\nException in thread \"main\" java.lang.OutOfMemoryError: Java heap space\nHeap dump file created [3855956 bytes in 0.017 secs]\n[Full GC (Ergonomics)  3071K->376K(3584K), 0.0032068 secs]\n\tat reference.Test$OOMClass.<init>(Test.java:11)\n\tat reference.Test.testStrongReference(Test.java:22)\n\tat reference.Test.main(Test.java:15)\n\nProcess finished with exit code 1\n```\n\n可以看到，很快就抛出了OOM，原因是Java heap space，也就是堆内存不足。\n\n如果运行testSoftReference方法，将会得到如下结果：\n\n```java\n[GC (Allocation Failure)  1019K->464K(3584K), 0.0019850 secs]\n[GC (Allocation Failure)  1484K->844K(3584K), 0.0015920 secs]\n[GC (Allocation Failure)  1868K->1860K(3584K), 0.0043236 secs]\n[Full GC (Ergonomics)  1860K->1781K(3584K), 0.0044581 secs]\n[Full GC (Ergonomics)  2802K->2754K(3584K), 0.0041726 secs]\n[Full GC (Ergonomics)  2802K->2799K(3584K), 0.0031293 secs]\n[Full GC (Ergonomics)  3023K->3023K(3584K), 0.0024830 secs]\n[Full GC (Ergonomics)  3071K->3068K(3584K), 0.0035025 secs]\n[Full GC (Allocation Failure)  3068K->405K(3584K), 0.0040672 secs]\n[GC (Allocation Failure)  1512K->1567K(3584K), 0.0011170 secs]\n[Full GC (Ergonomics)  1567K->1496K(3584K), 0.0048438 secs]\n```\n\n可以看到，并没有抛出OOM，而是进行多次了GC，可以明显的看到这一条：\n\n```bash\n[Full GC (Allocation Failure)  3068K->405K(3584K), 0.0040672 secs]\n```\n\n当内存不足时进行了一次Full GC，回收了大部分内存空间，也就是将大部分软引用指向的对象回收掉了。\n\n## 小结\n\n+ 软引用弱于强引用\n+ 软引用指向的对象会在内存不足时被垃圾回收清理掉\n+ JVM会优先回收长时间闲置不用的软引用对象，对那些刚刚构建的或刚刚使用过的软引用对象会尽可能保留\n+ 软引用可以有效的解决OOM问题\n+ 软引用适合用作非必须大对象的缓存\n\n至此，本篇就告一段落了，这里只简单的介绍了软引用的作用以及用法。其实软引用并没有这么好，它的使用有一些可能是致命的缺点，如果想要更深入的了解软引用的运行原理以及软引用到底是在何时进行回收，又是如何进行回收的话，可以查看翻阅后续的章节。 \n\n\n\n","slug":"java/reference/soft-reference","published":1,"date":"2018-12-27T08:04:21.654Z","updated":"2018-12-27T08:04:21.654Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5rm002twu9kh99bbgia","content":"<h1 id=\"软引用\"><a href=\"#软引用\" class=\"headerlink\" title=\"软引用\"></a>软引用</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>::: tip<br>软引用是使用SoftReference创建的引用，强度弱于强引用，被其引用的对象在内存不足的时候会被回收，不会产生内存溢出。<br>:::</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>软引用，顾名思义就是比较“软”一点的引用。<img src=\"./0003.png\" width=\"50\"></p>\n<p>当一个对象与GC Roots之间存在强引用时，无论何时都不会被GC回收掉。如果一个对象与GC Roots之间没有强引用与其关联而存在软引用关联时，那么垃圾回收器对它的态度就取决于内存的紧张程度了。如果内存空间足够，垃圾回收器就不会回收这个对象，但如果内存空间不足了，它就难逃被回收的厄运。<img src=\"./0005.png\" width=\"50\"></p>\n<p>::: tip 软可达<br>如果一个对象与GC Roots之间不存在强引用，但是存在软引用，则称这个对象为<code>软可达（soft reachable）</code>对象。<br>:::</p>\n<p>在垃圾回收器没有回收它的时候，软可达对象就像强可达对象一样，可以被程序正常访问和使用，但是需要通过软引用对象间接访问，需要的话也能重新使用强引用将其关联。所以软引用适合用来做内存敏感的高速缓存。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = <span class=\"keyword\">new</span> String(<span class=\"string\">\"Frank\"</span>);    <span class=\"comment\">// 创建强引用与String对象关联，现在该String对象为强可达状态</span></span><br><span class=\"line\">SoftReference&lt;String&gt; softRef = <span class=\"keyword\">new</span> SoftReference&lt;String&gt;(s);     <span class=\"comment\">// 再创建一个软引用关联该对象</span></span><br><span class=\"line\">s = <span class=\"keyword\">null</span>;        <span class=\"comment\">// 消除强引用，现在只剩下软引用与其关联，该String对象为软可达状态</span></span><br><span class=\"line\">s = softRef.get();  <span class=\"comment\">// 重新关联上强引用</span></span><br></pre></td></tr></table></figure>\n<p>这里变量s持有对字符串对象的强引用，而softRef持有对该对象的软引用，所以当执行s = null后，字符串对象就只剩下软引用了，这时如果因为内存不足发生Full GC，就会把这个字符串对象回收掉。</p>\n<p>::: warning 注意<br>在垃圾回收器回收一个对象前，SoftReference类所提供的get方法会返回Java对象的强引用，一旦垃圾线程回收该对象之后，get方法将返回null。所以在获取软引用对象的代码中，一定要先判断返回是否为null，以免出现NullPointerException异常而导致应用崩溃。<img src=\"./2030.png\" width=\"50\"><br>:::</p>\n<p>下面的代码会让s再次持有对象的强引用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = softRef.get();</span><br></pre></td></tr></table></figure>\n<p>如果在softRef指向的对象被回收前，用强引用指向该对象，那这个对象又会变成强可达。</p>\n<p>来看一个使用SoftReference的栗子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestA</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OOMClass</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] oom = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">1024</span> * <span class=\"number\">100</span>];<span class=\"comment\">// 100KB</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        ReferenceQueue&lt;OOMClass&gt; queue = <span class=\"keyword\">new</span> ReferenceQueue&lt;&gt;();</span><br><span class=\"line\">        List&lt;SoftReference&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">                list.add(<span class=\"keyword\">new</span> SoftReference&lt;OOMClass&gt;(<span class=\"keyword\">new</span> OOMClass(), queue));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>::: warning 注意<br>ReferenceQueue中声明的类型为OOMClass，即与SoftReference引用的类型一致。<br>:::</p>\n<p>设置一下虚拟机参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-verbose:gc -Xms4m -Xmx4m -Xmn2m</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[GC (Allocation Failure)  1017K-&gt;432K(3584K), 0.0017239 secs]</span><br><span class=\"line\">[GC (Allocation Failure)  1072K-&gt;472K(3584K), 0.0099237 secs]</span><br><span class=\"line\">[GC (Allocation Failure)  1323K-&gt;1296K(3584K), 0.0009528 secs]</span><br><span class=\"line\">[GC (Allocation Failure)  2114K-&gt;2136K(3584K), 0.0009951 secs]</span><br><span class=\"line\">[Full GC (Ergonomics)  2136K-&gt;1992K(3584K), 0.0040658 secs]</span><br><span class=\"line\">[Full GC (Ergonomics)  2807K-&gt;2791K(3584K), 0.0036280 secs]</span><br><span class=\"line\">[Full GC (Allocation Failure)  2791K-&gt;373K(3584K), 0.0032477 secs]</span><br><span class=\"line\">[Full GC (Ergonomics)  2786K-&gt;2773K(3584K), 0.0034554 secs]</span><br><span class=\"line\">[Full GC (Allocation Failure)  2773K-&gt;373K(3584K), 0.0032667 secs]</span><br><span class=\"line\">[Full GC (Ergonomics)  2798K-&gt;2775K(3584K), 0.0036231 secs]</span><br><span class=\"line\">[Full GC (Allocation Failure)  2775K-&gt;375K(3584K), 0.0055482 secs]</span><br><span class=\"line\">[Full GC (Ergonomics)  2799K-&gt;2776K(3584K), 0.0031358 secs]</span><br><span class=\"line\">...省略n次GC信息</span><br></pre></td></tr></table></figure>\n<p>在TestA中，我们使用死循环不断的往list中添加新对象，如果是强引用，会很快因为内存不足而抛出OOM，因为这里的堆内存大小设置为了4M，而一个对象就有100KB，一个循环添加100个对象，也就是差不多10M，显然一个循环都跑不完就会内存不足，而这里，因为使用的是软引用，所以JVM会在内存不足的时候将软引用回收掉。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Full GC (Allocation Failure)  2791K-&gt;373K(3584K), 0.0032477 secs]</span><br></pre></td></tr></table></figure>\n<p>从这一条可以看出，在内存不足发生Full GC时，回收掉了大部分的软引用指向的对象，释放了大量的内存。</p>\n<p>因为这里新生代只分配了2M，所以很快就会发生GC，如果你的程序运行没有看到这个结果，请先确认一下虚拟机参数是否设置正确，如果设置正确还是没有看到，那么将循环次数由1000改为10000或者100000在试试看。<img src=\"./141.png\" width=\"50\"></p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>软引用关联的对象，只有在内存不足的时候JVM才会回收该对象。这一点可以很好地用来解决OOM的问题，并且这个特性很适合用来实现缓存：比如网页缓存、图片缓存等。 </p>\n<p>现在考虑这样一个场景 ，在很多应用中，都会出现大量的默认图片，比如说QQ的默认头像，应用内的默认图标等等，这些图片很多地方会用到。</p>\n<p>如果每次都去读取图片，由于读取文件速度较慢，大量重复的读取会导致性能下降。所以可以考虑将图片缓存起来，需要的时候直接从内存中读取。但是，由于图片占用内存空间比较大，缓存的图片过多会占用比较多的内存，就可能比较容易发生OOM。这时候，软引用就派得上用场了。<img src=\"./0009.png\" width=\"50\"></p>\n<p>::: warning 注意<br>SoftReference对象是用来保存软引用的，但它同时也是一个Java对象。所以，当软可及对象被回收之后，虽然这个SoftReference对象的get()方法返回null，但SoftReference对象本身并不是null，而此时这个SoftReference对象已经不再具有存在的价值，需要一个适当的清除机制，避免大量SoftReference对象带来的内存泄漏。<br>:::</p>\n<p>ReferenceQueue就是用来保存这些需要被清理的引用对象的。软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收器回收，Java虚拟机就会把这个软引用加入到与之关联的引用队列中。</p>\n<p>下面用SoftReference来实现一个简单的缓存类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SoftCache</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 引用队列</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ReferenceQueue&lt;T&gt; referenceQueue = <span class=\"keyword\">new</span> ReferenceQueue&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 保存软引用集合，在引用对象被回收后销毁</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Reference&lt;T&gt;&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 添加缓存对象</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(T obj)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 构建软引用</span></span><br><span class=\"line\">        Reference&lt;T&gt; reference = <span class=\"keyword\">new</span> SoftReference&lt;T&gt;(obj, referenceQueue);</span><br><span class=\"line\">        <span class=\"comment\">// 加入列表中</span></span><br><span class=\"line\">        list.add(reference);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取缓存对象</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> T <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 先对无效引用进行清理</span></span><br><span class=\"line\">        clear();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || list.size() &lt; index)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Reference&lt;T&gt; reference = list.get(index);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> reference == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : reference.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Reference&lt;T&gt; reference;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">null</span> != (reference = (Reference&lt;T&gt;) referenceQueue.poll()))&#123;</span><br><span class=\"line\">            list.remove(reference);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后测试一下这个缓存类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SoftCacheTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        SoftCache&lt;OOMClass&gt; softCache = <span class=\"keyword\">new</span> SoftCache&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">40</span>; i++) &#123;</span><br><span class=\"line\">            softCache.add(<span class=\"keyword\">new</span> OOMClass(<span class=\"string\">\"OOM Obj-\"</span> + ++num));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(softCache.size());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; softCache.size(); i++) &#123;</span><br><span class=\"line\">            OOMClass obj = softCache.get(i);</span><br><span class=\"line\">            System.out.println(obj == <span class=\"keyword\">null</span> ? <span class=\"string\">\"null\"</span> : obj.name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(softCache.size());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OOMClass</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] oom = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">1024</span> * <span class=\"number\">100</span>];<span class=\"comment\">// 100KB</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OOMClass</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>仍使用之前的虚拟机参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-verbose:gc -Xms4m -Xmx4m -Xmn2m</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[GC (Allocation Failure)  <span class=\"number\">1017</span>K-&gt;<span class=\"number\">432</span>K(<span class=\"number\">3584</span>K), <span class=\"number\">0.0012236</span> secs]</span><br><span class=\"line\">[GC (Allocation Failure)  <span class=\"number\">1117</span>K-&gt;<span class=\"number\">496</span>K(<span class=\"number\">3584</span>K), <span class=\"number\">0.0016875</span> secs]</span><br><span class=\"line\">[GC (Allocation Failure)  <span class=\"number\">1347</span>K-&gt;<span class=\"number\">1229</span>K(<span class=\"number\">3584</span>K), <span class=\"number\">0.0015059</span> secs]</span><br><span class=\"line\">[GC (Allocation Failure)  <span class=\"number\">2047</span>K-&gt;<span class=\"number\">2125</span>K(<span class=\"number\">3584</span>K), <span class=\"number\">0.0018090</span> secs]</span><br><span class=\"line\">[<span class=\"function\">Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  2125K-&gt;1994<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0054759 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  2822K-&gt;2794<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0023167 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Allocation Failure)</span>  2794K-&gt;376<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0036056 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  2795K-&gt;2776<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0042365 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Allocation Failure)</span>  2776K-&gt;376<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0035122 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  2795K-&gt;2776<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0054760 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Allocation Failure)</span>  2776K-&gt;376<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0036965 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  2802K-&gt;2777<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0044513 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Allocation Failure)</span>  2777K-&gt;376<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0041400 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  2796K-&gt;2777<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0025255 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Allocation Failure)</span>  2777K-&gt;376<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0037690 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  2817K-&gt;2777<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0037759 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Allocation Failure)</span>  2777K-&gt;377<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0042416 secs]</span></span><br><span class=\"line\"><span class=\"function\">缓存列表大小：40</span></span><br><span class=\"line\"><span class=\"function\">OOM Obj-37</span></span><br><span class=\"line\"><span class=\"function\">OOM Obj-38</span></span><br><span class=\"line\"><span class=\"function\">OOM Obj-39</span></span><br><span class=\"line\"><span class=\"function\">OOM Obj-40</span></span><br><span class=\"line\"><span class=\"function\">缓存列表大小：4</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，缓存40个软引用对象之后，如果一次性全部存储，显然内存大小无法满足，所以在不断创建软引用对象的过程中，不断发生GC来进行垃圾回收，最终只有4个软引用未被清理掉。</p>\n<h2 id=\"强引用与软引用对比\"><a href=\"#强引用与软引用对比\" class=\"headerlink\" title=\"强引用与软引用对比\"></a>强引用与软引用对比</h2><p>没有对比就没有伤害，来将强引用和软引用对比一下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OOMClass</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] oom = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        testStrongReference();</span><br><span class=\"line\">        <span class=\"comment\">//testSoftReference();</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testStrongReference</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;OOMClass&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">            list.add(<span class=\"keyword\">new</span> OOMClass());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testSoftReference</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        ReferenceQueue&lt;OOMClass&gt; referenceQueue = <span class=\"keyword\">new</span> ReferenceQueue&lt;&gt;();</span><br><span class=\"line\">        List&lt;SoftReference&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">            OOMClass oomClass = <span class=\"keyword\">new</span> OOMClass();</span><br><span class=\"line\">            list.add(<span class=\"keyword\">new</span> SoftReference(oomClass, referenceQueue));</span><br><span class=\"line\">            oomClass = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行testStrongReference方法的结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[GC (Allocation Failure)  <span class=\"number\">1019</span>K-&gt;<span class=\"number\">384</span>K(<span class=\"number\">3584</span>K), <span class=\"number\">0.0033595</span> secs]</span><br><span class=\"line\">[GC (Allocation Failure)  <span class=\"number\">1406</span>K-&gt;<span class=\"number\">856</span>K(<span class=\"number\">3584</span>K), <span class=\"number\">0.0013098</span> secs]</span><br><span class=\"line\">[GC (Allocation Failure)  <span class=\"number\">1880</span>K-&gt;<span class=\"number\">1836</span>K(<span class=\"number\">3584</span>K), <span class=\"number\">0.0014382</span> secs]</span><br><span class=\"line\">[<span class=\"function\">Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  1836K-&gt;1756<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0039761 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  2778K-&gt;2758<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0021269 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  2779K-&gt;2770<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0016329 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  2779K-&gt;2775<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0023157 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  2775K-&gt;2775<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0015927 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  3037K-&gt;3029<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0025071 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  3067K-&gt;3065<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0017529 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Allocation Failure)</span>  3065K-&gt;3047<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0033445 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  3068K-&gt;3059<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0016623 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  3070K-&gt;3068<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0028357 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Allocation Failure)</span>  3068K-&gt;3068<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0017616 secs]</span></span><br><span class=\"line\"><span class=\"function\">java.lang.OutOfMemoryError: Java heap space</span></span><br><span class=\"line\"><span class=\"function\">Dumping heap to java_pid3352.hprof ...</span></span><br><span class=\"line\"><span class=\"function\">Exception in thread \"main\" java.lang.OutOfMemoryError: Java heap space</span></span><br><span class=\"line\"><span class=\"function\">Heap dump file created [3855956 bytes in 0.017 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  3071K-&gt;376<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0032068 secs]</span></span><br><span class=\"line\"><span class=\"function\">\tat reference.Test$OOMClass.&lt;init&gt;<span class=\"params\">(Test.java:<span class=\"number\">11</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">\tat reference.Test.<span class=\"title\">testStrongReference</span><span class=\"params\">(Test.java:<span class=\"number\">22</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">\tat reference.Test.<span class=\"title\">main</span><span class=\"params\">(Test.java:<span class=\"number\">15</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">Process finished with exit code 1</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，很快就抛出了OOM，原因是Java heap space，也就是堆内存不足。</p>\n<p>如果运行testSoftReference方法，将会得到如下结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[GC (Allocation Failure)  <span class=\"number\">1019</span>K-&gt;<span class=\"number\">464</span>K(<span class=\"number\">3584</span>K), <span class=\"number\">0.0019850</span> secs]</span><br><span class=\"line\">[GC (Allocation Failure)  <span class=\"number\">1484</span>K-&gt;<span class=\"number\">844</span>K(<span class=\"number\">3584</span>K), <span class=\"number\">0.0015920</span> secs]</span><br><span class=\"line\">[GC (Allocation Failure)  <span class=\"number\">1868</span>K-&gt;<span class=\"number\">1860</span>K(<span class=\"number\">3584</span>K), <span class=\"number\">0.0043236</span> secs]</span><br><span class=\"line\">[<span class=\"function\">Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  1860K-&gt;1781<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0044581 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  2802K-&gt;2754<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0041726 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  2802K-&gt;2799<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0031293 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  3023K-&gt;3023<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0024830 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  3071K-&gt;3068<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0035025 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Allocation Failure)</span>  3068K-&gt;405<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0040672 secs]</span></span><br><span class=\"line\"><span class=\"function\">[<span class=\"title\">GC</span> <span class=\"params\">(Allocation Failure)</span>  1512K-&gt;1567<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0011170 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  1567K-&gt;1496<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0048438 secs]</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，并没有抛出OOM，而是进行多次了GC，可以明显的看到这一条：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Full GC (Allocation Failure)  3068K-&gt;405K(3584K), 0.0040672 secs]</span><br></pre></td></tr></table></figure>\n<p>当内存不足时进行了一次Full GC，回收了大部分内存空间，也就是将大部分软引用指向的对象回收掉了。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li>软引用弱于强引用</li>\n<li>软引用指向的对象会在内存不足时被垃圾回收清理掉</li>\n<li>JVM会优先回收长时间闲置不用的软引用对象，对那些刚刚构建的或刚刚使用过的软引用对象会尽可能保留</li>\n<li>软引用可以有效的解决OOM问题</li>\n<li>软引用适合用作非必须大对象的缓存</li>\n</ul>\n<p>至此，本篇就告一段落了，这里只简单的介绍了软引用的作用以及用法。其实软引用并没有这么好，它的使用有一些可能是致命的缺点，如果想要更深入的了解软引用的运行原理以及软引用到底是在何时进行回收，又是如何进行回收的话，可以查看翻阅后续的章节。 </p>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"软引用\"><a href=\"#软引用\" class=\"headerlink\" title=\"软引用\"></a>软引用</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>::: tip<br>软引用是使用SoftReference创建的引用，强度弱于强引用，被其引用的对象在内存不足的时候会被回收，不会产生内存溢出。<br>:::</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>软引用，顾名思义就是比较“软”一点的引用。<img src=\"./0003.png\" width=\"50\"></p>\n<p>当一个对象与GC Roots之间存在强引用时，无论何时都不会被GC回收掉。如果一个对象与GC Roots之间没有强引用与其关联而存在软引用关联时，那么垃圾回收器对它的态度就取决于内存的紧张程度了。如果内存空间足够，垃圾回收器就不会回收这个对象，但如果内存空间不足了，它就难逃被回收的厄运。<img src=\"./0005.png\" width=\"50\"></p>\n<p>::: tip 软可达<br>如果一个对象与GC Roots之间不存在强引用，但是存在软引用，则称这个对象为<code>软可达（soft reachable）</code>对象。<br>:::</p>\n<p>在垃圾回收器没有回收它的时候，软可达对象就像强可达对象一样，可以被程序正常访问和使用，但是需要通过软引用对象间接访问，需要的话也能重新使用强引用将其关联。所以软引用适合用来做内存敏感的高速缓存。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = <span class=\"keyword\">new</span> String(<span class=\"string\">\"Frank\"</span>);    <span class=\"comment\">// 创建强引用与String对象关联，现在该String对象为强可达状态</span></span><br><span class=\"line\">SoftReference&lt;String&gt; softRef = <span class=\"keyword\">new</span> SoftReference&lt;String&gt;(s);     <span class=\"comment\">// 再创建一个软引用关联该对象</span></span><br><span class=\"line\">s = <span class=\"keyword\">null</span>;        <span class=\"comment\">// 消除强引用，现在只剩下软引用与其关联，该String对象为软可达状态</span></span><br><span class=\"line\">s = softRef.get();  <span class=\"comment\">// 重新关联上强引用</span></span><br></pre></td></tr></table></figure>\n<p>这里变量s持有对字符串对象的强引用，而softRef持有对该对象的软引用，所以当执行s = null后，字符串对象就只剩下软引用了，这时如果因为内存不足发生Full GC，就会把这个字符串对象回收掉。</p>\n<p>::: warning 注意<br>在垃圾回收器回收一个对象前，SoftReference类所提供的get方法会返回Java对象的强引用，一旦垃圾线程回收该对象之后，get方法将返回null。所以在获取软引用对象的代码中，一定要先判断返回是否为null，以免出现NullPointerException异常而导致应用崩溃。<img src=\"./2030.png\" width=\"50\"><br>:::</p>\n<p>下面的代码会让s再次持有对象的强引用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = softRef.get();</span><br></pre></td></tr></table></figure>\n<p>如果在softRef指向的对象被回收前，用强引用指向该对象，那这个对象又会变成强可达。</p>\n<p>来看一个使用SoftReference的栗子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestA</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OOMClass</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] oom = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">1024</span> * <span class=\"number\">100</span>];<span class=\"comment\">// 100KB</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        ReferenceQueue&lt;OOMClass&gt; queue = <span class=\"keyword\">new</span> ReferenceQueue&lt;&gt;();</span><br><span class=\"line\">        List&lt;SoftReference&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">                list.add(<span class=\"keyword\">new</span> SoftReference&lt;OOMClass&gt;(<span class=\"keyword\">new</span> OOMClass(), queue));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>::: warning 注意<br>ReferenceQueue中声明的类型为OOMClass，即与SoftReference引用的类型一致。<br>:::</p>\n<p>设置一下虚拟机参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-verbose:gc -Xms4m -Xmx4m -Xmn2m</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[GC (Allocation Failure)  1017K-&gt;432K(3584K), 0.0017239 secs]</span><br><span class=\"line\">[GC (Allocation Failure)  1072K-&gt;472K(3584K), 0.0099237 secs]</span><br><span class=\"line\">[GC (Allocation Failure)  1323K-&gt;1296K(3584K), 0.0009528 secs]</span><br><span class=\"line\">[GC (Allocation Failure)  2114K-&gt;2136K(3584K), 0.0009951 secs]</span><br><span class=\"line\">[Full GC (Ergonomics)  2136K-&gt;1992K(3584K), 0.0040658 secs]</span><br><span class=\"line\">[Full GC (Ergonomics)  2807K-&gt;2791K(3584K), 0.0036280 secs]</span><br><span class=\"line\">[Full GC (Allocation Failure)  2791K-&gt;373K(3584K), 0.0032477 secs]</span><br><span class=\"line\">[Full GC (Ergonomics)  2786K-&gt;2773K(3584K), 0.0034554 secs]</span><br><span class=\"line\">[Full GC (Allocation Failure)  2773K-&gt;373K(3584K), 0.0032667 secs]</span><br><span class=\"line\">[Full GC (Ergonomics)  2798K-&gt;2775K(3584K), 0.0036231 secs]</span><br><span class=\"line\">[Full GC (Allocation Failure)  2775K-&gt;375K(3584K), 0.0055482 secs]</span><br><span class=\"line\">[Full GC (Ergonomics)  2799K-&gt;2776K(3584K), 0.0031358 secs]</span><br><span class=\"line\">...省略n次GC信息</span><br></pre></td></tr></table></figure>\n<p>在TestA中，我们使用死循环不断的往list中添加新对象，如果是强引用，会很快因为内存不足而抛出OOM，因为这里的堆内存大小设置为了4M，而一个对象就有100KB，一个循环添加100个对象，也就是差不多10M，显然一个循环都跑不完就会内存不足，而这里，因为使用的是软引用，所以JVM会在内存不足的时候将软引用回收掉。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Full GC (Allocation Failure)  2791K-&gt;373K(3584K), 0.0032477 secs]</span><br></pre></td></tr></table></figure>\n<p>从这一条可以看出，在内存不足发生Full GC时，回收掉了大部分的软引用指向的对象，释放了大量的内存。</p>\n<p>因为这里新生代只分配了2M，所以很快就会发生GC，如果你的程序运行没有看到这个结果，请先确认一下虚拟机参数是否设置正确，如果设置正确还是没有看到，那么将循环次数由1000改为10000或者100000在试试看。<img src=\"./141.png\" width=\"50\"></p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>软引用关联的对象，只有在内存不足的时候JVM才会回收该对象。这一点可以很好地用来解决OOM的问题，并且这个特性很适合用来实现缓存：比如网页缓存、图片缓存等。 </p>\n<p>现在考虑这样一个场景 ，在很多应用中，都会出现大量的默认图片，比如说QQ的默认头像，应用内的默认图标等等，这些图片很多地方会用到。</p>\n<p>如果每次都去读取图片，由于读取文件速度较慢，大量重复的读取会导致性能下降。所以可以考虑将图片缓存起来，需要的时候直接从内存中读取。但是，由于图片占用内存空间比较大，缓存的图片过多会占用比较多的内存，就可能比较容易发生OOM。这时候，软引用就派得上用场了。<img src=\"./0009.png\" width=\"50\"></p>\n<p>::: warning 注意<br>SoftReference对象是用来保存软引用的，但它同时也是一个Java对象。所以，当软可及对象被回收之后，虽然这个SoftReference对象的get()方法返回null，但SoftReference对象本身并不是null，而此时这个SoftReference对象已经不再具有存在的价值，需要一个适当的清除机制，避免大量SoftReference对象带来的内存泄漏。<br>:::</p>\n<p>ReferenceQueue就是用来保存这些需要被清理的引用对象的。软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收器回收，Java虚拟机就会把这个软引用加入到与之关联的引用队列中。</p>\n<p>下面用SoftReference来实现一个简单的缓存类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SoftCache</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 引用队列</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ReferenceQueue&lt;T&gt; referenceQueue = <span class=\"keyword\">new</span> ReferenceQueue&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 保存软引用集合，在引用对象被回收后销毁</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Reference&lt;T&gt;&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 添加缓存对象</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(T obj)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 构建软引用</span></span><br><span class=\"line\">        Reference&lt;T&gt; reference = <span class=\"keyword\">new</span> SoftReference&lt;T&gt;(obj, referenceQueue);</span><br><span class=\"line\">        <span class=\"comment\">// 加入列表中</span></span><br><span class=\"line\">        list.add(reference);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取缓存对象</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> T <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 先对无效引用进行清理</span></span><br><span class=\"line\">        clear();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || list.size() &lt; index)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Reference&lt;T&gt; reference = list.get(index);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> reference == <span class=\"keyword\">null</span> ? <span class=\"keyword\">null</span> : reference.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Reference&lt;T&gt; reference;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">null</span> != (reference = (Reference&lt;T&gt;) referenceQueue.poll()))&#123;</span><br><span class=\"line\">            list.remove(reference);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后测试一下这个缓存类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SoftCacheTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        SoftCache&lt;OOMClass&gt; softCache = <span class=\"keyword\">new</span> SoftCache&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">40</span>; i++) &#123;</span><br><span class=\"line\">            softCache.add(<span class=\"keyword\">new</span> OOMClass(<span class=\"string\">\"OOM Obj-\"</span> + ++num));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(softCache.size());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; softCache.size(); i++) &#123;</span><br><span class=\"line\">            OOMClass obj = softCache.get(i);</span><br><span class=\"line\">            System.out.println(obj == <span class=\"keyword\">null</span> ? <span class=\"string\">\"null\"</span> : obj.name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(softCache.size());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OOMClass</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] oom = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">1024</span> * <span class=\"number\">100</span>];<span class=\"comment\">// 100KB</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OOMClass</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>仍使用之前的虚拟机参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-verbose:gc -Xms4m -Xmx4m -Xmn2m</span><br></pre></td></tr></table></figure>\n<p>运行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[GC (Allocation Failure)  <span class=\"number\">1017</span>K-&gt;<span class=\"number\">432</span>K(<span class=\"number\">3584</span>K), <span class=\"number\">0.0012236</span> secs]</span><br><span class=\"line\">[GC (Allocation Failure)  <span class=\"number\">1117</span>K-&gt;<span class=\"number\">496</span>K(<span class=\"number\">3584</span>K), <span class=\"number\">0.0016875</span> secs]</span><br><span class=\"line\">[GC (Allocation Failure)  <span class=\"number\">1347</span>K-&gt;<span class=\"number\">1229</span>K(<span class=\"number\">3584</span>K), <span class=\"number\">0.0015059</span> secs]</span><br><span class=\"line\">[GC (Allocation Failure)  <span class=\"number\">2047</span>K-&gt;<span class=\"number\">2125</span>K(<span class=\"number\">3584</span>K), <span class=\"number\">0.0018090</span> secs]</span><br><span class=\"line\">[<span class=\"function\">Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  2125K-&gt;1994<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0054759 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  2822K-&gt;2794<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0023167 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Allocation Failure)</span>  2794K-&gt;376<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0036056 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  2795K-&gt;2776<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0042365 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Allocation Failure)</span>  2776K-&gt;376<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0035122 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  2795K-&gt;2776<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0054760 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Allocation Failure)</span>  2776K-&gt;376<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0036965 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  2802K-&gt;2777<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0044513 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Allocation Failure)</span>  2777K-&gt;376<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0041400 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  2796K-&gt;2777<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0025255 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Allocation Failure)</span>  2777K-&gt;376<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0037690 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  2817K-&gt;2777<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0037759 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Allocation Failure)</span>  2777K-&gt;377<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0042416 secs]</span></span><br><span class=\"line\"><span class=\"function\">缓存列表大小：40</span></span><br><span class=\"line\"><span class=\"function\">OOM Obj-37</span></span><br><span class=\"line\"><span class=\"function\">OOM Obj-38</span></span><br><span class=\"line\"><span class=\"function\">OOM Obj-39</span></span><br><span class=\"line\"><span class=\"function\">OOM Obj-40</span></span><br><span class=\"line\"><span class=\"function\">缓存列表大小：4</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，缓存40个软引用对象之后，如果一次性全部存储，显然内存大小无法满足，所以在不断创建软引用对象的过程中，不断发生GC来进行垃圾回收，最终只有4个软引用未被清理掉。</p>\n<h2 id=\"强引用与软引用对比\"><a href=\"#强引用与软引用对比\" class=\"headerlink\" title=\"强引用与软引用对比\"></a>强引用与软引用对比</h2><p>没有对比就没有伤害，来将强引用和软引用对比一下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OOMClass</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] oom = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        testStrongReference();</span><br><span class=\"line\">        <span class=\"comment\">//testSoftReference();</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testStrongReference</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;OOMClass&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">            list.add(<span class=\"keyword\">new</span> OOMClass());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">testSoftReference</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        ReferenceQueue&lt;OOMClass&gt; referenceQueue = <span class=\"keyword\">new</span> ReferenceQueue&lt;&gt;();</span><br><span class=\"line\">        List&lt;SoftReference&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">            OOMClass oomClass = <span class=\"keyword\">new</span> OOMClass();</span><br><span class=\"line\">            list.add(<span class=\"keyword\">new</span> SoftReference(oomClass, referenceQueue));</span><br><span class=\"line\">            oomClass = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行testStrongReference方法的结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[GC (Allocation Failure)  <span class=\"number\">1019</span>K-&gt;<span class=\"number\">384</span>K(<span class=\"number\">3584</span>K), <span class=\"number\">0.0033595</span> secs]</span><br><span class=\"line\">[GC (Allocation Failure)  <span class=\"number\">1406</span>K-&gt;<span class=\"number\">856</span>K(<span class=\"number\">3584</span>K), <span class=\"number\">0.0013098</span> secs]</span><br><span class=\"line\">[GC (Allocation Failure)  <span class=\"number\">1880</span>K-&gt;<span class=\"number\">1836</span>K(<span class=\"number\">3584</span>K), <span class=\"number\">0.0014382</span> secs]</span><br><span class=\"line\">[<span class=\"function\">Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  1836K-&gt;1756<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0039761 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  2778K-&gt;2758<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0021269 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  2779K-&gt;2770<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0016329 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  2779K-&gt;2775<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0023157 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  2775K-&gt;2775<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0015927 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  3037K-&gt;3029<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0025071 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  3067K-&gt;3065<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0017529 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Allocation Failure)</span>  3065K-&gt;3047<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0033445 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  3068K-&gt;3059<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0016623 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  3070K-&gt;3068<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0028357 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Allocation Failure)</span>  3068K-&gt;3068<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0017616 secs]</span></span><br><span class=\"line\"><span class=\"function\">java.lang.OutOfMemoryError: Java heap space</span></span><br><span class=\"line\"><span class=\"function\">Dumping heap to java_pid3352.hprof ...</span></span><br><span class=\"line\"><span class=\"function\">Exception in thread \"main\" java.lang.OutOfMemoryError: Java heap space</span></span><br><span class=\"line\"><span class=\"function\">Heap dump file created [3855956 bytes in 0.017 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  3071K-&gt;376<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0032068 secs]</span></span><br><span class=\"line\"><span class=\"function\">\tat reference.Test$OOMClass.&lt;init&gt;<span class=\"params\">(Test.java:<span class=\"number\">11</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">\tat reference.Test.<span class=\"title\">testStrongReference</span><span class=\"params\">(Test.java:<span class=\"number\">22</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">\tat reference.Test.<span class=\"title\">main</span><span class=\"params\">(Test.java:<span class=\"number\">15</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">Process finished with exit code 1</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，很快就抛出了OOM，原因是Java heap space，也就是堆内存不足。</p>\n<p>如果运行testSoftReference方法，将会得到如下结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[GC (Allocation Failure)  <span class=\"number\">1019</span>K-&gt;<span class=\"number\">464</span>K(<span class=\"number\">3584</span>K), <span class=\"number\">0.0019850</span> secs]</span><br><span class=\"line\">[GC (Allocation Failure)  <span class=\"number\">1484</span>K-&gt;<span class=\"number\">844</span>K(<span class=\"number\">3584</span>K), <span class=\"number\">0.0015920</span> secs]</span><br><span class=\"line\">[GC (Allocation Failure)  <span class=\"number\">1868</span>K-&gt;<span class=\"number\">1860</span>K(<span class=\"number\">3584</span>K), <span class=\"number\">0.0043236</span> secs]</span><br><span class=\"line\">[<span class=\"function\">Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  1860K-&gt;1781<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0044581 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  2802K-&gt;2754<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0041726 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  2802K-&gt;2799<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0031293 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  3023K-&gt;3023<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0024830 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  3071K-&gt;3068<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0035025 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Allocation Failure)</span>  3068K-&gt;405<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0040672 secs]</span></span><br><span class=\"line\"><span class=\"function\">[<span class=\"title\">GC</span> <span class=\"params\">(Allocation Failure)</span>  1512K-&gt;1567<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0011170 secs]</span></span><br><span class=\"line\"><span class=\"function\">[Full <span class=\"title\">GC</span> <span class=\"params\">(Ergonomics)</span>  1567K-&gt;1496<span class=\"title\">K</span><span class=\"params\">(<span class=\"number\">3584</span>K)</span>, 0.0048438 secs]</span></span><br></pre></td></tr></table></figure>\n<p>可以看到，并没有抛出OOM，而是进行多次了GC，可以明显的看到这一条：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Full GC (Allocation Failure)  3068K-&gt;405K(3584K), 0.0040672 secs]</span><br></pre></td></tr></table></figure>\n<p>当内存不足时进行了一次Full GC，回收了大部分内存空间，也就是将大部分软引用指向的对象回收掉了。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li>软引用弱于强引用</li>\n<li>软引用指向的对象会在内存不足时被垃圾回收清理掉</li>\n<li>JVM会优先回收长时间闲置不用的软引用对象，对那些刚刚构建的或刚刚使用过的软引用对象会尽可能保留</li>\n<li>软引用可以有效的解决OOM问题</li>\n<li>软引用适合用作非必须大对象的缓存</li>\n</ul>\n<p>至此，本篇就告一段落了，这里只简单的介绍了软引用的作用以及用法。其实软引用并没有这么好，它的使用有一些可能是致命的缺点，如果想要更深入的了解软引用的运行原理以及软引用到底是在何时进行回收，又是如何进行回收的话，可以查看翻阅后续的章节。 </p>\n"},{"prev":"./soft-reference-code-detail","next":"./phantom-reference-code-detail","_content":"\n# WeakReference源码详解\n\n## 定义\n\n::: tip \nWeakReference是弱引用，该引用不会影响垃圾回收器对对象的回收，不会影响对象的生命周期。\n:::\n\n## 说明\n\n当虚拟机在某个时间点决定要回收一个弱可达（weakly-reachable）对象时，会自动清除该对象的所有弱引用。并且会将对象变为finalizable状态，然后把这些刚清除的弱引用放到其注册的引用队列中。\n\n[前面](./weak-reference.md)已经说明过WeakReference的用法了，本篇仅对WeakReference从源码角度做一些补充。\n\n## 源码\n\n```java\npublic class WeakReference<T> extends Reference<T> {\n    public WeakReference(T referent) {\n        super(referent);\n    }\n    \n    public WeakReference(T referent, ReferenceQueue<? super T> q) {\n        super(referent, q);\n    }\n    \n}\n```\n\n嗯，十行代码，可以说是很简单的一个类了，只有两个构造函数，一个传引用队列，另一个不传，没有覆盖父类Reference的任何方法。\n\n## WeakHashMap\n\n说到WeakReference，自然不能不说WeakHashMap，这个map的用法与hashmap基本一致，它的特点便是使用弱引用作为key，这就让它有一个很重要的特性，它可以自动清除自身，这样就不需要再像之前SoftReference那样需要手动去释放引用实例。\n\n如果想了解关于WeakHashMap更详细的内容，可以戳[这里](../collections/weakhashmap-code-detail.md)。\n\n<img src=\"./06.png\" width=\"40\"/>好像。。。没什么可讲的了。在前面弱引用一篇里基本都讲完了。 ","source":"_posts/java/reference/weak-reference-code-detail.md","raw":"---\nprev: ./soft-reference-code-detail\nnext: ./phantom-reference-code-detail\n---\n\n# WeakReference源码详解\n\n## 定义\n\n::: tip \nWeakReference是弱引用，该引用不会影响垃圾回收器对对象的回收，不会影响对象的生命周期。\n:::\n\n## 说明\n\n当虚拟机在某个时间点决定要回收一个弱可达（weakly-reachable）对象时，会自动清除该对象的所有弱引用。并且会将对象变为finalizable状态，然后把这些刚清除的弱引用放到其注册的引用队列中。\n\n[前面](./weak-reference.md)已经说明过WeakReference的用法了，本篇仅对WeakReference从源码角度做一些补充。\n\n## 源码\n\n```java\npublic class WeakReference<T> extends Reference<T> {\n    public WeakReference(T referent) {\n        super(referent);\n    }\n    \n    public WeakReference(T referent, ReferenceQueue<? super T> q) {\n        super(referent, q);\n    }\n    \n}\n```\n\n嗯，十行代码，可以说是很简单的一个类了，只有两个构造函数，一个传引用队列，另一个不传，没有覆盖父类Reference的任何方法。\n\n## WeakHashMap\n\n说到WeakReference，自然不能不说WeakHashMap，这个map的用法与hashmap基本一致，它的特点便是使用弱引用作为key，这就让它有一个很重要的特性，它可以自动清除自身，这样就不需要再像之前SoftReference那样需要手动去释放引用实例。\n\n如果想了解关于WeakHashMap更详细的内容，可以戳[这里](../collections/weakhashmap-code-detail.md)。\n\n<img src=\"./06.png\" width=\"40\"/>好像。。。没什么可讲的了。在前面弱引用一篇里基本都讲完了。 ","slug":"java/reference/weak-reference-code-detail","published":1,"date":"2018-12-27T08:04:21.688Z","updated":"2018-12-27T08:04:21.689Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5rm002uwu9k9q3997i1","content":"<h1 id=\"WeakReference源码详解\"><a href=\"#WeakReference源码详解\" class=\"headerlink\" title=\"WeakReference源码详解\"></a>WeakReference源码详解</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>::: tip<br>WeakReference是弱引用，该引用不会影响垃圾回收器对对象的回收，不会影响对象的生命周期。<br>:::</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>当虚拟机在某个时间点决定要回收一个弱可达（weakly-reachable）对象时，会自动清除该对象的所有弱引用。并且会将对象变为finalizable状态，然后把这些刚清除的弱引用放到其注册的引用队列中。</p>\n<p><a href=\"./weak-reference.md\">前面</a>已经说明过WeakReference的用法了，本篇仅对WeakReference从源码角度做一些补充。</p>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WeakReference</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Reference</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WeakReference</span><span class=\"params\">(T referent)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(referent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WeakReference</span><span class=\"params\">(T referent, ReferenceQueue&lt;? <span class=\"keyword\">super</span> T&gt; q)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(referent, q);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>嗯，十行代码，可以说是很简单的一个类了，只有两个构造函数，一个传引用队列，另一个不传，没有覆盖父类Reference的任何方法。</p>\n<h2 id=\"WeakHashMap\"><a href=\"#WeakHashMap\" class=\"headerlink\" title=\"WeakHashMap\"></a>WeakHashMap</h2><p>说到WeakReference，自然不能不说WeakHashMap，这个map的用法与hashmap基本一致，它的特点便是使用弱引用作为key，这就让它有一个很重要的特性，它可以自动清除自身，这样就不需要再像之前SoftReference那样需要手动去释放引用实例。</p>\n<p>如果想了解关于WeakHashMap更详细的内容，可以戳<a href=\"../collections/weakhashmap-code-detail.md\">这里</a>。</p>\n<p><img src=\"./06.png\" width=\"40\">好像。。。没什么可讲的了。在前面弱引用一篇里基本都讲完了。 </p>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"WeakReference源码详解\"><a href=\"#WeakReference源码详解\" class=\"headerlink\" title=\"WeakReference源码详解\"></a>WeakReference源码详解</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>::: tip<br>WeakReference是弱引用，该引用不会影响垃圾回收器对对象的回收，不会影响对象的生命周期。<br>:::</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>当虚拟机在某个时间点决定要回收一个弱可达（weakly-reachable）对象时，会自动清除该对象的所有弱引用。并且会将对象变为finalizable状态，然后把这些刚清除的弱引用放到其注册的引用队列中。</p>\n<p><a href=\"./weak-reference.md\">前面</a>已经说明过WeakReference的用法了，本篇仅对WeakReference从源码角度做一些补充。</p>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WeakReference</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">Reference</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WeakReference</span><span class=\"params\">(T referent)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(referent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WeakReference</span><span class=\"params\">(T referent, ReferenceQueue&lt;? <span class=\"keyword\">super</span> T&gt; q)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(referent, q);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>嗯，十行代码，可以说是很简单的一个类了，只有两个构造函数，一个传引用队列，另一个不传，没有覆盖父类Reference的任何方法。</p>\n<h2 id=\"WeakHashMap\"><a href=\"#WeakHashMap\" class=\"headerlink\" title=\"WeakHashMap\"></a>WeakHashMap</h2><p>说到WeakReference，自然不能不说WeakHashMap，这个map的用法与hashmap基本一致，它的特点便是使用弱引用作为key，这就让它有一个很重要的特性，它可以自动清除自身，这样就不需要再像之前SoftReference那样需要手动去释放引用实例。</p>\n<p>如果想了解关于WeakHashMap更详细的内容，可以戳<a href=\"../collections/weakhashmap-code-detail.md\">这里</a>。</p>\n<p><img src=\"./06.png\" width=\"40\">好像。。。没什么可讲的了。在前面弱引用一篇里基本都讲完了。 </p>\n"},{"prev":"./four-kinds-of-reference","next":"./soft-reference","_content":"\n# 强引用\n\n## 定义\n\n::: tip \n强引用是使用最普遍的引用。如果一个对象具有强引用，那垃圾回收器宁愿抛出OOM（OutOfMemoryError）也不会回收它。\n:::\n\n## 说明\n\n不要被这个`强`字吓到，以为这个引用就很厉害，其实强引用就是程序中使用的一般引用类型。<img src=\"./0009.png\" width=\"50\"/>举个简单的栗子：\n\n```java\nString s = new String(\"Hello Frank!\");\n```\n\n::: tip 强可达\n如果一个对象与GC Roots之间存在强引用，则称这个对象为`强可达（strong reachable）`对象。\n:::\n\n关于可达性如果不太清楚的话，可以翻阅[这篇文章](../jvm/reachable.md)。\n\n当你声明一个变量并指向一个实例的时候，其实就是在创造一个强引用。那么，既然叫强引用，它“强”在哪里呢？<img src=\"./0003.png\" width=\"50\"/>\n\n这主要体现在JVM进行GC的时候，只要对象有强引用与其关联，就绝对不会对它进行回收，即使已经内存不足了也不会收回有强引用指向的对象。\n\n::: tip 强引用独白\n这是我小弟，有我罩着，垃圾回收器你别动它。\n:::\n\n如果你不需要使用某个对象了，可以将相应的引用设置为null，消除强引用来帮助垃圾回收器进行回收。因为过多的强引用也是导致OOM的罪魁祸首。\n\n```java\ns = null;\n```\n\n显式地设置消除引用，或已超出对象的生命周期范围，则JVM会认为该对象不存在引用，这时就可能会回收这个对象。但是具体什么时候收集这要取决于具体的GC算法。\n\n如果在一个方法的内部有一个变量s持有一个对象（Object）的强引用，那么这个变量s保存在栈中，而真正的引用内容（object）保存在堆中。当这个方法运行完成后就会退出方法栈，则引用s也会被销毁，这个object就可能会在之后的一次GC中回收。但是当这个s是全局变量时，就需要在不再使用这个对象时将引用s赋值为null，也就是消除与object对象之间的强引用，因为有强引用关联的对象是不会被垃圾回收的。<img src=\"./0013.png\" width=\"50\"/>\n\n下面看另一个🌰：\n\n```java\nA a = new A();\nB b = new B(a);\na = null;\n```\n\n这里a和b都持有一个对象的强引用，当执行 a = null 时， a 不再持有 A 的强引用。讲道理，A 已经该被回收了。但是这里a = null 时，A 对象不满足被回收的条件，因为还有一个B对象持有其强引用，这时候就会造成[内存泄漏](../jvm/memory-leak.md)。<img src=\"./8111.png\" width=\"50\"/>\n\n再看另一个会导致内存泄漏的栗子：\n\n```java\npublic static ArrayList<Object> list = new ArrayList<Object>();\npublic void stackOverflowTest(Object object){\n    list.add(object);\n    object = null;\n}\n```\n\nGC回收的是不可达对象，但是，在这个静态集合类对象中，持有了对象的强引用，但却有可能其中的某些对象已经不再使用了，所以当非静态对象被静态变量持有强引用的时候，最容易发生内存泄露。\n\n在方法中从list获取到对象后赋值给一个变量，使用完之后将这个变量设置为null并不会释放object引用的对象，因为list中还是持有对象的强引用。这时就造成了[内存泄漏](../jvm/memory-leak.md)。 \n\n## 小结\n\n所以小结一下强引用的特点：\n\n- 强引用就是最普通的引用\n- 可以使用强引用直接访问目标对象\n- 强引用指向的对象在任何时候都不会被系统回收\n- 强引用可能会导致内存泄漏\n- 过多的强引用会导致OOM\n\n","source":"_posts/java/reference/strong-reference.md","raw":"---\nprev: ./four-kinds-of-reference\nnext: ./soft-reference\n---\n\n# 强引用\n\n## 定义\n\n::: tip \n强引用是使用最普遍的引用。如果一个对象具有强引用，那垃圾回收器宁愿抛出OOM（OutOfMemoryError）也不会回收它。\n:::\n\n## 说明\n\n不要被这个`强`字吓到，以为这个引用就很厉害，其实强引用就是程序中使用的一般引用类型。<img src=\"./0009.png\" width=\"50\"/>举个简单的栗子：\n\n```java\nString s = new String(\"Hello Frank!\");\n```\n\n::: tip 强可达\n如果一个对象与GC Roots之间存在强引用，则称这个对象为`强可达（strong reachable）`对象。\n:::\n\n关于可达性如果不太清楚的话，可以翻阅[这篇文章](../jvm/reachable.md)。\n\n当你声明一个变量并指向一个实例的时候，其实就是在创造一个强引用。那么，既然叫强引用，它“强”在哪里呢？<img src=\"./0003.png\" width=\"50\"/>\n\n这主要体现在JVM进行GC的时候，只要对象有强引用与其关联，就绝对不会对它进行回收，即使已经内存不足了也不会收回有强引用指向的对象。\n\n::: tip 强引用独白\n这是我小弟，有我罩着，垃圾回收器你别动它。\n:::\n\n如果你不需要使用某个对象了，可以将相应的引用设置为null，消除强引用来帮助垃圾回收器进行回收。因为过多的强引用也是导致OOM的罪魁祸首。\n\n```java\ns = null;\n```\n\n显式地设置消除引用，或已超出对象的生命周期范围，则JVM会认为该对象不存在引用，这时就可能会回收这个对象。但是具体什么时候收集这要取决于具体的GC算法。\n\n如果在一个方法的内部有一个变量s持有一个对象（Object）的强引用，那么这个变量s保存在栈中，而真正的引用内容（object）保存在堆中。当这个方法运行完成后就会退出方法栈，则引用s也会被销毁，这个object就可能会在之后的一次GC中回收。但是当这个s是全局变量时，就需要在不再使用这个对象时将引用s赋值为null，也就是消除与object对象之间的强引用，因为有强引用关联的对象是不会被垃圾回收的。<img src=\"./0013.png\" width=\"50\"/>\n\n下面看另一个🌰：\n\n```java\nA a = new A();\nB b = new B(a);\na = null;\n```\n\n这里a和b都持有一个对象的强引用，当执行 a = null 时， a 不再持有 A 的强引用。讲道理，A 已经该被回收了。但是这里a = null 时，A 对象不满足被回收的条件，因为还有一个B对象持有其强引用，这时候就会造成[内存泄漏](../jvm/memory-leak.md)。<img src=\"./8111.png\" width=\"50\"/>\n\n再看另一个会导致内存泄漏的栗子：\n\n```java\npublic static ArrayList<Object> list = new ArrayList<Object>();\npublic void stackOverflowTest(Object object){\n    list.add(object);\n    object = null;\n}\n```\n\nGC回收的是不可达对象，但是，在这个静态集合类对象中，持有了对象的强引用，但却有可能其中的某些对象已经不再使用了，所以当非静态对象被静态变量持有强引用的时候，最容易发生内存泄露。\n\n在方法中从list获取到对象后赋值给一个变量，使用完之后将这个变量设置为null并不会释放object引用的对象，因为list中还是持有对象的强引用。这时就造成了[内存泄漏](../jvm/memory-leak.md)。 \n\n## 小结\n\n所以小结一下强引用的特点：\n\n- 强引用就是最普通的引用\n- 可以使用强引用直接访问目标对象\n- 强引用指向的对象在任何时候都不会被系统回收\n- 强引用可能会导致内存泄漏\n- 过多的强引用会导致OOM\n\n","slug":"java/reference/strong-reference","published":1,"date":"2018-12-27T08:04:21.671Z","updated":"2018-12-27T08:04:21.671Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5rn002vwu9krlo78nqx","content":"<h1 id=\"强引用\"><a href=\"#强引用\" class=\"headerlink\" title=\"强引用\"></a>强引用</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>::: tip<br>强引用是使用最普遍的引用。如果一个对象具有强引用，那垃圾回收器宁愿抛出OOM（OutOfMemoryError）也不会回收它。<br>:::</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>不要被这个<code>强</code>字吓到，以为这个引用就很厉害，其实强引用就是程序中使用的一般引用类型。<img src=\"./0009.png\" width=\"50\">举个简单的栗子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = <span class=\"keyword\">new</span> String(<span class=\"string\">\"Hello Frank!\"</span>);</span><br></pre></td></tr></table></figure>\n<p>::: tip 强可达<br>如果一个对象与GC Roots之间存在强引用，则称这个对象为<code>强可达（strong reachable）</code>对象。<br>:::</p>\n<p>关于可达性如果不太清楚的话，可以翻阅<a href=\"../jvm/reachable.md\">这篇文章</a>。</p>\n<p>当你声明一个变量并指向一个实例的时候，其实就是在创造一个强引用。那么，既然叫强引用，它“强”在哪里呢？<img src=\"./0003.png\" width=\"50\"></p>\n<p>这主要体现在JVM进行GC的时候，只要对象有强引用与其关联，就绝对不会对它进行回收，即使已经内存不足了也不会收回有强引用指向的对象。</p>\n<p>::: tip 强引用独白<br>这是我小弟，有我罩着，垃圾回收器你别动它。<br>:::</p>\n<p>如果你不需要使用某个对象了，可以将相应的引用设置为null，消除强引用来帮助垃圾回收器进行回收。因为过多的强引用也是导致OOM的罪魁祸首。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"keyword\">null</span>;</span><br></pre></td></tr></table></figure>\n<p>显式地设置消除引用，或已超出对象的生命周期范围，则JVM会认为该对象不存在引用，这时就可能会回收这个对象。但是具体什么时候收集这要取决于具体的GC算法。</p>\n<p>如果在一个方法的内部有一个变量s持有一个对象（Object）的强引用，那么这个变量s保存在栈中，而真正的引用内容（object）保存在堆中。当这个方法运行完成后就会退出方法栈，则引用s也会被销毁，这个object就可能会在之后的一次GC中回收。但是当这个s是全局变量时，就需要在不再使用这个对象时将引用s赋值为null，也就是消除与object对象之间的强引用，因为有强引用关联的对象是不会被垃圾回收的。<img src=\"./0013.png\" width=\"50\"></p>\n<p>下面看另一个🌰：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A a = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\">B b = <span class=\"keyword\">new</span> B(a);</span><br><span class=\"line\">a = <span class=\"keyword\">null</span>;</span><br></pre></td></tr></table></figure>\n<p>这里a和b都持有一个对象的强引用，当执行 a = null 时， a 不再持有 A 的强引用。讲道理，A 已经该被回收了。但是这里a = null 时，A 对象不满足被回收的条件，因为还有一个B对象持有其强引用，这时候就会造成<a href=\"../jvm/memory-leak.md\">内存泄漏</a>。<img src=\"./8111.png\" width=\"50\"></p>\n<p>再看另一个会导致内存泄漏的栗子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ArrayList&lt;Object&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Object&gt;();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stackOverflowTest</span><span class=\"params\">(Object object)</span></span>&#123;</span><br><span class=\"line\">    list.add(object);</span><br><span class=\"line\">    object = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>GC回收的是不可达对象，但是，在这个静态集合类对象中，持有了对象的强引用，但却有可能其中的某些对象已经不再使用了，所以当非静态对象被静态变量持有强引用的时候，最容易发生内存泄露。</p>\n<p>在方法中从list获取到对象后赋值给一个变量，使用完之后将这个变量设置为null并不会释放object引用的对象，因为list中还是持有对象的强引用。这时就造成了<a href=\"../jvm/memory-leak.md\">内存泄漏</a>。 </p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>所以小结一下强引用的特点：</p>\n<ul>\n<li>强引用就是最普通的引用</li>\n<li>可以使用强引用直接访问目标对象</li>\n<li>强引用指向的对象在任何时候都不会被系统回收</li>\n<li>强引用可能会导致内存泄漏</li>\n<li>过多的强引用会导致OOM</li>\n</ul>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"强引用\"><a href=\"#强引用\" class=\"headerlink\" title=\"强引用\"></a>强引用</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>::: tip<br>强引用是使用最普遍的引用。如果一个对象具有强引用，那垃圾回收器宁愿抛出OOM（OutOfMemoryError）也不会回收它。<br>:::</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>不要被这个<code>强</code>字吓到，以为这个引用就很厉害，其实强引用就是程序中使用的一般引用类型。<img src=\"./0009.png\" width=\"50\">举个简单的栗子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = <span class=\"keyword\">new</span> String(<span class=\"string\">\"Hello Frank!\"</span>);</span><br></pre></td></tr></table></figure>\n<p>::: tip 强可达<br>如果一个对象与GC Roots之间存在强引用，则称这个对象为<code>强可达（strong reachable）</code>对象。<br>:::</p>\n<p>关于可达性如果不太清楚的话，可以翻阅<a href=\"../jvm/reachable.md\">这篇文章</a>。</p>\n<p>当你声明一个变量并指向一个实例的时候，其实就是在创造一个强引用。那么，既然叫强引用，它“强”在哪里呢？<img src=\"./0003.png\" width=\"50\"></p>\n<p>这主要体现在JVM进行GC的时候，只要对象有强引用与其关联，就绝对不会对它进行回收，即使已经内存不足了也不会收回有强引用指向的对象。</p>\n<p>::: tip 强引用独白<br>这是我小弟，有我罩着，垃圾回收器你别动它。<br>:::</p>\n<p>如果你不需要使用某个对象了，可以将相应的引用设置为null，消除强引用来帮助垃圾回收器进行回收。因为过多的强引用也是导致OOM的罪魁祸首。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = <span class=\"keyword\">null</span>;</span><br></pre></td></tr></table></figure>\n<p>显式地设置消除引用，或已超出对象的生命周期范围，则JVM会认为该对象不存在引用，这时就可能会回收这个对象。但是具体什么时候收集这要取决于具体的GC算法。</p>\n<p>如果在一个方法的内部有一个变量s持有一个对象（Object）的强引用，那么这个变量s保存在栈中，而真正的引用内容（object）保存在堆中。当这个方法运行完成后就会退出方法栈，则引用s也会被销毁，这个object就可能会在之后的一次GC中回收。但是当这个s是全局变量时，就需要在不再使用这个对象时将引用s赋值为null，也就是消除与object对象之间的强引用，因为有强引用关联的对象是不会被垃圾回收的。<img src=\"./0013.png\" width=\"50\"></p>\n<p>下面看另一个🌰：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A a = <span class=\"keyword\">new</span> A();</span><br><span class=\"line\">B b = <span class=\"keyword\">new</span> B(a);</span><br><span class=\"line\">a = <span class=\"keyword\">null</span>;</span><br></pre></td></tr></table></figure>\n<p>这里a和b都持有一个对象的强引用，当执行 a = null 时， a 不再持有 A 的强引用。讲道理，A 已经该被回收了。但是这里a = null 时，A 对象不满足被回收的条件，因为还有一个B对象持有其强引用，这时候就会造成<a href=\"../jvm/memory-leak.md\">内存泄漏</a>。<img src=\"./8111.png\" width=\"50\"></p>\n<p>再看另一个会导致内存泄漏的栗子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ArrayList&lt;Object&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Object&gt;();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stackOverflowTest</span><span class=\"params\">(Object object)</span></span>&#123;</span><br><span class=\"line\">    list.add(object);</span><br><span class=\"line\">    object = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>GC回收的是不可达对象，但是，在这个静态集合类对象中，持有了对象的强引用，但却有可能其中的某些对象已经不再使用了，所以当非静态对象被静态变量持有强引用的时候，最容易发生内存泄露。</p>\n<p>在方法中从list获取到对象后赋值给一个变量，使用完之后将这个变量设置为null并不会释放object引用的对象，因为list中还是持有对象的强引用。这时就造成了<a href=\"../jvm/memory-leak.md\">内存泄漏</a>。 </p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>所以小结一下强引用的特点：</p>\n<ul>\n<li>强引用就是最普通的引用</li>\n<li>可以使用强引用直接访问目标对象</li>\n<li>强引用指向的对象在任何时候都不会被系统回收</li>\n<li>强引用可能会导致内存泄漏</li>\n<li>过多的强引用会导致OOM</li>\n</ul>\n"},{"prev":"./soft-reference","next":"./phantom-reference","_content":"\n# 弱引用\n\n## 定义\n\n::: tip \n弱引用是使用WeakReference创建的引用，弱引用也是用来描述非必需对象的，它是比软引用更弱的引用类型。在发生GC时，只要发现弱引用，不管系统堆空间是否足够，都会将对象进行回收。\n:::\n\n## 说明\n\n弱引用，从名字来看就很弱嘛，这种引用指向的对象，一旦在GC时被扫描到，就逃脱不了被回收的命运。<img src=\"./0040.png\" width=\"50\"/>\n\n但是，弱引用指向的对象也并不一定就马上会被回收，如果弱引用对象较大，直接进到了老年代，那么就可以苟且偷生到Full GC触发前，所以弱引用对象也可能存在较长的一段时间。一旦一个弱引用对象被垃圾回收器回收，便会加入到一个引用队列中（如果有的话）。\n\n弱引用对应的类为WeakReference，举个栗子：\n\n```java\nString s = new String(\"Frank\");    \nWeakReference<String> weakRef = new WeakReference<String>(s);\ns = null;\n```\n\n这里我们把s设置为null后，字符串对象便只有弱引用指向它。\n\n::: tip 弱可达\n如果一个对象与GC Roots之间仅存在弱引用，则称这个对象为`弱可达(weakly reachable)`对象。\n:::\n\n::: warning 注意\n在垃圾回收器回收一个对象前，WeakReference类所提供的get方法会返回其引用对象的强引用，一旦垃圾回收器回收掉该对象之后，get方法将返回null。所以在获取弱引用对象的代码中，一定要判断是否为null，以免出现NullPointerException异常导致应用崩溃。<img src=\"./0019.png\" width=\"50\"/>\n:::\n\n下面的代码会让s再次持有对象的强引用：\n\n```java\ns = weakRef.get();\n```\n\n如果在weakRef包裹的对象被回收前，用强引用关联该对象，那这个对象又会变成强可达状态。\n\n来看一个简单的栗子了解一下WeakReference引用的对象是何时被回收的：\n\n```java\npublic class WeakReferenceTest {\n    private static final List<Object> TEST_DATA = new LinkedList<>();\n    private static final ReferenceQueue<TestClass> QUEUE = new ReferenceQueue<>();\n\n    public static void main(String[] args) {\n        TestClass obj = new TestClass(\"Test\");\n        WeakReference<TestClass> weakRef = new WeakReference<>(obj, QUEUE);\n        //可以重新获得OOMClass对象，并用一个强引用指向它\n        //oomObj = weakRef.get();\n\n        // 该线程不断读取这个弱引用，并不断往列表里插入数据，以促使系统早点进行GC\n        new Thread(() -> {\n            while (true) {\n                TEST_DATA.add(new byte[1024 * 100]);\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                    Thread.currentThread().interrupt();\n                }\n                System.out.println(weakRef.get());\n            }\n        }).start();\n\n        // 这个线程不断读取引用队列，当弱引用指向的对象呗回收时，该引用就会被加入到引用队列中\n        new Thread(() -> {\n            while (true) {\n                Reference<? extends TestClass> poll = QUEUE.poll();\n                if (poll != null) {\n                    System.out.println(\"--- 弱引用对象被jvm回收了 ---- \" + poll);\n                    System.out.println(\"--- 回收对象 ---- \" + poll.get());\n                }\n            }\n        }).start();\n\n        //将强引用指向空指针 那么此时只有一个弱引用指向TestClass对象\n        obj = null;\n\n        try {\n            Thread.currentThread().join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n            System.exit(1);\n        }\n    }\n\n    static class TestClass {\n        private String name;\n\n        public TestClass(String name) {\n            this.name = name;\n        }\n\n        @Override\n        public String toString() {\n            return \"TestClass - \" + name;\n        }\n    }\n}\n```\n\n设置一下虚拟机参数：\n\n```bash\n-verbose:gc -Xms4m -Xmx4m -Xmn2m\n```\n\n运行结果如下：\n\n```bash\n[GC (Allocation Failure)  1017K->464K(3584K), 0.0014345 secs]\n[GC (Allocation Failure)  1483K->536K(3584K), 0.0017221 secs]\n[GC (Allocation Failure)  1560K->648K(3584K), 0.0036572 secs]\nTestClass - Test\nTestClass - Test\nTestClass - Test\n[GC (Allocation Failure)  1621K->984K(3584K), 0.0011455 secs]\n--- 弱引用对象被jvm回收了 ---- java.lang.ref.WeakReference@51a947fe\n--- 回收对象 ---- null\nnull\n...省略n个null和几次GC信息\n[Full GC (Ergonomics)  2964K->2964K(3584K), 0.0025450 secs]\n[Full GC (Allocation Failure)  2964K->2964K(3584K), 0.0021907 secs]\njava.lang.OutOfMemoryError: Java heap space\nDumping heap to java_pid6860.hprof ...\nHeap dump file created [3912229 bytes in 0.011 secs]\nException in thread \"Thread-0\" java.lang.OutOfMemoryError: Java heap space\n\tat weakhashmap.WeakReferenceTest.lambda$main$0(WeakReferenceTest.java:22)\n\tat weakhashmap.WeakReferenceTest$$Lambda$1/764977973.run(Unknown Source)\n\tat java.lang.Thread.run(Thread.java:748)\n```\n\n可以看到，其实弱引用也并不是一发生GC就被回收掉了。\n\n## 应用场景\n\n如果一个对象仅仅是偶尔使用，并且希望在使用时随时就能获取到，但又不想影响此对象的垃圾收集，那么你应该用 WeakReference 来引用该对象。 \n\n弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用加入到与之关联的引用队列中。\n\n一般来说，很少直接使用WeakReference，而是使用WeakHashMap。在WeakHashMap中，内部有一个引用队列，插入的元素会被包裹成WeakReference，并加入队列中，用来做缓存再合适不过。\n\n在Tomcat的缓存中，其实就用到了WeakHashMap：\n\n```java\npublic final class ConcurrentCache<K,V> {\n    private final int size;\n    private final Map<K,V> eden;\n    private final Map<K,V> longterm;\n\n    public ConcurrentCache(int size) {\n        this.size = size;\n        this.eden = new ConcurrentHashMap<>(size);\n        this.longterm = new WeakHashMap<>(size);\n    }\n\n    public V get(K k) {\n        // 先从eden中取\n        V v = this.eden.get(k);\n        if (v == null) {\n            // 如果取不到再从longterm中取\n            synchronized (longterm) {\n                v = this.longterm.get(k);\n            }\n            // 如果取到则重新放到eden中\n            if (v != null) {\n                this.eden.put(k, v);\n            }\n        }\n        return v;\n    }\n\n    public void put(K k, V v) {\n        if (this.eden.size() >= size) {\n            // 如果eden中的元素数量大于指定容量，将所有元素放到longterm中\n            synchronized (longterm) {\n                this.longterm.putAll(this.eden);\n            }\n            this.eden.clear();\n        }\n        this.eden.put(k, v);\n    }\n}\n```\n\n这里有eden和longterm的两个map，如果对jvm堆了解的话，可以看出tomcat在这里是使用ConcurrentHashMap和WeakHashMap做了类似分代缓存的操作。\n\n在put方法里，在插入键值对时，先检查eden缓存的容量是否超出设定的大小。如果没有则直接放入eden缓存，如果超了则锁定longterm将eden中所有的键值对都放入longterm。再将eden清空并插入该键值对。\n\n在get方法中，也是优先从eden中找对应的key，如果没有则进入longterm缓存中查找，找到后就加入eden缓存并返回。 \n\n经过这样的设计，相对常用的对象都能在eden缓存中找到，不常用（有可能被销毁的对象）的则进入longterm缓存。而longterm的key的实际对象没有其他引用指向它时，gc就会自动回收heap中该弱引用指向的实际对象，并将弱引用放入其引用队列中。\n\n## 弱引用与软引用对比\n\n弱引用与软引用的区别在于：\n\n1. 只具有弱引用的对象拥有更短暂的生命周期。\n2. 被垃圾回收器回收的时机不一样，在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。而被软引用关联的对象只有在内存不足时才会被回收。\n3. 弱引用不会影响GC，而软引用会一定程度上对GC造成影响。\n\n相似之处：都是用来描述非必需对象的。\n\n那么什么时候用SoftReference，什么时候用WeakReference呢？\n\n如果缓存的对象是比较大的对象，使用频率相对较高的对象，那么使用SoftReference会更好，因为这样能让缓存对象有更长的生命周期。\n\n如果缓存对象都是比较小的对象，使用频率一般或者相对较低，那么使用WeakReference会更合适。\n\n当然，如果实在不知道选哪个，一般而言，用作缓存时使用WeakHashMap都不会有太大问题。<img src=\"./195.png\" width=\"50\"/>\n\n## 小结\n\n+ 弱引用是比软引用更弱的引用类型 \n+ 弱引用不能延长对象的生命周期，一旦对象只剩下弱引用，它就随时可能会被回收\n+ 可以通过弱引用获取对象的强引用\n+ 弱引用适合用作缓存\n\n\n\n\n\n\n\n\n\n","source":"_posts/java/reference/weak-reference.md","raw":"---\nprev: ./soft-reference\nnext: ./phantom-reference\n---\n\n# 弱引用\n\n## 定义\n\n::: tip \n弱引用是使用WeakReference创建的引用，弱引用也是用来描述非必需对象的，它是比软引用更弱的引用类型。在发生GC时，只要发现弱引用，不管系统堆空间是否足够，都会将对象进行回收。\n:::\n\n## 说明\n\n弱引用，从名字来看就很弱嘛，这种引用指向的对象，一旦在GC时被扫描到，就逃脱不了被回收的命运。<img src=\"./0040.png\" width=\"50\"/>\n\n但是，弱引用指向的对象也并不一定就马上会被回收，如果弱引用对象较大，直接进到了老年代，那么就可以苟且偷生到Full GC触发前，所以弱引用对象也可能存在较长的一段时间。一旦一个弱引用对象被垃圾回收器回收，便会加入到一个引用队列中（如果有的话）。\n\n弱引用对应的类为WeakReference，举个栗子：\n\n```java\nString s = new String(\"Frank\");    \nWeakReference<String> weakRef = new WeakReference<String>(s);\ns = null;\n```\n\n这里我们把s设置为null后，字符串对象便只有弱引用指向它。\n\n::: tip 弱可达\n如果一个对象与GC Roots之间仅存在弱引用，则称这个对象为`弱可达(weakly reachable)`对象。\n:::\n\n::: warning 注意\n在垃圾回收器回收一个对象前，WeakReference类所提供的get方法会返回其引用对象的强引用，一旦垃圾回收器回收掉该对象之后，get方法将返回null。所以在获取弱引用对象的代码中，一定要判断是否为null，以免出现NullPointerException异常导致应用崩溃。<img src=\"./0019.png\" width=\"50\"/>\n:::\n\n下面的代码会让s再次持有对象的强引用：\n\n```java\ns = weakRef.get();\n```\n\n如果在weakRef包裹的对象被回收前，用强引用关联该对象，那这个对象又会变成强可达状态。\n\n来看一个简单的栗子了解一下WeakReference引用的对象是何时被回收的：\n\n```java\npublic class WeakReferenceTest {\n    private static final List<Object> TEST_DATA = new LinkedList<>();\n    private static final ReferenceQueue<TestClass> QUEUE = new ReferenceQueue<>();\n\n    public static void main(String[] args) {\n        TestClass obj = new TestClass(\"Test\");\n        WeakReference<TestClass> weakRef = new WeakReference<>(obj, QUEUE);\n        //可以重新获得OOMClass对象，并用一个强引用指向它\n        //oomObj = weakRef.get();\n\n        // 该线程不断读取这个弱引用，并不断往列表里插入数据，以促使系统早点进行GC\n        new Thread(() -> {\n            while (true) {\n                TEST_DATA.add(new byte[1024 * 100]);\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                    Thread.currentThread().interrupt();\n                }\n                System.out.println(weakRef.get());\n            }\n        }).start();\n\n        // 这个线程不断读取引用队列，当弱引用指向的对象呗回收时，该引用就会被加入到引用队列中\n        new Thread(() -> {\n            while (true) {\n                Reference<? extends TestClass> poll = QUEUE.poll();\n                if (poll != null) {\n                    System.out.println(\"--- 弱引用对象被jvm回收了 ---- \" + poll);\n                    System.out.println(\"--- 回收对象 ---- \" + poll.get());\n                }\n            }\n        }).start();\n\n        //将强引用指向空指针 那么此时只有一个弱引用指向TestClass对象\n        obj = null;\n\n        try {\n            Thread.currentThread().join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n            System.exit(1);\n        }\n    }\n\n    static class TestClass {\n        private String name;\n\n        public TestClass(String name) {\n            this.name = name;\n        }\n\n        @Override\n        public String toString() {\n            return \"TestClass - \" + name;\n        }\n    }\n}\n```\n\n设置一下虚拟机参数：\n\n```bash\n-verbose:gc -Xms4m -Xmx4m -Xmn2m\n```\n\n运行结果如下：\n\n```bash\n[GC (Allocation Failure)  1017K->464K(3584K), 0.0014345 secs]\n[GC (Allocation Failure)  1483K->536K(3584K), 0.0017221 secs]\n[GC (Allocation Failure)  1560K->648K(3584K), 0.0036572 secs]\nTestClass - Test\nTestClass - Test\nTestClass - Test\n[GC (Allocation Failure)  1621K->984K(3584K), 0.0011455 secs]\n--- 弱引用对象被jvm回收了 ---- java.lang.ref.WeakReference@51a947fe\n--- 回收对象 ---- null\nnull\n...省略n个null和几次GC信息\n[Full GC (Ergonomics)  2964K->2964K(3584K), 0.0025450 secs]\n[Full GC (Allocation Failure)  2964K->2964K(3584K), 0.0021907 secs]\njava.lang.OutOfMemoryError: Java heap space\nDumping heap to java_pid6860.hprof ...\nHeap dump file created [3912229 bytes in 0.011 secs]\nException in thread \"Thread-0\" java.lang.OutOfMemoryError: Java heap space\n\tat weakhashmap.WeakReferenceTest.lambda$main$0(WeakReferenceTest.java:22)\n\tat weakhashmap.WeakReferenceTest$$Lambda$1/764977973.run(Unknown Source)\n\tat java.lang.Thread.run(Thread.java:748)\n```\n\n可以看到，其实弱引用也并不是一发生GC就被回收掉了。\n\n## 应用场景\n\n如果一个对象仅仅是偶尔使用，并且希望在使用时随时就能获取到，但又不想影响此对象的垃圾收集，那么你应该用 WeakReference 来引用该对象。 \n\n弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用加入到与之关联的引用队列中。\n\n一般来说，很少直接使用WeakReference，而是使用WeakHashMap。在WeakHashMap中，内部有一个引用队列，插入的元素会被包裹成WeakReference，并加入队列中，用来做缓存再合适不过。\n\n在Tomcat的缓存中，其实就用到了WeakHashMap：\n\n```java\npublic final class ConcurrentCache<K,V> {\n    private final int size;\n    private final Map<K,V> eden;\n    private final Map<K,V> longterm;\n\n    public ConcurrentCache(int size) {\n        this.size = size;\n        this.eden = new ConcurrentHashMap<>(size);\n        this.longterm = new WeakHashMap<>(size);\n    }\n\n    public V get(K k) {\n        // 先从eden中取\n        V v = this.eden.get(k);\n        if (v == null) {\n            // 如果取不到再从longterm中取\n            synchronized (longterm) {\n                v = this.longterm.get(k);\n            }\n            // 如果取到则重新放到eden中\n            if (v != null) {\n                this.eden.put(k, v);\n            }\n        }\n        return v;\n    }\n\n    public void put(K k, V v) {\n        if (this.eden.size() >= size) {\n            // 如果eden中的元素数量大于指定容量，将所有元素放到longterm中\n            synchronized (longterm) {\n                this.longterm.putAll(this.eden);\n            }\n            this.eden.clear();\n        }\n        this.eden.put(k, v);\n    }\n}\n```\n\n这里有eden和longterm的两个map，如果对jvm堆了解的话，可以看出tomcat在这里是使用ConcurrentHashMap和WeakHashMap做了类似分代缓存的操作。\n\n在put方法里，在插入键值对时，先检查eden缓存的容量是否超出设定的大小。如果没有则直接放入eden缓存，如果超了则锁定longterm将eden中所有的键值对都放入longterm。再将eden清空并插入该键值对。\n\n在get方法中，也是优先从eden中找对应的key，如果没有则进入longterm缓存中查找，找到后就加入eden缓存并返回。 \n\n经过这样的设计，相对常用的对象都能在eden缓存中找到，不常用（有可能被销毁的对象）的则进入longterm缓存。而longterm的key的实际对象没有其他引用指向它时，gc就会自动回收heap中该弱引用指向的实际对象，并将弱引用放入其引用队列中。\n\n## 弱引用与软引用对比\n\n弱引用与软引用的区别在于：\n\n1. 只具有弱引用的对象拥有更短暂的生命周期。\n2. 被垃圾回收器回收的时机不一样，在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。而被软引用关联的对象只有在内存不足时才会被回收。\n3. 弱引用不会影响GC，而软引用会一定程度上对GC造成影响。\n\n相似之处：都是用来描述非必需对象的。\n\n那么什么时候用SoftReference，什么时候用WeakReference呢？\n\n如果缓存的对象是比较大的对象，使用频率相对较高的对象，那么使用SoftReference会更好，因为这样能让缓存对象有更长的生命周期。\n\n如果缓存对象都是比较小的对象，使用频率一般或者相对较低，那么使用WeakReference会更合适。\n\n当然，如果实在不知道选哪个，一般而言，用作缓存时使用WeakHashMap都不会有太大问题。<img src=\"./195.png\" width=\"50\"/>\n\n## 小结\n\n+ 弱引用是比软引用更弱的引用类型 \n+ 弱引用不能延长对象的生命周期，一旦对象只剩下弱引用，它就随时可能会被回收\n+ 可以通过弱引用获取对象的强引用\n+ 弱引用适合用作缓存\n\n\n\n\n\n\n\n\n\n","slug":"java/reference/weak-reference","published":1,"date":"2018-12-27T08:04:21.706Z","updated":"2018-12-27T08:04:21.707Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq7rm5ro002wwu9klurjauep","content":"<h1 id=\"弱引用\"><a href=\"#弱引用\" class=\"headerlink\" title=\"弱引用\"></a>弱引用</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>::: tip<br>弱引用是使用WeakReference创建的引用，弱引用也是用来描述非必需对象的，它是比软引用更弱的引用类型。在发生GC时，只要发现弱引用，不管系统堆空间是否足够，都会将对象进行回收。<br>:::</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>弱引用，从名字来看就很弱嘛，这种引用指向的对象，一旦在GC时被扫描到，就逃脱不了被回收的命运。<img src=\"./0040.png\" width=\"50\"></p>\n<p>但是，弱引用指向的对象也并不一定就马上会被回收，如果弱引用对象较大，直接进到了老年代，那么就可以苟且偷生到Full GC触发前，所以弱引用对象也可能存在较长的一段时间。一旦一个弱引用对象被垃圾回收器回收，便会加入到一个引用队列中（如果有的话）。</p>\n<p>弱引用对应的类为WeakReference，举个栗子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = <span class=\"keyword\">new</span> String(<span class=\"string\">\"Frank\"</span>);    </span><br><span class=\"line\">WeakReference&lt;String&gt; weakRef = <span class=\"keyword\">new</span> WeakReference&lt;String&gt;(s);</span><br><span class=\"line\">s = <span class=\"keyword\">null</span>;</span><br></pre></td></tr></table></figure>\n<p>这里我们把s设置为null后，字符串对象便只有弱引用指向它。</p>\n<p>::: tip 弱可达<br>如果一个对象与GC Roots之间仅存在弱引用，则称这个对象为<code>弱可达(weakly reachable)</code>对象。<br>:::</p>\n<p>::: warning 注意<br>在垃圾回收器回收一个对象前，WeakReference类所提供的get方法会返回其引用对象的强引用，一旦垃圾回收器回收掉该对象之后，get方法将返回null。所以在获取弱引用对象的代码中，一定要判断是否为null，以免出现NullPointerException异常导致应用崩溃。<img src=\"./0019.png\" width=\"50\"><br>:::</p>\n<p>下面的代码会让s再次持有对象的强引用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = weakRef.get();</span><br></pre></td></tr></table></figure>\n<p>如果在weakRef包裹的对象被回收前，用强引用关联该对象，那这个对象又会变成强可达状态。</p>\n<p>来看一个简单的栗子了解一下WeakReference引用的对象是何时被回收的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WeakReferenceTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> List&lt;Object&gt; TEST_DATA = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ReferenceQueue&lt;TestClass&gt; QUEUE = <span class=\"keyword\">new</span> ReferenceQueue&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        TestClass obj = <span class=\"keyword\">new</span> TestClass(<span class=\"string\">\"Test\"</span>);</span><br><span class=\"line\">        WeakReference&lt;TestClass&gt; weakRef = <span class=\"keyword\">new</span> WeakReference&lt;&gt;(obj, QUEUE);</span><br><span class=\"line\">        <span class=\"comment\">//可以重新获得OOMClass对象，并用一个强引用指向它</span></span><br><span class=\"line\">        <span class=\"comment\">//oomObj = weakRef.get();</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 该线程不断读取这个弱引用，并不断往列表里插入数据，以促使系统早点进行GC</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                TEST_DATA.add(<span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span> * <span class=\"number\">100</span>]);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                    Thread.currentThread().interrupt();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(weakRef.get());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 这个线程不断读取引用队列，当弱引用指向的对象呗回收时，该引用就会被加入到引用队列中</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                Reference&lt;? extends TestClass&gt; poll = QUEUE.poll();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (poll != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"--- 弱引用对象被jvm回收了 ---- \"</span> + poll);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"--- 回收对象 ---- \"</span> + poll.get());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//将强引用指向空指针 那么此时只有一个弱引用指向TestClass对象</span></span><br><span class=\"line\">        obj = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.currentThread().join();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            System.exit(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestClass</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestClass</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"TestClass - \"</span> + name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>设置一下虚拟机参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-verbose:gc -Xms4m -Xmx4m -Xmn2m</span><br></pre></td></tr></table></figure>\n<p>运行结果如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[GC (Allocation Failure)  1017K-&gt;464K(3584K), 0.0014345 secs]</span><br><span class=\"line\">[GC (Allocation Failure)  1483K-&gt;536K(3584K), 0.0017221 secs]</span><br><span class=\"line\">[GC (Allocation Failure)  1560K-&gt;648K(3584K), 0.0036572 secs]</span><br><span class=\"line\">TestClass - Test</span><br><span class=\"line\">TestClass - Test</span><br><span class=\"line\">TestClass - Test</span><br><span class=\"line\">[GC (Allocation Failure)  1621K-&gt;984K(3584K), 0.0011455 secs]</span><br><span class=\"line\">--- 弱引用对象被jvm回收了 ---- java.lang.ref.WeakReference@51a947fe</span><br><span class=\"line\">--- 回收对象 ---- null</span><br><span class=\"line\">null</span><br><span class=\"line\">...省略n个null和几次GC信息</span><br><span class=\"line\">[Full GC (Ergonomics)  2964K-&gt;2964K(3584K), 0.0025450 secs]</span><br><span class=\"line\">[Full GC (Allocation Failure)  2964K-&gt;2964K(3584K), 0.0021907 secs]</span><br><span class=\"line\">java.lang.OutOfMemoryError: Java heap space</span><br><span class=\"line\">Dumping heap to java_pid6860.hprof ...</span><br><span class=\"line\">Heap dump file created [3912229 bytes <span class=\"keyword\">in</span> 0.011 secs]</span><br><span class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">\"Thread-0\"</span> java.lang.OutOfMemoryError: Java heap space</span><br><span class=\"line\">\tat weakhashmap.WeakReferenceTest.lambda<span class=\"variable\">$main</span><span class=\"variable\">$0</span>(WeakReferenceTest.java:22)</span><br><span class=\"line\">\tat weakhashmap.WeakReferenceTest$<span class=\"variable\">$Lambda</span><span class=\"variable\">$1</span>/764977973.run(Unknown Source)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure>\n<p>可以看到，其实弱引用也并不是一发生GC就被回收掉了。</p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>如果一个对象仅仅是偶尔使用，并且希望在使用时随时就能获取到，但又不想影响此对象的垃圾收集，那么你应该用 WeakReference 来引用该对象。 </p>\n<p>弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用加入到与之关联的引用队列中。</p>\n<p>一般来说，很少直接使用WeakReference，而是使用WeakHashMap。在WeakHashMap中，内部有一个引用队列，插入的元素会被包裹成WeakReference，并加入队列中，用来做缓存再合适不过。</p>\n<p>在Tomcat的缓存中，其实就用到了WeakHashMap：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcurrentCache</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;K,V&gt; eden;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;K,V&gt; longterm;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConcurrentCache</span><span class=\"params\">(<span class=\"keyword\">int</span> size)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.size = size;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.eden = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;(size);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.longterm = <span class=\"keyword\">new</span> WeakHashMap&lt;&gt;(size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(K k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 先从eden中取</span></span><br><span class=\"line\">        V v = <span class=\"keyword\">this</span>.eden.get(k);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果取不到再从longterm中取</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (longterm) &#123;</span><br><span class=\"line\">                v = <span class=\"keyword\">this</span>.longterm.get(k);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 如果取到则重新放到eden中</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (v != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.eden.put(k, v);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(K k, V v)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.eden.size() &gt;= size) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果eden中的元素数量大于指定容量，将所有元素放到longterm中</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (longterm) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.longterm.putAll(<span class=\"keyword\">this</span>.eden);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.eden.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.eden.put(k, v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里有eden和longterm的两个map，如果对jvm堆了解的话，可以看出tomcat在这里是使用ConcurrentHashMap和WeakHashMap做了类似分代缓存的操作。</p>\n<p>在put方法里，在插入键值对时，先检查eden缓存的容量是否超出设定的大小。如果没有则直接放入eden缓存，如果超了则锁定longterm将eden中所有的键值对都放入longterm。再将eden清空并插入该键值对。</p>\n<p>在get方法中，也是优先从eden中找对应的key，如果没有则进入longterm缓存中查找，找到后就加入eden缓存并返回。 </p>\n<p>经过这样的设计，相对常用的对象都能在eden缓存中找到，不常用（有可能被销毁的对象）的则进入longterm缓存。而longterm的key的实际对象没有其他引用指向它时，gc就会自动回收heap中该弱引用指向的实际对象，并将弱引用放入其引用队列中。</p>\n<h2 id=\"弱引用与软引用对比\"><a href=\"#弱引用与软引用对比\" class=\"headerlink\" title=\"弱引用与软引用对比\"></a>弱引用与软引用对比</h2><p>弱引用与软引用的区别在于：</p>\n<ol>\n<li>只具有弱引用的对象拥有更短暂的生命周期。</li>\n<li>被垃圾回收器回收的时机不一样，在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。而被软引用关联的对象只有在内存不足时才会被回收。</li>\n<li>弱引用不会影响GC，而软引用会一定程度上对GC造成影响。</li>\n</ol>\n<p>相似之处：都是用来描述非必需对象的。</p>\n<p>那么什么时候用SoftReference，什么时候用WeakReference呢？</p>\n<p>如果缓存的对象是比较大的对象，使用频率相对较高的对象，那么使用SoftReference会更好，因为这样能让缓存对象有更长的生命周期。</p>\n<p>如果缓存对象都是比较小的对象，使用频率一般或者相对较低，那么使用WeakReference会更合适。</p>\n<p>当然，如果实在不知道选哪个，一般而言，用作缓存时使用WeakHashMap都不会有太大问题。<img src=\"./195.png\" width=\"50\"></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li>弱引用是比软引用更弱的引用类型 </li>\n<li>弱引用不能延长对象的生命周期，一旦对象只剩下弱引用，它就随时可能会被回收</li>\n<li>可以通过弱引用获取对象的强引用</li>\n<li>弱引用适合用作缓存</li>\n</ul>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h1 id=\"弱引用\"><a href=\"#弱引用\" class=\"headerlink\" title=\"弱引用\"></a>弱引用</h1><h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>::: tip<br>弱引用是使用WeakReference创建的引用，弱引用也是用来描述非必需对象的，它是比软引用更弱的引用类型。在发生GC时，只要发现弱引用，不管系统堆空间是否足够，都会将对象进行回收。<br>:::</p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>弱引用，从名字来看就很弱嘛，这种引用指向的对象，一旦在GC时被扫描到，就逃脱不了被回收的命运。<img src=\"./0040.png\" width=\"50\"></p>\n<p>但是，弱引用指向的对象也并不一定就马上会被回收，如果弱引用对象较大，直接进到了老年代，那么就可以苟且偷生到Full GC触发前，所以弱引用对象也可能存在较长的一段时间。一旦一个弱引用对象被垃圾回收器回收，便会加入到一个引用队列中（如果有的话）。</p>\n<p>弱引用对应的类为WeakReference，举个栗子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = <span class=\"keyword\">new</span> String(<span class=\"string\">\"Frank\"</span>);    </span><br><span class=\"line\">WeakReference&lt;String&gt; weakRef = <span class=\"keyword\">new</span> WeakReference&lt;String&gt;(s);</span><br><span class=\"line\">s = <span class=\"keyword\">null</span>;</span><br></pre></td></tr></table></figure>\n<p>这里我们把s设置为null后，字符串对象便只有弱引用指向它。</p>\n<p>::: tip 弱可达<br>如果一个对象与GC Roots之间仅存在弱引用，则称这个对象为<code>弱可达(weakly reachable)</code>对象。<br>:::</p>\n<p>::: warning 注意<br>在垃圾回收器回收一个对象前，WeakReference类所提供的get方法会返回其引用对象的强引用，一旦垃圾回收器回收掉该对象之后，get方法将返回null。所以在获取弱引用对象的代码中，一定要判断是否为null，以免出现NullPointerException异常导致应用崩溃。<img src=\"./0019.png\" width=\"50\"><br>:::</p>\n<p>下面的代码会让s再次持有对象的强引用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = weakRef.get();</span><br></pre></td></tr></table></figure>\n<p>如果在weakRef包裹的对象被回收前，用强引用关联该对象，那这个对象又会变成强可达状态。</p>\n<p>来看一个简单的栗子了解一下WeakReference引用的对象是何时被回收的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WeakReferenceTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> List&lt;Object&gt; TEST_DATA = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ReferenceQueue&lt;TestClass&gt; QUEUE = <span class=\"keyword\">new</span> ReferenceQueue&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        TestClass obj = <span class=\"keyword\">new</span> TestClass(<span class=\"string\">\"Test\"</span>);</span><br><span class=\"line\">        WeakReference&lt;TestClass&gt; weakRef = <span class=\"keyword\">new</span> WeakReference&lt;&gt;(obj, QUEUE);</span><br><span class=\"line\">        <span class=\"comment\">//可以重新获得OOMClass对象，并用一个强引用指向它</span></span><br><span class=\"line\">        <span class=\"comment\">//oomObj = weakRef.get();</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 该线程不断读取这个弱引用，并不断往列表里插入数据，以促使系统早点进行GC</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                TEST_DATA.add(<span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span> * <span class=\"number\">100</span>]);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                    Thread.currentThread().interrupt();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(weakRef.get());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 这个线程不断读取引用队列，当弱引用指向的对象呗回收时，该引用就会被加入到引用队列中</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                Reference&lt;? extends TestClass&gt; poll = QUEUE.poll();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (poll != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"--- 弱引用对象被jvm回收了 ---- \"</span> + poll);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"--- 回收对象 ---- \"</span> + poll.get());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//将强引用指向空指针 那么此时只有一个弱引用指向TestClass对象</span></span><br><span class=\"line\">        obj = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.currentThread().join();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">            System.exit(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestClass</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TestClass</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"TestClass - \"</span> + name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>设置一下虚拟机参数：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-verbose:gc -Xms4m -Xmx4m -Xmn2m</span><br></pre></td></tr></table></figure>\n<p>运行结果如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[GC (Allocation Failure)  1017K-&gt;464K(3584K), 0.0014345 secs]</span><br><span class=\"line\">[GC (Allocation Failure)  1483K-&gt;536K(3584K), 0.0017221 secs]</span><br><span class=\"line\">[GC (Allocation Failure)  1560K-&gt;648K(3584K), 0.0036572 secs]</span><br><span class=\"line\">TestClass - Test</span><br><span class=\"line\">TestClass - Test</span><br><span class=\"line\">TestClass - Test</span><br><span class=\"line\">[GC (Allocation Failure)  1621K-&gt;984K(3584K), 0.0011455 secs]</span><br><span class=\"line\">--- 弱引用对象被jvm回收了 ---- java.lang.ref.WeakReference@51a947fe</span><br><span class=\"line\">--- 回收对象 ---- null</span><br><span class=\"line\">null</span><br><span class=\"line\">...省略n个null和几次GC信息</span><br><span class=\"line\">[Full GC (Ergonomics)  2964K-&gt;2964K(3584K), 0.0025450 secs]</span><br><span class=\"line\">[Full GC (Allocation Failure)  2964K-&gt;2964K(3584K), 0.0021907 secs]</span><br><span class=\"line\">java.lang.OutOfMemoryError: Java heap space</span><br><span class=\"line\">Dumping heap to java_pid6860.hprof ...</span><br><span class=\"line\">Heap dump file created [3912229 bytes <span class=\"keyword\">in</span> 0.011 secs]</span><br><span class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">\"Thread-0\"</span> java.lang.OutOfMemoryError: Java heap space</span><br><span class=\"line\">\tat weakhashmap.WeakReferenceTest.lambda<span class=\"variable\">$main</span><span class=\"variable\">$0</span>(WeakReferenceTest.java:22)</span><br><span class=\"line\">\tat weakhashmap.WeakReferenceTest$<span class=\"variable\">$Lambda</span><span class=\"variable\">$1</span>/764977973.run(Unknown Source)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure>\n<p>可以看到，其实弱引用也并不是一发生GC就被回收掉了。</p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>如果一个对象仅仅是偶尔使用，并且希望在使用时随时就能获取到，但又不想影响此对象的垃圾收集，那么你应该用 WeakReference 来引用该对象。 </p>\n<p>弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用加入到与之关联的引用队列中。</p>\n<p>一般来说，很少直接使用WeakReference，而是使用WeakHashMap。在WeakHashMap中，内部有一个引用队列，插入的元素会被包裹成WeakReference，并加入队列中，用来做缓存再合适不过。</p>\n<p>在Tomcat的缓存中，其实就用到了WeakHashMap：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcurrentCache</span>&lt;<span class=\"title\">K</span>,<span class=\"title\">V</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> size;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;K,V&gt; eden;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;K,V&gt; longterm;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ConcurrentCache</span><span class=\"params\">(<span class=\"keyword\">int</span> size)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.size = size;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.eden = <span class=\"keyword\">new</span> ConcurrentHashMap&lt;&gt;(size);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.longterm = <span class=\"keyword\">new</span> WeakHashMap&lt;&gt;(size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> V <span class=\"title\">get</span><span class=\"params\">(K k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 先从eden中取</span></span><br><span class=\"line\">        V v = <span class=\"keyword\">this</span>.eden.get(k);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果取不到再从longterm中取</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (longterm) &#123;</span><br><span class=\"line\">                v = <span class=\"keyword\">this</span>.longterm.get(k);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 如果取到则重新放到eden中</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (v != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.eden.put(k, v);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">put</span><span class=\"params\">(K k, V v)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.eden.size() &gt;= size) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果eden中的元素数量大于指定容量，将所有元素放到longterm中</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (longterm) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.longterm.putAll(<span class=\"keyword\">this</span>.eden);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.eden.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.eden.put(k, v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里有eden和longterm的两个map，如果对jvm堆了解的话，可以看出tomcat在这里是使用ConcurrentHashMap和WeakHashMap做了类似分代缓存的操作。</p>\n<p>在put方法里，在插入键值对时，先检查eden缓存的容量是否超出设定的大小。如果没有则直接放入eden缓存，如果超了则锁定longterm将eden中所有的键值对都放入longterm。再将eden清空并插入该键值对。</p>\n<p>在get方法中，也是优先从eden中找对应的key，如果没有则进入longterm缓存中查找，找到后就加入eden缓存并返回。 </p>\n<p>经过这样的设计，相对常用的对象都能在eden缓存中找到，不常用（有可能被销毁的对象）的则进入longterm缓存。而longterm的key的实际对象没有其他引用指向它时，gc就会自动回收heap中该弱引用指向的实际对象，并将弱引用放入其引用队列中。</p>\n<h2 id=\"弱引用与软引用对比\"><a href=\"#弱引用与软引用对比\" class=\"headerlink\" title=\"弱引用与软引用对比\"></a>弱引用与软引用对比</h2><p>弱引用与软引用的区别在于：</p>\n<ol>\n<li>只具有弱引用的对象拥有更短暂的生命周期。</li>\n<li>被垃圾回收器回收的时机不一样，在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。而被软引用关联的对象只有在内存不足时才会被回收。</li>\n<li>弱引用不会影响GC，而软引用会一定程度上对GC造成影响。</li>\n</ol>\n<p>相似之处：都是用来描述非必需对象的。</p>\n<p>那么什么时候用SoftReference，什么时候用WeakReference呢？</p>\n<p>如果缓存的对象是比较大的对象，使用频率相对较高的对象，那么使用SoftReference会更好，因为这样能让缓存对象有更长的生命周期。</p>\n<p>如果缓存对象都是比较小的对象，使用频率一般或者相对较低，那么使用WeakReference会更合适。</p>\n<p>当然，如果实在不知道选哪个，一般而言，用作缓存时使用WeakHashMap都不会有太大问题。<img src=\"./195.png\" width=\"50\"></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li>弱引用是比软引用更弱的引用类型 </li>\n<li>弱引用不能延长对象的生命周期，一旦对象只剩下弱引用，它就随时可能会被回收</li>\n<li>可以通过弱引用获取对象的强引用</li>\n<li>弱引用适合用作缓存</li>\n</ul>\n"},{"title":"Java package与import","date":"2018-12-28T16:03:00.000Z","_content":"\n> 共道人间惆怅事，不知今夕是何年。  -- 《周秦行纪》\n\n## 关卡说明\n\n关卡描述：不知你是否还记得上一篇中的代码，前面的两行，这是在Java中特定的格式，想要知道它们是什么含义吗？通过本关你就能获得答案。\n\n过关条件：理解Java中package与import的作用以及如何使用它们\n\n关卡难度：⭐️\n\n## 什么是package\n\n现在再来回顾一下我们上一篇中的代码，首先我们创建了一个类，叫做SimpleCalculator，文件名叫做SimpleCalculator.java。\n\n在最开头有这么一行：\n\n```java\npackage hello;\n```\n\n第一行会声明这个类所在的包名，因为这个类文件是在hello包下的，所以第一行的含义就是表明这个类的位置。\n\n## 为什么要使用package\n\n聪明的你也许会想到，同一个包下面应该不允许存在两个相同的文件名，也就是不允许存在相同的类名。确实如此，这也是package的一个很重要的作用，为类提供一个类似命名空间的管理，避免同名的类产生冲突。\n\n试想一下，如果没有package，所有类都在同一个地方，那就要争先恐后的使用类名了。\n\npackage的另一个作用便是用来将Java文件进行分类管理，比如有同一种用处的类放到同一个包下，方便查找和管理。\n\n## package命名规范\n\n虽然理论上来说，你可以随心所欲、为所欲为的命名你项目中的包，但还是建议你遵循一定的规范，因为如果大家都遵循规范来设计的话，会减少很多交流成本。\n\npackage的命名一般分为几个部分，`身份标识.开发者名/团队名/公司名.项目名.模块名`，对于身份标识，主要是用来标识是个人开发还是团队开发，个人开发主要使用的标识有：indi（个体项目）、onem（单人项目）、pers（个人项目）、priv（私有项目），团队开发主要使用的标识有：team（团队项目）、com（公司项目）。\n\n但其实没有特殊要求的话，使用域名倒写是最常见的，因为域名是不会重复的。\n\n所以比较常见的命名类似于：com.frank.hello.controller，frank是我的英文名，（假装）frank.com是我的域名，hello是项目名，controller则代表这个包下面我会放控制器。（先不用纠结控制器是什么）\n\n所以，如果还没有英文名的话，赶紧给自己找一个吧。你也许会问，如果有人用了跟自己一样的英文名怎么办？\n\n没有关系，反正极大概率上来说，你又不会使用他的包，即使真遇上了，还是有解决办法的，改改项目名，改改包名，不就ok了。\n\n## 使用package的注意事项\n\n1. package必须是程序中可执行的第一行代码\n2. package语句只能有一句，且语句后面有分号\n3. package命名要求包含的所有字符均为小写，同时不能有特殊字符\n4. package可以有多层，每一层有`.`隔开，例如：`package com.frank.hello;`（com是一个文件夹，frank是com下的一个文件夹，hello是frank文件夹下的一个文件夹）\n5. 包的路径符合所开发的系统模块的定义\n6. 如果定义类的时候没有使用package,那么java就认为我们所定义的类位于默认包里面(java.lang)。\n\n## import的作用\n\n在之前的`SimpleCalculator`类中，我们还看到了这么一句代码：\n\n```java\nimport java.util.Scanner;\n```\n\n那么import又是做什么用的呢？\n\nimport是在java文件开头的地方，先说明会用到那些类所在的全路径名，这样我们就能在代码中使用对应的类名，而不是使用全路径。\n\n开发中需要引用到其他包下的类，比如JDK中一些常用的类，那么就需要先使用import告诉编译器我们要引用的类的位置，比如说这里的Scanner。那么你也许会注意到，代码中不是有System吗，是怎么回事呢？为什么不用引入System所在的包呢？\n\n这是一个很好的问题。原因是java.lang这个包实在是太常用了，所以默认可以不用写，编译器会自动引入，编译器只要看到没有使用import引入包名的类，就会去java.lang中找。\n\n那如果要引入一个包下所有类该怎么办呢？\n\n有时候需要用到的类刚好有有多在同一个包下面，一个一个引入，显然太费事，别着急，还有更好的解决办法，可以使用`*`来匹配所有，比如说：\n\n```java\nimport java.util.*\n```\n\n那么就会引入`java.util`包下的所有类。\n\n也许你会觉得，那都使用`*`的方式不就好了。如果这样想，那就大错特错了，包的存在就是为了减少类名冲突，这样每次都使用`*`将大量类引入的话，会更容易产生类名冲突，那就适得其反了。\n\n本篇讲解了package和import的用途，希望通过本篇，你能知道代码中前面的那些代码有什么作用，也能在之后的代码编写中知道如何去正确使用它们。","source":"_posts/java/basic/java-package.md","raw":"---\ntitle: Java package与import\ntags: \n - Java基础\n - Java\ncategories: 编程\ndate: 2018-12-29 00:03:00\n---\n\n> 共道人间惆怅事，不知今夕是何年。  -- 《周秦行纪》\n\n## 关卡说明\n\n关卡描述：不知你是否还记得上一篇中的代码，前面的两行，这是在Java中特定的格式，想要知道它们是什么含义吗？通过本关你就能获得答案。\n\n过关条件：理解Java中package与import的作用以及如何使用它们\n\n关卡难度：⭐️\n\n## 什么是package\n\n现在再来回顾一下我们上一篇中的代码，首先我们创建了一个类，叫做SimpleCalculator，文件名叫做SimpleCalculator.java。\n\n在最开头有这么一行：\n\n```java\npackage hello;\n```\n\n第一行会声明这个类所在的包名，因为这个类文件是在hello包下的，所以第一行的含义就是表明这个类的位置。\n\n## 为什么要使用package\n\n聪明的你也许会想到，同一个包下面应该不允许存在两个相同的文件名，也就是不允许存在相同的类名。确实如此，这也是package的一个很重要的作用，为类提供一个类似命名空间的管理，避免同名的类产生冲突。\n\n试想一下，如果没有package，所有类都在同一个地方，那就要争先恐后的使用类名了。\n\npackage的另一个作用便是用来将Java文件进行分类管理，比如有同一种用处的类放到同一个包下，方便查找和管理。\n\n## package命名规范\n\n虽然理论上来说，你可以随心所欲、为所欲为的命名你项目中的包，但还是建议你遵循一定的规范，因为如果大家都遵循规范来设计的话，会减少很多交流成本。\n\npackage的命名一般分为几个部分，`身份标识.开发者名/团队名/公司名.项目名.模块名`，对于身份标识，主要是用来标识是个人开发还是团队开发，个人开发主要使用的标识有：indi（个体项目）、onem（单人项目）、pers（个人项目）、priv（私有项目），团队开发主要使用的标识有：team（团队项目）、com（公司项目）。\n\n但其实没有特殊要求的话，使用域名倒写是最常见的，因为域名是不会重复的。\n\n所以比较常见的命名类似于：com.frank.hello.controller，frank是我的英文名，（假装）frank.com是我的域名，hello是项目名，controller则代表这个包下面我会放控制器。（先不用纠结控制器是什么）\n\n所以，如果还没有英文名的话，赶紧给自己找一个吧。你也许会问，如果有人用了跟自己一样的英文名怎么办？\n\n没有关系，反正极大概率上来说，你又不会使用他的包，即使真遇上了，还是有解决办法的，改改项目名，改改包名，不就ok了。\n\n## 使用package的注意事项\n\n1. package必须是程序中可执行的第一行代码\n2. package语句只能有一句，且语句后面有分号\n3. package命名要求包含的所有字符均为小写，同时不能有特殊字符\n4. package可以有多层，每一层有`.`隔开，例如：`package com.frank.hello;`（com是一个文件夹，frank是com下的一个文件夹，hello是frank文件夹下的一个文件夹）\n5. 包的路径符合所开发的系统模块的定义\n6. 如果定义类的时候没有使用package,那么java就认为我们所定义的类位于默认包里面(java.lang)。\n\n## import的作用\n\n在之前的`SimpleCalculator`类中，我们还看到了这么一句代码：\n\n```java\nimport java.util.Scanner;\n```\n\n那么import又是做什么用的呢？\n\nimport是在java文件开头的地方，先说明会用到那些类所在的全路径名，这样我们就能在代码中使用对应的类名，而不是使用全路径。\n\n开发中需要引用到其他包下的类，比如JDK中一些常用的类，那么就需要先使用import告诉编译器我们要引用的类的位置，比如说这里的Scanner。那么你也许会注意到，代码中不是有System吗，是怎么回事呢？为什么不用引入System所在的包呢？\n\n这是一个很好的问题。原因是java.lang这个包实在是太常用了，所以默认可以不用写，编译器会自动引入，编译器只要看到没有使用import引入包名的类，就会去java.lang中找。\n\n那如果要引入一个包下所有类该怎么办呢？\n\n有时候需要用到的类刚好有有多在同一个包下面，一个一个引入，显然太费事，别着急，还有更好的解决办法，可以使用`*`来匹配所有，比如说：\n\n```java\nimport java.util.*\n```\n\n那么就会引入`java.util`包下的所有类。\n\n也许你会觉得，那都使用`*`的方式不就好了。如果这样想，那就大错特错了，包的存在就是为了减少类名冲突，这样每次都使用`*`将大量类引入的话，会更容易产生类名冲突，那就适得其反了。\n\n本篇讲解了package和import的用途，希望通过本篇，你能知道代码中前面的那些代码有什么作用，也能在之后的代码编写中知道如何去正确使用它们。","slug":"java/basic/java-package","published":1,"updated":"2018-12-28T10:40:45.464Z","_id":"cjq7ujnyj000eeg9k1wmsn4bc","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>&#x5171;&#x9053;&#x4EBA;&#x95F4;&#x60C6;&#x6005;&#x4E8B;&#xFF0C;&#x4E0D;&#x77E5;&#x4ECA;&#x5915;&#x662F;&#x4F55;&#x5E74;&#x3002;  &#x2013; &#x300A;&#x5468;&#x79E6;&#x884C;&#x7EAA;&#x300B;</p>\n</blockquote>\n<h2 id=\"&#x5173;&#x5361;&#x8BF4;&#x660E;\"><a href=\"#&#x5173;&#x5361;&#x8BF4;&#x660E;\" class=\"headerlink\" title=\"&#x5173;&#x5361;&#x8BF4;&#x660E;\"></a>&#x5173;&#x5361;&#x8BF4;&#x660E;</h2><p>&#x5173;&#x5361;&#x63CF;&#x8FF0;&#xFF1A;&#x4E0D;&#x77E5;&#x4F60;&#x662F;&#x5426;&#x8FD8;&#x8BB0;&#x5F97;&#x4E0A;&#x4E00;&#x7BC7;&#x4E2D;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x524D;&#x9762;&#x7684;&#x4E24;&#x884C;&#xFF0C;&#x8FD9;&#x662F;&#x5728;Java&#x4E2D;&#x7279;&#x5B9A;&#x7684;&#x683C;&#x5F0F;&#xFF0C;&#x60F3;&#x8981;&#x77E5;&#x9053;&#x5B83;&#x4EEC;&#x662F;&#x4EC0;&#x4E48;&#x542B;&#x4E49;&#x5417;&#xFF1F;&#x901A;&#x8FC7;&#x672C;&#x5173;&#x4F60;&#x5C31;&#x80FD;&#x83B7;&#x5F97;&#x7B54;&#x6848;&#x3002;</p>\n<p>&#x8FC7;&#x5173;&#x6761;&#x4EF6;&#xFF1A;&#x7406;&#x89E3;Java&#x4E2D;package&#x4E0E;import&#x7684;&#x4F5C;&#x7528;&#x4EE5;&#x53CA;&#x5982;&#x4F55;&#x4F7F;&#x7528;&#x5B83;&#x4EEC;</p>\n<p>&#x5173;&#x5361;&#x96BE;&#x5EA6;&#xFF1A;&#x2B50;&#xFE0F;</p>\n<h2 id=\"&#x4EC0;&#x4E48;&#x662F;package\"><a href=\"#&#x4EC0;&#x4E48;&#x662F;package\" class=\"headerlink\" title=\"&#x4EC0;&#x4E48;&#x662F;package\"></a>&#x4EC0;&#x4E48;&#x662F;package</h2><p>&#x73B0;&#x5728;&#x518D;&#x6765;&#x56DE;&#x987E;&#x4E00;&#x4E0B;&#x6211;&#x4EEC;&#x4E0A;&#x4E00;&#x7BC7;&#x4E2D;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x9996;&#x5148;&#x6211;&#x4EEC;&#x521B;&#x5EFA;&#x4E86;&#x4E00;&#x4E2A;&#x7C7B;&#xFF0C;&#x53EB;&#x505A;SimpleCalculator&#xFF0C;&#x6587;&#x4EF6;&#x540D;&#x53EB;&#x505A;SimpleCalculator.java&#x3002;</p>\n<p>&#x5728;&#x6700;&#x5F00;&#x5934;&#x6709;&#x8FD9;&#x4E48;&#x4E00;&#x884C;&#xFF1A;</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> hello;</span><br></pre></td></tr></tbody></table></figure>\n<p>&#x7B2C;&#x4E00;&#x884C;&#x4F1A;&#x58F0;&#x660E;&#x8FD9;&#x4E2A;&#x7C7B;&#x6240;&#x5728;&#x7684;&#x5305;&#x540D;&#xFF0C;&#x56E0;&#x4E3A;&#x8FD9;&#x4E2A;&#x7C7B;&#x6587;&#x4EF6;&#x662F;&#x5728;hello&#x5305;&#x4E0B;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x7B2C;&#x4E00;&#x884C;&#x7684;&#x542B;&#x4E49;&#x5C31;&#x662F;&#x8868;&#x660E;&#x8FD9;&#x4E2A;&#x7C7B;&#x7684;&#x4F4D;&#x7F6E;&#x3002;</p>\n<h2 id=\"&#x4E3A;&#x4EC0;&#x4E48;&#x8981;&#x4F7F;&#x7528;package\"><a href=\"#&#x4E3A;&#x4EC0;&#x4E48;&#x8981;&#x4F7F;&#x7528;package\" class=\"headerlink\" title=\"&#x4E3A;&#x4EC0;&#x4E48;&#x8981;&#x4F7F;&#x7528;package\"></a>&#x4E3A;&#x4EC0;&#x4E48;&#x8981;&#x4F7F;&#x7528;package</h2><p>&#x806A;&#x660E;&#x7684;&#x4F60;&#x4E5F;&#x8BB8;&#x4F1A;&#x60F3;&#x5230;&#xFF0C;&#x540C;&#x4E00;&#x4E2A;&#x5305;&#x4E0B;&#x9762;&#x5E94;&#x8BE5;&#x4E0D;&#x5141;&#x8BB8;&#x5B58;&#x5728;&#x4E24;&#x4E2A;&#x76F8;&#x540C;&#x7684;&#x6587;&#x4EF6;&#x540D;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x4E0D;&#x5141;&#x8BB8;&#x5B58;&#x5728;&#x76F8;&#x540C;&#x7684;&#x7C7B;&#x540D;&#x3002;&#x786E;&#x5B9E;&#x5982;&#x6B64;&#xFF0C;&#x8FD9;&#x4E5F;&#x662F;package&#x7684;&#x4E00;&#x4E2A;&#x5F88;&#x91CD;&#x8981;&#x7684;&#x4F5C;&#x7528;&#xFF0C;&#x4E3A;&#x7C7B;&#x63D0;&#x4F9B;&#x4E00;&#x4E2A;&#x7C7B;&#x4F3C;&#x547D;&#x540D;&#x7A7A;&#x95F4;&#x7684;&#x7BA1;&#x7406;&#xFF0C;&#x907F;&#x514D;&#x540C;&#x540D;&#x7684;&#x7C7B;&#x4EA7;&#x751F;&#x51B2;&#x7A81;&#x3002;</p>\n<p>&#x8BD5;&#x60F3;&#x4E00;&#x4E0B;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;package&#xFF0C;&#x6240;&#x6709;&#x7C7B;&#x90FD;&#x5728;&#x540C;&#x4E00;&#x4E2A;&#x5730;&#x65B9;&#xFF0C;&#x90A3;&#x5C31;&#x8981;&#x4E89;&#x5148;&#x6050;&#x540E;&#x7684;&#x4F7F;&#x7528;&#x7C7B;&#x540D;&#x4E86;&#x3002;</p>\n<p>package&#x7684;&#x53E6;&#x4E00;&#x4E2A;&#x4F5C;&#x7528;&#x4FBF;&#x662F;&#x7528;&#x6765;&#x5C06;Java&#x6587;&#x4EF6;&#x8FDB;&#x884C;&#x5206;&#x7C7B;&#x7BA1;&#x7406;&#xFF0C;&#x6BD4;&#x5982;&#x6709;&#x540C;&#x4E00;&#x79CD;&#x7528;&#x5904;&#x7684;&#x7C7B;&#x653E;&#x5230;&#x540C;&#x4E00;&#x4E2A;&#x5305;&#x4E0B;&#xFF0C;&#x65B9;&#x4FBF;&#x67E5;&#x627E;&#x548C;&#x7BA1;&#x7406;&#x3002;</p>\n<h2 id=\"package&#x547D;&#x540D;&#x89C4;&#x8303;\"><a href=\"#package&#x547D;&#x540D;&#x89C4;&#x8303;\" class=\"headerlink\" title=\"package&#x547D;&#x540D;&#x89C4;&#x8303;\"></a>package&#x547D;&#x540D;&#x89C4;&#x8303;</h2><p>&#x867D;&#x7136;&#x7406;&#x8BBA;&#x4E0A;&#x6765;&#x8BF4;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x968F;&#x5FC3;&#x6240;&#x6B32;&#x3001;&#x4E3A;&#x6240;&#x6B32;&#x4E3A;&#x7684;&#x547D;&#x540D;&#x4F60;&#x9879;&#x76EE;&#x4E2D;&#x7684;&#x5305;&#xFF0C;&#x4F46;&#x8FD8;&#x662F;&#x5EFA;&#x8BAE;&#x4F60;&#x9075;&#x5FAA;&#x4E00;&#x5B9A;&#x7684;&#x89C4;&#x8303;&#xFF0C;&#x56E0;&#x4E3A;&#x5982;&#x679C;&#x5927;&#x5BB6;&#x90FD;&#x9075;&#x5FAA;&#x89C4;&#x8303;&#x6765;&#x8BBE;&#x8BA1;&#x7684;&#x8BDD;&#xFF0C;&#x4F1A;&#x51CF;&#x5C11;&#x5F88;&#x591A;&#x4EA4;&#x6D41;&#x6210;&#x672C;&#x3002;</p>\n<p>package&#x7684;&#x547D;&#x540D;&#x4E00;&#x822C;&#x5206;&#x4E3A;&#x51E0;&#x4E2A;&#x90E8;&#x5206;&#xFF0C;<code>&#x8EAB;&#x4EFD;&#x6807;&#x8BC6;.&#x5F00;&#x53D1;&#x8005;&#x540D;/&#x56E2;&#x961F;&#x540D;/&#x516C;&#x53F8;&#x540D;.&#x9879;&#x76EE;&#x540D;.&#x6A21;&#x5757;&#x540D;</code>&#xFF0C;&#x5BF9;&#x4E8E;&#x8EAB;&#x4EFD;&#x6807;&#x8BC6;&#xFF0C;&#x4E3B;&#x8981;&#x662F;&#x7528;&#x6765;&#x6807;&#x8BC6;&#x662F;&#x4E2A;&#x4EBA;&#x5F00;&#x53D1;&#x8FD8;&#x662F;&#x56E2;&#x961F;&#x5F00;&#x53D1;&#xFF0C;&#x4E2A;&#x4EBA;&#x5F00;&#x53D1;&#x4E3B;&#x8981;&#x4F7F;&#x7528;&#x7684;&#x6807;&#x8BC6;&#x6709;&#xFF1A;indi&#xFF08;&#x4E2A;&#x4F53;&#x9879;&#x76EE;&#xFF09;&#x3001;onem&#xFF08;&#x5355;&#x4EBA;&#x9879;&#x76EE;&#xFF09;&#x3001;pers&#xFF08;&#x4E2A;&#x4EBA;&#x9879;&#x76EE;&#xFF09;&#x3001;priv&#xFF08;&#x79C1;&#x6709;&#x9879;&#x76EE;&#xFF09;&#xFF0C;&#x56E2;&#x961F;&#x5F00;&#x53D1;&#x4E3B;&#x8981;&#x4F7F;&#x7528;&#x7684;&#x6807;&#x8BC6;&#x6709;&#xFF1A;team&#xFF08;&#x56E2;&#x961F;&#x9879;&#x76EE;&#xFF09;&#x3001;com&#xFF08;&#x516C;&#x53F8;&#x9879;&#x76EE;&#xFF09;&#x3002;</p>\n<p>&#x4F46;&#x5176;&#x5B9E;&#x6CA1;&#x6709;&#x7279;&#x6B8A;&#x8981;&#x6C42;&#x7684;&#x8BDD;&#xFF0C;&#x4F7F;&#x7528;&#x57DF;&#x540D;&#x5012;&#x5199;&#x662F;&#x6700;&#x5E38;&#x89C1;&#x7684;&#xFF0C;&#x56E0;&#x4E3A;&#x57DF;&#x540D;&#x662F;&#x4E0D;&#x4F1A;&#x91CD;&#x590D;&#x7684;&#x3002;</p>\n<p>&#x6240;&#x4EE5;&#x6BD4;&#x8F83;&#x5E38;&#x89C1;&#x7684;&#x547D;&#x540D;&#x7C7B;&#x4F3C;&#x4E8E;&#xFF1A;com.frank.hello.controller&#xFF0C;frank&#x662F;&#x6211;&#x7684;&#x82F1;&#x6587;&#x540D;&#xFF0C;&#xFF08;&#x5047;&#x88C5;&#xFF09;frank.com&#x662F;&#x6211;&#x7684;&#x57DF;&#x540D;&#xFF0C;hello&#x662F;&#x9879;&#x76EE;&#x540D;&#xFF0C;controller&#x5219;&#x4EE3;&#x8868;&#x8FD9;&#x4E2A;&#x5305;&#x4E0B;&#x9762;&#x6211;&#x4F1A;&#x653E;&#x63A7;&#x5236;&#x5668;&#x3002;&#xFF08;&#x5148;&#x4E0D;&#x7528;&#x7EA0;&#x7ED3;&#x63A7;&#x5236;&#x5668;&#x662F;&#x4EC0;&#x4E48;&#xFF09;</p>\n<p>&#x6240;&#x4EE5;&#xFF0C;&#x5982;&#x679C;&#x8FD8;&#x6CA1;&#x6709;&#x82F1;&#x6587;&#x540D;&#x7684;&#x8BDD;&#xFF0C;&#x8D76;&#x7D27;&#x7ED9;&#x81EA;&#x5DF1;&#x627E;&#x4E00;&#x4E2A;&#x5427;&#x3002;&#x4F60;&#x4E5F;&#x8BB8;&#x4F1A;&#x95EE;&#xFF0C;&#x5982;&#x679C;&#x6709;&#x4EBA;&#x7528;&#x4E86;&#x8DDF;&#x81EA;&#x5DF1;&#x4E00;&#x6837;&#x7684;&#x82F1;&#x6587;&#x540D;&#x600E;&#x4E48;&#x529E;&#xFF1F;</p>\n<p>&#x6CA1;&#x6709;&#x5173;&#x7CFB;&#xFF0C;&#x53CD;&#x6B63;&#x6781;&#x5927;&#x6982;&#x7387;&#x4E0A;&#x6765;&#x8BF4;&#xFF0C;&#x4F60;&#x53C8;&#x4E0D;&#x4F1A;&#x4F7F;&#x7528;&#x4ED6;&#x7684;&#x5305;&#xFF0C;&#x5373;&#x4F7F;&#x771F;&#x9047;&#x4E0A;&#x4E86;&#xFF0C;&#x8FD8;&#x662F;&#x6709;&#x89E3;&#x51B3;&#x529E;&#x6CD5;&#x7684;&#xFF0C;&#x6539;&#x6539;&#x9879;&#x76EE;&#x540D;&#xFF0C;&#x6539;&#x6539;&#x5305;&#x540D;&#xFF0C;&#x4E0D;&#x5C31;ok&#x4E86;&#x3002;</p>\n<h2 id=\"&#x4F7F;&#x7528;package&#x7684;&#x6CE8;&#x610F;&#x4E8B;&#x9879;\"><a href=\"#&#x4F7F;&#x7528;package&#x7684;&#x6CE8;&#x610F;&#x4E8B;&#x9879;\" class=\"headerlink\" title=\"&#x4F7F;&#x7528;package&#x7684;&#x6CE8;&#x610F;&#x4E8B;&#x9879;\"></a>&#x4F7F;&#x7528;package&#x7684;&#x6CE8;&#x610F;&#x4E8B;&#x9879;</h2><ol>\n<li>package&#x5FC5;&#x987B;&#x662F;&#x7A0B;&#x5E8F;&#x4E2D;&#x53EF;&#x6267;&#x884C;&#x7684;&#x7B2C;&#x4E00;&#x884C;&#x4EE3;&#x7801;</li>\n<li>package&#x8BED;&#x53E5;&#x53EA;&#x80FD;&#x6709;&#x4E00;&#x53E5;&#xFF0C;&#x4E14;&#x8BED;&#x53E5;&#x540E;&#x9762;&#x6709;&#x5206;&#x53F7;</li>\n<li>package&#x547D;&#x540D;&#x8981;&#x6C42;&#x5305;&#x542B;&#x7684;&#x6240;&#x6709;&#x5B57;&#x7B26;&#x5747;&#x4E3A;&#x5C0F;&#x5199;&#xFF0C;&#x540C;&#x65F6;&#x4E0D;&#x80FD;&#x6709;&#x7279;&#x6B8A;&#x5B57;&#x7B26;</li>\n<li>package&#x53EF;&#x4EE5;&#x6709;&#x591A;&#x5C42;&#xFF0C;&#x6BCF;&#x4E00;&#x5C42;&#x6709;<code>.</code>&#x9694;&#x5F00;&#xFF0C;&#x4F8B;&#x5982;&#xFF1A;<code>package com.frank.hello;</code>&#xFF08;com&#x662F;&#x4E00;&#x4E2A;&#x6587;&#x4EF6;&#x5939;&#xFF0C;frank&#x662F;com&#x4E0B;&#x7684;&#x4E00;&#x4E2A;&#x6587;&#x4EF6;&#x5939;&#xFF0C;hello&#x662F;frank&#x6587;&#x4EF6;&#x5939;&#x4E0B;&#x7684;&#x4E00;&#x4E2A;&#x6587;&#x4EF6;&#x5939;&#xFF09;</li>\n<li>&#x5305;&#x7684;&#x8DEF;&#x5F84;&#x7B26;&#x5408;&#x6240;&#x5F00;&#x53D1;&#x7684;&#x7CFB;&#x7EDF;&#x6A21;&#x5757;&#x7684;&#x5B9A;&#x4E49;</li>\n<li>&#x5982;&#x679C;&#x5B9A;&#x4E49;&#x7C7B;&#x7684;&#x65F6;&#x5019;&#x6CA1;&#x6709;&#x4F7F;&#x7528;package,&#x90A3;&#x4E48;java&#x5C31;&#x8BA4;&#x4E3A;&#x6211;&#x4EEC;&#x6240;&#x5B9A;&#x4E49;&#x7684;&#x7C7B;&#x4F4D;&#x4E8E;&#x9ED8;&#x8BA4;&#x5305;&#x91CC;&#x9762;(java.lang)&#x3002;</li>\n</ol>\n<h2 id=\"import&#x7684;&#x4F5C;&#x7528;\"><a href=\"#import&#x7684;&#x4F5C;&#x7528;\" class=\"headerlink\" title=\"import&#x7684;&#x4F5C;&#x7528;\"></a>import&#x7684;&#x4F5C;&#x7528;</h2><p>&#x5728;&#x4E4B;&#x524D;&#x7684;<code>SimpleCalculator</code>&#x7C7B;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x8FD8;&#x770B;&#x5230;&#x4E86;&#x8FD9;&#x4E48;&#x4E00;&#x53E5;&#x4EE3;&#x7801;&#xFF1A;</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br></pre></td></tr></tbody></table></figure>\n<p>&#x90A3;&#x4E48;import&#x53C8;&#x662F;&#x505A;&#x4EC0;&#x4E48;&#x7528;&#x7684;&#x5462;&#xFF1F;</p>\n<p>import&#x662F;&#x5728;java&#x6587;&#x4EF6;&#x5F00;&#x5934;&#x7684;&#x5730;&#x65B9;&#xFF0C;&#x5148;&#x8BF4;&#x660E;&#x4F1A;&#x7528;&#x5230;&#x90A3;&#x4E9B;&#x7C7B;&#x6240;&#x5728;&#x7684;&#x5168;&#x8DEF;&#x5F84;&#x540D;&#xFF0C;&#x8FD9;&#x6837;&#x6211;&#x4EEC;&#x5C31;&#x80FD;&#x5728;&#x4EE3;&#x7801;&#x4E2D;&#x4F7F;&#x7528;&#x5BF9;&#x5E94;&#x7684;&#x7C7B;&#x540D;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x4F7F;&#x7528;&#x5168;&#x8DEF;&#x5F84;&#x3002;</p>\n<p>&#x5F00;&#x53D1;&#x4E2D;&#x9700;&#x8981;&#x5F15;&#x7528;&#x5230;&#x5176;&#x4ED6;&#x5305;&#x4E0B;&#x7684;&#x7C7B;&#xFF0C;&#x6BD4;&#x5982;JDK&#x4E2D;&#x4E00;&#x4E9B;&#x5E38;&#x7528;&#x7684;&#x7C7B;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x9700;&#x8981;&#x5148;&#x4F7F;&#x7528;import&#x544A;&#x8BC9;&#x7F16;&#x8BD1;&#x5668;&#x6211;&#x4EEC;&#x8981;&#x5F15;&#x7528;&#x7684;&#x7C7B;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x6BD4;&#x5982;&#x8BF4;&#x8FD9;&#x91CC;&#x7684;Scanner&#x3002;&#x90A3;&#x4E48;&#x4F60;&#x4E5F;&#x8BB8;&#x4F1A;&#x6CE8;&#x610F;&#x5230;&#xFF0C;&#x4EE3;&#x7801;&#x4E2D;&#x4E0D;&#x662F;&#x6709;System&#x5417;&#xFF0C;&#x662F;&#x600E;&#x4E48;&#x56DE;&#x4E8B;&#x5462;&#xFF1F;&#x4E3A;&#x4EC0;&#x4E48;&#x4E0D;&#x7528;&#x5F15;&#x5165;System&#x6240;&#x5728;&#x7684;&#x5305;&#x5462;&#xFF1F;</p>\n<p>&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x5F88;&#x597D;&#x7684;&#x95EE;&#x9898;&#x3002;&#x539F;&#x56E0;&#x662F;java.lang&#x8FD9;&#x4E2A;&#x5305;&#x5B9E;&#x5728;&#x662F;&#x592A;&#x5E38;&#x7528;&#x4E86;&#xFF0C;&#x6240;&#x4EE5;&#x9ED8;&#x8BA4;&#x53EF;&#x4EE5;&#x4E0D;&#x7528;&#x5199;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x4F1A;&#x81EA;&#x52A8;&#x5F15;&#x5165;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x53EA;&#x8981;&#x770B;&#x5230;&#x6CA1;&#x6709;&#x4F7F;&#x7528;import&#x5F15;&#x5165;&#x5305;&#x540D;&#x7684;&#x7C7B;&#xFF0C;&#x5C31;&#x4F1A;&#x53BB;java.lang&#x4E2D;&#x627E;&#x3002;</p>\n<p>&#x90A3;&#x5982;&#x679C;&#x8981;&#x5F15;&#x5165;&#x4E00;&#x4E2A;&#x5305;&#x4E0B;&#x6240;&#x6709;&#x7C7B;&#x8BE5;&#x600E;&#x4E48;&#x529E;&#x5462;&#xFF1F;</p>\n<p>&#x6709;&#x65F6;&#x5019;&#x9700;&#x8981;&#x7528;&#x5230;&#x7684;&#x7C7B;&#x521A;&#x597D;&#x6709;&#x6709;&#x591A;&#x5728;&#x540C;&#x4E00;&#x4E2A;&#x5305;&#x4E0B;&#x9762;&#xFF0C;&#x4E00;&#x4E2A;&#x4E00;&#x4E2A;&#x5F15;&#x5165;&#xFF0C;&#x663E;&#x7136;&#x592A;&#x8D39;&#x4E8B;&#xFF0C;&#x522B;&#x7740;&#x6025;&#xFF0C;&#x8FD8;&#x6709;&#x66F4;&#x597D;&#x7684;&#x89E3;&#x51B3;&#x529E;&#x6CD5;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;<code>*</code>&#x6765;&#x5339;&#x914D;&#x6240;&#x6709;&#xFF0C;&#x6BD4;&#x5982;&#x8BF4;&#xFF1A;</p>\n<figure class=\"highlight java\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*</span><br></pre></td></tr></tbody></table></figure>\n<p>&#x90A3;&#x4E48;&#x5C31;&#x4F1A;&#x5F15;&#x5165;<code>java.util</code>&#x5305;&#x4E0B;&#x7684;&#x6240;&#x6709;&#x7C7B;&#x3002;</p>\n<p>&#x4E5F;&#x8BB8;&#x4F60;&#x4F1A;&#x89C9;&#x5F97;&#xFF0C;&#x90A3;&#x90FD;&#x4F7F;&#x7528;<code>*</code>&#x7684;&#x65B9;&#x5F0F;&#x4E0D;&#x5C31;&#x597D;&#x4E86;&#x3002;&#x5982;&#x679C;&#x8FD9;&#x6837;&#x60F3;&#xFF0C;&#x90A3;&#x5C31;&#x5927;&#x9519;&#x7279;&#x9519;&#x4E86;&#xFF0C;&#x5305;&#x7684;&#x5B58;&#x5728;&#x5C31;&#x662F;&#x4E3A;&#x4E86;&#x51CF;&#x5C11;&#x7C7B;&#x540D;&#x51B2;&#x7A81;&#xFF0C;&#x8FD9;&#x6837;&#x6BCF;&#x6B21;&#x90FD;&#x4F7F;&#x7528;<code>*</code>&#x5C06;&#x5927;&#x91CF;&#x7C7B;&#x5F15;&#x5165;&#x7684;&#x8BDD;&#xFF0C;&#x4F1A;&#x66F4;&#x5BB9;&#x6613;&#x4EA7;&#x751F;&#x7C7B;&#x540D;&#x51B2;&#x7A81;&#xFF0C;&#x90A3;&#x5C31;&#x9002;&#x5F97;&#x5176;&#x53CD;&#x4E86;&#x3002;</p>\n<p>&#x672C;&#x7BC7;&#x8BB2;&#x89E3;&#x4E86;package&#x548C;import&#x7684;&#x7528;&#x9014;&#xFF0C;&#x5E0C;&#x671B;&#x901A;&#x8FC7;&#x672C;&#x7BC7;&#xFF0C;&#x4F60;&#x80FD;&#x77E5;&#x9053;&#x4EE3;&#x7801;&#x4E2D;&#x524D;&#x9762;&#x7684;&#x90A3;&#x4E9B;&#x4EE3;&#x7801;&#x6709;&#x4EC0;&#x4E48;&#x4F5C;&#x7528;&#xFF0C;&#x4E5F;&#x80FD;&#x5728;&#x4E4B;&#x540E;&#x7684;&#x4EE3;&#x7801;&#x7F16;&#x5199;&#x4E2D;&#x77E5;&#x9053;&#x5982;&#x4F55;&#x53BB;&#x6B63;&#x786E;&#x4F7F;&#x7528;&#x5B83;&#x4EEC;&#x3002;</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<blockquote>\n<p>共道人间惆怅事，不知今夕是何年。  – 《周秦行纪》</p>\n</blockquote>\n<h2 id=\"关卡说明\"><a href=\"#关卡说明\" class=\"headerlink\" title=\"关卡说明\"></a>关卡说明</h2><p>关卡描述：不知你是否还记得上一篇中的代码，前面的两行，这是在Java中特定的格式，想要知道它们是什么含义吗？通过本关你就能获得答案。</p>\n<p>过关条件：理解Java中package与import的作用以及如何使用它们</p>\n<p>关卡难度：⭐️</p>\n<h2 id=\"什么是package\"><a href=\"#什么是package\" class=\"headerlink\" title=\"什么是package\"></a>什么是package</h2><p>现在再来回顾一下我们上一篇中的代码，首先我们创建了一个类，叫做SimpleCalculator，文件名叫做SimpleCalculator.java。</p>\n<p>在最开头有这么一行：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> hello;</span><br></pre></td></tr></table></figure>\n<p>第一行会声明这个类所在的包名，因为这个类文件是在hello包下的，所以第一行的含义就是表明这个类的位置。</p>\n<h2 id=\"为什么要使用package\"><a href=\"#为什么要使用package\" class=\"headerlink\" title=\"为什么要使用package\"></a>为什么要使用package</h2><p>聪明的你也许会想到，同一个包下面应该不允许存在两个相同的文件名，也就是不允许存在相同的类名。确实如此，这也是package的一个很重要的作用，为类提供一个类似命名空间的管理，避免同名的类产生冲突。</p>\n<p>试想一下，如果没有package，所有类都在同一个地方，那就要争先恐后的使用类名了。</p>\n<p>package的另一个作用便是用来将Java文件进行分类管理，比如有同一种用处的类放到同一个包下，方便查找和管理。</p>\n<h2 id=\"package命名规范\"><a href=\"#package命名规范\" class=\"headerlink\" title=\"package命名规范\"></a>package命名规范</h2><p>虽然理论上来说，你可以随心所欲、为所欲为的命名你项目中的包，但还是建议你遵循一定的规范，因为如果大家都遵循规范来设计的话，会减少很多交流成本。</p>\n<p>package的命名一般分为几个部分，<code>身份标识.开发者名/团队名/公司名.项目名.模块名</code>，对于身份标识，主要是用来标识是个人开发还是团队开发，个人开发主要使用的标识有：indi（个体项目）、onem（单人项目）、pers（个人项目）、priv（私有项目），团队开发主要使用的标识有：team（团队项目）、com（公司项目）。</p>\n<p>但其实没有特殊要求的话，使用域名倒写是最常见的，因为域名是不会重复的。</p>\n<p>所以比较常见的命名类似于：com.frank.hello.controller，frank是我的英文名，（假装）frank.com是我的域名，hello是项目名，controller则代表这个包下面我会放控制器。（先不用纠结控制器是什么）</p>\n<p>所以，如果还没有英文名的话，赶紧给自己找一个吧。你也许会问，如果有人用了跟自己一样的英文名怎么办？</p>\n<p>没有关系，反正极大概率上来说，你又不会使用他的包，即使真遇上了，还是有解决办法的，改改项目名，改改包名，不就ok了。</p>\n<h2 id=\"使用package的注意事项\"><a href=\"#使用package的注意事项\" class=\"headerlink\" title=\"使用package的注意事项\"></a>使用package的注意事项</h2><ol>\n<li>package必须是程序中可执行的第一行代码</li>\n<li>package语句只能有一句，且语句后面有分号</li>\n<li>package命名要求包含的所有字符均为小写，同时不能有特殊字符</li>\n<li>package可以有多层，每一层有<code>.</code>隔开，例如：<code>package com.frank.hello;</code>（com是一个文件夹，frank是com下的一个文件夹，hello是frank文件夹下的一个文件夹）</li>\n<li>包的路径符合所开发的系统模块的定义</li>\n<li>如果定义类的时候没有使用package,那么java就认为我们所定义的类位于默认包里面(java.lang)。</li>\n</ol>\n<h2 id=\"import的作用\"><a href=\"#import的作用\" class=\"headerlink\" title=\"import的作用\"></a>import的作用</h2><p>在之前的<code>SimpleCalculator</code>类中，我们还看到了这么一句代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br></pre></td></tr></table></figure>\n<p>那么import又是做什么用的呢？</p>\n<p>import是在java文件开头的地方，先说明会用到那些类所在的全路径名，这样我们就能在代码中使用对应的类名，而不是使用全路径。</p>\n<p>开发中需要引用到其他包下的类，比如JDK中一些常用的类，那么就需要先使用import告诉编译器我们要引用的类的位置，比如说这里的Scanner。那么你也许会注意到，代码中不是有System吗，是怎么回事呢？为什么不用引入System所在的包呢？</p>\n<p>这是一个很好的问题。原因是java.lang这个包实在是太常用了，所以默认可以不用写，编译器会自动引入，编译器只要看到没有使用import引入包名的类，就会去java.lang中找。</p>\n<p>那如果要引入一个包下所有类该怎么办呢？</p>\n<p>有时候需要用到的类刚好有有多在同一个包下面，一个一个引入，显然太费事，别着急，还有更好的解决办法，可以使用<code>*</code>来匹配所有，比如说：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*</span><br></pre></td></tr></table></figure>\n<p>那么就会引入<code>java.util</code>包下的所有类。</p>\n<p>也许你会觉得，那都使用<code>*</code>的方式不就好了。如果这样想，那就大错特错了，包的存在就是为了减少类名冲突，这样每次都使用<code>*</code>将大量类引入的话，会更容易产生类名冲突，那就适得其反了。</p>\n<p>本篇讲解了package和import的用途，希望通过本篇，你能知道代码中前面的那些代码有什么作用，也能在之后的代码编写中知道如何去正确使用它们。</p>\n"}],"PostAsset":[{"_id":"source/_posts/java/introduction/java-started/java-started-1.png","slug":"java-started-1.png","post":"cjq7rm5qx001ywu9k4mtml6ht","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-environment-windows/1-jdk-windows.png","slug":"1-jdk-windows.png","post":"cjq7rm5q7001lwu9k4tkaf5qu","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-environment-windows/7-jdk-windows.png","slug":"7-jdk-windows.png","post":"cjq7rm5q7001lwu9k4tkaf5qu","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-environment-windows/2-jdk-windows.png","slug":"2-jdk-windows.png","post":"cjq7rm5q7001lwu9k4tkaf5qu","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-environment-windows/3-jdk-windows.png","slug":"3-jdk-windows.png","post":"cjq7rm5q7001lwu9k4tkaf5qu","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-environment-windows/4-jdk-windows.png","slug":"4-jdk-windows.png","post":"cjq7rm5q7001lwu9k4tkaf5qu","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-environment-windows/5-jdk-windows.png","slug":"5-jdk-windows.png","post":"cjq7rm5q7001lwu9k4tkaf5qu","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-environment-windows/6-jdk-windows.png","slug":"6-jdk-windows.png","post":"cjq7rm5q7001lwu9k4tkaf5qu","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-environment-windows/8-jdk-windows.png","slug":"8-jdk-windows.png","post":"cjq7rm5q7001lwu9k4tkaf5qu","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-environment-windows/9-jdk-windows.png","slug":"9-jdk-windows.png","post":"cjq7rm5q7001lwu9k4tkaf5qu","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-environment-mac/3-jdk-mac.png","slug":"3-jdk-mac.png","post":"cjq7rm5q9001mwu9k0gis50on","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-environment-mac/4-jdk-mac.png","slug":"4-jdk-mac.png","post":"cjq7rm5q9001mwu9k0gis50on","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-environment-mac/5-jdk-mac.png","slug":"5-jdk-mac.png","post":"cjq7rm5q9001mwu9k0gis50on","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-environment-mac/6-jdk-mac.png","slug":"6-jdk-mac.png","post":"cjq7rm5q9001mwu9k0gis50on","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-environment-mac/7-jdk-mac.png","slug":"7-jdk-mac.png","post":"cjq7rm5q9001mwu9k0gis50on","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-environment-mac/8-jdk-mac.png","slug":"8-jdk-mac.png","post":"cjq7rm5q9001mwu9k0gis50on","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-environment-mac/9-jdk-mac.png","slug":"9-jdk-mac.png","post":"cjq7rm5q9001mwu9k0gis50on","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-environment-mac/10-jdk-mac.png","slug":"10-jdk-mac.png","post":"cjq7rm5q9001mwu9k0gis50on","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-environment-mac/11-jdk-mac.png","slug":"11-jdk-mac.png","post":"cjq7rm5q9001mwu9k0gis50on","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-environment-mac/12-jdk-mac.png","slug":"12-jdk-mac.png","post":"cjq7rm5q9001mwu9k0gis50on","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-environment-mac/13-jdk-mac.png","slug":"13-jdk-mac.png","post":"cjq7rm5q9001mwu9k0gis50on","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-environment-mac/15-jdk-mac.png","slug":"15-jdk-mac.png","post":"cjq7rm5q9001mwu9k0gis50on","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-environment-mac/14-jdk-mac.png","slug":"14-jdk-mac.png","post":"cjq7rm5q9001mwu9k0gis50on","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-environment-mac/1-jdk-mac.png","slug":"1-jdk-mac.png","post":"cjq7rm5q9001mwu9k0gis50on","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-environment-mac/16-jdk-mac.png","slug":"16-jdk-mac.png","post":"cjq7rm5q9001mwu9k0gis50on","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-environment-mac/2-jdk-mac.png","slug":"2-jdk-mac.png","post":"cjq7rm5q9001mwu9k0gis50on","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-ide/java-ide-2.png","slug":"java-ide-2.png","post":"cjq7rm5qj001owu9kfjshu6n6","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-ide/java-ide-3.png","slug":"java-ide-3.png","post":"cjq7rm5qj001owu9kfjshu6n6","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-ide/java-ide-4.png","slug":"java-ide-4.png","post":"cjq7rm5qj001owu9kfjshu6n6","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-ide/java-ide-6.png","slug":"java-ide-6.png","post":"cjq7rm5qj001owu9kfjshu6n6","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-ide/java-ide-7.png","slug":"java-ide-7.png","post":"cjq7rm5qj001owu9kfjshu6n6","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-ide/java-ide-5.png","slug":"java-ide-5.png","post":"cjq7rm5qj001owu9kfjshu6n6","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-ide/java-ide-8.png","slug":"java-ide-8.png","post":"cjq7rm5qj001owu9kfjshu6n6","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-ide/java-ide-9.png","slug":"java-ide-9.png","post":"cjq7rm5qj001owu9kfjshu6n6","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-ide/java-ide-1.png","slug":"java-ide-1.png","post":"cjq7rm5qj001owu9kfjshu6n6","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-simple-example/java-simple-example-2.png","slug":"java-simple-example-2.png","post":"cjq7rm5qv001uwu9kq9zp27ef","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-simple-example/java-simple-example-3.png","slug":"java-simple-example-3.png","post":"cjq7rm5qv001uwu9kq9zp27ef","modified":0,"renderable":0},{"_id":"source/_posts/java/introduction/java-simple-example/java-simple-example-1.png","slug":"java-simple-example-1.png","post":"cjq7rm5qv001uwu9kq9zp27ef","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjq7rm5kj0002wu9kz30r3imr","category_id":"cjq7rm5ko0004wu9k3p01mvob","_id":"cjq7rm5kx0005wu9kryzahgyn"},{"post_id":"cjq7rm5nf000lwu9ky8vczfeb","category_id":"cjq7rm5nd000iwu9kpejg8xaf","_id":"cjq7rm5nk000qwu9k6imiu7ca"},{"post_id":"cjq7rm5na000gwu9kls1nhb94","category_id":"cjq7rm5nd000iwu9kpejg8xaf","_id":"cjq7rm5nl000twu9kvyb5wno6"},{"post_id":"cjq7rm5nc000hwu9kka9batrn","category_id":"cjq7rm5nd000iwu9kpejg8xaf","_id":"cjq7rm5nl000uwu9kl2uxx06i"},{"post_id":"cjq7rm5ne000kwu9kl9gfe3dh","category_id":"cjq7rm5nd000iwu9kpejg8xaf","_id":"cjq7rm5nn000xwu9ku7tj8417"},{"post_id":"cjq7rm5pi001cwu9kql8olmid","category_id":"cjq7rm5pq001ewu9k8jvdop1y","_id":"cjq7rm5pv001kwu9kn08pcyzd"},{"post_id":"cjq7rm5qj001owu9kfjshu6n6","category_id":"cjq7rm5pq001ewu9k8jvdop1y","_id":"cjq7rm5qu001twu9k928wd9pb"},{"post_id":"cjq7rm5qq001pwu9koyeuujma","category_id":"cjq7rm5pq001ewu9k8jvdop1y","_id":"cjq7rm5qw001vwu9kkbce8hvp"},{"post_id":"cjq7rm5qs001rwu9k8k2w6pfh","category_id":"cjq7rm5pq001ewu9k8jvdop1y","_id":"cjq7rm5qy001zwu9kj808swg6"},{"post_id":"cjq7rm5qv001uwu9kq9zp27ef","category_id":"cjq7rm5pq001ewu9k8jvdop1y","_id":"cjq7rm5r20026wu9k763qi22i"},{"post_id":"cjq7rm5qx001ywu9k4mtml6ht","category_id":"cjq7rm5pq001ewu9k8jvdop1y","_id":"cjq7rm5r40029wu9k086kpd58"},{"post_id":"cjq7rm5q9001nwu9k7t34u2tz","category_id":"cjq7rm5pq001ewu9k8jvdop1y","_id":"cjq7rt4r50002eg9k1javb71x"},{"post_id":"cjq7rm5q7001lwu9k4tkaf5qu","category_id":"cjq7rm5pq001ewu9k8jvdop1y","_id":"cjq7rzd9x0005eg9koo518hmh"},{"post_id":"cjq7rm5q9001mwu9k0gis50on","category_id":"cjq7rm5pq001ewu9k8jvdop1y","_id":"cjq7tbkq70007eg9kmhz9vmi0"},{"post_id":"cjq7ujnyj000eeg9k1wmsn4bc","category_id":"cjq7rm5pq001ewu9k8jvdop1y","_id":"cjq7ujnyl000heg9kkksjyib9"},{"post_id":"cjq7rm5ps001hwu9k02afcstq","category_id":"cjq7rm5pq001ewu9k8jvdop1y","_id":"cjq7we8b60003pw9ka93w20jz"},{"post_id":"cjq7rm5pq001gwu9k5ehnulqr","category_id":"cjq7rm5pq001ewu9k8jvdop1y","_id":"cjq7wjht80006pw9k8vuoc1pc"},{"post_id":"cjq7rm5pp001dwu9kiqywhhqh","category_id":"cjq7rm5pq001ewu9k8jvdop1y","_id":"cjq7wjhta0009pw9kpdkxfy3p"}],"PostTag":[{"post_id":"cjq7rm5na000gwu9kls1nhb94","tag_id":"cjq7rm5nd000jwu9kweybdxno","_id":"cjq7rm5nm000wwu9kw29uuqah"},{"post_id":"cjq7rm5na000gwu9kls1nhb94","tag_id":"cjq7rm5ng000owu9kcxq7m9uy","_id":"cjq7rm5nn000ywu9kjikxggns"},{"post_id":"cjq7rm5na000gwu9kls1nhb94","tag_id":"cjq7rm5nk000swu9kljihz49f","_id":"cjq7rm5nn0010wu9kd7pjofs1"},{"post_id":"cjq7rm5nc000hwu9kka9batrn","tag_id":"cjq7rm5nd000jwu9kweybdxno","_id":"cjq7rm5o50013wu9kdzcw7g7r"},{"post_id":"cjq7rm5nc000hwu9kka9batrn","tag_id":"cjq7rm5ng000owu9kcxq7m9uy","_id":"cjq7rm5o50014wu9k2e25u26x"},{"post_id":"cjq7rm5nc000hwu9kka9batrn","tag_id":"cjq7rm5nk000swu9kljihz49f","_id":"cjq7rm5o50016wu9kpqvdxcm0"},{"post_id":"cjq7rm5ne000kwu9kl9gfe3dh","tag_id":"cjq7rm5nd000jwu9kweybdxno","_id":"cjq7rm5o60017wu9k017t7co1"},{"post_id":"cjq7rm5nf000lwu9ky8vczfeb","tag_id":"cjq7rm5o50015wu9kx5h0h87t","_id":"cjq7rm5o60018wu9k4j2d5bgc"},{"post_id":"cjq7rm5pi001cwu9kql8olmid","tag_id":"cjq7rm5pq001fwu9kyibebbv9","_id":"cjq7rm5pu001jwu9k4i3t893d"},{"post_id":"cjq7rm5qj001owu9kfjshu6n6","tag_id":"cjq7rm5qs001qwu9kqfvh1gzp","_id":"cjq7rm5r20024wu9k02a05xcl"},{"post_id":"cjq7rm5qj001owu9kfjshu6n6","tag_id":"cjq7rm5ng000owu9kcxq7m9uy","_id":"cjq7rm5r30027wu9khgvxj0kl"},{"post_id":"cjq7rm5qv001uwu9kq9zp27ef","tag_id":"cjq7rm5qs001qwu9kqfvh1gzp","_id":"cjq7rm5r4002awu9k6wnkgkty"},{"post_id":"cjq7rm5qv001uwu9kq9zp27ef","tag_id":"cjq7rm5ng000owu9kcxq7m9uy","_id":"cjq7rm5r5002cwu9kkefo0is0"},{"post_id":"cjq7rm5qx001ywu9k4mtml6ht","tag_id":"cjq7rm5qs001qwu9kqfvh1gzp","_id":"cjq7rm5r6002ewu9kdmwk97l0"},{"post_id":"cjq7rm5qx001ywu9k4mtml6ht","tag_id":"cjq7rm5ng000owu9kcxq7m9uy","_id":"cjq7rm5r9002gwu9k78w8w25j"},{"post_id":"cjq7rm5qq001pwu9koyeuujma","tag_id":"cjq7rm5qs001qwu9kqfvh1gzp","_id":"cjq7rm5rd002iwu9k6zcyj0gr"},{"post_id":"cjq7rm5qq001pwu9koyeuujma","tag_id":"cjq7rm5ng000owu9kcxq7m9uy","_id":"cjq7rm5re002kwu9kxjhjlg5v"},{"post_id":"cjq7rm5qs001rwu9k8k2w6pfh","tag_id":"cjq7rm5qs001qwu9kqfvh1gzp","_id":"cjq7rm5rf002mwu9kl3cknpf4"},{"post_id":"cjq7rm5qs001rwu9k8k2w6pfh","tag_id":"cjq7rm5ng000owu9kcxq7m9uy","_id":"cjq7rm5rg002owu9kod1f929o"},{"post_id":"cjq7rm5q9001nwu9k7t34u2tz","tag_id":"cjq7rm5qs001qwu9kqfvh1gzp","_id":"cjq7rt4r50000eg9kug6c4gwq"},{"post_id":"cjq7rm5q9001nwu9k7t34u2tz","tag_id":"cjq7rm5ng000owu9kcxq7m9uy","_id":"cjq7rt4r50001eg9keh2012l6"},{"post_id":"cjq7rm5q7001lwu9k4tkaf5qu","tag_id":"cjq7rm5qs001qwu9kqfvh1gzp","_id":"cjq7rzd9x0003eg9kkhcydh38"},{"post_id":"cjq7rm5q7001lwu9k4tkaf5qu","tag_id":"cjq7rm5ng000owu9kcxq7m9uy","_id":"cjq7rzd9x0004eg9ke1na93hs"},{"post_id":"cjq7rm5q9001mwu9k0gis50on","tag_id":"cjq7rm5qs001qwu9kqfvh1gzp","_id":"cjq7tbkq70008eg9ko93tvt14"},{"post_id":"cjq7rm5q9001mwu9k0gis50on","tag_id":"cjq7rm5ng000owu9kcxq7m9uy","_id":"cjq7tbkq80009eg9kky6zt354"},{"post_id":"cjq7rm5q9001mwu9k0gis50on","tag_id":"cjq7tbkq70006eg9k6gqqupjv","_id":"cjq7tbkq8000aeg9kurly5a7w"},{"post_id":"cjq7rm5q7001lwu9k4tkaf5qu","tag_id":"cjq7tbkq70006eg9k6gqqupjv","_id":"cjq7tesus000beg9ki1az5xj1"},{"post_id":"cjq7rm5q9001nwu9k7t34u2tz","tag_id":"cjq7tbkq70006eg9k6gqqupjv","_id":"cjq7tez29000ceg9kn97j0pvn"},{"post_id":"cjq7rm5qj001owu9kfjshu6n6","tag_id":"cjq7tbkq70006eg9k6gqqupjv","_id":"cjq7tj8hq000deg9k2lyslkrh"},{"post_id":"cjq7ujnyj000eeg9k1wmsn4bc","tag_id":"cjq7rm5ng000owu9kcxq7m9uy","_id":"cjq7ujnyk000geg9kou3zmezi"},{"post_id":"cjq7rm5pi001cwu9kql8olmid","tag_id":"cjq7rm5ng000owu9kcxq7m9uy","_id":"cjq7v86h5000ieg9kabojh9zv"},{"post_id":"cjq7ujnyj000eeg9k1wmsn4bc","tag_id":"cjq7rm5pq001fwu9kyibebbv9","_id":"cjq7vz86c0000pw9kwwcewtxw"},{"post_id":"cjq7rm5ps001hwu9k02afcstq","tag_id":"cjq7rm5pq001fwu9kyibebbv9","_id":"cjq7we8b60001pw9kcpuvviis"},{"post_id":"cjq7rm5ps001hwu9k02afcstq","tag_id":"cjq7rm5ng000owu9kcxq7m9uy","_id":"cjq7we8b60002pw9krsr2ztir"},{"post_id":"cjq7rm5pq001gwu9k5ehnulqr","tag_id":"cjq7rm5pq001fwu9kyibebbv9","_id":"cjq7wjht80004pw9km4dymlzb"},{"post_id":"cjq7rm5pq001gwu9k5ehnulqr","tag_id":"cjq7rm5ng000owu9kcxq7m9uy","_id":"cjq7wjht80005pw9k4ibjhc9o"},{"post_id":"cjq7rm5pp001dwu9kiqywhhqh","tag_id":"cjq7rm5pq001fwu9kyibebbv9","_id":"cjq7wjhta0007pw9k5ayuryp5"},{"post_id":"cjq7rm5pp001dwu9kiqywhhqh","tag_id":"cjq7rm5ng000owu9kcxq7m9uy","_id":"cjq7wjhta0008pw9k4hya678f"}],"Tag":[{"name":"摘要","_id":"cjq7rm5nd000jwu9kweybdxno"},{"name":"Java","_id":"cjq7rm5ng000owu9kcxq7m9uy"},{"name":"多线程","_id":"cjq7rm5nk000swu9kljihz49f"},{"name":"读书笔记","_id":"cjq7rm5o50015wu9kx5h0h87t"},{"name":"Java基础","_id":"cjq7rm5pq001fwu9kyibebbv9"},{"name":"Java入门","_id":"cjq7rm5qs001qwu9kqfvh1gzp"},{"name":"环境搭建","_id":"cjq7tbkq70006eg9k6gqqupjv"}]}}