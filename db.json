{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/indigos/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"themes/indigos/source/img/brand.jpg","path":"img/brand.jpg","modified":0,"renderable":1},{"_id":"themes/indigos/source/img/cc.png","path":"img/cc.png","modified":0,"renderable":1},{"_id":"themes/indigos/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/indigos/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/indigos/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/indigos/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/indigos/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/indigos/source/js/main.min.js","path":"js/main.min.js","modified":0,"renderable":1},{"_id":"themes/indigos/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/indigos/source/js/search.min.js","path":"js/search.min.js","modified":0,"renderable":1},{"_id":"themes/indigos/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/indigos/source/img/wechat.jpg","path":"img/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/indigos/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/indigos/.editorconfig","hash":"9b0445427777519defe360ea38c61729d847b3d3","modified":1545719561508},{"_id":"themes/indigos/package.json","hash":"c795e3100ae3655bfa8b39adcca7333a7925b47f","modified":1545719561520},{"_id":"themes/indigos/LICENSE","hash":"24944bf7920108f5a4790e6071c32e9102760c37","modified":1545719561508},{"_id":"themes/indigos/README.md","hash":"4bf26d9b43bf24b8e0a1a0d058437a347972f5e6","modified":1545719561509},{"_id":"themes/indigos/_config.yml","hash":"20fc84d1de1ee68dde2a944de132749e71178540","modified":1545818255996},{"_id":"source/_data/menu.yml","hash":"c37664eeeb90a1a1d6042e423ccae431fe040164","modified":1545813186168},{"_id":"source/_posts/hello-world.md","hash":"9f3c43dd6ad8ff0b5d5d599ede93431e745b694f","modified":1545820472725},{"_id":"source/categories/index.md","hash":"1f6f9db5cf4cba5be4d91278021eb9873b80d376","modified":1545720545170},{"_id":"source/tags/index.md","hash":"7c33368714c02998c88ee12fd0c129599c478fa5","modified":1545720508305},{"_id":"themes/indigos/languages/nl-NL","hash":"9085c04491f93066f2369911cc2175b59ae596ad","modified":1545719561510},{"_id":"themes/indigos/languages/zh-CN.yml","hash":"7dc6ae434dde390b6768d244132e23cc78c33817","modified":1545719561510},{"_id":"themes/indigos/languages/ja.yml","hash":"74fd480874bf5e773ba7f9d2a94697cda979091f","modified":1545719561509},{"_id":"themes/indigos/languages/en.yml","hash":"1957d2bfc3a4cef299f4f169b431e9b1128ba162","modified":1545719561509},{"_id":"themes/indigos/languages/zh-TW.yml","hash":"6a9e820be66eb12ae746f2527e0dc1adf927c685","modified":1545719561510},{"_id":"themes/indigos/layout/archive.ejs","hash":"d039719e21f6a6fa2925b00aaa623a180a78c818","modified":1545719561519},{"_id":"themes/indigos/layout/categories.ejs","hash":"41783d2069d5080566a99e6312aa2113105f8b41","modified":1545719561519},{"_id":"themes/indigos/layout/category.ejs","hash":"7ea26a8a935886963eda82f41c7bd5270cf780d9","modified":1545719561519},{"_id":"themes/indigos/layout/index.ejs","hash":"39477807b98b2d2df78f3b82498a11e90be8222c","modified":1545719561519},{"_id":"themes/indigos/layout/layout.ejs","hash":"d52f43fa9572d70cae834e4887c8897b43744805","modified":1545719561519},{"_id":"themes/indigos/layout/page.ejs","hash":"afb98face24d39a21ebbbde6592a9afc98572aa4","modified":1545719561520},{"_id":"themes/indigos/layout/tags.ejs","hash":"20466446c41409d14a3d42ccaec24a65a045efef","modified":1545719561520},{"_id":"themes/indigos/layout/post.ejs","hash":"afbf8532dc8d148ca4dff2ca127a3382907cf2f5","modified":1545719561520},{"_id":"themes/indigos/scripts/plugins.js","hash":"e439d717513616bedeed37ba9b05117470809b21","modified":1545719561521},{"_id":"themes/indigos/layout/tag.ejs","hash":"36786a3de7f6cad58209603f7d84ba23addea174","modified":1545719561520},{"_id":"source/_posts/reading/the-power-of-habit-digest.md","hash":"d0825c3ecfda83060fbf130215344ab6f964c95a","modified":1545827991023},{"_id":"source/_posts/reading/the-power-of-habit.md","hash":"ac0ea18e07512bc399c19e44b89daaef7d4b9a60","modified":1545828136393},{"_id":"source/_posts/reading/java-multithread-programming-guide-in-action.md","hash":"7c574c616b59186b570bd2de2ad0242be9d273ab","modified":1545827871011},{"_id":"themes/indigos/layout/_partial/after-footer.ejs","hash":"9ac30b9439fab69973cf4722dbf2945a18fd3804","modified":1545719561511},{"_id":"themes/indigos/layout/_partial/head.ejs","hash":"02a95a88774cc50dbcc32242b6c8ac7e9d9028bb","modified":1545719561511},{"_id":"themes/indigos/layout/_partial/archive.ejs","hash":"55cd81ef9183426d6d99fd91550fce0a9cc92aa0","modified":1545719561511},{"_id":"themes/indigos/layout/_partial/footer.ejs","hash":"fdfc37e2a63fec8a258c6ec7059b7f103bd15c3b","modified":1545726035475},{"_id":"themes/indigos/layout/_partial/header.ejs","hash":"6156bf20791e46fc1c5872113276c1c1f5c13773","modified":1545719561511},{"_id":"themes/indigos/layout/_partial/index-item.ejs","hash":"ec7b3ec79bbbead9c7e43e2e6c6b5c8bef509410","modified":1545719561512},{"_id":"themes/indigos/layout/_partial/loading.ejs","hash":"bc4cb19b20de55a0332647f4dca9684184383685","modified":1545719561512},{"_id":"themes/indigos/layout/_partial/menu.ejs","hash":"d39afaad6b0dd2a3ae27e6db3e9a6cd6014622fa","modified":1545719561512},{"_id":"themes/indigos/layout/_partial/paginator.ejs","hash":"dc27242927890f130a64400596b9b7ad5fca8972","modified":1545719561512},{"_id":"themes/indigos/layout/_partial/script.ejs","hash":"439d6315a1b16e32b77a68c3f0cb2961d581086a","modified":1545719561518},{"_id":"themes/indigos/layout/_partial/post.ejs","hash":"a87d9b0485b3bf4cdfdad890e5974c43dbaa8240","modified":1545719561515},{"_id":"themes/indigos/layout/_partial/search.ejs","hash":"c2091c621b5480ef1e69d72027028cec8e929892","modified":1545719561518},{"_id":"themes/indigos/layout/_partial/tags-bar.ejs","hash":"19eff4876d31080a427644f7a43fe172d0c008c6","modified":1545719561518},{"_id":"themes/indigos/source/css/style.less","hash":"f22d4146e0bdb4485d33f20080c67ba05724afea","modified":1545719561554},{"_id":"themes/indigos/source/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1545719561556},{"_id":"themes/indigos/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1545719561556},{"_id":"themes/indigos/source/img/avatar.jpg","hash":"96f2506c587325147a383aad3ada8d5993e6cdf8","modified":1545721392740},{"_id":"themes/indigos/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1545719561556},{"_id":"themes/indigos/source/js/main.js","hash":"300b2e963683ced162e28afcd24ffc970fc23ac2","modified":1545719561557},{"_id":"themes/indigos/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1545719561556},{"_id":"themes/indigos/source/img/favicon.ico","hash":"c88cd0044daea8f5b87913d71c4ade2aa31387c9","modified":1545725227449},{"_id":"themes/indigos/source/js/main.min.js","hash":"8acf4480f8ab859423b8926b9b790c67b5a77276","modified":1545719561557},{"_id":"themes/indigos/source/js/search.js","hash":"a1de7e7a2ef8330ebcd9f3a7a4622b3bac44e4f3","modified":1545719561558},{"_id":"themes/indigos/source/js/search.min.js","hash":"a8a450bb8b1ca9ad577052addcbd3393f1af6c6a","modified":1545719561558},{"_id":"themes/indigos/layout/_partial/plugins/gitment.ejs","hash":"5723d507eca4390e8e5d18c0770e7953b8c22f5a","modified":1545719561513},{"_id":"themes/indigos/layout/_partial/plugins/disqus.ejs","hash":"4a0c01e4195f685f9825fcd016d01249dbdd52ca","modified":1545719561512},{"_id":"themes/indigos/layout/_partial/plugins/google-analytics.ejs","hash":"a947f4076b54b48d4df5baf2d5b3c39b632c7576","modified":1545719561513},{"_id":"themes/indigos/layout/_partial/plugins/baidu.ejs","hash":"e44d526029f122e9c2c74f3a647c35002c818cbe","modified":1545719561512},{"_id":"themes/indigos/layout/_partial/plugins/page-visit.ejs","hash":"2decb77bf3c1a064ea6ce1d4e78892c434d9c884","modified":1545719561514},{"_id":"themes/indigos/layout/_partial/plugins/mathjax.ejs","hash":"ea603a057196de53bd6afab1fddb93d11f27eb81","modified":1545719561513},{"_id":"themes/indigos/layout/_partial/plugins/site-visit.ejs","hash":"8fbd0910828f1ab6eba728bdecc9811d623baae2","modified":1545719561514},{"_id":"themes/indigos/layout/_partial/plugins/uyan.ejs","hash":"e370bd04ea5cf1c83e0c20516aff7ba3ca8b2d0b","modified":1545719561514},{"_id":"themes/indigos/layout/_partial/plugins/hyper-comments.ejs","hash":"e5a83acc7c2e385b0c9abf428e86e8fdfd3a5202","modified":1545719561513},{"_id":"themes/indigos/layout/_partial/plugins/tajs.ejs","hash":"97b48fe10be1c71d4ff25ccec3bd92d97466c9c5","modified":1545719561514},{"_id":"themes/indigos/layout/_partial/plugins/valine.ejs","hash":"a976ca36bd09aeb2902bf94fcc7a59975ea25148","modified":1545719561514},{"_id":"themes/indigos/layout/_partial/post/category.ejs","hash":"c7476165721a3a5e34d00d8c5c07e1e5474cd800","modified":1545719561515},{"_id":"themes/indigos/layout/_partial/post/copyright.ejs","hash":"5305ed30ee35cf50f87656737d0ffe85f5bfc16b","modified":1545719561515},{"_id":"themes/indigos/layout/_partial/post/comment.ejs","hash":"bcc3bd7a9023d71778f15e98c88552335ae69a69","modified":1545719561515},{"_id":"themes/indigos/layout/_partial/post/date.ejs","hash":"ea85b46e12d3b9c3612eef7aa76289a663fbc096","modified":1545719561516},{"_id":"themes/indigos/layout/_partial/post/head-meta.ejs","hash":"b0c680ce5b8aaf461a6731b1ff1287bd140c168a","modified":1545719561516},{"_id":"themes/indigos/layout/_partial/post/nav.ejs","hash":"11e7d504f7c7a3c4c052da13cfa8ea4862c9383e","modified":1545719561516},{"_id":"themes/indigos/layout/_partial/post/reward.ejs","hash":"23719e09689b3afbb19214c6603eb02f896cb9ba","modified":1545719561517},{"_id":"themes/indigos/layout/_partial/post/reward-btn.ejs","hash":"41c242fe3159dc68cec8dd00ab6d2663f5a51179","modified":1545719561516},{"_id":"themes/indigos/layout/_partial/post/share-fab.ejs","hash":"93482ad7d1e01b966f5ee1c5d12b88564e02b349","modified":1545719561517},{"_id":"themes/indigos/layout/_partial/post/tag.ejs","hash":"b3dc38652c4a018a37418136478dcd522fc49f79","modified":1545719561517},{"_id":"themes/indigos/layout/_partial/post/share.ejs","hash":"8df0d7bf6f8e106cdbdac2dd10a97367aa0695f8","modified":1545719561517},{"_id":"themes/indigos/layout/_partial/post/title.ejs","hash":"062d56cb88ae2be3a6616b911d4ebeffcbfe3cff","modified":1545719561517},{"_id":"themes/indigos/layout/_partial/post/updated.ejs","hash":"5caa71745aa340ce57938a930f3b898ee7518d74","modified":1545719561518},{"_id":"themes/indigos/layout/_partial/post/toc.ejs","hash":"ad287a70724eb7cd8cd2a03a45b68032ee99973d","modified":1545719561518},{"_id":"themes/indigos/layout/_partial/plugins/dynamic-title.ejs","hash":"23c101d45911eb0846533aaa2d409c43aa5e899a","modified":1545719561513},{"_id":"themes/indigos/source/css/_partial/archives.less","hash":"7d2a6886265386c640e94ffca3f042675f701a35","modified":1545719561521},{"_id":"themes/indigos/source/css/_partial/article.less","hash":"d476cd3537bcd8a02d055cc223f5c805b8638cc2","modified":1545719561521},{"_id":"themes/indigos/source/css/_plugin/valine.less","hash":"ddbb7647d83f732f9b0d5d817d40a748006949cc","modified":1545719561526},{"_id":"themes/indigos/source/css/_partial/gotop.less","hash":"b7db31b9bc563c10b9e3cf3e6d9cfddfeb3e805a","modified":1545719561522},{"_id":"themes/indigos/source/css/_partial/highlight.less","hash":"58492b7cdb45fe09b026b2f34e8ae69c2ddb8228","modified":1545719561523},{"_id":"themes/indigos/source/css/_partial/header.less","hash":"90f0948a9182c14b1dac1e9dbed3c883543266f9","modified":1545719561523},{"_id":"themes/indigos/source/css/_partial/layout.less","hash":"4390ed22abad59c8b28ed1a479a52f15b5f9cf4a","modified":1545719561523},{"_id":"themes/indigos/source/css/_partial/postlist.less","hash":"1c041bf91106808e5480c60d9ece45431bb503b3","modified":1545719561524},{"_id":"themes/indigos/source/css/_partial/lightbox.less","hash":"9b961eb1d70e7658f42cf2ca895fa5e35a6b6541","modified":1545719561523},{"_id":"themes/indigos/source/css/_partial/loading.less","hash":"f9d06a1e24fb4857fd18d7a0bfbb3a0ab2d1c742","modified":1545719561523},{"_id":"themes/indigos/source/css/_partial/page.less","hash":"e92ccb53e6ac73a51498c6a9672db9d0d2bc7f1a","modified":1545719561524},{"_id":"themes/indigos/source/css/_partial/reward.less","hash":"4857f90bb57fc22ca3f942d8934d86d5e9e82c1e","modified":1545719561524},{"_id":"themes/indigos/source/css/_partial/roboto.less","hash":"2e0469ed8161d5672d903ca1a8027cd65fe007f1","modified":1545719561524},{"_id":"themes/indigos/source/css/_partial/search.less","hash":"1d6641ae7568a0153d24beba9fd9704d2b155f6c","modified":1545719561524},{"_id":"themes/indigos/source/css/_partial/share.less","hash":"27d80bcc96a53dd1e7eaa9a7d746e4b212357302","modified":1545719561525},{"_id":"themes/indigos/source/css/_partial/tags.less","hash":"959f4373fda6e45f6a4041a995ed3ea8a05a5170","modified":1545719561525},{"_id":"themes/indigos/source/css/_partial/variable.less","hash":"082896b966ed25b39c74e7b007b4f54c235685a4","modified":1545719561525},{"_id":"themes/indigos/source/img/alipay.jpg","hash":"d2e76219d3f688a805c9f30e004f48e79daf03ab","modified":1545721413724},{"_id":"themes/indigos/source/css/_partial/waves.less","hash":"77bfd0b373b0469eb0176167fb076ccda4edf2a7","modified":1545719561525},{"_id":"themes/indigos/source/img/wechat.jpg","hash":"c7887fd95a3383371b957667d4bfbc3c8c2cbe53","modified":1545721370643},{"_id":"themes/indigos/source/css/_partial/fontawesome.less","hash":"ca30b732d2efbb0cd55a272ecdabc97f895aee78","modified":1545719561522},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1545719561539},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1545719561541},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1545719561542},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1545719561542},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1545719561545},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1545719561545},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1545719561544},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1545719561547},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1545719561548},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1545719561548},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1545719561551},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1545719561551},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1545719561551},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1545719561553},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1545719561554},{"_id":"themes/indigos/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1545719561537},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1545719561540},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1545719561543},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1545719561547},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1545719561550},{"_id":"themes/indigos/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1545719561553},{"_id":"themes/indigos/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1545719561538},{"_id":"themes/indigos/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1545719561528},{"_id":"themes/indigos/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1545719561530},{"_id":"themes/indigos/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1545719561536},{"_id":"themes/indigos/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1545719561534}],"Category":[{"name":"Hexo","_id":"cjq562rkf00039c9k53r8kjtd"},{"name":"阅读","_id":"cjq562rly00079c9k88xd8uyi"}],"Data":[{"_id":"menu","data":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}],"Page":[{"layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"layout: categories\ncomments: false\n---","date":"2018-12-25T06:49:05.170Z","updated":"2018-12-25T06:49:05.170Z","path":"categories/index.html","title":"","_id":"cjq562rkd00019c9khqhn812v","content":"","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":""},{"layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"layout: tags\ncomments: false\n---","date":"2018-12-25T06:48:28.305Z","updated":"2018-12-25T06:48:28.305Z","path":"tags/index.html","title":"","_id":"cjq562rke00029c9kjtl8db0r","content":"","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ncategories:\n- Hexo\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-12-25T06:29:25.034Z","updated":"2018-12-26T10:34:32.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq562rk800009c9k8fbu2rw8","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"《习惯的力量》- 摘要","date":"2018-12-26T11:16:09.000Z","_content":"## 摘要\n\n- 科学家说，习惯之所以出现，是因为大脑一直在寻找可以省力的方式。如果让大脑自由发挥，那么大脑就会让几乎所有的惯常行为活动编程习惯，因为习惯能让大脑得到更多的休息。\n- 大脑中的这个过程是一个由三步组成的回路。第一步，存在着一个暗示，能让大脑进入某种自动行为模式，并决定使用哪种习惯。第二步，存在一个惯常行为，这可以是身体、思维或者感情方面的。第三步则是奖赏，能让你的大脑辨别出是否应该记下这个回路，以备将来之用。\n- 问题是你的大脑无法分别好习惯和坏习惯，所以，如果你有一个好习惯，那么这个习惯会一直蛰伏在你的大脑内，等待正确的暗示和奖赏的出现。\n- 建立习惯的两条基本规律：\n  - 第一，找出一种简单又明显的暗示\n  - 第二，清楚地说明有哪些奖赏\n- 习惯就是这样产生的：把暗示、惯常行为和奖赏拼在一起，然后培养一种渴求来驱动这一回路。吸烟就是这样。烟民看到暗示，比如一包万宝路，那么烟民的大脑就会开始预期尼古丁的味道。\n- 暗示加上奖赏本身并不足以让新习惯长期持续。只有当你的大脑开始预期奖赏，渴求内啡肽的分泌或成就感时，你才会自觉地在每天早上系好跑鞋鞋带。而暗示除了能够触发惯常行为，还必须能够触发人对即将到来的奖赏的渴求。\n- 要改变习惯，你必须留住旧习惯回路中的暗示，提供旧习惯回路中的奖赏，但要插入一个新的惯常行为。\n- 这就是黄金法则。如果你用同样的暗示，提供同样的奖赏，你就可以换掉惯常行为，改变自己的习惯。如果暗示和奖赏不变，几乎所有的习惯都是可以被改变的。\n- 研究人员发现，起作用的并不是上帝，而是信仰本身。一旦人们学会信仰某种东西，这种信仰就会扩展到生活的其他方面，直到他们开始相信自己能改变。信仰是将改造过的习惯回路变成永久性行为的要素。\n- 信仰很重要。你不一定要信仰上帝，但你必须相信事情会好转。\n- 可惜，并没有一套对每个人都有效的方法。我们知道，习惯是不能被消除的，而只能被代替。当使用改变习惯的黄金法则时，习惯最具可塑性：如果我们保持一样的暗示和奖赏，就能植入一种新的惯常行为。但这还不够，为了保持这个习惯，人们还得相信改变是可能的。而大多数时候，只有在团体的助力下，才能形成信仰。\n- 一些习惯比起其他习惯在重塑商业和生活方式上更有影响力，它们就是“核心习惯”，影响着人们的工作、饮食、玩乐、消费和沟通方式。核心习惯能启动一个进程，久而久之将改变一切。\n- 核心习惯说明成功并不需要做对每一件事情，而是要辨别出一些重要的优先因素，并将其变成有力的杠杆。\n- 最重要的习惯是那些自身变化后，会驱动和重塑其他行为模式的习惯。\n- 意志力不是一种技能，而是一种力量，就如同你手臂和大腿中的肌肉的力量，用力过猛会感到疲累，肌肉剩余的力量就不足以供给其他活动。\n- 当你学会强迫自己参与体育锻炼，或者开始做家庭作业，只吃沙拉不吃汉堡的时候，你的思维正在改变。当学会控制自己的冲动时，人们就在进步。他们将学会如何在诱惑面前分散注意力。而且一旦你形成了意志力锻炼的习惯，你的大脑就会驾轻就熟地帮助你专注于你的目标。\n- 当你学会强迫自己练琴一小时或者长跑15圈的时候，你就已经开始培养自我约束的能力了，一个能跟着球跑10分钟的5岁幼童长大后，一定是一个会按时做功课的六年级学生。\n- 当消费者遭遇到人生的重大事件时，他们的消费习惯更容易发生改变。例如，当一个人结婚的时候，他可能会开始购买一种新的咖啡。当他们迁居到新的住所后，可能倾向于购买不同种类的麦片。当他们离婚的时候，很可能会开始购买一种不同牌子的啤酒。\n- 那么，对于大多数人来说，生活中最大的变化是什么呢？什么样的变化会带来最强的干扰，领消费者最容易被市场营销者左右呢？答案就是生孩子。对于大多数的客户来说，没有什么事情比新生儿的到来使生活产出更大的改变了。因此，与成年人生活的其他任何阶段相比，初为父母者的购物习惯都更为灵活易变。\n- 改变习惯的方法：\n  - 找出惯常行为\n  - 用各种奖赏进行实验\n  - 将暗示隔离出来\n  - 制定计划\n- 几乎所有的习惯性暗示都可以归为以下五大类中的一类：\n  - 地点\n  - 时间\n  - 情绪状态\n  - 其他人\n  - 之前紧挨着的动作\n","source":"_posts/reading/the-power-of-habit-digest.md","raw":"---\ntitle: 《习惯的力量》- 摘要\ntags: 摘要\ncategories: 阅读\ndate: 2018-12-26 19:16:09\n---\n## 摘要\n\n- 科学家说，习惯之所以出现，是因为大脑一直在寻找可以省力的方式。如果让大脑自由发挥，那么大脑就会让几乎所有的惯常行为活动编程习惯，因为习惯能让大脑得到更多的休息。\n- 大脑中的这个过程是一个由三步组成的回路。第一步，存在着一个暗示，能让大脑进入某种自动行为模式，并决定使用哪种习惯。第二步，存在一个惯常行为，这可以是身体、思维或者感情方面的。第三步则是奖赏，能让你的大脑辨别出是否应该记下这个回路，以备将来之用。\n- 问题是你的大脑无法分别好习惯和坏习惯，所以，如果你有一个好习惯，那么这个习惯会一直蛰伏在你的大脑内，等待正确的暗示和奖赏的出现。\n- 建立习惯的两条基本规律：\n  - 第一，找出一种简单又明显的暗示\n  - 第二，清楚地说明有哪些奖赏\n- 习惯就是这样产生的：把暗示、惯常行为和奖赏拼在一起，然后培养一种渴求来驱动这一回路。吸烟就是这样。烟民看到暗示，比如一包万宝路，那么烟民的大脑就会开始预期尼古丁的味道。\n- 暗示加上奖赏本身并不足以让新习惯长期持续。只有当你的大脑开始预期奖赏，渴求内啡肽的分泌或成就感时，你才会自觉地在每天早上系好跑鞋鞋带。而暗示除了能够触发惯常行为，还必须能够触发人对即将到来的奖赏的渴求。\n- 要改变习惯，你必须留住旧习惯回路中的暗示，提供旧习惯回路中的奖赏，但要插入一个新的惯常行为。\n- 这就是黄金法则。如果你用同样的暗示，提供同样的奖赏，你就可以换掉惯常行为，改变自己的习惯。如果暗示和奖赏不变，几乎所有的习惯都是可以被改变的。\n- 研究人员发现，起作用的并不是上帝，而是信仰本身。一旦人们学会信仰某种东西，这种信仰就会扩展到生活的其他方面，直到他们开始相信自己能改变。信仰是将改造过的习惯回路变成永久性行为的要素。\n- 信仰很重要。你不一定要信仰上帝，但你必须相信事情会好转。\n- 可惜，并没有一套对每个人都有效的方法。我们知道，习惯是不能被消除的，而只能被代替。当使用改变习惯的黄金法则时，习惯最具可塑性：如果我们保持一样的暗示和奖赏，就能植入一种新的惯常行为。但这还不够，为了保持这个习惯，人们还得相信改变是可能的。而大多数时候，只有在团体的助力下，才能形成信仰。\n- 一些习惯比起其他习惯在重塑商业和生活方式上更有影响力，它们就是“核心习惯”，影响着人们的工作、饮食、玩乐、消费和沟通方式。核心习惯能启动一个进程，久而久之将改变一切。\n- 核心习惯说明成功并不需要做对每一件事情，而是要辨别出一些重要的优先因素，并将其变成有力的杠杆。\n- 最重要的习惯是那些自身变化后，会驱动和重塑其他行为模式的习惯。\n- 意志力不是一种技能，而是一种力量，就如同你手臂和大腿中的肌肉的力量，用力过猛会感到疲累，肌肉剩余的力量就不足以供给其他活动。\n- 当你学会强迫自己参与体育锻炼，或者开始做家庭作业，只吃沙拉不吃汉堡的时候，你的思维正在改变。当学会控制自己的冲动时，人们就在进步。他们将学会如何在诱惑面前分散注意力。而且一旦你形成了意志力锻炼的习惯，你的大脑就会驾轻就熟地帮助你专注于你的目标。\n- 当你学会强迫自己练琴一小时或者长跑15圈的时候，你就已经开始培养自我约束的能力了，一个能跟着球跑10分钟的5岁幼童长大后，一定是一个会按时做功课的六年级学生。\n- 当消费者遭遇到人生的重大事件时，他们的消费习惯更容易发生改变。例如，当一个人结婚的时候，他可能会开始购买一种新的咖啡。当他们迁居到新的住所后，可能倾向于购买不同种类的麦片。当他们离婚的时候，很可能会开始购买一种不同牌子的啤酒。\n- 那么，对于大多数人来说，生活中最大的变化是什么呢？什么样的变化会带来最强的干扰，领消费者最容易被市场营销者左右呢？答案就是生孩子。对于大多数的客户来说，没有什么事情比新生儿的到来使生活产出更大的改变了。因此，与成年人生活的其他任何阶段相比，初为父母者的购物习惯都更为灵活易变。\n- 改变习惯的方法：\n  - 找出惯常行为\n  - 用各种奖赏进行实验\n  - 将暗示隔离出来\n  - 制定计划\n- 几乎所有的习惯性暗示都可以归为以下五大类中的一类：\n  - 地点\n  - 时间\n  - 情绪状态\n  - 其他人\n  - 之前紧挨着的动作\n","slug":"reading/the-power-of-habit-digest","published":1,"updated":"2018-12-26T12:39:51.023Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq562rls00059c9kqyg3hxvx","content":"<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><ul>\n<li>科学家说，习惯之所以出现，是因为大脑一直在寻找可以省力的方式。如果让大脑自由发挥，那么大脑就会让几乎所有的惯常行为活动编程习惯，因为习惯能让大脑得到更多的休息。</li>\n<li>大脑中的这个过程是一个由三步组成的回路。第一步，存在着一个暗示，能让大脑进入某种自动行为模式，并决定使用哪种习惯。第二步，存在一个惯常行为，这可以是身体、思维或者感情方面的。第三步则是奖赏，能让你的大脑辨别出是否应该记下这个回路，以备将来之用。</li>\n<li>问题是你的大脑无法分别好习惯和坏习惯，所以，如果你有一个好习惯，那么这个习惯会一直蛰伏在你的大脑内，等待正确的暗示和奖赏的出现。</li>\n<li>建立习惯的两条基本规律：<ul>\n<li>第一，找出一种简单又明显的暗示</li>\n<li>第二，清楚地说明有哪些奖赏</li>\n</ul>\n</li>\n<li>习惯就是这样产生的：把暗示、惯常行为和奖赏拼在一起，然后培养一种渴求来驱动这一回路。吸烟就是这样。烟民看到暗示，比如一包万宝路，那么烟民的大脑就会开始预期尼古丁的味道。</li>\n<li>暗示加上奖赏本身并不足以让新习惯长期持续。只有当你的大脑开始预期奖赏，渴求内啡肽的分泌或成就感时，你才会自觉地在每天早上系好跑鞋鞋带。而暗示除了能够触发惯常行为，还必须能够触发人对即将到来的奖赏的渴求。</li>\n<li>要改变习惯，你必须留住旧习惯回路中的暗示，提供旧习惯回路中的奖赏，但要插入一个新的惯常行为。</li>\n<li>这就是黄金法则。如果你用同样的暗示，提供同样的奖赏，你就可以换掉惯常行为，改变自己的习惯。如果暗示和奖赏不变，几乎所有的习惯都是可以被改变的。</li>\n<li>研究人员发现，起作用的并不是上帝，而是信仰本身。一旦人们学会信仰某种东西，这种信仰就会扩展到生活的其他方面，直到他们开始相信自己能改变。信仰是将改造过的习惯回路变成永久性行为的要素。</li>\n<li>信仰很重要。你不一定要信仰上帝，但你必须相信事情会好转。</li>\n<li>可惜，并没有一套对每个人都有效的方法。我们知道，习惯是不能被消除的，而只能被代替。当使用改变习惯的黄金法则时，习惯最具可塑性：如果我们保持一样的暗示和奖赏，就能植入一种新的惯常行为。但这还不够，为了保持这个习惯，人们还得相信改变是可能的。而大多数时候，只有在团体的助力下，才能形成信仰。</li>\n<li>一些习惯比起其他习惯在重塑商业和生活方式上更有影响力，它们就是“核心习惯”，影响着人们的工作、饮食、玩乐、消费和沟通方式。核心习惯能启动一个进程，久而久之将改变一切。</li>\n<li>核心习惯说明成功并不需要做对每一件事情，而是要辨别出一些重要的优先因素，并将其变成有力的杠杆。</li>\n<li>最重要的习惯是那些自身变化后，会驱动和重塑其他行为模式的习惯。</li>\n<li>意志力不是一种技能，而是一种力量，就如同你手臂和大腿中的肌肉的力量，用力过猛会感到疲累，肌肉剩余的力量就不足以供给其他活动。</li>\n<li>当你学会强迫自己参与体育锻炼，或者开始做家庭作业，只吃沙拉不吃汉堡的时候，你的思维正在改变。当学会控制自己的冲动时，人们就在进步。他们将学会如何在诱惑面前分散注意力。而且一旦你形成了意志力锻炼的习惯，你的大脑就会驾轻就熟地帮助你专注于你的目标。</li>\n<li>当你学会强迫自己练琴一小时或者长跑15圈的时候，你就已经开始培养自我约束的能力了，一个能跟着球跑10分钟的5岁幼童长大后，一定是一个会按时做功课的六年级学生。</li>\n<li>当消费者遭遇到人生的重大事件时，他们的消费习惯更容易发生改变。例如，当一个人结婚的时候，他可能会开始购买一种新的咖啡。当他们迁居到新的住所后，可能倾向于购买不同种类的麦片。当他们离婚的时候，很可能会开始购买一种不同牌子的啤酒。</li>\n<li>那么，对于大多数人来说，生活中最大的变化是什么呢？什么样的变化会带来最强的干扰，领消费者最容易被市场营销者左右呢？答案就是生孩子。对于大多数的客户来说，没有什么事情比新生儿的到来使生活产出更大的改变了。因此，与成年人生活的其他任何阶段相比，初为父母者的购物习惯都更为灵活易变。</li>\n<li>改变习惯的方法：<ul>\n<li>找出惯常行为</li>\n<li>用各种奖赏进行实验</li>\n<li>将暗示隔离出来</li>\n<li>制定计划</li>\n</ul>\n</li>\n<li>几乎所有的习惯性暗示都可以归为以下五大类中的一类：<ul>\n<li>地点</li>\n<li>时间</li>\n<li>情绪状态</li>\n<li>其他人</li>\n<li>之前紧挨着的动作</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h2 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h2><ul>\n<li>科学家说，习惯之所以出现，是因为大脑一直在寻找可以省力的方式。如果让大脑自由发挥，那么大脑就会让几乎所有的惯常行为活动编程习惯，因为习惯能让大脑得到更多的休息。</li>\n<li>大脑中的这个过程是一个由三步组成的回路。第一步，存在着一个暗示，能让大脑进入某种自动行为模式，并决定使用哪种习惯。第二步，存在一个惯常行为，这可以是身体、思维或者感情方面的。第三步则是奖赏，能让你的大脑辨别出是否应该记下这个回路，以备将来之用。</li>\n<li>问题是你的大脑无法分别好习惯和坏习惯，所以，如果你有一个好习惯，那么这个习惯会一直蛰伏在你的大脑内，等待正确的暗示和奖赏的出现。</li>\n<li>建立习惯的两条基本规律：<ul>\n<li>第一，找出一种简单又明显的暗示</li>\n<li>第二，清楚地说明有哪些奖赏</li>\n</ul>\n</li>\n<li>习惯就是这样产生的：把暗示、惯常行为和奖赏拼在一起，然后培养一种渴求来驱动这一回路。吸烟就是这样。烟民看到暗示，比如一包万宝路，那么烟民的大脑就会开始预期尼古丁的味道。</li>\n<li>暗示加上奖赏本身并不足以让新习惯长期持续。只有当你的大脑开始预期奖赏，渴求内啡肽的分泌或成就感时，你才会自觉地在每天早上系好跑鞋鞋带。而暗示除了能够触发惯常行为，还必须能够触发人对即将到来的奖赏的渴求。</li>\n<li>要改变习惯，你必须留住旧习惯回路中的暗示，提供旧习惯回路中的奖赏，但要插入一个新的惯常行为。</li>\n<li>这就是黄金法则。如果你用同样的暗示，提供同样的奖赏，你就可以换掉惯常行为，改变自己的习惯。如果暗示和奖赏不变，几乎所有的习惯都是可以被改变的。</li>\n<li>研究人员发现，起作用的并不是上帝，而是信仰本身。一旦人们学会信仰某种东西，这种信仰就会扩展到生活的其他方面，直到他们开始相信自己能改变。信仰是将改造过的习惯回路变成永久性行为的要素。</li>\n<li>信仰很重要。你不一定要信仰上帝，但你必须相信事情会好转。</li>\n<li>可惜，并没有一套对每个人都有效的方法。我们知道，习惯是不能被消除的，而只能被代替。当使用改变习惯的黄金法则时，习惯最具可塑性：如果我们保持一样的暗示和奖赏，就能植入一种新的惯常行为。但这还不够，为了保持这个习惯，人们还得相信改变是可能的。而大多数时候，只有在团体的助力下，才能形成信仰。</li>\n<li>一些习惯比起其他习惯在重塑商业和生活方式上更有影响力，它们就是“核心习惯”，影响着人们的工作、饮食、玩乐、消费和沟通方式。核心习惯能启动一个进程，久而久之将改变一切。</li>\n<li>核心习惯说明成功并不需要做对每一件事情，而是要辨别出一些重要的优先因素，并将其变成有力的杠杆。</li>\n<li>最重要的习惯是那些自身变化后，会驱动和重塑其他行为模式的习惯。</li>\n<li>意志力不是一种技能，而是一种力量，就如同你手臂和大腿中的肌肉的力量，用力过猛会感到疲累，肌肉剩余的力量就不足以供给其他活动。</li>\n<li>当你学会强迫自己参与体育锻炼，或者开始做家庭作业，只吃沙拉不吃汉堡的时候，你的思维正在改变。当学会控制自己的冲动时，人们就在进步。他们将学会如何在诱惑面前分散注意力。而且一旦你形成了意志力锻炼的习惯，你的大脑就会驾轻就熟地帮助你专注于你的目标。</li>\n<li>当你学会强迫自己练琴一小时或者长跑15圈的时候，你就已经开始培养自我约束的能力了，一个能跟着球跑10分钟的5岁幼童长大后，一定是一个会按时做功课的六年级学生。</li>\n<li>当消费者遭遇到人生的重大事件时，他们的消费习惯更容易发生改变。例如，当一个人结婚的时候，他可能会开始购买一种新的咖啡。当他们迁居到新的住所后，可能倾向于购买不同种类的麦片。当他们离婚的时候，很可能会开始购买一种不同牌子的啤酒。</li>\n<li>那么，对于大多数人来说，生活中最大的变化是什么呢？什么样的变化会带来最强的干扰，领消费者最容易被市场营销者左右呢？答案就是生孩子。对于大多数的客户来说，没有什么事情比新生儿的到来使生活产出更大的改变了。因此，与成年人生活的其他任何阶段相比，初为父母者的购物习惯都更为灵活易变。</li>\n<li>改变习惯的方法：<ul>\n<li>找出惯常行为</li>\n<li>用各种奖赏进行实验</li>\n<li>将暗示隔离出来</li>\n<li>制定计划</li>\n</ul>\n</li>\n<li>几乎所有的习惯性暗示都可以归为以下五大类中的一类：<ul>\n<li>地点</li>\n<li>时间</li>\n<li>情绪状态</li>\n<li>其他人</li>\n<li>之前紧挨着的动作</li>\n</ul>\n</li>\n</ul>\n"},{"title":"《习惯的力量》读后感","date":"2018-12-26T12:39:32.000Z","_content":"\n## 读后感\n\n翻过几页之后，我开始记起来这本书以前其实看过，但并没有留下什么印象，所以也没有太多收获，一来是当时的心境并没有对习惯产生足够的重视，二来也没有关注到里面真正重要的部分，没有对其进行总结和实践，把它遗忘在记忆的某个角落，想来真是遗憾至极。所谓亡羊补牢，为时不晚，现在把它补回来也未尝不可。\n\n作者在书中充分的说明了习惯的必要性和重要性，也说明了习惯存在的科学依据，让我开始用新的视角来审视自己的生活，为很多事情的发生找到了原因，比如为什么总是习惯在七点半左右去健身房，而一旦过了八点，去健身房的几率就会大大降低。又比如为什么不去健身房的晚上更容易选择玩游戏而不是看书。也为之后变成更好的自己找到了确实可行的方法论。\n\n习惯确实是一个有意思的东西，想想自己身上的习惯，大的习惯如健身、阅读、写博客，小习惯如转手腕等等，都是在不需要做过多决策的情况下自发进行的行为，日常生活中的种种选择大多数是由习惯决定的，而并非深思熟虑的结果，比如中午吃什么，晚上吃什么，周末怎么过，正是这些习惯在慢慢塑造着今天的我。\n\n以前看一些奇奇怪怪的鸡汤，说什么性格决定习惯，习惯决定成败之类的。现在看来，多少有些以偏概全，性格的养成大多取决于环境，跟小时候亲密接触的人关系最大，如父母或者老师。而习惯养成的目的是为了适应环境，更好的生活或者生存。两者虽然确实有较强联系，但并直接的因果关系，两者都是环境的产物。\n\n对于大脑而言，习惯本身没有好坏之分，都是一视同仁。一旦养成习惯，便会像刻入磁盘一样不可复原。习惯不会消失，但是却可以替代。习惯的三要素：暗示、惯常行为、奖赏。认识到这一点之后，对于习惯的敏感度便会提高，刻意发掘便能发现隐藏其中的暗示和奖赏，要想改变惯常行为，便需要找好替代品。比如玩游戏也许并不只是为了放松，也许更多的是为了社交，发觉这一点之后，多交朋友，与朋友定期的聚会也许可以帮助你戒除游戏。\n\n正如书中所言，我们并非要一次性调整好所有习惯，让生活直接进入自己的理想状态中，这样通常也是不现实的，所以只需要找到并养成关键习惯，便能牵一发而动全身，让其他习惯也跟着一起养成。比如说早起和健身，这两个习惯能让我更加自律，也能让我在白天有更多的精力去应付繁琐的工作，意志力也得到了锻炼，自律和意志力是养成习惯的两大重要要素，这能让其它习惯更轻松的养成。\n\n这本书让我受益匪浅，对自己有了更好的认知，对自己的生活又多了几分掌控感。未来的路上，会继续养成更多的好习惯，朝着自己的目标笃定前行。\n\n最后，推荐一款软件，habiticat，用游戏化的方式来进行习惯培养，还可以和朋友一起组队，比较有乐趣性，相信你一定会喜欢，有网页版，也有手机app，但不幸的是需要翻墙才能使用。（可以自建梯子，或者使用别人的机场）","source":"_posts/reading/the-power-of-habit.md","raw":"---\ntitle: 《习惯的力量》读后感\ntags: 读书笔记\ncategories: 阅读\ndate: 2018-12-26 20:39:32\n---\n\n## 读后感\n\n翻过几页之后，我开始记起来这本书以前其实看过，但并没有留下什么印象，所以也没有太多收获，一来是当时的心境并没有对习惯产生足够的重视，二来也没有关注到里面真正重要的部分，没有对其进行总结和实践，把它遗忘在记忆的某个角落，想来真是遗憾至极。所谓亡羊补牢，为时不晚，现在把它补回来也未尝不可。\n\n作者在书中充分的说明了习惯的必要性和重要性，也说明了习惯存在的科学依据，让我开始用新的视角来审视自己的生活，为很多事情的发生找到了原因，比如为什么总是习惯在七点半左右去健身房，而一旦过了八点，去健身房的几率就会大大降低。又比如为什么不去健身房的晚上更容易选择玩游戏而不是看书。也为之后变成更好的自己找到了确实可行的方法论。\n\n习惯确实是一个有意思的东西，想想自己身上的习惯，大的习惯如健身、阅读、写博客，小习惯如转手腕等等，都是在不需要做过多决策的情况下自发进行的行为，日常生活中的种种选择大多数是由习惯决定的，而并非深思熟虑的结果，比如中午吃什么，晚上吃什么，周末怎么过，正是这些习惯在慢慢塑造着今天的我。\n\n以前看一些奇奇怪怪的鸡汤，说什么性格决定习惯，习惯决定成败之类的。现在看来，多少有些以偏概全，性格的养成大多取决于环境，跟小时候亲密接触的人关系最大，如父母或者老师。而习惯养成的目的是为了适应环境，更好的生活或者生存。两者虽然确实有较强联系，但并直接的因果关系，两者都是环境的产物。\n\n对于大脑而言，习惯本身没有好坏之分，都是一视同仁。一旦养成习惯，便会像刻入磁盘一样不可复原。习惯不会消失，但是却可以替代。习惯的三要素：暗示、惯常行为、奖赏。认识到这一点之后，对于习惯的敏感度便会提高，刻意发掘便能发现隐藏其中的暗示和奖赏，要想改变惯常行为，便需要找好替代品。比如玩游戏也许并不只是为了放松，也许更多的是为了社交，发觉这一点之后，多交朋友，与朋友定期的聚会也许可以帮助你戒除游戏。\n\n正如书中所言，我们并非要一次性调整好所有习惯，让生活直接进入自己的理想状态中，这样通常也是不现实的，所以只需要找到并养成关键习惯，便能牵一发而动全身，让其他习惯也跟着一起养成。比如说早起和健身，这两个习惯能让我更加自律，也能让我在白天有更多的精力去应付繁琐的工作，意志力也得到了锻炼，自律和意志力是养成习惯的两大重要要素，这能让其它习惯更轻松的养成。\n\n这本书让我受益匪浅，对自己有了更好的认知，对自己的生活又多了几分掌控感。未来的路上，会继续养成更多的好习惯，朝着自己的目标笃定前行。\n\n最后，推荐一款软件，habiticat，用游戏化的方式来进行习惯培养，还可以和朋友一起组队，比较有乐趣性，相信你一定会喜欢，有网页版，也有手机app，但不幸的是需要翻墙才能使用。（可以自建梯子，或者使用别人的机场）","slug":"reading/the-power-of-habit","published":1,"updated":"2018-12-26T12:42:16.393Z","_id":"cjq562rlx00069c9kx5aicy3x","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"读后感\"><a href=\"#读后感\" class=\"headerlink\" title=\"读后感\"></a>读后感</h2><p>翻过几页之后，我开始记起来这本书以前其实看过，但并没有留下什么印象，所以也没有太多收获，一来是当时的心境并没有对习惯产生足够的重视，二来也没有关注到里面真正重要的部分，没有对其进行总结和实践，把它遗忘在记忆的某个角落，想来真是遗憾至极。所谓亡羊补牢，为时不晚，现在把它补回来也未尝不可。</p>\n<p>作者在书中充分的说明了习惯的必要性和重要性，也说明了习惯存在的科学依据，让我开始用新的视角来审视自己的生活，为很多事情的发生找到了原因，比如为什么总是习惯在七点半左右去健身房，而一旦过了八点，去健身房的几率就会大大降低。又比如为什么不去健身房的晚上更容易选择玩游戏而不是看书。也为之后变成更好的自己找到了确实可行的方法论。</p>\n<p>习惯确实是一个有意思的东西，想想自己身上的习惯，大的习惯如健身、阅读、写博客，小习惯如转手腕等等，都是在不需要做过多决策的情况下自发进行的行为，日常生活中的种种选择大多数是由习惯决定的，而并非深思熟虑的结果，比如中午吃什么，晚上吃什么，周末怎么过，正是这些习惯在慢慢塑造着今天的我。</p>\n<p>以前看一些奇奇怪怪的鸡汤，说什么性格决定习惯，习惯决定成败之类的。现在看来，多少有些以偏概全，性格的养成大多取决于环境，跟小时候亲密接触的人关系最大，如父母或者老师。而习惯养成的目的是为了适应环境，更好的生活或者生存。两者虽然确实有较强联系，但并直接的因果关系，两者都是环境的产物。</p>\n<p>对于大脑而言，习惯本身没有好坏之分，都是一视同仁。一旦养成习惯，便会像刻入磁盘一样不可复原。习惯不会消失，但是却可以替代。习惯的三要素：暗示、惯常行为、奖赏。认识到这一点之后，对于习惯的敏感度便会提高，刻意发掘便能发现隐藏其中的暗示和奖赏，要想改变惯常行为，便需要找好替代品。比如玩游戏也许并不只是为了放松，也许更多的是为了社交，发觉这一点之后，多交朋友，与朋友定期的聚会也许可以帮助你戒除游戏。</p>\n<p>正如书中所言，我们并非要一次性调整好所有习惯，让生活直接进入自己的理想状态中，这样通常也是不现实的，所以只需要找到并养成关键习惯，便能牵一发而动全身，让其他习惯也跟着一起养成。比如说早起和健身，这两个习惯能让我更加自律，也能让我在白天有更多的精力去应付繁琐的工作，意志力也得到了锻炼，自律和意志力是养成习惯的两大重要要素，这能让其它习惯更轻松的养成。</p>\n<p>这本书让我受益匪浅，对自己有了更好的认知，对自己的生活又多了几分掌控感。未来的路上，会继续养成更多的好习惯，朝着自己的目标笃定前行。</p>\n<p>最后，推荐一款软件，habiticat，用游戏化的方式来进行习惯培养，还可以和朋友一起组队，比较有乐趣性，相信你一定会喜欢，有网页版，也有手机app，但不幸的是需要翻墙才能使用。（可以自建梯子，或者使用别人的机场）</p>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<h2 id=\"读后感\"><a href=\"#读后感\" class=\"headerlink\" title=\"读后感\"></a>读后感</h2><p>翻过几页之后，我开始记起来这本书以前其实看过，但并没有留下什么印象，所以也没有太多收获，一来是当时的心境并没有对习惯产生足够的重视，二来也没有关注到里面真正重要的部分，没有对其进行总结和实践，把它遗忘在记忆的某个角落，想来真是遗憾至极。所谓亡羊补牢，为时不晚，现在把它补回来也未尝不可。</p>\n<p>作者在书中充分的说明了习惯的必要性和重要性，也说明了习惯存在的科学依据，让我开始用新的视角来审视自己的生活，为很多事情的发生找到了原因，比如为什么总是习惯在七点半左右去健身房，而一旦过了八点，去健身房的几率就会大大降低。又比如为什么不去健身房的晚上更容易选择玩游戏而不是看书。也为之后变成更好的自己找到了确实可行的方法论。</p>\n<p>习惯确实是一个有意思的东西，想想自己身上的习惯，大的习惯如健身、阅读、写博客，小习惯如转手腕等等，都是在不需要做过多决策的情况下自发进行的行为，日常生活中的种种选择大多数是由习惯决定的，而并非深思熟虑的结果，比如中午吃什么，晚上吃什么，周末怎么过，正是这些习惯在慢慢塑造着今天的我。</p>\n<p>以前看一些奇奇怪怪的鸡汤，说什么性格决定习惯，习惯决定成败之类的。现在看来，多少有些以偏概全，性格的养成大多取决于环境，跟小时候亲密接触的人关系最大，如父母或者老师。而习惯养成的目的是为了适应环境，更好的生活或者生存。两者虽然确实有较强联系，但并直接的因果关系，两者都是环境的产物。</p>\n<p>对于大脑而言，习惯本身没有好坏之分，都是一视同仁。一旦养成习惯，便会像刻入磁盘一样不可复原。习惯不会消失，但是却可以替代。习惯的三要素：暗示、惯常行为、奖赏。认识到这一点之后，对于习惯的敏感度便会提高，刻意发掘便能发现隐藏其中的暗示和奖赏，要想改变惯常行为，便需要找好替代品。比如玩游戏也许并不只是为了放松，也许更多的是为了社交，发觉这一点之后，多交朋友，与朋友定期的聚会也许可以帮助你戒除游戏。</p>\n<p>正如书中所言，我们并非要一次性调整好所有习惯，让生活直接进入自己的理想状态中，这样通常也是不现实的，所以只需要找到并养成关键习惯，便能牵一发而动全身，让其他习惯也跟着一起养成。比如说早起和健身，这两个习惯能让我更加自律，也能让我在白天有更多的精力去应付繁琐的工作，意志力也得到了锻炼，自律和意志力是养成习惯的两大重要要素，这能让其它习惯更轻松的养成。</p>\n<p>这本书让我受益匪浅，对自己有了更好的认知，对自己的生活又多了几分掌控感。未来的路上，会继续养成更多的好习惯，朝着自己的目标笃定前行。</p>\n<p>最后，推荐一款软件，habiticat，用游戏化的方式来进行习惯培养，还可以和朋友一起组队，比较有乐趣性，相信你一定会喜欢，有网页版，也有手机app，但不幸的是需要翻墙才能使用。（可以自建梯子，或者使用别人的机场）</p>\n"},{"title":"《Java多线程编程实战指南》（核心篇）—— 摘要","date":"2018-12-26T11:55:51.000Z","_content":"> 书籍作者：黄文海\n\n## 思维导图\n\n[全文思维导图](https://mubu.com/doc/lW2C-KYYy0)\n\n## 第一章 走进Java世界中的线程\n\n1. `进程`是程序向操作系统申请资源的基本单位，`线程`是进程中可独立执行的最小单位。\n2. 一个进程可以包含多个线程。\n3. 线程所要完成的计算被称为`任务`。\n4. 启动一个线程的实质是请求Java虚拟机运行相应的线程，而这个线程具体何时能够运行是由线程调度器决定的。\n5. Java虚拟机会为每个线程分配调用栈所需的内存空间。\n6. Java平台中的任意一段代码总是由确定的线程负责执行的，这个线程就相应的被称为这段代码的`执行线程`。可以通过调用Thread.currentThread()来获取这段代码的执行线程。\n7. 线程的属性：\n\n    | 属性               | 类型及用途                                                   | 注意事项                                                     |\n    | ------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n    | 编号（ID）         | Long。用于标识不同的线程。                                   | 不同线程虽然拥有的编号不同，但是某个编号的线程运行结束后，该编号可能被后续创建的线程使用，这种编号的唯一性只在Java虚拟机的一次运行中有效。 |\n    | 名称（name）       | String。用于区分不同线程。（面向人）默认值与线程编号有关，默认值格式为：“Thread-线程编号” | 为每一个线程设置一个简短而含义明确的名称有助于多线程程序的调试和问题定位。 |\n    | 线程类别（Daemon） | boolean。true表示相应的线程为守护线程，否则表示相应的线程为用户线程。 | 该属性必须在线程启动之前设置，否则setDaemon方法会抛出异常。负责一些关键任务的线程不适合设置为守护线程。 |\n    | 优先级（Priority） | int。该属性本质上是给线程调度器的提示，用于表示应用程序希望线程能够优先得以运行。Java定义了1~10的10个优先级，默认值为5。 | 一般使用默认优先级即可。                                     |\n\n8. `用户线程`会阻止Java虚拟机的正常停止，即一个Java虚拟机只有在其所有用户线程都运行结束的情况下才能正常停止。而`守护线程`则不会影响Java虚拟机的正常停止，守护线程通常用于执行一些重要性不是很高的任务，例如用于监视其他线程的运行情况。\n9. Thread的`join`方法的作用相当于执行该方法的线程和线程调度器说：“我得先暂停一下，等到另外一个线程运行结束后我才能继续干活。”\n10. `yield`静态方法的作用相当于执行该方法的线程对线程调度器说：“我现在不急，如果别人需要处理器资源极度话先给他用吧。当然，如果没有其他人要用，我也不介意继续占用。”\n11. `sleep`静态方法的作用相当于执行该方法的线程对线程调度器说：“我想小憩一会儿，过段时间再叫醒我继续干活吧。”\n12. 假设线程A所执行的代码创建了线程B，那么，习惯上我们称线程B为线程A的`子线程`，相应地线程A就被称为线程B的`父线程`。\n13. 在Java平台中，一个线程是否是守护线程默认取决于其父线程。\n14. 一个线程的优先级默认值为该线程的父线程的优先级。\n15. `Thread.State`是一个枚举类型，用来表示线程的当前状态。\n    1. `NEW`：一个已创建而未启动的线程处于该状态。 \n    2. `RUNNABLE`：该状态可以被看成一个复合状态。它包括两个子状态：READY和RUNNING。\n    3. `BLOCKED`：线程进行阻塞式操作或申请由其他线程正在独占的资源时，相应的线程会处于该状态。\n    4. `WAITING`：执行某些特定方法之后就会处于这种等待状态，包括：Object.wait(),Thread.join(),LockSupport.park(),Condition.await()。能够使相应线程从WAITING变更为RUNNABLE的相应方法包括：Objeck.notify()/notifyAll()、LockSupport.unpark()、Condition.signal()。\n    5. `TIMED WAITING`：限时等待状态。\n    6. `TERMINATED`：已执行结束的线程处于该状态。\n16. Java程序的线程转储包含的线程具体信息包括线程的属性、生命周期状态、线程的调用栈以及锁相关的信息。\n17. 多线程编程具有以下优势：\n    1. 提高系统的**吞吐率**。\n    2. 提高**响应性**。\n    3. 充分利用多核优势。\n    4. 最小化对系统资源的使用。\n    5. 简化程序的结构\n18. 多线程编程的风险：\n    1. 线程安全问题。\n    2. 线程活性问题。\n    3. 上下文切换。\n    4. 可靠性。\n\n## 第二章 多线程编程的目标与挑战\n\n1. 多线程编程的实质就是将任务的处理方式由串行改为`并发`，即实现并发化，以发挥并发的优势。\n2. `状态变量`：即类的实例变量、静态变量。\n3. `共享变量`：即可以被多个线程共同访问的变量。\n4. `竞态`是指计算的正确性依赖于相对时间顺序或者线程的交错。\n5. 竞态往往伴随着读取`脏数据`问题。\n6. 竞态的两种模式：`read-modify-write`（读-改-写）和`check-then-act`（检测后行动）。\n7. 如果一个类在单线程环境下能够运行正常，并且在多线程环境下，在其使用方不必为其做任何改变的情况下也能运作正常，那么我们就称其是`线程安全`的，相应地，我们称这个类具有线程安全性。\n8. 对于涉及共享变量访问的操作，若该操作从其执行线程以外的任意线程来看是不可分割的，那么该操作就是原子操作，相应地我们称该操作具有`原子性`。\n9. Java中有两种方式来实现原子性。一种是使用`锁`，另一种是利用处理器提供的专门`CAS`指令。\n10. 在多线程环境下，一个线程对某个变量进行更新之后，后续访问该变量的线程可能无法立刻读取到这个更新的结果，甚至永远也无法读取到这个更新的结果，这就是线程安全的另一个表现形式：`可见性`。\n11. 可见性问题可能来源于JIT编译器的优化，也可能来源于`寄存器`和`高速缓存`。\n12. 虽然一个处理器的高速缓存中的内容不能被另一个处理器直接读取，但是一个处理器可以通过`缓存一致性协议`来读取其他处理器的高速缓存的数据，并将读到的数据更新到该处理器的高速缓存中。\n13. `volatile`关键字所起到的一个作用就是，提示JIT编译器被修饰的变量可能被多个线程共享，以阻止JIT编译器做出可能导致程序运行不正常的优化。另外一个作用是读取一个volatile关键字修饰的变量会使相应的处理器执行刷新处理器缓存的动作，写一个volatile关键字修饰的变量会使相应的处理器执行冲刷处理器缓存的动作，从而保障可见性。\n14. 对于同一个共享变量而言，一个线程更新了该变量的值之后，其他线程能够读取到这个更新后的值，那么这个值就被称为该变量的相对新值。\n15. 父线程在启动子线程之前对共享变量的更新对于子线程来说是可见的。\n16. 一个线程终止后该线程对共享变量的更新对于调用该线程的`join`方法的线程而言是可见的。\n17. `有序性`指在什么情况下一个处理器上运行的一个线程所执行的内存访问操作在另一个处理器上运行的其他线程看起来是乱序的。\n18. `重排序`是对内存访问有关的操作所做的一种优化，它可以在不影响单线程程序正确性的情况下提升程序的性能。重排序主要包括：`指令重排序`和`存储子系统重排序`。\n19. 重排序可能导致线程安全问题。\n20. 重排序不是必然出现的。\n21. 处理器也可能执行指令重排序，这使得执行顺序和程序顺序不一致，处理器对指令进行重排序也被称为处理器的乱序执行。处理器乱序执行并不会对单线程程序的正确性产生影响。\n22. 主内存相对于处理器是一个慢速设备。为了避免其拖后腿，处理器并不是直接访问主内存，而是通过高速缓存访问主内存的。\n23. 内存重排序包括：LoadLoad重排序、StoreStore重排序、LoadStore重排序、StoreLoad重排序。\n24. 存在数据依赖关系的语句不会被重排序，只有不存在数据依赖关系的语句才可能会被重排序。\n25. 可见性是有序性的基础，有序性影响可见性。\n26. 一个线程由于其时间片用完或者其自身原因被迫或者主动暂停其运行时，另外一个线程可以被操作系统选中占用处理器开始或者继续其运行。这种一个线程暂停，另一个线程被选中开始或者继续运行的过程就叫做`上下文切换`。\n27. 进度信息就被称为上下文，它一般包括通用寄存器的内容和程序计数器的内容。\n28. 自发性上下文切换指线程由于其自身因素导致的切出。如执行以下指令：Thread.sleep()、Object.wait()、Thread.join()、LockSupport.park()。\n29. 非自发性上下文切换指线程由于线程调度器的原因被迫切出。\n30. 上下文切换的开销包括**直接开销**和**间接开销**。\n    1. 操作系统保存和恢复上下文所需的开销，这主要是处理器时间开销。\n    2. 线程调度器进行线程调度的开销。\n    3. 处理器高速缓存重新加载的开销。\n    4. 上下文切换也可能导致整个一级高速缓存中的内容被冲刷。\n31. 这些由于资源稀缺性或者程序自身的问题和缺陷导致线程一直处于非RUNNABLE状态，或者线程虽然处于RUNNABLE状态但是其要执行的任务却一直无法进展的现象就被称为`线程活性故障`。常见的活性故障包括：\n    1. 死锁\n    2. 锁死\n    3. 活锁\n    4. 饥饿\n32. 一次只能够被一个线程占用的资源被称为`排他性`资源。在一个线程占用一个排他性资源进行访问时，其他线程视图访问该资源的现象就被称为`资源争用`。\n33. 同一时间内，处于运行状态的线程数量越多，我们就称并发程度越高，简称`高并发`。\n34. 在多个线程申请同一个排他性资源的情况下，决定哪个线程会被授予该资源的独占权，即选择哪个申请者占用该资源的过程就是`资源的调度`。\n35. 如果资源的任何一个先申请者总是能够比任何一个后申请者先获得该资源的独占权，那么相应的资源调度策略就被称为是`公平`的，如果资源的后申请者可能比先申请者先获得资源的独占权，那么相应的资源调度策略就被称为`非公平`的。\n36. 在极端的情况下，非公平调度策略可能导致等待队列中的线程永远无法获得其所需的资源，即出现`饥饿`。\n37. 一般来说，非公平调度策略的**吞吐率高**，即单位时间内它可以为更多的申请者调配资源。其缺点是，从申请者个体的角度来看这些申请者获得相应资源的独占权所需要的**时间偏差**可能比较大。\n38. 非公平调度策略可能带来一个好处——减少上下文切换的次数。\n39. 多数线程占用资源的时间相当长的情况下不适合使用**非公平调度策略**。\n40. 非公平调度策略是我们多数情况下的**首选**调度策略。其优点是吞吐率较大；缺点是资源申请者申请资源所需的时间偏差可能较大，并可能导致饥饿。公平调度策略适合在资源的时间相对长或资源的平均申请时间间隔相对长的情况下，或者对资源申请所需的时间偏差有所要求的情况下使用。其优点是线程申请资源所需的时间偏差较小，并且不会导致线程饥饿现象；其缺点是吞吐率较小。\n\n## 第三章 Java线程同步机制\n\n1. `线程同步机制`是一套用于协调线程间的数据访问及活动的机制，该机制用用户保障线程安全以及实现这些线程的共同目标。\n\n2. 线程安全问题的产生前提是多个线程并发访问共享变量、共享资源。\n\n3. 锁的持有线程在其获得锁之后和释放锁之前这段时间内所执行的代码被称为`临界区`。\n\n4. Java平台中的锁包括`内部锁`和`显示锁`。\n\n5. 锁是通过`互斥`保障原子性的。\n\n6. 一个锁实例锁保护的共享数据的数量大小就被称为锁的`粒度`。\n\n7. 锁的开销包括锁的申请和释放锁产生的开销，以及锁可能导致的上下文切换的开销，这些开销主要是处理器时间。\n\n8. `锁泄漏`是指一个线程获得某个锁之后，由于程序的错误缺陷致使该锁一直无法被释放而导致其他线程一直无法获得该锁的现象。\n\n9. Java平台中的任何一个对象都有唯一的一个与之关联的锁。这种锁被称为`监视器`或者`内部锁`。内部锁是一种`排他锁`，它能保障原子性、可见性和有序性。\n\n10. Java虚拟机会为每个内部锁分配一个`入口集`，用于记录等待获得相应内部锁的线程。多个线程申请同一个锁的时候，只有一个申请者能够成为该锁的持有线程，而其他申请者的申请操作会失败。\n\n11. 公平锁保障锁调度的公平性往往是以增加了线程的暂停和唤醒的可能性，即增加了上下文切换为代价的。因此公平锁适合于锁被持有的时间相对长或者线程申请锁的平均间隔时间相对长的情形。总得来说使用公平锁的开销比使用非公平锁的开销要大，因此显式锁默认使用的是非公平调度策略。\n\n12. `读写锁`是一种改进型的排它锁，也被称为共享/排它锁。读锁是`共享`的，写锁是`排他`的。\n\n13. 读写锁适合于在以下条件同时得以满足的场景中使用：\n\n    1. 只读操作比写操作要频繁得多。\n    2. 读线程持有锁的时间比较长。\n\n14. `ReetrantReadWriteLock`所实现的读写锁是`个可重入锁`。ReetrantReadWriteLock支持写锁的`降级`，即一个线程持有读写锁的写锁的情况下可以继续获得相应的读锁。\n\n15. `ReetrantReadWriteLock`并不支持锁的升级。读线程如果要转而申请写锁，需要先释放读锁，然后申请相应的写锁。\n\n16. `内存屏障`是对一类仅针对内存读、写操作指令的跨处理器架构的比较底层的抽象。内存屏障是被插入到两个指令之间进行使用的，其作用是**禁止编译器、处理器重排序从而保障有序性**。\n\n17. 按照可见性保障来划分，`内存屏障`可分为`加载屏障`和`存储屏障`。加载屏障的作用是**刷新处理器缓存**，存储屏障的作用是**冲刷处理器缓存**。Java虚拟机会在MonitorExit对应的机器码指令之后插入一个`存储屏障`，这就保障了写线程在释放锁之前在临界区中对共享变量所做的更新对读线程是可同步的。相应的，Java虚拟机会在MonitorEnter对应的机器码指令之后临界区开始之前的地方插入一个`加载屏障`，这使得读线程的执行处理器能够将写线程对相应共享变量所做的更新从其他处理器同步到该处理器的高速缓存中。\n\n18. 按照有序性保障来划分，`内存屏障`可以分为`获取屏障`和`释放屏障`。获取屏障的使用方式是在一个读操作之后插入该内存屏障，其作用是**禁止该读操作与其后的任何读写操作之间进行重排序**，这相当于在进行后续操作之前先要获得相应共享数据的所有权。释放屏障的使用方式是在一个写操作之前插入该内存屏障，其作用是**禁止该写操作与其前面的任何读写操作之间进行重排序**。Java虚拟机会在MonitorEnter对应的机器码指令之后临界区开始之前的地方插入一个获取屏障，并在临界区结束之后MonitorExit对应的机器码指令之前的地方插入一个释放屏障。\n\n19. 临界区之外的语句可以被重排序到临界区之内，而临界区内的操作无法被重排序到临界区之外。\n\n    1. 临界区内的操作不允许被重排序到临界区之外。\n\n    2. 临界区内的操作之间允许被重排序。\n\n    3. 临界区外的操作之间可以被重排序。\n\n    4. 锁申请与锁释放操作不能被重排序。\n\n    5. 两个锁申请操作不能被重排序。\n\n    6. 两个锁释放操作不能被重排序。\n\n    7. 临界区外的操作可以被重排到临界区之内。\n\n20. `volatile`变量不会被编译器分配到寄存器进行存储，对volatile变量的读写操作都是内存访问操作。\n\n21. `volatile`关键字常被称为`轻量级锁`，其作用与锁的作用有相同的地方：保证可见性和有序性。原子性方面它仅能保证写volatile变量操作的原子性，但没有锁的排他性。其次，volatile关键字的使用不会引起上下文切换。\n\n22. 一个赋值操作：\n\n    ```java\n    volatile Map aMap = new HashMap();\n    ```\n\n    可以分解为如下伪代码所示的几个子操作：\n\n    ```java\n    objRef = allocate(HashMap.class); // 子操作1：分配对象所需的存储空间\n    invokeConstructor(objRef); // 子操作2：初始化objRef引用的对象\n    aMap = objRef; // 子操作3：将对象引用写入变量aMap\n    ```\n\n    虽然volatile关键字仅保障其中的子操作3是一个原子操作，但是由于子操作1与子操作2仅涉及局部变量而未涉及共享变量，因此对变量aMap的赋值操作仍然是一个原子操作。\n\n23. 对于volatile变量的写操作，Java虚拟机会在操作之前插入一个`释放屏障`，并在该操作之后插入一个`存储屏障`。\n\n24. 对于volatile变量的读操作，Java虚拟机会在操作之前插入一个`加载屏障`，并在该操作之后插入一个`获取屏障`。\n\n25. 写volatile变量操作与该操作之前的任何读、写操作**不会被重排序**。\n\n26. 读volatile变量操作与该操作之后的任何读、写操作**不会被重排序**。\n\n27. volatile关键字在可见性方面仅仅是保证读线程能够读取到共享变量的相对新值。对于引用型变量和数组变量，volatile关键字并不能保证读线程能够读取到对象相应的字段、元素的相对新值。\n\n28. volatile变量的读、写操作都不会导致上下文切换，因此volatile的开销比锁要小。\n\n29. volatile使用的典型场景：\n\n    1. 使用volatile变量作为`状态标志`。\n\n    2. 使用volatile保障`可见性`。\n\n    3. 使用volatile变量代替锁。\n\n    4. 使用volatile实现简易版的读写锁。\n\n30. volatile关键字并非锁的代替品，volatile关键字和锁各有其适用条件。前者更适合于多个线程共享一个状态变量，而后者更适合于多个线程共享一组状态变量。某些情形下，我们可以将多个线程共享的一组状态变量合并成一个对象，用一个volatile变量来引用该对象，从而使我们不必要使用锁。\n\n31. `原子变量类`是基于CAS实现的能够保障对共享变量进行`read-modify-write`更新操作的原子性和可见性的一组工具类。\n\n32. `对象发布`是指使对象能够被其作用域之外的线程访问。\n\n33. 常见的对象发布形式包括：\n\n    1. 将对象引用存储到public变量中。\n\n    2. 在非private方法中返回一个对象。\n\n    3. 创建内部类，使得当前对象能够被这个内部类使用。\n\n    4. 通过方法调用将对象传递给外部方法。\n\n34. `static`关键字在多线程环境下有其特殊的含义，它能够保证一个线程即使在未使用其他同步机制的情况下也总是可以读取到一个类的静态变量的初始值。\n\n35. 对于引用型静态变量，`static`关键字还能够保障一个线程读取到该变量的初始值时，这个值所指向的对象已经初始化完毕。\n\n36. `static` 关键字仅仅保障读线程能够读取到相应字段的初始值，而不是相对新值。\n\n37. 当一个对象被发布到其他线程的时候，该对象的所有`final`字段都是初始化完毕的。\n\n38. 对于引用型`final`字段，`final`关键字还进一步确保该字段所引用的对象已经初始化完毕，即这些线程读取该字段所引用的对象的各个字段时所读取到的值都是相应字段的初始值。\n\n39. 当一个对象的引用对其他线程可见的时候，这些线程所看到的该对象的final字段必然是初始化完毕的。final关键字的作用仅是这种有序性的保障，它并不能保障包含final字段的对象的引用自身对其他线程的可见性。\n\n40. `安全发布`就是指对象以一种线程安全的方式被发布。\n\n41. 当一个对象的发布出现我们不期望的结果或者对象发布本身不是我们所期望的时候，我们就称该对象`逸出`。\n\n42. 对象逸出包括：\n\n    1. 在构造函器中将this赋值给一个共享变量。\n\n    2. 在构造器中将this作为方法参数传递给其他方法。\n\n    3. 在构造器中启动基于匿名类的线程。\n\n43. 一个对象在其初始化过程中没有出现this逸出，我们就称该对象为正确创建的对象。\n\n44. 实现对象的安全发布，通常可以依照以下顺序选择适用且开销最小的线程同步机制。\n\n    1. 使用staic关键字引用该对象的变量。\n\n    2. 使用final关键字修饰引用该对象的变量。\n\n    3. 使用volatile关键字修饰引用该对象的变量。\n\n    4. 使用AtomicReference来引用该对象。\n\n    5. 对访问该对象的代码进行加锁。\n\n## 第四章 牛刀小试：玩转线程\n\n1. 多线程编程中分而治之的使用主要有两种方式：**基于数据的分割**和**基于任务的分割**。\n\n2. 基于数据的分割的结果是产生多个`同质工作者线程`，即任务处理逻辑相同的线程。需要考虑如下因素：\n\n   1. 工作者线程数量的合理设置问题。\n\n   2. 工作者线程的异常处理问题。\n\n   3. 原始输入规模未知问题。\n\n   4. 程序的复杂性增加的问题。\n\n3. 为了提高任务的执行效率，我们可能使用多个线程去共同完成一个任务的执行。这就是基于任务的分割，其基本思想就是将任务按照一定的规则分解成若干子任务，并使用专门的工作者线程去执行这些子任务，从而实现任务的并发执行。\n\n4. 线程所执行的任务按照 其消耗的主要资源可划分为`CPU密集型`任务和`IO密集型`任务。\n\n5. CPU密集型任务执行过程中消耗的主要资源是CPU时间，CPU密集型任务的一个典型例子是加密和解密；IO密集型任务执行过程中消耗的主要资源是IO资源，典型的IO密集型任务就包括文件读写、网络读写等。\n\n6. 基于任务的分割结果是产生多个相互协作的`异质工作者线程`。\n\n7. `Amdahl’s 定律`描述了线程数与多线程程序相对于单线程程序的提速之间的关系。\n   $$\n   S_{max} = \\frac{1}{P + \\frac{1 - P}{N}}\n   $$\n   其中，N为处理器数量，程序中必须串行化的部分耗时占程序全部耗时的比率为P。\n\n8. 为使多线程程序能够获得较大的提速，我们**应该从算法入手，减少程序中必须串行的部分，而不是寄希望于增加线程数**。\n\n9. 线程数设置得过少可能导致无法充分利用处理器资源；而线程数设置得过大则又可能导致过多的上下文切换，从而反倒降低了系统的性能。\n\n10. 线程数的合理值可以根据以下规则设置：\n\n    1. 对于CPU密集型线程，考虑到这类线程执行任务时消耗的主要是处理器资源，我们可以将这类线程的线程数设置为$N_{cpu} $个。因为CPU密集型线程也可能由于某些原因（比如缺页中断）而被切出，此时为了避免处理器资源的浪费，我们也可以为这类线程设置一个额外的线程，即将线程数设置为$N_{cpu}  + 1$\n\n    2. 对于IO密集型线程，考虑到IO操作可能导致上下文切换，为这样的线程设置过多的线程会导致过多的额外系统开销。因此如果一个这样的工作者线程就可以满足我们的要求，那么就不要设置更多的线程数。如果一个工作者线程仍然不够用，那么我们可以考虑将这类线程的数量设置为$2 * N_{cpu} $\n\n11. **挖掘出程序中可并发点**是实现多线程编程的目标——并发计算的前提。\n\n12. 实现并发化的策略包括基于数据的分割策略和基于任务的分割策略。\n\n## 第五章 线程间协作\n\n1. 一个线程因其执行目标动作所需的保护条件未满足而被暂停的过程被称为`等待`。\n\n2. 一个线程更新了系统的状态，使得其他线程所需的保护条件得以满足的时候唤醒那些被暂停的线程的过程就被称为`通知`。\n\n3. 由于一个线程只有在持有一个对象的内部所的情况下才能够调用该对象的wait方法，因此Object.wait()调用总是放在相应对象所引导的临界区之中。\n\n4. 等待线程对保护条件的判断、Object.wait()的执行以及目标动作的执行必须放在同一个对象所引导的临界区之中。\n\n5. `Object.wait()`暂停当前线程时释放的锁只是与该wait方法所属对象的内部锁。当前线程所持有的其他内部锁、显示锁并不会因此而被释放。\n\n6. `Object.notify()`的执行线程持有的相应对象的内部锁只有在Object.notify()调用所在的临界区代码执行结束后才会被释放，而Object.notify()本身并不会将这个内部锁释放。因此，为了 使等待线程在其被唤醒之后能够尽快再次获得相应的内部锁，我们要尽可能地将Object.notify()调用放在靠近临界区结束的地方。\n\n7. `等待线程`和`通知线程`是同步在同一对象之上的两种线程。\n\n8. Java虚拟机会为每个对象维护一个`入口集`用于存储申请该对象内部锁的线程。Java虚拟机还会为每个对象维护一个被称为`等待集`的队列，该队列用于存储该对象上的等待线程。Object.wait()将当前线程暂停并释放相应的内部锁的同时会将当前线程存入该方法所属对象的等待集中。\n\n9. wait/notify的开销及问题\n\n   1. 过早唤醒问题\n\n   2. 信号丢失问题\n\n   3. 欺骗性唤醒问题\n\n   4. 上下文切换问题\n\n10. 只有在有证据表明使用`Object.notify()`足够的情况下才使用`Object.notify()`，只有在下列条件全部满足的情况下才能够用于替代`notifyAll`方法：\n\n    1. 一次通知仅需要唤醒至多一个线程。\n\n    2. 相应对象的等待集中仅包含同质等待线程。\n\n11. `join(long)`允许我们指定一个超时时间。如果目标线程没有在指定的时间内终止，那么当前线程也会继续运行。`join(long)`实际上就是使用了`wait/notify`来实现的。\n\n12. Java虚拟机会在目标线程的run方法运行结束后执行该线程的`notifyAll`方法来通知所有的等待线程。\n\n13. `Condition`接口可作为`wait/notify`的替代品来实现等待/通知，它为解决过早唤醒问题提供了支持，并解决了`Object.wait(long)`不能区分其返回是否是由等待超时而导致的问题。\n\n14. `Condition.await()/signal()`也要求其执行线程持有创建该Condition实例的显示锁。Condition实例也被称为条件变量或者条件队列。每个Condition实例内部都维护了一个用于存储等待线程的队列。\n\n15. `Condition`接口本身只是对解决过早唤醒问题提供了支持。要真正解决过早唤醒问题，我们需要通过应用代码维护保护条件与条件变量的await方法来实现其等待，并使通知线程在更新了相关共享变量之后，仅调用与这些共享变量有关的保护条件所对应的条件变量的`signal/signalAll`方法来实现通知。\n\n16. `Condition.awaitUntil(Date deadline)`可以用于实现带超时时间限制的等待，并且该方法的返回值能够区分该方法调用是由于等待超时而返回还是由于其他线程执行了相应条件变量的`signal/signalAll`方法而返回。\n\n17. 等待线程因执行`Condition.await()/awaitUntil(Date)`而被暂停的同时，其持有的相应显示锁也会被释放，等待线程被唤醒之后得以继续运行时需要再次申请相应的显示锁，然后等待线程对`Condition.await()/awaitUntil(Date)`的调用才能返回。\n\n18. `CountDownLatch`可以用来实现一个线程等待其他线程完成一组特定的操作之后才继续运行。这组操作被称为`先决操作`。\n\n19. `CountDownLatch`内部计数器值达到0后其值就恒定不变，后续执行该CountDownLatch实例的await方法的任何一个线程都不会被暂停。为了避免等待线程永远被暂停，`CountDownLatch.countDown()`调用必须放在代码中总是可以被执行到的地方，例如`finally`块中。","source":"_posts/reading/java-multithread-programming-guide-in-action.md","raw":"---\ntitle: 《Java多线程编程实战指南》（核心篇）—— 摘要\ntags: \n - 摘要\n - Java\n - 多线程\ncategories: 阅读\ndate: 2018-12-26 19:55:51\n---\n> 书籍作者：黄文海\n\n## 思维导图\n\n[全文思维导图](https://mubu.com/doc/lW2C-KYYy0)\n\n## 第一章 走进Java世界中的线程\n\n1. `进程`是程序向操作系统申请资源的基本单位，`线程`是进程中可独立执行的最小单位。\n2. 一个进程可以包含多个线程。\n3. 线程所要完成的计算被称为`任务`。\n4. 启动一个线程的实质是请求Java虚拟机运行相应的线程，而这个线程具体何时能够运行是由线程调度器决定的。\n5. Java虚拟机会为每个线程分配调用栈所需的内存空间。\n6. Java平台中的任意一段代码总是由确定的线程负责执行的，这个线程就相应的被称为这段代码的`执行线程`。可以通过调用Thread.currentThread()来获取这段代码的执行线程。\n7. 线程的属性：\n\n    | 属性               | 类型及用途                                                   | 注意事项                                                     |\n    | ------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n    | 编号（ID）         | Long。用于标识不同的线程。                                   | 不同线程虽然拥有的编号不同，但是某个编号的线程运行结束后，该编号可能被后续创建的线程使用，这种编号的唯一性只在Java虚拟机的一次运行中有效。 |\n    | 名称（name）       | String。用于区分不同线程。（面向人）默认值与线程编号有关，默认值格式为：“Thread-线程编号” | 为每一个线程设置一个简短而含义明确的名称有助于多线程程序的调试和问题定位。 |\n    | 线程类别（Daemon） | boolean。true表示相应的线程为守护线程，否则表示相应的线程为用户线程。 | 该属性必须在线程启动之前设置，否则setDaemon方法会抛出异常。负责一些关键任务的线程不适合设置为守护线程。 |\n    | 优先级（Priority） | int。该属性本质上是给线程调度器的提示，用于表示应用程序希望线程能够优先得以运行。Java定义了1~10的10个优先级，默认值为5。 | 一般使用默认优先级即可。                                     |\n\n8. `用户线程`会阻止Java虚拟机的正常停止，即一个Java虚拟机只有在其所有用户线程都运行结束的情况下才能正常停止。而`守护线程`则不会影响Java虚拟机的正常停止，守护线程通常用于执行一些重要性不是很高的任务，例如用于监视其他线程的运行情况。\n9. Thread的`join`方法的作用相当于执行该方法的线程和线程调度器说：“我得先暂停一下，等到另外一个线程运行结束后我才能继续干活。”\n10. `yield`静态方法的作用相当于执行该方法的线程对线程调度器说：“我现在不急，如果别人需要处理器资源极度话先给他用吧。当然，如果没有其他人要用，我也不介意继续占用。”\n11. `sleep`静态方法的作用相当于执行该方法的线程对线程调度器说：“我想小憩一会儿，过段时间再叫醒我继续干活吧。”\n12. 假设线程A所执行的代码创建了线程B，那么，习惯上我们称线程B为线程A的`子线程`，相应地线程A就被称为线程B的`父线程`。\n13. 在Java平台中，一个线程是否是守护线程默认取决于其父线程。\n14. 一个线程的优先级默认值为该线程的父线程的优先级。\n15. `Thread.State`是一个枚举类型，用来表示线程的当前状态。\n    1. `NEW`：一个已创建而未启动的线程处于该状态。 \n    2. `RUNNABLE`：该状态可以被看成一个复合状态。它包括两个子状态：READY和RUNNING。\n    3. `BLOCKED`：线程进行阻塞式操作或申请由其他线程正在独占的资源时，相应的线程会处于该状态。\n    4. `WAITING`：执行某些特定方法之后就会处于这种等待状态，包括：Object.wait(),Thread.join(),LockSupport.park(),Condition.await()。能够使相应线程从WAITING变更为RUNNABLE的相应方法包括：Objeck.notify()/notifyAll()、LockSupport.unpark()、Condition.signal()。\n    5. `TIMED WAITING`：限时等待状态。\n    6. `TERMINATED`：已执行结束的线程处于该状态。\n16. Java程序的线程转储包含的线程具体信息包括线程的属性、生命周期状态、线程的调用栈以及锁相关的信息。\n17. 多线程编程具有以下优势：\n    1. 提高系统的**吞吐率**。\n    2. 提高**响应性**。\n    3. 充分利用多核优势。\n    4. 最小化对系统资源的使用。\n    5. 简化程序的结构\n18. 多线程编程的风险：\n    1. 线程安全问题。\n    2. 线程活性问题。\n    3. 上下文切换。\n    4. 可靠性。\n\n## 第二章 多线程编程的目标与挑战\n\n1. 多线程编程的实质就是将任务的处理方式由串行改为`并发`，即实现并发化，以发挥并发的优势。\n2. `状态变量`：即类的实例变量、静态变量。\n3. `共享变量`：即可以被多个线程共同访问的变量。\n4. `竞态`是指计算的正确性依赖于相对时间顺序或者线程的交错。\n5. 竞态往往伴随着读取`脏数据`问题。\n6. 竞态的两种模式：`read-modify-write`（读-改-写）和`check-then-act`（检测后行动）。\n7. 如果一个类在单线程环境下能够运行正常，并且在多线程环境下，在其使用方不必为其做任何改变的情况下也能运作正常，那么我们就称其是`线程安全`的，相应地，我们称这个类具有线程安全性。\n8. 对于涉及共享变量访问的操作，若该操作从其执行线程以外的任意线程来看是不可分割的，那么该操作就是原子操作，相应地我们称该操作具有`原子性`。\n9. Java中有两种方式来实现原子性。一种是使用`锁`，另一种是利用处理器提供的专门`CAS`指令。\n10. 在多线程环境下，一个线程对某个变量进行更新之后，后续访问该变量的线程可能无法立刻读取到这个更新的结果，甚至永远也无法读取到这个更新的结果，这就是线程安全的另一个表现形式：`可见性`。\n11. 可见性问题可能来源于JIT编译器的优化，也可能来源于`寄存器`和`高速缓存`。\n12. 虽然一个处理器的高速缓存中的内容不能被另一个处理器直接读取，但是一个处理器可以通过`缓存一致性协议`来读取其他处理器的高速缓存的数据，并将读到的数据更新到该处理器的高速缓存中。\n13. `volatile`关键字所起到的一个作用就是，提示JIT编译器被修饰的变量可能被多个线程共享，以阻止JIT编译器做出可能导致程序运行不正常的优化。另外一个作用是读取一个volatile关键字修饰的变量会使相应的处理器执行刷新处理器缓存的动作，写一个volatile关键字修饰的变量会使相应的处理器执行冲刷处理器缓存的动作，从而保障可见性。\n14. 对于同一个共享变量而言，一个线程更新了该变量的值之后，其他线程能够读取到这个更新后的值，那么这个值就被称为该变量的相对新值。\n15. 父线程在启动子线程之前对共享变量的更新对于子线程来说是可见的。\n16. 一个线程终止后该线程对共享变量的更新对于调用该线程的`join`方法的线程而言是可见的。\n17. `有序性`指在什么情况下一个处理器上运行的一个线程所执行的内存访问操作在另一个处理器上运行的其他线程看起来是乱序的。\n18. `重排序`是对内存访问有关的操作所做的一种优化，它可以在不影响单线程程序正确性的情况下提升程序的性能。重排序主要包括：`指令重排序`和`存储子系统重排序`。\n19. 重排序可能导致线程安全问题。\n20. 重排序不是必然出现的。\n21. 处理器也可能执行指令重排序，这使得执行顺序和程序顺序不一致，处理器对指令进行重排序也被称为处理器的乱序执行。处理器乱序执行并不会对单线程程序的正确性产生影响。\n22. 主内存相对于处理器是一个慢速设备。为了避免其拖后腿，处理器并不是直接访问主内存，而是通过高速缓存访问主内存的。\n23. 内存重排序包括：LoadLoad重排序、StoreStore重排序、LoadStore重排序、StoreLoad重排序。\n24. 存在数据依赖关系的语句不会被重排序，只有不存在数据依赖关系的语句才可能会被重排序。\n25. 可见性是有序性的基础，有序性影响可见性。\n26. 一个线程由于其时间片用完或者其自身原因被迫或者主动暂停其运行时，另外一个线程可以被操作系统选中占用处理器开始或者继续其运行。这种一个线程暂停，另一个线程被选中开始或者继续运行的过程就叫做`上下文切换`。\n27. 进度信息就被称为上下文，它一般包括通用寄存器的内容和程序计数器的内容。\n28. 自发性上下文切换指线程由于其自身因素导致的切出。如执行以下指令：Thread.sleep()、Object.wait()、Thread.join()、LockSupport.park()。\n29. 非自发性上下文切换指线程由于线程调度器的原因被迫切出。\n30. 上下文切换的开销包括**直接开销**和**间接开销**。\n    1. 操作系统保存和恢复上下文所需的开销，这主要是处理器时间开销。\n    2. 线程调度器进行线程调度的开销。\n    3. 处理器高速缓存重新加载的开销。\n    4. 上下文切换也可能导致整个一级高速缓存中的内容被冲刷。\n31. 这些由于资源稀缺性或者程序自身的问题和缺陷导致线程一直处于非RUNNABLE状态，或者线程虽然处于RUNNABLE状态但是其要执行的任务却一直无法进展的现象就被称为`线程活性故障`。常见的活性故障包括：\n    1. 死锁\n    2. 锁死\n    3. 活锁\n    4. 饥饿\n32. 一次只能够被一个线程占用的资源被称为`排他性`资源。在一个线程占用一个排他性资源进行访问时，其他线程视图访问该资源的现象就被称为`资源争用`。\n33. 同一时间内，处于运行状态的线程数量越多，我们就称并发程度越高，简称`高并发`。\n34. 在多个线程申请同一个排他性资源的情况下，决定哪个线程会被授予该资源的独占权，即选择哪个申请者占用该资源的过程就是`资源的调度`。\n35. 如果资源的任何一个先申请者总是能够比任何一个后申请者先获得该资源的独占权，那么相应的资源调度策略就被称为是`公平`的，如果资源的后申请者可能比先申请者先获得资源的独占权，那么相应的资源调度策略就被称为`非公平`的。\n36. 在极端的情况下，非公平调度策略可能导致等待队列中的线程永远无法获得其所需的资源，即出现`饥饿`。\n37. 一般来说，非公平调度策略的**吞吐率高**，即单位时间内它可以为更多的申请者调配资源。其缺点是，从申请者个体的角度来看这些申请者获得相应资源的独占权所需要的**时间偏差**可能比较大。\n38. 非公平调度策略可能带来一个好处——减少上下文切换的次数。\n39. 多数线程占用资源的时间相当长的情况下不适合使用**非公平调度策略**。\n40. 非公平调度策略是我们多数情况下的**首选**调度策略。其优点是吞吐率较大；缺点是资源申请者申请资源所需的时间偏差可能较大，并可能导致饥饿。公平调度策略适合在资源的时间相对长或资源的平均申请时间间隔相对长的情况下，或者对资源申请所需的时间偏差有所要求的情况下使用。其优点是线程申请资源所需的时间偏差较小，并且不会导致线程饥饿现象；其缺点是吞吐率较小。\n\n## 第三章 Java线程同步机制\n\n1. `线程同步机制`是一套用于协调线程间的数据访问及活动的机制，该机制用用户保障线程安全以及实现这些线程的共同目标。\n\n2. 线程安全问题的产生前提是多个线程并发访问共享变量、共享资源。\n\n3. 锁的持有线程在其获得锁之后和释放锁之前这段时间内所执行的代码被称为`临界区`。\n\n4. Java平台中的锁包括`内部锁`和`显示锁`。\n\n5. 锁是通过`互斥`保障原子性的。\n\n6. 一个锁实例锁保护的共享数据的数量大小就被称为锁的`粒度`。\n\n7. 锁的开销包括锁的申请和释放锁产生的开销，以及锁可能导致的上下文切换的开销，这些开销主要是处理器时间。\n\n8. `锁泄漏`是指一个线程获得某个锁之后，由于程序的错误缺陷致使该锁一直无法被释放而导致其他线程一直无法获得该锁的现象。\n\n9. Java平台中的任何一个对象都有唯一的一个与之关联的锁。这种锁被称为`监视器`或者`内部锁`。内部锁是一种`排他锁`，它能保障原子性、可见性和有序性。\n\n10. Java虚拟机会为每个内部锁分配一个`入口集`，用于记录等待获得相应内部锁的线程。多个线程申请同一个锁的时候，只有一个申请者能够成为该锁的持有线程，而其他申请者的申请操作会失败。\n\n11. 公平锁保障锁调度的公平性往往是以增加了线程的暂停和唤醒的可能性，即增加了上下文切换为代价的。因此公平锁适合于锁被持有的时间相对长或者线程申请锁的平均间隔时间相对长的情形。总得来说使用公平锁的开销比使用非公平锁的开销要大，因此显式锁默认使用的是非公平调度策略。\n\n12. `读写锁`是一种改进型的排它锁，也被称为共享/排它锁。读锁是`共享`的，写锁是`排他`的。\n\n13. 读写锁适合于在以下条件同时得以满足的场景中使用：\n\n    1. 只读操作比写操作要频繁得多。\n    2. 读线程持有锁的时间比较长。\n\n14. `ReetrantReadWriteLock`所实现的读写锁是`个可重入锁`。ReetrantReadWriteLock支持写锁的`降级`，即一个线程持有读写锁的写锁的情况下可以继续获得相应的读锁。\n\n15. `ReetrantReadWriteLock`并不支持锁的升级。读线程如果要转而申请写锁，需要先释放读锁，然后申请相应的写锁。\n\n16. `内存屏障`是对一类仅针对内存读、写操作指令的跨处理器架构的比较底层的抽象。内存屏障是被插入到两个指令之间进行使用的，其作用是**禁止编译器、处理器重排序从而保障有序性**。\n\n17. 按照可见性保障来划分，`内存屏障`可分为`加载屏障`和`存储屏障`。加载屏障的作用是**刷新处理器缓存**，存储屏障的作用是**冲刷处理器缓存**。Java虚拟机会在MonitorExit对应的机器码指令之后插入一个`存储屏障`，这就保障了写线程在释放锁之前在临界区中对共享变量所做的更新对读线程是可同步的。相应的，Java虚拟机会在MonitorEnter对应的机器码指令之后临界区开始之前的地方插入一个`加载屏障`，这使得读线程的执行处理器能够将写线程对相应共享变量所做的更新从其他处理器同步到该处理器的高速缓存中。\n\n18. 按照有序性保障来划分，`内存屏障`可以分为`获取屏障`和`释放屏障`。获取屏障的使用方式是在一个读操作之后插入该内存屏障，其作用是**禁止该读操作与其后的任何读写操作之间进行重排序**，这相当于在进行后续操作之前先要获得相应共享数据的所有权。释放屏障的使用方式是在一个写操作之前插入该内存屏障，其作用是**禁止该写操作与其前面的任何读写操作之间进行重排序**。Java虚拟机会在MonitorEnter对应的机器码指令之后临界区开始之前的地方插入一个获取屏障，并在临界区结束之后MonitorExit对应的机器码指令之前的地方插入一个释放屏障。\n\n19. 临界区之外的语句可以被重排序到临界区之内，而临界区内的操作无法被重排序到临界区之外。\n\n    1. 临界区内的操作不允许被重排序到临界区之外。\n\n    2. 临界区内的操作之间允许被重排序。\n\n    3. 临界区外的操作之间可以被重排序。\n\n    4. 锁申请与锁释放操作不能被重排序。\n\n    5. 两个锁申请操作不能被重排序。\n\n    6. 两个锁释放操作不能被重排序。\n\n    7. 临界区外的操作可以被重排到临界区之内。\n\n20. `volatile`变量不会被编译器分配到寄存器进行存储，对volatile变量的读写操作都是内存访问操作。\n\n21. `volatile`关键字常被称为`轻量级锁`，其作用与锁的作用有相同的地方：保证可见性和有序性。原子性方面它仅能保证写volatile变量操作的原子性，但没有锁的排他性。其次，volatile关键字的使用不会引起上下文切换。\n\n22. 一个赋值操作：\n\n    ```java\n    volatile Map aMap = new HashMap();\n    ```\n\n    可以分解为如下伪代码所示的几个子操作：\n\n    ```java\n    objRef = allocate(HashMap.class); // 子操作1：分配对象所需的存储空间\n    invokeConstructor(objRef); // 子操作2：初始化objRef引用的对象\n    aMap = objRef; // 子操作3：将对象引用写入变量aMap\n    ```\n\n    虽然volatile关键字仅保障其中的子操作3是一个原子操作，但是由于子操作1与子操作2仅涉及局部变量而未涉及共享变量，因此对变量aMap的赋值操作仍然是一个原子操作。\n\n23. 对于volatile变量的写操作，Java虚拟机会在操作之前插入一个`释放屏障`，并在该操作之后插入一个`存储屏障`。\n\n24. 对于volatile变量的读操作，Java虚拟机会在操作之前插入一个`加载屏障`，并在该操作之后插入一个`获取屏障`。\n\n25. 写volatile变量操作与该操作之前的任何读、写操作**不会被重排序**。\n\n26. 读volatile变量操作与该操作之后的任何读、写操作**不会被重排序**。\n\n27. volatile关键字在可见性方面仅仅是保证读线程能够读取到共享变量的相对新值。对于引用型变量和数组变量，volatile关键字并不能保证读线程能够读取到对象相应的字段、元素的相对新值。\n\n28. volatile变量的读、写操作都不会导致上下文切换，因此volatile的开销比锁要小。\n\n29. volatile使用的典型场景：\n\n    1. 使用volatile变量作为`状态标志`。\n\n    2. 使用volatile保障`可见性`。\n\n    3. 使用volatile变量代替锁。\n\n    4. 使用volatile实现简易版的读写锁。\n\n30. volatile关键字并非锁的代替品，volatile关键字和锁各有其适用条件。前者更适合于多个线程共享一个状态变量，而后者更适合于多个线程共享一组状态变量。某些情形下，我们可以将多个线程共享的一组状态变量合并成一个对象，用一个volatile变量来引用该对象，从而使我们不必要使用锁。\n\n31. `原子变量类`是基于CAS实现的能够保障对共享变量进行`read-modify-write`更新操作的原子性和可见性的一组工具类。\n\n32. `对象发布`是指使对象能够被其作用域之外的线程访问。\n\n33. 常见的对象发布形式包括：\n\n    1. 将对象引用存储到public变量中。\n\n    2. 在非private方法中返回一个对象。\n\n    3. 创建内部类，使得当前对象能够被这个内部类使用。\n\n    4. 通过方法调用将对象传递给外部方法。\n\n34. `static`关键字在多线程环境下有其特殊的含义，它能够保证一个线程即使在未使用其他同步机制的情况下也总是可以读取到一个类的静态变量的初始值。\n\n35. 对于引用型静态变量，`static`关键字还能够保障一个线程读取到该变量的初始值时，这个值所指向的对象已经初始化完毕。\n\n36. `static` 关键字仅仅保障读线程能够读取到相应字段的初始值，而不是相对新值。\n\n37. 当一个对象被发布到其他线程的时候，该对象的所有`final`字段都是初始化完毕的。\n\n38. 对于引用型`final`字段，`final`关键字还进一步确保该字段所引用的对象已经初始化完毕，即这些线程读取该字段所引用的对象的各个字段时所读取到的值都是相应字段的初始值。\n\n39. 当一个对象的引用对其他线程可见的时候，这些线程所看到的该对象的final字段必然是初始化完毕的。final关键字的作用仅是这种有序性的保障，它并不能保障包含final字段的对象的引用自身对其他线程的可见性。\n\n40. `安全发布`就是指对象以一种线程安全的方式被发布。\n\n41. 当一个对象的发布出现我们不期望的结果或者对象发布本身不是我们所期望的时候，我们就称该对象`逸出`。\n\n42. 对象逸出包括：\n\n    1. 在构造函器中将this赋值给一个共享变量。\n\n    2. 在构造器中将this作为方法参数传递给其他方法。\n\n    3. 在构造器中启动基于匿名类的线程。\n\n43. 一个对象在其初始化过程中没有出现this逸出，我们就称该对象为正确创建的对象。\n\n44. 实现对象的安全发布，通常可以依照以下顺序选择适用且开销最小的线程同步机制。\n\n    1. 使用staic关键字引用该对象的变量。\n\n    2. 使用final关键字修饰引用该对象的变量。\n\n    3. 使用volatile关键字修饰引用该对象的变量。\n\n    4. 使用AtomicReference来引用该对象。\n\n    5. 对访问该对象的代码进行加锁。\n\n## 第四章 牛刀小试：玩转线程\n\n1. 多线程编程中分而治之的使用主要有两种方式：**基于数据的分割**和**基于任务的分割**。\n\n2. 基于数据的分割的结果是产生多个`同质工作者线程`，即任务处理逻辑相同的线程。需要考虑如下因素：\n\n   1. 工作者线程数量的合理设置问题。\n\n   2. 工作者线程的异常处理问题。\n\n   3. 原始输入规模未知问题。\n\n   4. 程序的复杂性增加的问题。\n\n3. 为了提高任务的执行效率，我们可能使用多个线程去共同完成一个任务的执行。这就是基于任务的分割，其基本思想就是将任务按照一定的规则分解成若干子任务，并使用专门的工作者线程去执行这些子任务，从而实现任务的并发执行。\n\n4. 线程所执行的任务按照 其消耗的主要资源可划分为`CPU密集型`任务和`IO密集型`任务。\n\n5. CPU密集型任务执行过程中消耗的主要资源是CPU时间，CPU密集型任务的一个典型例子是加密和解密；IO密集型任务执行过程中消耗的主要资源是IO资源，典型的IO密集型任务就包括文件读写、网络读写等。\n\n6. 基于任务的分割结果是产生多个相互协作的`异质工作者线程`。\n\n7. `Amdahl’s 定律`描述了线程数与多线程程序相对于单线程程序的提速之间的关系。\n   $$\n   S_{max} = \\frac{1}{P + \\frac{1 - P}{N}}\n   $$\n   其中，N为处理器数量，程序中必须串行化的部分耗时占程序全部耗时的比率为P。\n\n8. 为使多线程程序能够获得较大的提速，我们**应该从算法入手，减少程序中必须串行的部分，而不是寄希望于增加线程数**。\n\n9. 线程数设置得过少可能导致无法充分利用处理器资源；而线程数设置得过大则又可能导致过多的上下文切换，从而反倒降低了系统的性能。\n\n10. 线程数的合理值可以根据以下规则设置：\n\n    1. 对于CPU密集型线程，考虑到这类线程执行任务时消耗的主要是处理器资源，我们可以将这类线程的线程数设置为$N_{cpu} $个。因为CPU密集型线程也可能由于某些原因（比如缺页中断）而被切出，此时为了避免处理器资源的浪费，我们也可以为这类线程设置一个额外的线程，即将线程数设置为$N_{cpu}  + 1$\n\n    2. 对于IO密集型线程，考虑到IO操作可能导致上下文切换，为这样的线程设置过多的线程会导致过多的额外系统开销。因此如果一个这样的工作者线程就可以满足我们的要求，那么就不要设置更多的线程数。如果一个工作者线程仍然不够用，那么我们可以考虑将这类线程的数量设置为$2 * N_{cpu} $\n\n11. **挖掘出程序中可并发点**是实现多线程编程的目标——并发计算的前提。\n\n12. 实现并发化的策略包括基于数据的分割策略和基于任务的分割策略。\n\n## 第五章 线程间协作\n\n1. 一个线程因其执行目标动作所需的保护条件未满足而被暂停的过程被称为`等待`。\n\n2. 一个线程更新了系统的状态，使得其他线程所需的保护条件得以满足的时候唤醒那些被暂停的线程的过程就被称为`通知`。\n\n3. 由于一个线程只有在持有一个对象的内部所的情况下才能够调用该对象的wait方法，因此Object.wait()调用总是放在相应对象所引导的临界区之中。\n\n4. 等待线程对保护条件的判断、Object.wait()的执行以及目标动作的执行必须放在同一个对象所引导的临界区之中。\n\n5. `Object.wait()`暂停当前线程时释放的锁只是与该wait方法所属对象的内部锁。当前线程所持有的其他内部锁、显示锁并不会因此而被释放。\n\n6. `Object.notify()`的执行线程持有的相应对象的内部锁只有在Object.notify()调用所在的临界区代码执行结束后才会被释放，而Object.notify()本身并不会将这个内部锁释放。因此，为了 使等待线程在其被唤醒之后能够尽快再次获得相应的内部锁，我们要尽可能地将Object.notify()调用放在靠近临界区结束的地方。\n\n7. `等待线程`和`通知线程`是同步在同一对象之上的两种线程。\n\n8. Java虚拟机会为每个对象维护一个`入口集`用于存储申请该对象内部锁的线程。Java虚拟机还会为每个对象维护一个被称为`等待集`的队列，该队列用于存储该对象上的等待线程。Object.wait()将当前线程暂停并释放相应的内部锁的同时会将当前线程存入该方法所属对象的等待集中。\n\n9. wait/notify的开销及问题\n\n   1. 过早唤醒问题\n\n   2. 信号丢失问题\n\n   3. 欺骗性唤醒问题\n\n   4. 上下文切换问题\n\n10. 只有在有证据表明使用`Object.notify()`足够的情况下才使用`Object.notify()`，只有在下列条件全部满足的情况下才能够用于替代`notifyAll`方法：\n\n    1. 一次通知仅需要唤醒至多一个线程。\n\n    2. 相应对象的等待集中仅包含同质等待线程。\n\n11. `join(long)`允许我们指定一个超时时间。如果目标线程没有在指定的时间内终止，那么当前线程也会继续运行。`join(long)`实际上就是使用了`wait/notify`来实现的。\n\n12. Java虚拟机会在目标线程的run方法运行结束后执行该线程的`notifyAll`方法来通知所有的等待线程。\n\n13. `Condition`接口可作为`wait/notify`的替代品来实现等待/通知，它为解决过早唤醒问题提供了支持，并解决了`Object.wait(long)`不能区分其返回是否是由等待超时而导致的问题。\n\n14. `Condition.await()/signal()`也要求其执行线程持有创建该Condition实例的显示锁。Condition实例也被称为条件变量或者条件队列。每个Condition实例内部都维护了一个用于存储等待线程的队列。\n\n15. `Condition`接口本身只是对解决过早唤醒问题提供了支持。要真正解决过早唤醒问题，我们需要通过应用代码维护保护条件与条件变量的await方法来实现其等待，并使通知线程在更新了相关共享变量之后，仅调用与这些共享变量有关的保护条件所对应的条件变量的`signal/signalAll`方法来实现通知。\n\n16. `Condition.awaitUntil(Date deadline)`可以用于实现带超时时间限制的等待，并且该方法的返回值能够区分该方法调用是由于等待超时而返回还是由于其他线程执行了相应条件变量的`signal/signalAll`方法而返回。\n\n17. 等待线程因执行`Condition.await()/awaitUntil(Date)`而被暂停的同时，其持有的相应显示锁也会被释放，等待线程被唤醒之后得以继续运行时需要再次申请相应的显示锁，然后等待线程对`Condition.await()/awaitUntil(Date)`的调用才能返回。\n\n18. `CountDownLatch`可以用来实现一个线程等待其他线程完成一组特定的操作之后才继续运行。这组操作被称为`先决操作`。\n\n19. `CountDownLatch`内部计数器值达到0后其值就恒定不变，后续执行该CountDownLatch实例的await方法的任何一个线程都不会被暂停。为了避免等待线程永远被暂停，`CountDownLatch.countDown()`调用必须放在代码中总是可以被执行到的地方，例如`finally`块中。","slug":"reading/java-multithread-programming-guide-in-action","published":1,"updated":"2018-12-26T12:37:51.011Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq562rlz00099c9k9df6rh3z","content":"<blockquote>\n<p>书籍作者：黄文海</p>\n</blockquote>\n<h2 id=\"思维导图\"><a href=\"#思维导图\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h2><p><a href=\"https://mubu.com/doc/lW2C-KYYy0\" target=\"_blank\" rel=\"noopener\">全文思维导图</a></p>\n<h2 id=\"第一章-走进Java世界中的线程\"><a href=\"#第一章-走进Java世界中的线程\" class=\"headerlink\" title=\"第一章 走进Java世界中的线程\"></a>第一章 走进Java世界中的线程</h2><ol>\n<li><code>进程</code>是程序向操作系统申请资源的基本单位，<code>线程</code>是进程中可独立执行的最小单位。</li>\n<li>一个进程可以包含多个线程。</li>\n<li>线程所要完成的计算被称为<code>任务</code>。</li>\n<li>启动一个线程的实质是请求Java虚拟机运行相应的线程，而这个线程具体何时能够运行是由线程调度器决定的。</li>\n<li>Java虚拟机会为每个线程分配调用栈所需的内存空间。</li>\n<li>Java平台中的任意一段代码总是由确定的线程负责执行的，这个线程就相应的被称为这段代码的<code>执行线程</code>。可以通过调用Thread.currentThread()来获取这段代码的执行线程。</li>\n<li><p>线程的属性：</p>\n<p> | 属性               | 类型及用途                                                   | 注意事项                                                     |<br> | —————— | ———————————————————— | ———————————————————— |<br> | 编号（ID）         | Long。用于标识不同的线程。                                   | 不同线程虽然拥有的编号不同，但是某个编号的线程运行结束后，该编号可能被后续创建的线程使用，这种编号的唯一性只在Java虚拟机的一次运行中有效。 |<br> | 名称（name）       | String。用于区分不同线程。（面向人）默认值与线程编号有关，默认值格式为：“Thread-线程编号” | 为每一个线程设置一个简短而含义明确的名称有助于多线程程序的调试和问题定位。 |<br> | 线程类别（Daemon） | boolean。true表示相应的线程为守护线程，否则表示相应的线程为用户线程。 | 该属性必须在线程启动之前设置，否则setDaemon方法会抛出异常。负责一些关键任务的线程不适合设置为守护线程。 |<br> | 优先级（Priority） | int。该属性本质上是给线程调度器的提示，用于表示应用程序希望线程能够优先得以运行。Java定义了1~10的10个优先级，默认值为5。 | 一般使用默认优先级即可。                                     |</p>\n</li>\n<li><p><code>用户线程</code>会阻止Java虚拟机的正常停止，即一个Java虚拟机只有在其所有用户线程都运行结束的情况下才能正常停止。而<code>守护线程</code>则不会影响Java虚拟机的正常停止，守护线程通常用于执行一些重要性不是很高的任务，例如用于监视其他线程的运行情况。</p>\n</li>\n<li>Thread的<code>join</code>方法的作用相当于执行该方法的线程和线程调度器说：“我得先暂停一下，等到另外一个线程运行结束后我才能继续干活。”</li>\n<li><code>yield</code>静态方法的作用相当于执行该方法的线程对线程调度器说：“我现在不急，如果别人需要处理器资源极度话先给他用吧。当然，如果没有其他人要用，我也不介意继续占用。”</li>\n<li><code>sleep</code>静态方法的作用相当于执行该方法的线程对线程调度器说：“我想小憩一会儿，过段时间再叫醒我继续干活吧。”</li>\n<li>假设线程A所执行的代码创建了线程B，那么，习惯上我们称线程B为线程A的<code>子线程</code>，相应地线程A就被称为线程B的<code>父线程</code>。</li>\n<li>在Java平台中，一个线程是否是守护线程默认取决于其父线程。</li>\n<li>一个线程的优先级默认值为该线程的父线程的优先级。</li>\n<li><code>Thread.State</code>是一个枚举类型，用来表示线程的当前状态。<ol>\n<li><code>NEW</code>：一个已创建而未启动的线程处于该状态。 </li>\n<li><code>RUNNABLE</code>：该状态可以被看成一个复合状态。它包括两个子状态：READY和RUNNING。</li>\n<li><code>BLOCKED</code>：线程进行阻塞式操作或申请由其他线程正在独占的资源时，相应的线程会处于该状态。</li>\n<li><code>WAITING</code>：执行某些特定方法之后就会处于这种等待状态，包括：Object.wait(),Thread.join(),LockSupport.park(),Condition.await()。能够使相应线程从WAITING变更为RUNNABLE的相应方法包括：Objeck.notify()/notifyAll()、LockSupport.unpark()、Condition.signal()。</li>\n<li><code>TIMED WAITING</code>：限时等待状态。</li>\n<li><code>TERMINATED</code>：已执行结束的线程处于该状态。</li>\n</ol>\n</li>\n<li>Java程序的线程转储包含的线程具体信息包括线程的属性、生命周期状态、线程的调用栈以及锁相关的信息。</li>\n<li>多线程编程具有以下优势：<ol>\n<li>提高系统的<strong>吞吐率</strong>。</li>\n<li>提高<strong>响应性</strong>。</li>\n<li>充分利用多核优势。</li>\n<li>最小化对系统资源的使用。</li>\n<li>简化程序的结构</li>\n</ol>\n</li>\n<li>多线程编程的风险：<ol>\n<li>线程安全问题。</li>\n<li>线程活性问题。</li>\n<li>上下文切换。</li>\n<li>可靠性。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"第二章-多线程编程的目标与挑战\"><a href=\"#第二章-多线程编程的目标与挑战\" class=\"headerlink\" title=\"第二章 多线程编程的目标与挑战\"></a>第二章 多线程编程的目标与挑战</h2><ol>\n<li>多线程编程的实质就是将任务的处理方式由串行改为<code>并发</code>，即实现并发化，以发挥并发的优势。</li>\n<li><code>状态变量</code>：即类的实例变量、静态变量。</li>\n<li><code>共享变量</code>：即可以被多个线程共同访问的变量。</li>\n<li><code>竞态</code>是指计算的正确性依赖于相对时间顺序或者线程的交错。</li>\n<li>竞态往往伴随着读取<code>脏数据</code>问题。</li>\n<li>竞态的两种模式：<code>read-modify-write</code>（读-改-写）和<code>check-then-act</code>（检测后行动）。</li>\n<li>如果一个类在单线程环境下能够运行正常，并且在多线程环境下，在其使用方不必为其做任何改变的情况下也能运作正常，那么我们就称其是<code>线程安全</code>的，相应地，我们称这个类具有线程安全性。</li>\n<li>对于涉及共享变量访问的操作，若该操作从其执行线程以外的任意线程来看是不可分割的，那么该操作就是原子操作，相应地我们称该操作具有<code>原子性</code>。</li>\n<li>Java中有两种方式来实现原子性。一种是使用<code>锁</code>，另一种是利用处理器提供的专门<code>CAS</code>指令。</li>\n<li>在多线程环境下，一个线程对某个变量进行更新之后，后续访问该变量的线程可能无法立刻读取到这个更新的结果，甚至永远也无法读取到这个更新的结果，这就是线程安全的另一个表现形式：<code>可见性</code>。</li>\n<li>可见性问题可能来源于JIT编译器的优化，也可能来源于<code>寄存器</code>和<code>高速缓存</code>。</li>\n<li>虽然一个处理器的高速缓存中的内容不能被另一个处理器直接读取，但是一个处理器可以通过<code>缓存一致性协议</code>来读取其他处理器的高速缓存的数据，并将读到的数据更新到该处理器的高速缓存中。</li>\n<li><code>volatile</code>关键字所起到的一个作用就是，提示JIT编译器被修饰的变量可能被多个线程共享，以阻止JIT编译器做出可能导致程序运行不正常的优化。另外一个作用是读取一个volatile关键字修饰的变量会使相应的处理器执行刷新处理器缓存的动作，写一个volatile关键字修饰的变量会使相应的处理器执行冲刷处理器缓存的动作，从而保障可见性。</li>\n<li>对于同一个共享变量而言，一个线程更新了该变量的值之后，其他线程能够读取到这个更新后的值，那么这个值就被称为该变量的相对新值。</li>\n<li>父线程在启动子线程之前对共享变量的更新对于子线程来说是可见的。</li>\n<li>一个线程终止后该线程对共享变量的更新对于调用该线程的<code>join</code>方法的线程而言是可见的。</li>\n<li><code>有序性</code>指在什么情况下一个处理器上运行的一个线程所执行的内存访问操作在另一个处理器上运行的其他线程看起来是乱序的。</li>\n<li><code>重排序</code>是对内存访问有关的操作所做的一种优化，它可以在不影响单线程程序正确性的情况下提升程序的性能。重排序主要包括：<code>指令重排序</code>和<code>存储子系统重排序</code>。</li>\n<li>重排序可能导致线程安全问题。</li>\n<li>重排序不是必然出现的。</li>\n<li>处理器也可能执行指令重排序，这使得执行顺序和程序顺序不一致，处理器对指令进行重排序也被称为处理器的乱序执行。处理器乱序执行并不会对单线程程序的正确性产生影响。</li>\n<li>主内存相对于处理器是一个慢速设备。为了避免其拖后腿，处理器并不是直接访问主内存，而是通过高速缓存访问主内存的。</li>\n<li>内存重排序包括：LoadLoad重排序、StoreStore重排序、LoadStore重排序、StoreLoad重排序。</li>\n<li>存在数据依赖关系的语句不会被重排序，只有不存在数据依赖关系的语句才可能会被重排序。</li>\n<li>可见性是有序性的基础，有序性影响可见性。</li>\n<li>一个线程由于其时间片用完或者其自身原因被迫或者主动暂停其运行时，另外一个线程可以被操作系统选中占用处理器开始或者继续其运行。这种一个线程暂停，另一个线程被选中开始或者继续运行的过程就叫做<code>上下文切换</code>。</li>\n<li>进度信息就被称为上下文，它一般包括通用寄存器的内容和程序计数器的内容。</li>\n<li>自发性上下文切换指线程由于其自身因素导致的切出。如执行以下指令：Thread.sleep()、Object.wait()、Thread.join()、LockSupport.park()。</li>\n<li>非自发性上下文切换指线程由于线程调度器的原因被迫切出。</li>\n<li>上下文切换的开销包括<strong>直接开销</strong>和<strong>间接开销</strong>。<ol>\n<li>操作系统保存和恢复上下文所需的开销，这主要是处理器时间开销。</li>\n<li>线程调度器进行线程调度的开销。</li>\n<li>处理器高速缓存重新加载的开销。</li>\n<li>上下文切换也可能导致整个一级高速缓存中的内容被冲刷。</li>\n</ol>\n</li>\n<li>这些由于资源稀缺性或者程序自身的问题和缺陷导致线程一直处于非RUNNABLE状态，或者线程虽然处于RUNNABLE状态但是其要执行的任务却一直无法进展的现象就被称为<code>线程活性故障</code>。常见的活性故障包括：<ol>\n<li>死锁</li>\n<li>锁死</li>\n<li>活锁</li>\n<li>饥饿</li>\n</ol>\n</li>\n<li>一次只能够被一个线程占用的资源被称为<code>排他性</code>资源。在一个线程占用一个排他性资源进行访问时，其他线程视图访问该资源的现象就被称为<code>资源争用</code>。</li>\n<li>同一时间内，处于运行状态的线程数量越多，我们就称并发程度越高，简称<code>高并发</code>。</li>\n<li>在多个线程申请同一个排他性资源的情况下，决定哪个线程会被授予该资源的独占权，即选择哪个申请者占用该资源的过程就是<code>资源的调度</code>。</li>\n<li>如果资源的任何一个先申请者总是能够比任何一个后申请者先获得该资源的独占权，那么相应的资源调度策略就被称为是<code>公平</code>的，如果资源的后申请者可能比先申请者先获得资源的独占权，那么相应的资源调度策略就被称为<code>非公平</code>的。</li>\n<li>在极端的情况下，非公平调度策略可能导致等待队列中的线程永远无法获得其所需的资源，即出现<code>饥饿</code>。</li>\n<li>一般来说，非公平调度策略的<strong>吞吐率高</strong>，即单位时间内它可以为更多的申请者调配资源。其缺点是，从申请者个体的角度来看这些申请者获得相应资源的独占权所需要的<strong>时间偏差</strong>可能比较大。</li>\n<li>非公平调度策略可能带来一个好处——减少上下文切换的次数。</li>\n<li>多数线程占用资源的时间相当长的情况下不适合使用<strong>非公平调度策略</strong>。</li>\n<li>非公平调度策略是我们多数情况下的<strong>首选</strong>调度策略。其优点是吞吐率较大；缺点是资源申请者申请资源所需的时间偏差可能较大，并可能导致饥饿。公平调度策略适合在资源的时间相对长或资源的平均申请时间间隔相对长的情况下，或者对资源申请所需的时间偏差有所要求的情况下使用。其优点是线程申请资源所需的时间偏差较小，并且不会导致线程饥饿现象；其缺点是吞吐率较小。</li>\n</ol>\n<h2 id=\"第三章-Java线程同步机制\"><a href=\"#第三章-Java线程同步机制\" class=\"headerlink\" title=\"第三章 Java线程同步机制\"></a>第三章 Java线程同步机制</h2><ol>\n<li><p><code>线程同步机制</code>是一套用于协调线程间的数据访问及活动的机制，该机制用用户保障线程安全以及实现这些线程的共同目标。</p>\n</li>\n<li><p>线程安全问题的产生前提是多个线程并发访问共享变量、共享资源。</p>\n</li>\n<li><p>锁的持有线程在其获得锁之后和释放锁之前这段时间内所执行的代码被称为<code>临界区</code>。</p>\n</li>\n<li><p>Java平台中的锁包括<code>内部锁</code>和<code>显示锁</code>。</p>\n</li>\n<li><p>锁是通过<code>互斥</code>保障原子性的。</p>\n</li>\n<li><p>一个锁实例锁保护的共享数据的数量大小就被称为锁的<code>粒度</code>。</p>\n</li>\n<li><p>锁的开销包括锁的申请和释放锁产生的开销，以及锁可能导致的上下文切换的开销，这些开销主要是处理器时间。</p>\n</li>\n<li><p><code>锁泄漏</code>是指一个线程获得某个锁之后，由于程序的错误缺陷致使该锁一直无法被释放而导致其他线程一直无法获得该锁的现象。</p>\n</li>\n<li><p>Java平台中的任何一个对象都有唯一的一个与之关联的锁。这种锁被称为<code>监视器</code>或者<code>内部锁</code>。内部锁是一种<code>排他锁</code>，它能保障原子性、可见性和有序性。</p>\n</li>\n<li><p>Java虚拟机会为每个内部锁分配一个<code>入口集</code>，用于记录等待获得相应内部锁的线程。多个线程申请同一个锁的时候，只有一个申请者能够成为该锁的持有线程，而其他申请者的申请操作会失败。</p>\n</li>\n<li><p>公平锁保障锁调度的公平性往往是以增加了线程的暂停和唤醒的可能性，即增加了上下文切换为代价的。因此公平锁适合于锁被持有的时间相对长或者线程申请锁的平均间隔时间相对长的情形。总得来说使用公平锁的开销比使用非公平锁的开销要大，因此显式锁默认使用的是非公平调度策略。</p>\n</li>\n<li><p><code>读写锁</code>是一种改进型的排它锁，也被称为共享/排它锁。读锁是<code>共享</code>的，写锁是<code>排他</code>的。</p>\n</li>\n<li><p>读写锁适合于在以下条件同时得以满足的场景中使用：</p>\n<ol>\n<li>只读操作比写操作要频繁得多。</li>\n<li>读线程持有锁的时间比较长。</li>\n</ol>\n</li>\n<li><p><code>ReetrantReadWriteLock</code>所实现的读写锁是<code>个可重入锁</code>。ReetrantReadWriteLock支持写锁的<code>降级</code>，即一个线程持有读写锁的写锁的情况下可以继续获得相应的读锁。</p>\n</li>\n<li><p><code>ReetrantReadWriteLock</code>并不支持锁的升级。读线程如果要转而申请写锁，需要先释放读锁，然后申请相应的写锁。</p>\n</li>\n<li><p><code>内存屏障</code>是对一类仅针对内存读、写操作指令的跨处理器架构的比较底层的抽象。内存屏障是被插入到两个指令之间进行使用的，其作用是<strong>禁止编译器、处理器重排序从而保障有序性</strong>。</p>\n</li>\n<li><p>按照可见性保障来划分，<code>内存屏障</code>可分为<code>加载屏障</code>和<code>存储屏障</code>。加载屏障的作用是<strong>刷新处理器缓存</strong>，存储屏障的作用是<strong>冲刷处理器缓存</strong>。Java虚拟机会在MonitorExit对应的机器码指令之后插入一个<code>存储屏障</code>，这就保障了写线程在释放锁之前在临界区中对共享变量所做的更新对读线程是可同步的。相应的，Java虚拟机会在MonitorEnter对应的机器码指令之后临界区开始之前的地方插入一个<code>加载屏障</code>，这使得读线程的执行处理器能够将写线程对相应共享变量所做的更新从其他处理器同步到该处理器的高速缓存中。</p>\n</li>\n<li><p>按照有序性保障来划分，<code>内存屏障</code>可以分为<code>获取屏障</code>和<code>释放屏障</code>。获取屏障的使用方式是在一个读操作之后插入该内存屏障，其作用是<strong>禁止该读操作与其后的任何读写操作之间进行重排序</strong>，这相当于在进行后续操作之前先要获得相应共享数据的所有权。释放屏障的使用方式是在一个写操作之前插入该内存屏障，其作用是<strong>禁止该写操作与其前面的任何读写操作之间进行重排序</strong>。Java虚拟机会在MonitorEnter对应的机器码指令之后临界区开始之前的地方插入一个获取屏障，并在临界区结束之后MonitorExit对应的机器码指令之前的地方插入一个释放屏障。</p>\n</li>\n<li><p>临界区之外的语句可以被重排序到临界区之内，而临界区内的操作无法被重排序到临界区之外。</p>\n<ol>\n<li><p>临界区内的操作不允许被重排序到临界区之外。</p>\n</li>\n<li><p>临界区内的操作之间允许被重排序。</p>\n</li>\n<li><p>临界区外的操作之间可以被重排序。</p>\n</li>\n<li><p>锁申请与锁释放操作不能被重排序。</p>\n</li>\n<li><p>两个锁申请操作不能被重排序。</p>\n</li>\n<li><p>两个锁释放操作不能被重排序。</p>\n</li>\n<li><p>临界区外的操作可以被重排到临界区之内。</p>\n</li>\n</ol>\n</li>\n<li><p><code>volatile</code>变量不会被编译器分配到寄存器进行存储，对volatile变量的读写操作都是内存访问操作。</p>\n</li>\n<li><p><code>volatile</code>关键字常被称为<code>轻量级锁</code>，其作用与锁的作用有相同的地方：保证可见性和有序性。原子性方面它仅能保证写volatile变量操作的原子性，但没有锁的排他性。其次，volatile关键字的使用不会引起上下文切换。</p>\n</li>\n<li><p>一个赋值操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">volatile</span> Map aMap = <span class=\"keyword\">new</span> HashMap();</span><br></pre></td></tr></table></figure>\n<p>可以分解为如下伪代码所示的几个子操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objRef = allocate(HashMap.class); <span class=\"comment\">// 子操作1：分配对象所需的存储空间</span></span><br><span class=\"line\">invokeConstructor(objRef); <span class=\"comment\">// 子操作2：初始化objRef引用的对象</span></span><br><span class=\"line\">aMap = objRef; <span class=\"comment\">// 子操作3：将对象引用写入变量aMap</span></span><br></pre></td></tr></table></figure>\n<p>虽然volatile关键字仅保障其中的子操作3是一个原子操作，但是由于子操作1与子操作2仅涉及局部变量而未涉及共享变量，因此对变量aMap的赋值操作仍然是一个原子操作。</p>\n</li>\n<li><p>对于volatile变量的写操作，Java虚拟机会在操作之前插入一个<code>释放屏障</code>，并在该操作之后插入一个<code>存储屏障</code>。</p>\n</li>\n<li><p>对于volatile变量的读操作，Java虚拟机会在操作之前插入一个<code>加载屏障</code>，并在该操作之后插入一个<code>获取屏障</code>。</p>\n</li>\n<li><p>写volatile变量操作与该操作之前的任何读、写操作<strong>不会被重排序</strong>。</p>\n</li>\n<li><p>读volatile变量操作与该操作之后的任何读、写操作<strong>不会被重排序</strong>。</p>\n</li>\n<li><p>volatile关键字在可见性方面仅仅是保证读线程能够读取到共享变量的相对新值。对于引用型变量和数组变量，volatile关键字并不能保证读线程能够读取到对象相应的字段、元素的相对新值。</p>\n</li>\n<li><p>volatile变量的读、写操作都不会导致上下文切换，因此volatile的开销比锁要小。</p>\n</li>\n<li><p>volatile使用的典型场景：</p>\n<ol>\n<li><p>使用volatile变量作为<code>状态标志</code>。</p>\n</li>\n<li><p>使用volatile保障<code>可见性</code>。</p>\n</li>\n<li><p>使用volatile变量代替锁。</p>\n</li>\n<li><p>使用volatile实现简易版的读写锁。</p>\n</li>\n</ol>\n</li>\n<li><p>volatile关键字并非锁的代替品，volatile关键字和锁各有其适用条件。前者更适合于多个线程共享一个状态变量，而后者更适合于多个线程共享一组状态变量。某些情形下，我们可以将多个线程共享的一组状态变量合并成一个对象，用一个volatile变量来引用该对象，从而使我们不必要使用锁。</p>\n</li>\n<li><p><code>原子变量类</code>是基于CAS实现的能够保障对共享变量进行<code>read-modify-write</code>更新操作的原子性和可见性的一组工具类。</p>\n</li>\n<li><p><code>对象发布</code>是指使对象能够被其作用域之外的线程访问。</p>\n</li>\n<li><p>常见的对象发布形式包括：</p>\n<ol>\n<li><p>将对象引用存储到public变量中。</p>\n</li>\n<li><p>在非private方法中返回一个对象。</p>\n</li>\n<li><p>创建内部类，使得当前对象能够被这个内部类使用。</p>\n</li>\n<li><p>通过方法调用将对象传递给外部方法。</p>\n</li>\n</ol>\n</li>\n<li><p><code>static</code>关键字在多线程环境下有其特殊的含义，它能够保证一个线程即使在未使用其他同步机制的情况下也总是可以读取到一个类的静态变量的初始值。</p>\n</li>\n<li><p>对于引用型静态变量，<code>static</code>关键字还能够保障一个线程读取到该变量的初始值时，这个值所指向的对象已经初始化完毕。</p>\n</li>\n<li><p><code>static</code> 关键字仅仅保障读线程能够读取到相应字段的初始值，而不是相对新值。</p>\n</li>\n<li><p>当一个对象被发布到其他线程的时候，该对象的所有<code>final</code>字段都是初始化完毕的。</p>\n</li>\n<li><p>对于引用型<code>final</code>字段，<code>final</code>关键字还进一步确保该字段所引用的对象已经初始化完毕，即这些线程读取该字段所引用的对象的各个字段时所读取到的值都是相应字段的初始值。</p>\n</li>\n<li><p>当一个对象的引用对其他线程可见的时候，这些线程所看到的该对象的final字段必然是初始化完毕的。final关键字的作用仅是这种有序性的保障，它并不能保障包含final字段的对象的引用自身对其他线程的可见性。</p>\n</li>\n<li><p><code>安全发布</code>就是指对象以一种线程安全的方式被发布。</p>\n</li>\n<li><p>当一个对象的发布出现我们不期望的结果或者对象发布本身不是我们所期望的时候，我们就称该对象<code>逸出</code>。</p>\n</li>\n<li><p>对象逸出包括：</p>\n<ol>\n<li><p>在构造函器中将this赋值给一个共享变量。</p>\n</li>\n<li><p>在构造器中将this作为方法参数传递给其他方法。</p>\n</li>\n<li><p>在构造器中启动基于匿名类的线程。</p>\n</li>\n</ol>\n</li>\n<li><p>一个对象在其初始化过程中没有出现this逸出，我们就称该对象为正确创建的对象。</p>\n</li>\n<li><p>实现对象的安全发布，通常可以依照以下顺序选择适用且开销最小的线程同步机制。</p>\n<ol>\n<li><p>使用staic关键字引用该对象的变量。</p>\n</li>\n<li><p>使用final关键字修饰引用该对象的变量。</p>\n</li>\n<li><p>使用volatile关键字修饰引用该对象的变量。</p>\n</li>\n<li><p>使用AtomicReference来引用该对象。</p>\n</li>\n<li><p>对访问该对象的代码进行加锁。</p>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"第四章-牛刀小试：玩转线程\"><a href=\"#第四章-牛刀小试：玩转线程\" class=\"headerlink\" title=\"第四章 牛刀小试：玩转线程\"></a>第四章 牛刀小试：玩转线程</h2><ol>\n<li><p>多线程编程中分而治之的使用主要有两种方式：<strong>基于数据的分割</strong>和<strong>基于任务的分割</strong>。</p>\n</li>\n<li><p>基于数据的分割的结果是产生多个<code>同质工作者线程</code>，即任务处理逻辑相同的线程。需要考虑如下因素：</p>\n<ol>\n<li><p>工作者线程数量的合理设置问题。</p>\n</li>\n<li><p>工作者线程的异常处理问题。</p>\n</li>\n<li><p>原始输入规模未知问题。</p>\n</li>\n<li><p>程序的复杂性增加的问题。</p>\n</li>\n</ol>\n</li>\n<li><p>为了提高任务的执行效率，我们可能使用多个线程去共同完成一个任务的执行。这就是基于任务的分割，其基本思想就是将任务按照一定的规则分解成若干子任务，并使用专门的工作者线程去执行这些子任务，从而实现任务的并发执行。</p>\n</li>\n<li><p>线程所执行的任务按照 其消耗的主要资源可划分为<code>CPU密集型</code>任务和<code>IO密集型</code>任务。</p>\n</li>\n<li><p>CPU密集型任务执行过程中消耗的主要资源是CPU时间，CPU密集型任务的一个典型例子是加密和解密；IO密集型任务执行过程中消耗的主要资源是IO资源，典型的IO密集型任务就包括文件读写、网络读写等。</p>\n</li>\n<li><p>基于任务的分割结果是产生多个相互协作的<code>异质工作者线程</code>。</p>\n</li>\n<li><p><code>Amdahl’s 定律</code>描述了线程数与多线程程序相对于单线程程序的提速之间的关系。<br>$$<br>S_{max} = \\frac{1}{P + \\frac{1 - P}{N}}<br>$$<br>其中，N为处理器数量，程序中必须串行化的部分耗时占程序全部耗时的比率为P。</p>\n</li>\n<li><p>为使多线程程序能够获得较大的提速，我们<strong>应该从算法入手，减少程序中必须串行的部分，而不是寄希望于增加线程数</strong>。</p>\n</li>\n<li><p>线程数设置得过少可能导致无法充分利用处理器资源；而线程数设置得过大则又可能导致过多的上下文切换，从而反倒降低了系统的性能。</p>\n</li>\n<li><p>线程数的合理值可以根据以下规则设置：</p>\n<ol>\n<li><p>对于CPU密集型线程，考虑到这类线程执行任务时消耗的主要是处理器资源，我们可以将这类线程的线程数设置为$N_{cpu} $个。因为CPU密集型线程也可能由于某些原因（比如缺页中断）而被切出，此时为了避免处理器资源的浪费，我们也可以为这类线程设置一个额外的线程，即将线程数设置为$N_{cpu}  + 1$</p>\n</li>\n<li><p>对于IO密集型线程，考虑到IO操作可能导致上下文切换，为这样的线程设置过多的线程会导致过多的额外系统开销。因此如果一个这样的工作者线程就可以满足我们的要求，那么就不要设置更多的线程数。如果一个工作者线程仍然不够用，那么我们可以考虑将这类线程的数量设置为$2 * N_{cpu} $</p>\n</li>\n</ol>\n</li>\n<li><p><strong>挖掘出程序中可并发点</strong>是实现多线程编程的目标——并发计算的前提。</p>\n</li>\n<li><p>实现并发化的策略包括基于数据的分割策略和基于任务的分割策略。</p>\n</li>\n</ol>\n<h2 id=\"第五章-线程间协作\"><a href=\"#第五章-线程间协作\" class=\"headerlink\" title=\"第五章 线程间协作\"></a>第五章 线程间协作</h2><ol>\n<li><p>一个线程因其执行目标动作所需的保护条件未满足而被暂停的过程被称为<code>等待</code>。</p>\n</li>\n<li><p>一个线程更新了系统的状态，使得其他线程所需的保护条件得以满足的时候唤醒那些被暂停的线程的过程就被称为<code>通知</code>。</p>\n</li>\n<li><p>由于一个线程只有在持有一个对象的内部所的情况下才能够调用该对象的wait方法，因此Object.wait()调用总是放在相应对象所引导的临界区之中。</p>\n</li>\n<li><p>等待线程对保护条件的判断、Object.wait()的执行以及目标动作的执行必须放在同一个对象所引导的临界区之中。</p>\n</li>\n<li><p><code>Object.wait()</code>暂停当前线程时释放的锁只是与该wait方法所属对象的内部锁。当前线程所持有的其他内部锁、显示锁并不会因此而被释放。</p>\n</li>\n<li><p><code>Object.notify()</code>的执行线程持有的相应对象的内部锁只有在Object.notify()调用所在的临界区代码执行结束后才会被释放，而Object.notify()本身并不会将这个内部锁释放。因此，为了 使等待线程在其被唤醒之后能够尽快再次获得相应的内部锁，我们要尽可能地将Object.notify()调用放在靠近临界区结束的地方。</p>\n</li>\n<li><p><code>等待线程</code>和<code>通知线程</code>是同步在同一对象之上的两种线程。</p>\n</li>\n<li><p>Java虚拟机会为每个对象维护一个<code>入口集</code>用于存储申请该对象内部锁的线程。Java虚拟机还会为每个对象维护一个被称为<code>等待集</code>的队列，该队列用于存储该对象上的等待线程。Object.wait()将当前线程暂停并释放相应的内部锁的同时会将当前线程存入该方法所属对象的等待集中。</p>\n</li>\n<li><p>wait/notify的开销及问题</p>\n<ol>\n<li><p>过早唤醒问题</p>\n</li>\n<li><p>信号丢失问题</p>\n</li>\n<li><p>欺骗性唤醒问题</p>\n</li>\n<li><p>上下文切换问题</p>\n</li>\n</ol>\n</li>\n<li><p>只有在有证据表明使用<code>Object.notify()</code>足够的情况下才使用<code>Object.notify()</code>，只有在下列条件全部满足的情况下才能够用于替代<code>notifyAll</code>方法：</p>\n<ol>\n<li><p>一次通知仅需要唤醒至多一个线程。</p>\n</li>\n<li><p>相应对象的等待集中仅包含同质等待线程。</p>\n</li>\n</ol>\n</li>\n<li><p><code>join(long)</code>允许我们指定一个超时时间。如果目标线程没有在指定的时间内终止，那么当前线程也会继续运行。<code>join(long)</code>实际上就是使用了<code>wait/notify</code>来实现的。</p>\n</li>\n<li><p>Java虚拟机会在目标线程的run方法运行结束后执行该线程的<code>notifyAll</code>方法来通知所有的等待线程。</p>\n</li>\n<li><p><code>Condition</code>接口可作为<code>wait/notify</code>的替代品来实现等待/通知，它为解决过早唤醒问题提供了支持，并解决了<code>Object.wait(long)</code>不能区分其返回是否是由等待超时而导致的问题。</p>\n</li>\n<li><p><code>Condition.await()/signal()</code>也要求其执行线程持有创建该Condition实例的显示锁。Condition实例也被称为条件变量或者条件队列。每个Condition实例内部都维护了一个用于存储等待线程的队列。</p>\n</li>\n<li><p><code>Condition</code>接口本身只是对解决过早唤醒问题提供了支持。要真正解决过早唤醒问题，我们需要通过应用代码维护保护条件与条件变量的await方法来实现其等待，并使通知线程在更新了相关共享变量之后，仅调用与这些共享变量有关的保护条件所对应的条件变量的<code>signal/signalAll</code>方法来实现通知。</p>\n</li>\n<li><p><code>Condition.awaitUntil(Date deadline)</code>可以用于实现带超时时间限制的等待，并且该方法的返回值能够区分该方法调用是由于等待超时而返回还是由于其他线程执行了相应条件变量的<code>signal/signalAll</code>方法而返回。</p>\n</li>\n<li><p>等待线程因执行<code>Condition.await()/awaitUntil(Date)</code>而被暂停的同时，其持有的相应显示锁也会被释放，等待线程被唤醒之后得以继续运行时需要再次申请相应的显示锁，然后等待线程对<code>Condition.await()/awaitUntil(Date)</code>的调用才能返回。</p>\n</li>\n<li><p><code>CountDownLatch</code>可以用来实现一个线程等待其他线程完成一组特定的操作之后才继续运行。这组操作被称为<code>先决操作</code>。</p>\n</li>\n<li><p><code>CountDownLatch</code>内部计数器值达到0后其值就恒定不变，后续执行该CountDownLatch实例的await方法的任何一个线程都不会被暂停。为了避免等待线程永远被暂停，<code>CountDownLatch.countDown()</code>调用必须放在代码中总是可以被执行到的地方，例如<code>finally</code>块中。</p>\n</li>\n</ol>\n","site":{"data":{"menu":{"Home":"/","Gallery":"/gallery/","Archives":"/archives/"}}},"excerpt":"","more":"<blockquote>\n<p>书籍作者：黄文海</p>\n</blockquote>\n<h2 id=\"思维导图\"><a href=\"#思维导图\" class=\"headerlink\" title=\"思维导图\"></a>思维导图</h2><p><a href=\"https://mubu.com/doc/lW2C-KYYy0\" target=\"_blank\" rel=\"noopener\">全文思维导图</a></p>\n<h2 id=\"第一章-走进Java世界中的线程\"><a href=\"#第一章-走进Java世界中的线程\" class=\"headerlink\" title=\"第一章 走进Java世界中的线程\"></a>第一章 走进Java世界中的线程</h2><ol>\n<li><code>进程</code>是程序向操作系统申请资源的基本单位，<code>线程</code>是进程中可独立执行的最小单位。</li>\n<li>一个进程可以包含多个线程。</li>\n<li>线程所要完成的计算被称为<code>任务</code>。</li>\n<li>启动一个线程的实质是请求Java虚拟机运行相应的线程，而这个线程具体何时能够运行是由线程调度器决定的。</li>\n<li>Java虚拟机会为每个线程分配调用栈所需的内存空间。</li>\n<li>Java平台中的任意一段代码总是由确定的线程负责执行的，这个线程就相应的被称为这段代码的<code>执行线程</code>。可以通过调用Thread.currentThread()来获取这段代码的执行线程。</li>\n<li><p>线程的属性：</p>\n<p> | 属性               | 类型及用途                                                   | 注意事项                                                     |<br> | —————— | ———————————————————— | ———————————————————— |<br> | 编号（ID）         | Long。用于标识不同的线程。                                   | 不同线程虽然拥有的编号不同，但是某个编号的线程运行结束后，该编号可能被后续创建的线程使用，这种编号的唯一性只在Java虚拟机的一次运行中有效。 |<br> | 名称（name）       | String。用于区分不同线程。（面向人）默认值与线程编号有关，默认值格式为：“Thread-线程编号” | 为每一个线程设置一个简短而含义明确的名称有助于多线程程序的调试和问题定位。 |<br> | 线程类别（Daemon） | boolean。true表示相应的线程为守护线程，否则表示相应的线程为用户线程。 | 该属性必须在线程启动之前设置，否则setDaemon方法会抛出异常。负责一些关键任务的线程不适合设置为守护线程。 |<br> | 优先级（Priority） | int。该属性本质上是给线程调度器的提示，用于表示应用程序希望线程能够优先得以运行。Java定义了1~10的10个优先级，默认值为5。 | 一般使用默认优先级即可。                                     |</p>\n</li>\n<li><p><code>用户线程</code>会阻止Java虚拟机的正常停止，即一个Java虚拟机只有在其所有用户线程都运行结束的情况下才能正常停止。而<code>守护线程</code>则不会影响Java虚拟机的正常停止，守护线程通常用于执行一些重要性不是很高的任务，例如用于监视其他线程的运行情况。</p>\n</li>\n<li>Thread的<code>join</code>方法的作用相当于执行该方法的线程和线程调度器说：“我得先暂停一下，等到另外一个线程运行结束后我才能继续干活。”</li>\n<li><code>yield</code>静态方法的作用相当于执行该方法的线程对线程调度器说：“我现在不急，如果别人需要处理器资源极度话先给他用吧。当然，如果没有其他人要用，我也不介意继续占用。”</li>\n<li><code>sleep</code>静态方法的作用相当于执行该方法的线程对线程调度器说：“我想小憩一会儿，过段时间再叫醒我继续干活吧。”</li>\n<li>假设线程A所执行的代码创建了线程B，那么，习惯上我们称线程B为线程A的<code>子线程</code>，相应地线程A就被称为线程B的<code>父线程</code>。</li>\n<li>在Java平台中，一个线程是否是守护线程默认取决于其父线程。</li>\n<li>一个线程的优先级默认值为该线程的父线程的优先级。</li>\n<li><code>Thread.State</code>是一个枚举类型，用来表示线程的当前状态。<ol>\n<li><code>NEW</code>：一个已创建而未启动的线程处于该状态。 </li>\n<li><code>RUNNABLE</code>：该状态可以被看成一个复合状态。它包括两个子状态：READY和RUNNING。</li>\n<li><code>BLOCKED</code>：线程进行阻塞式操作或申请由其他线程正在独占的资源时，相应的线程会处于该状态。</li>\n<li><code>WAITING</code>：执行某些特定方法之后就会处于这种等待状态，包括：Object.wait(),Thread.join(),LockSupport.park(),Condition.await()。能够使相应线程从WAITING变更为RUNNABLE的相应方法包括：Objeck.notify()/notifyAll()、LockSupport.unpark()、Condition.signal()。</li>\n<li><code>TIMED WAITING</code>：限时等待状态。</li>\n<li><code>TERMINATED</code>：已执行结束的线程处于该状态。</li>\n</ol>\n</li>\n<li>Java程序的线程转储包含的线程具体信息包括线程的属性、生命周期状态、线程的调用栈以及锁相关的信息。</li>\n<li>多线程编程具有以下优势：<ol>\n<li>提高系统的<strong>吞吐率</strong>。</li>\n<li>提高<strong>响应性</strong>。</li>\n<li>充分利用多核优势。</li>\n<li>最小化对系统资源的使用。</li>\n<li>简化程序的结构</li>\n</ol>\n</li>\n<li>多线程编程的风险：<ol>\n<li>线程安全问题。</li>\n<li>线程活性问题。</li>\n<li>上下文切换。</li>\n<li>可靠性。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"第二章-多线程编程的目标与挑战\"><a href=\"#第二章-多线程编程的目标与挑战\" class=\"headerlink\" title=\"第二章 多线程编程的目标与挑战\"></a>第二章 多线程编程的目标与挑战</h2><ol>\n<li>多线程编程的实质就是将任务的处理方式由串行改为<code>并发</code>，即实现并发化，以发挥并发的优势。</li>\n<li><code>状态变量</code>：即类的实例变量、静态变量。</li>\n<li><code>共享变量</code>：即可以被多个线程共同访问的变量。</li>\n<li><code>竞态</code>是指计算的正确性依赖于相对时间顺序或者线程的交错。</li>\n<li>竞态往往伴随着读取<code>脏数据</code>问题。</li>\n<li>竞态的两种模式：<code>read-modify-write</code>（读-改-写）和<code>check-then-act</code>（检测后行动）。</li>\n<li>如果一个类在单线程环境下能够运行正常，并且在多线程环境下，在其使用方不必为其做任何改变的情况下也能运作正常，那么我们就称其是<code>线程安全</code>的，相应地，我们称这个类具有线程安全性。</li>\n<li>对于涉及共享变量访问的操作，若该操作从其执行线程以外的任意线程来看是不可分割的，那么该操作就是原子操作，相应地我们称该操作具有<code>原子性</code>。</li>\n<li>Java中有两种方式来实现原子性。一种是使用<code>锁</code>，另一种是利用处理器提供的专门<code>CAS</code>指令。</li>\n<li>在多线程环境下，一个线程对某个变量进行更新之后，后续访问该变量的线程可能无法立刻读取到这个更新的结果，甚至永远也无法读取到这个更新的结果，这就是线程安全的另一个表现形式：<code>可见性</code>。</li>\n<li>可见性问题可能来源于JIT编译器的优化，也可能来源于<code>寄存器</code>和<code>高速缓存</code>。</li>\n<li>虽然一个处理器的高速缓存中的内容不能被另一个处理器直接读取，但是一个处理器可以通过<code>缓存一致性协议</code>来读取其他处理器的高速缓存的数据，并将读到的数据更新到该处理器的高速缓存中。</li>\n<li><code>volatile</code>关键字所起到的一个作用就是，提示JIT编译器被修饰的变量可能被多个线程共享，以阻止JIT编译器做出可能导致程序运行不正常的优化。另外一个作用是读取一个volatile关键字修饰的变量会使相应的处理器执行刷新处理器缓存的动作，写一个volatile关键字修饰的变量会使相应的处理器执行冲刷处理器缓存的动作，从而保障可见性。</li>\n<li>对于同一个共享变量而言，一个线程更新了该变量的值之后，其他线程能够读取到这个更新后的值，那么这个值就被称为该变量的相对新值。</li>\n<li>父线程在启动子线程之前对共享变量的更新对于子线程来说是可见的。</li>\n<li>一个线程终止后该线程对共享变量的更新对于调用该线程的<code>join</code>方法的线程而言是可见的。</li>\n<li><code>有序性</code>指在什么情况下一个处理器上运行的一个线程所执行的内存访问操作在另一个处理器上运行的其他线程看起来是乱序的。</li>\n<li><code>重排序</code>是对内存访问有关的操作所做的一种优化，它可以在不影响单线程程序正确性的情况下提升程序的性能。重排序主要包括：<code>指令重排序</code>和<code>存储子系统重排序</code>。</li>\n<li>重排序可能导致线程安全问题。</li>\n<li>重排序不是必然出现的。</li>\n<li>处理器也可能执行指令重排序，这使得执行顺序和程序顺序不一致，处理器对指令进行重排序也被称为处理器的乱序执行。处理器乱序执行并不会对单线程程序的正确性产生影响。</li>\n<li>主内存相对于处理器是一个慢速设备。为了避免其拖后腿，处理器并不是直接访问主内存，而是通过高速缓存访问主内存的。</li>\n<li>内存重排序包括：LoadLoad重排序、StoreStore重排序、LoadStore重排序、StoreLoad重排序。</li>\n<li>存在数据依赖关系的语句不会被重排序，只有不存在数据依赖关系的语句才可能会被重排序。</li>\n<li>可见性是有序性的基础，有序性影响可见性。</li>\n<li>一个线程由于其时间片用完或者其自身原因被迫或者主动暂停其运行时，另外一个线程可以被操作系统选中占用处理器开始或者继续其运行。这种一个线程暂停，另一个线程被选中开始或者继续运行的过程就叫做<code>上下文切换</code>。</li>\n<li>进度信息就被称为上下文，它一般包括通用寄存器的内容和程序计数器的内容。</li>\n<li>自发性上下文切换指线程由于其自身因素导致的切出。如执行以下指令：Thread.sleep()、Object.wait()、Thread.join()、LockSupport.park()。</li>\n<li>非自发性上下文切换指线程由于线程调度器的原因被迫切出。</li>\n<li>上下文切换的开销包括<strong>直接开销</strong>和<strong>间接开销</strong>。<ol>\n<li>操作系统保存和恢复上下文所需的开销，这主要是处理器时间开销。</li>\n<li>线程调度器进行线程调度的开销。</li>\n<li>处理器高速缓存重新加载的开销。</li>\n<li>上下文切换也可能导致整个一级高速缓存中的内容被冲刷。</li>\n</ol>\n</li>\n<li>这些由于资源稀缺性或者程序自身的问题和缺陷导致线程一直处于非RUNNABLE状态，或者线程虽然处于RUNNABLE状态但是其要执行的任务却一直无法进展的现象就被称为<code>线程活性故障</code>。常见的活性故障包括：<ol>\n<li>死锁</li>\n<li>锁死</li>\n<li>活锁</li>\n<li>饥饿</li>\n</ol>\n</li>\n<li>一次只能够被一个线程占用的资源被称为<code>排他性</code>资源。在一个线程占用一个排他性资源进行访问时，其他线程视图访问该资源的现象就被称为<code>资源争用</code>。</li>\n<li>同一时间内，处于运行状态的线程数量越多，我们就称并发程度越高，简称<code>高并发</code>。</li>\n<li>在多个线程申请同一个排他性资源的情况下，决定哪个线程会被授予该资源的独占权，即选择哪个申请者占用该资源的过程就是<code>资源的调度</code>。</li>\n<li>如果资源的任何一个先申请者总是能够比任何一个后申请者先获得该资源的独占权，那么相应的资源调度策略就被称为是<code>公平</code>的，如果资源的后申请者可能比先申请者先获得资源的独占权，那么相应的资源调度策略就被称为<code>非公平</code>的。</li>\n<li>在极端的情况下，非公平调度策略可能导致等待队列中的线程永远无法获得其所需的资源，即出现<code>饥饿</code>。</li>\n<li>一般来说，非公平调度策略的<strong>吞吐率高</strong>，即单位时间内它可以为更多的申请者调配资源。其缺点是，从申请者个体的角度来看这些申请者获得相应资源的独占权所需要的<strong>时间偏差</strong>可能比较大。</li>\n<li>非公平调度策略可能带来一个好处——减少上下文切换的次数。</li>\n<li>多数线程占用资源的时间相当长的情况下不适合使用<strong>非公平调度策略</strong>。</li>\n<li>非公平调度策略是我们多数情况下的<strong>首选</strong>调度策略。其优点是吞吐率较大；缺点是资源申请者申请资源所需的时间偏差可能较大，并可能导致饥饿。公平调度策略适合在资源的时间相对长或资源的平均申请时间间隔相对长的情况下，或者对资源申请所需的时间偏差有所要求的情况下使用。其优点是线程申请资源所需的时间偏差较小，并且不会导致线程饥饿现象；其缺点是吞吐率较小。</li>\n</ol>\n<h2 id=\"第三章-Java线程同步机制\"><a href=\"#第三章-Java线程同步机制\" class=\"headerlink\" title=\"第三章 Java线程同步机制\"></a>第三章 Java线程同步机制</h2><ol>\n<li><p><code>线程同步机制</code>是一套用于协调线程间的数据访问及活动的机制，该机制用用户保障线程安全以及实现这些线程的共同目标。</p>\n</li>\n<li><p>线程安全问题的产生前提是多个线程并发访问共享变量、共享资源。</p>\n</li>\n<li><p>锁的持有线程在其获得锁之后和释放锁之前这段时间内所执行的代码被称为<code>临界区</code>。</p>\n</li>\n<li><p>Java平台中的锁包括<code>内部锁</code>和<code>显示锁</code>。</p>\n</li>\n<li><p>锁是通过<code>互斥</code>保障原子性的。</p>\n</li>\n<li><p>一个锁实例锁保护的共享数据的数量大小就被称为锁的<code>粒度</code>。</p>\n</li>\n<li><p>锁的开销包括锁的申请和释放锁产生的开销，以及锁可能导致的上下文切换的开销，这些开销主要是处理器时间。</p>\n</li>\n<li><p><code>锁泄漏</code>是指一个线程获得某个锁之后，由于程序的错误缺陷致使该锁一直无法被释放而导致其他线程一直无法获得该锁的现象。</p>\n</li>\n<li><p>Java平台中的任何一个对象都有唯一的一个与之关联的锁。这种锁被称为<code>监视器</code>或者<code>内部锁</code>。内部锁是一种<code>排他锁</code>，它能保障原子性、可见性和有序性。</p>\n</li>\n<li><p>Java虚拟机会为每个内部锁分配一个<code>入口集</code>，用于记录等待获得相应内部锁的线程。多个线程申请同一个锁的时候，只有一个申请者能够成为该锁的持有线程，而其他申请者的申请操作会失败。</p>\n</li>\n<li><p>公平锁保障锁调度的公平性往往是以增加了线程的暂停和唤醒的可能性，即增加了上下文切换为代价的。因此公平锁适合于锁被持有的时间相对长或者线程申请锁的平均间隔时间相对长的情形。总得来说使用公平锁的开销比使用非公平锁的开销要大，因此显式锁默认使用的是非公平调度策略。</p>\n</li>\n<li><p><code>读写锁</code>是一种改进型的排它锁，也被称为共享/排它锁。读锁是<code>共享</code>的，写锁是<code>排他</code>的。</p>\n</li>\n<li><p>读写锁适合于在以下条件同时得以满足的场景中使用：</p>\n<ol>\n<li>只读操作比写操作要频繁得多。</li>\n<li>读线程持有锁的时间比较长。</li>\n</ol>\n</li>\n<li><p><code>ReetrantReadWriteLock</code>所实现的读写锁是<code>个可重入锁</code>。ReetrantReadWriteLock支持写锁的<code>降级</code>，即一个线程持有读写锁的写锁的情况下可以继续获得相应的读锁。</p>\n</li>\n<li><p><code>ReetrantReadWriteLock</code>并不支持锁的升级。读线程如果要转而申请写锁，需要先释放读锁，然后申请相应的写锁。</p>\n</li>\n<li><p><code>内存屏障</code>是对一类仅针对内存读、写操作指令的跨处理器架构的比较底层的抽象。内存屏障是被插入到两个指令之间进行使用的，其作用是<strong>禁止编译器、处理器重排序从而保障有序性</strong>。</p>\n</li>\n<li><p>按照可见性保障来划分，<code>内存屏障</code>可分为<code>加载屏障</code>和<code>存储屏障</code>。加载屏障的作用是<strong>刷新处理器缓存</strong>，存储屏障的作用是<strong>冲刷处理器缓存</strong>。Java虚拟机会在MonitorExit对应的机器码指令之后插入一个<code>存储屏障</code>，这就保障了写线程在释放锁之前在临界区中对共享变量所做的更新对读线程是可同步的。相应的，Java虚拟机会在MonitorEnter对应的机器码指令之后临界区开始之前的地方插入一个<code>加载屏障</code>，这使得读线程的执行处理器能够将写线程对相应共享变量所做的更新从其他处理器同步到该处理器的高速缓存中。</p>\n</li>\n<li><p>按照有序性保障来划分，<code>内存屏障</code>可以分为<code>获取屏障</code>和<code>释放屏障</code>。获取屏障的使用方式是在一个读操作之后插入该内存屏障，其作用是<strong>禁止该读操作与其后的任何读写操作之间进行重排序</strong>，这相当于在进行后续操作之前先要获得相应共享数据的所有权。释放屏障的使用方式是在一个写操作之前插入该内存屏障，其作用是<strong>禁止该写操作与其前面的任何读写操作之间进行重排序</strong>。Java虚拟机会在MonitorEnter对应的机器码指令之后临界区开始之前的地方插入一个获取屏障，并在临界区结束之后MonitorExit对应的机器码指令之前的地方插入一个释放屏障。</p>\n</li>\n<li><p>临界区之外的语句可以被重排序到临界区之内，而临界区内的操作无法被重排序到临界区之外。</p>\n<ol>\n<li><p>临界区内的操作不允许被重排序到临界区之外。</p>\n</li>\n<li><p>临界区内的操作之间允许被重排序。</p>\n</li>\n<li><p>临界区外的操作之间可以被重排序。</p>\n</li>\n<li><p>锁申请与锁释放操作不能被重排序。</p>\n</li>\n<li><p>两个锁申请操作不能被重排序。</p>\n</li>\n<li><p>两个锁释放操作不能被重排序。</p>\n</li>\n<li><p>临界区外的操作可以被重排到临界区之内。</p>\n</li>\n</ol>\n</li>\n<li><p><code>volatile</code>变量不会被编译器分配到寄存器进行存储，对volatile变量的读写操作都是内存访问操作。</p>\n</li>\n<li><p><code>volatile</code>关键字常被称为<code>轻量级锁</code>，其作用与锁的作用有相同的地方：保证可见性和有序性。原子性方面它仅能保证写volatile变量操作的原子性，但没有锁的排他性。其次，volatile关键字的使用不会引起上下文切换。</p>\n</li>\n<li><p>一个赋值操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">volatile</span> Map aMap = <span class=\"keyword\">new</span> HashMap();</span><br></pre></td></tr></table></figure>\n<p>可以分解为如下伪代码所示的几个子操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objRef = allocate(HashMap.class); <span class=\"comment\">// 子操作1：分配对象所需的存储空间</span></span><br><span class=\"line\">invokeConstructor(objRef); <span class=\"comment\">// 子操作2：初始化objRef引用的对象</span></span><br><span class=\"line\">aMap = objRef; <span class=\"comment\">// 子操作3：将对象引用写入变量aMap</span></span><br></pre></td></tr></table></figure>\n<p>虽然volatile关键字仅保障其中的子操作3是一个原子操作，但是由于子操作1与子操作2仅涉及局部变量而未涉及共享变量，因此对变量aMap的赋值操作仍然是一个原子操作。</p>\n</li>\n<li><p>对于volatile变量的写操作，Java虚拟机会在操作之前插入一个<code>释放屏障</code>，并在该操作之后插入一个<code>存储屏障</code>。</p>\n</li>\n<li><p>对于volatile变量的读操作，Java虚拟机会在操作之前插入一个<code>加载屏障</code>，并在该操作之后插入一个<code>获取屏障</code>。</p>\n</li>\n<li><p>写volatile变量操作与该操作之前的任何读、写操作<strong>不会被重排序</strong>。</p>\n</li>\n<li><p>读volatile变量操作与该操作之后的任何读、写操作<strong>不会被重排序</strong>。</p>\n</li>\n<li><p>volatile关键字在可见性方面仅仅是保证读线程能够读取到共享变量的相对新值。对于引用型变量和数组变量，volatile关键字并不能保证读线程能够读取到对象相应的字段、元素的相对新值。</p>\n</li>\n<li><p>volatile变量的读、写操作都不会导致上下文切换，因此volatile的开销比锁要小。</p>\n</li>\n<li><p>volatile使用的典型场景：</p>\n<ol>\n<li><p>使用volatile变量作为<code>状态标志</code>。</p>\n</li>\n<li><p>使用volatile保障<code>可见性</code>。</p>\n</li>\n<li><p>使用volatile变量代替锁。</p>\n</li>\n<li><p>使用volatile实现简易版的读写锁。</p>\n</li>\n</ol>\n</li>\n<li><p>volatile关键字并非锁的代替品，volatile关键字和锁各有其适用条件。前者更适合于多个线程共享一个状态变量，而后者更适合于多个线程共享一组状态变量。某些情形下，我们可以将多个线程共享的一组状态变量合并成一个对象，用一个volatile变量来引用该对象，从而使我们不必要使用锁。</p>\n</li>\n<li><p><code>原子变量类</code>是基于CAS实现的能够保障对共享变量进行<code>read-modify-write</code>更新操作的原子性和可见性的一组工具类。</p>\n</li>\n<li><p><code>对象发布</code>是指使对象能够被其作用域之外的线程访问。</p>\n</li>\n<li><p>常见的对象发布形式包括：</p>\n<ol>\n<li><p>将对象引用存储到public变量中。</p>\n</li>\n<li><p>在非private方法中返回一个对象。</p>\n</li>\n<li><p>创建内部类，使得当前对象能够被这个内部类使用。</p>\n</li>\n<li><p>通过方法调用将对象传递给外部方法。</p>\n</li>\n</ol>\n</li>\n<li><p><code>static</code>关键字在多线程环境下有其特殊的含义，它能够保证一个线程即使在未使用其他同步机制的情况下也总是可以读取到一个类的静态变量的初始值。</p>\n</li>\n<li><p>对于引用型静态变量，<code>static</code>关键字还能够保障一个线程读取到该变量的初始值时，这个值所指向的对象已经初始化完毕。</p>\n</li>\n<li><p><code>static</code> 关键字仅仅保障读线程能够读取到相应字段的初始值，而不是相对新值。</p>\n</li>\n<li><p>当一个对象被发布到其他线程的时候，该对象的所有<code>final</code>字段都是初始化完毕的。</p>\n</li>\n<li><p>对于引用型<code>final</code>字段，<code>final</code>关键字还进一步确保该字段所引用的对象已经初始化完毕，即这些线程读取该字段所引用的对象的各个字段时所读取到的值都是相应字段的初始值。</p>\n</li>\n<li><p>当一个对象的引用对其他线程可见的时候，这些线程所看到的该对象的final字段必然是初始化完毕的。final关键字的作用仅是这种有序性的保障，它并不能保障包含final字段的对象的引用自身对其他线程的可见性。</p>\n</li>\n<li><p><code>安全发布</code>就是指对象以一种线程安全的方式被发布。</p>\n</li>\n<li><p>当一个对象的发布出现我们不期望的结果或者对象发布本身不是我们所期望的时候，我们就称该对象<code>逸出</code>。</p>\n</li>\n<li><p>对象逸出包括：</p>\n<ol>\n<li><p>在构造函器中将this赋值给一个共享变量。</p>\n</li>\n<li><p>在构造器中将this作为方法参数传递给其他方法。</p>\n</li>\n<li><p>在构造器中启动基于匿名类的线程。</p>\n</li>\n</ol>\n</li>\n<li><p>一个对象在其初始化过程中没有出现this逸出，我们就称该对象为正确创建的对象。</p>\n</li>\n<li><p>实现对象的安全发布，通常可以依照以下顺序选择适用且开销最小的线程同步机制。</p>\n<ol>\n<li><p>使用staic关键字引用该对象的变量。</p>\n</li>\n<li><p>使用final关键字修饰引用该对象的变量。</p>\n</li>\n<li><p>使用volatile关键字修饰引用该对象的变量。</p>\n</li>\n<li><p>使用AtomicReference来引用该对象。</p>\n</li>\n<li><p>对访问该对象的代码进行加锁。</p>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"第四章-牛刀小试：玩转线程\"><a href=\"#第四章-牛刀小试：玩转线程\" class=\"headerlink\" title=\"第四章 牛刀小试：玩转线程\"></a>第四章 牛刀小试：玩转线程</h2><ol>\n<li><p>多线程编程中分而治之的使用主要有两种方式：<strong>基于数据的分割</strong>和<strong>基于任务的分割</strong>。</p>\n</li>\n<li><p>基于数据的分割的结果是产生多个<code>同质工作者线程</code>，即任务处理逻辑相同的线程。需要考虑如下因素：</p>\n<ol>\n<li><p>工作者线程数量的合理设置问题。</p>\n</li>\n<li><p>工作者线程的异常处理问题。</p>\n</li>\n<li><p>原始输入规模未知问题。</p>\n</li>\n<li><p>程序的复杂性增加的问题。</p>\n</li>\n</ol>\n</li>\n<li><p>为了提高任务的执行效率，我们可能使用多个线程去共同完成一个任务的执行。这就是基于任务的分割，其基本思想就是将任务按照一定的规则分解成若干子任务，并使用专门的工作者线程去执行这些子任务，从而实现任务的并发执行。</p>\n</li>\n<li><p>线程所执行的任务按照 其消耗的主要资源可划分为<code>CPU密集型</code>任务和<code>IO密集型</code>任务。</p>\n</li>\n<li><p>CPU密集型任务执行过程中消耗的主要资源是CPU时间，CPU密集型任务的一个典型例子是加密和解密；IO密集型任务执行过程中消耗的主要资源是IO资源，典型的IO密集型任务就包括文件读写、网络读写等。</p>\n</li>\n<li><p>基于任务的分割结果是产生多个相互协作的<code>异质工作者线程</code>。</p>\n</li>\n<li><p><code>Amdahl’s 定律</code>描述了线程数与多线程程序相对于单线程程序的提速之间的关系。<br>$$<br>S_{max} = \\frac{1}{P + \\frac{1 - P}{N}}<br>$$<br>其中，N为处理器数量，程序中必须串行化的部分耗时占程序全部耗时的比率为P。</p>\n</li>\n<li><p>为使多线程程序能够获得较大的提速，我们<strong>应该从算法入手，减少程序中必须串行的部分，而不是寄希望于增加线程数</strong>。</p>\n</li>\n<li><p>线程数设置得过少可能导致无法充分利用处理器资源；而线程数设置得过大则又可能导致过多的上下文切换，从而反倒降低了系统的性能。</p>\n</li>\n<li><p>线程数的合理值可以根据以下规则设置：</p>\n<ol>\n<li><p>对于CPU密集型线程，考虑到这类线程执行任务时消耗的主要是处理器资源，我们可以将这类线程的线程数设置为$N_{cpu} $个。因为CPU密集型线程也可能由于某些原因（比如缺页中断）而被切出，此时为了避免处理器资源的浪费，我们也可以为这类线程设置一个额外的线程，即将线程数设置为$N_{cpu}  + 1$</p>\n</li>\n<li><p>对于IO密集型线程，考虑到IO操作可能导致上下文切换，为这样的线程设置过多的线程会导致过多的额外系统开销。因此如果一个这样的工作者线程就可以满足我们的要求，那么就不要设置更多的线程数。如果一个工作者线程仍然不够用，那么我们可以考虑将这类线程的数量设置为$2 * N_{cpu} $</p>\n</li>\n</ol>\n</li>\n<li><p><strong>挖掘出程序中可并发点</strong>是实现多线程编程的目标——并发计算的前提。</p>\n</li>\n<li><p>实现并发化的策略包括基于数据的分割策略和基于任务的分割策略。</p>\n</li>\n</ol>\n<h2 id=\"第五章-线程间协作\"><a href=\"#第五章-线程间协作\" class=\"headerlink\" title=\"第五章 线程间协作\"></a>第五章 线程间协作</h2><ol>\n<li><p>一个线程因其执行目标动作所需的保护条件未满足而被暂停的过程被称为<code>等待</code>。</p>\n</li>\n<li><p>一个线程更新了系统的状态，使得其他线程所需的保护条件得以满足的时候唤醒那些被暂停的线程的过程就被称为<code>通知</code>。</p>\n</li>\n<li><p>由于一个线程只有在持有一个对象的内部所的情况下才能够调用该对象的wait方法，因此Object.wait()调用总是放在相应对象所引导的临界区之中。</p>\n</li>\n<li><p>等待线程对保护条件的判断、Object.wait()的执行以及目标动作的执行必须放在同一个对象所引导的临界区之中。</p>\n</li>\n<li><p><code>Object.wait()</code>暂停当前线程时释放的锁只是与该wait方法所属对象的内部锁。当前线程所持有的其他内部锁、显示锁并不会因此而被释放。</p>\n</li>\n<li><p><code>Object.notify()</code>的执行线程持有的相应对象的内部锁只有在Object.notify()调用所在的临界区代码执行结束后才会被释放，而Object.notify()本身并不会将这个内部锁释放。因此，为了 使等待线程在其被唤醒之后能够尽快再次获得相应的内部锁，我们要尽可能地将Object.notify()调用放在靠近临界区结束的地方。</p>\n</li>\n<li><p><code>等待线程</code>和<code>通知线程</code>是同步在同一对象之上的两种线程。</p>\n</li>\n<li><p>Java虚拟机会为每个对象维护一个<code>入口集</code>用于存储申请该对象内部锁的线程。Java虚拟机还会为每个对象维护一个被称为<code>等待集</code>的队列，该队列用于存储该对象上的等待线程。Object.wait()将当前线程暂停并释放相应的内部锁的同时会将当前线程存入该方法所属对象的等待集中。</p>\n</li>\n<li><p>wait/notify的开销及问题</p>\n<ol>\n<li><p>过早唤醒问题</p>\n</li>\n<li><p>信号丢失问题</p>\n</li>\n<li><p>欺骗性唤醒问题</p>\n</li>\n<li><p>上下文切换问题</p>\n</li>\n</ol>\n</li>\n<li><p>只有在有证据表明使用<code>Object.notify()</code>足够的情况下才使用<code>Object.notify()</code>，只有在下列条件全部满足的情况下才能够用于替代<code>notifyAll</code>方法：</p>\n<ol>\n<li><p>一次通知仅需要唤醒至多一个线程。</p>\n</li>\n<li><p>相应对象的等待集中仅包含同质等待线程。</p>\n</li>\n</ol>\n</li>\n<li><p><code>join(long)</code>允许我们指定一个超时时间。如果目标线程没有在指定的时间内终止，那么当前线程也会继续运行。<code>join(long)</code>实际上就是使用了<code>wait/notify</code>来实现的。</p>\n</li>\n<li><p>Java虚拟机会在目标线程的run方法运行结束后执行该线程的<code>notifyAll</code>方法来通知所有的等待线程。</p>\n</li>\n<li><p><code>Condition</code>接口可作为<code>wait/notify</code>的替代品来实现等待/通知，它为解决过早唤醒问题提供了支持，并解决了<code>Object.wait(long)</code>不能区分其返回是否是由等待超时而导致的问题。</p>\n</li>\n<li><p><code>Condition.await()/signal()</code>也要求其执行线程持有创建该Condition实例的显示锁。Condition实例也被称为条件变量或者条件队列。每个Condition实例内部都维护了一个用于存储等待线程的队列。</p>\n</li>\n<li><p><code>Condition</code>接口本身只是对解决过早唤醒问题提供了支持。要真正解决过早唤醒问题，我们需要通过应用代码维护保护条件与条件变量的await方法来实现其等待，并使通知线程在更新了相关共享变量之后，仅调用与这些共享变量有关的保护条件所对应的条件变量的<code>signal/signalAll</code>方法来实现通知。</p>\n</li>\n<li><p><code>Condition.awaitUntil(Date deadline)</code>可以用于实现带超时时间限制的等待，并且该方法的返回值能够区分该方法调用是由于等待超时而返回还是由于其他线程执行了相应条件变量的<code>signal/signalAll</code>方法而返回。</p>\n</li>\n<li><p>等待线程因执行<code>Condition.await()/awaitUntil(Date)</code>而被暂停的同时，其持有的相应显示锁也会被释放，等待线程被唤醒之后得以继续运行时需要再次申请相应的显示锁，然后等待线程对<code>Condition.await()/awaitUntil(Date)</code>的调用才能返回。</p>\n</li>\n<li><p><code>CountDownLatch</code>可以用来实现一个线程等待其他线程完成一组特定的操作之后才继续运行。这组操作被称为<code>先决操作</code>。</p>\n</li>\n<li><p><code>CountDownLatch</code>内部计数器值达到0后其值就恒定不变，后续执行该CountDownLatch实例的await方法的任何一个线程都不会被暂停。为了避免等待线程永远被暂停，<code>CountDownLatch.countDown()</code>调用必须放在代码中总是可以被执行到的地方，例如<code>finally</code>块中。</p>\n</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjq562rk800009c9k8fbu2rw8","category_id":"cjq562rkf00039c9k53r8kjtd","_id":"cjq562rkh00049c9kl2z500mc"},{"post_id":"cjq562rls00059c9kqyg3hxvx","category_id":"cjq562rly00079c9k88xd8uyi","_id":"cjq562rm4000e9c9kryt1gapv"},{"post_id":"cjq562rlx00069c9kx5aicy3x","category_id":"cjq562rly00079c9k88xd8uyi","_id":"cjq562rm6000h9c9kfnfgqpbu"},{"post_id":"cjq562rlz00099c9k9df6rh3z","category_id":"cjq562rly00079c9k88xd8uyi","_id":"cjq562rm6000j9c9kbabsvabd"}],"PostTag":[{"post_id":"cjq562rls00059c9kqyg3hxvx","tag_id":"cjq562rly00089c9kkbdh2bgj","_id":"cjq562rm3000c9c9kcns12cgl"},{"post_id":"cjq562rlz00099c9k9df6rh3z","tag_id":"cjq562rly00089c9kkbdh2bgj","_id":"cjq562rm8000l9c9kuwe122pz"},{"post_id":"cjq562rlz00099c9k9df6rh3z","tag_id":"cjq562rm6000i9c9kpiyfh2r3","_id":"cjq562rm8000m9c9kvol834q1"},{"post_id":"cjq562rlz00099c9k9df6rh3z","tag_id":"cjq562rm7000k9c9kwnjoyvmr","_id":"cjq562rm8000n9c9kzrqn86il"},{"post_id":"cjq562rlx00069c9kx5aicy3x","tag_id":"cjq565ruj000q9c9kllstryd9","_id":"cjq565rul000r9c9kawv9vuiw"}],"Tag":[{"name":"摘要","_id":"cjq562rly00089c9kkbdh2bgj"},{"name":"读书","_id":"cjq562rm1000b9c9kyem8zuuc"},{"name":"Java","_id":"cjq562rm6000i9c9kpiyfh2r3"},{"name":"多线程","_id":"cjq562rm7000k9c9kwnjoyvmr"},{"name":"读后感","_id":"cjq564avl000o9c9k1l0723po"},{"name":"读书笔记","_id":"cjq565ruj000q9c9kllstryd9"}]}}